
Discovery_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e574  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006180  0800e744  0800e744  0001e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148c4  080148c4  00030054  2**0
                  CONTENTS
  4 .ARM          00000000  080148c4  080148c4  00030054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080148c4  080148c4  00030054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148c4  080148c4  000248c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080148c8  080148c8  000248c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080148cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000158c  20000054  08014920  00030054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  08014920  000315e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00070973  00000000  00000000  0003007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bd6e  00000000  00000000  000a09f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00031a24  00000000  00000000  000ac75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002480  00000000  00000000  000de188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003340  00000000  00000000  000e0608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a671  00000000  00000000  000e3948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005646a  00000000  00000000  000fdfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005bb05  00000000  00000000  00154423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001aff28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069b0  00000000  00000000  001aff78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000054 	.word	0x20000054
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e72c 	.word	0x0800e72c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000058 	.word	0x20000058
 800020c:	0800e72c 	.word	0x0800e72c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color16_t * color_p)
{
 8000234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000238:	4680      	mov	r8, r0
 800023a:	460f      	mov	r7, r1
 800023c:	4615      	mov	r5, r2
//	ILI9341_SetWindow(area->x1, area->y1, area->x2, area->y2);

	//  int height = area->y2 - area->y1 + 1;
	 // int width = area->x2 - area->x1 + 1;
	  uint16_t x,y;
	  for(y = area->y1; y <= area->y2; y++)
 800023e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8000242:	b2b6      	uxth	r6, r6
 8000244:	e00d      	b.n	8000262 <disp_flush+0x2e>
	  {
	    for(x = area->x1; x <= area->x2; x++)
	    {
		  ILI9341_DrawPixel(x,y,(uint16_t *)color_p->full);   //color_p->full
 8000246:	f835 2b02 	ldrh.w	r2, [r5], #2
 800024a:	4631      	mov	r1, r6
 800024c:	4620      	mov	r0, r4
 800024e:	f000 fa1d 	bl	800068c <ILI9341_DrawPixel>
	    for(x = area->x1; x <= area->x2; x++)
 8000252:	3401      	adds	r4, #1
 8000254:	b2a4      	uxth	r4, r4
 8000256:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800025a:	429c      	cmp	r4, r3
 800025c:	ddf3      	ble.n	8000246 <disp_flush+0x12>
	  for(y = area->y1; y <= area->y2; y++)
 800025e:	3601      	adds	r6, #1
 8000260:	b2b6      	uxth	r6, r6
 8000262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000266:	429e      	cmp	r6, r3
 8000268:	dc03      	bgt.n	8000272 <disp_flush+0x3e>
	    for(x = area->x1; x <= area->x2; x++)
 800026a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800026e:	b2a4      	uxth	r4, r4
 8000270:	e7f1      	b.n	8000256 <disp_flush+0x22>
	    }
	  }
    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
	  //int a = lv_color_t ;
    lv_disp_flush_ready(disp_drv);
 8000272:	4640      	mov	r0, r8
 8000274:	f00a fdf9 	bl	800ae6a <lv_disp_flush_ready>
}
 8000278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800027c <disp_init>:
{
 800027c:	b508      	push	{r3, lr}
	ILI9341_Init();
 800027e:	f000 f909 	bl	8000494 <ILI9341_Init>
}
 8000282:	bd08      	pop	{r3, pc}

08000284 <lv_port_disp_init>:
{
 8000284:	b538      	push	{r3, r4, r5, lr}
    disp_init();
 8000286:	f7ff fff9 	bl	800027c <disp_init>
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES*10);   /*Initialize the display buffer*/
 800028a:	4c11      	ldr	r4, [pc, #68]	; (80002d0 <lv_port_disp_init+0x4c>)
 800028c:	f504 6520 	add.w	r5, r4, #2560	; 0xa00
 8000290:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000294:	2200      	movs	r2, #0
 8000296:	4621      	mov	r1, r4
 8000298:	4628      	mov	r0, r5
 800029a:	f00a fd0d 	bl	800acb8 <lv_disp_draw_buf_init>
    disp_drv.hor_res = MY_DISP_HOR_RES;
 800029e:	2380      	movs	r3, #128	; 0x80
 80002a0:	f8a4 3a1c 	strh.w	r3, [r4, #2588]	; 0xa1c
    disp_drv.ver_res = MY_DISP_VER_RES;
 80002a4:	23a0      	movs	r3, #160	; 0xa0
 80002a6:	f8a4 3a1e 	strh.w	r3, [r4, #2590]	; 0xa1e
    disp_drv.flush_cb = disp_flush;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <lv_port_disp_init+0x50>)
 80002ac:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
    disp_drv.draw_buf = &draw_buf_dsc_1;
 80002b0:	f8c4 5a28 	str.w	r5, [r4, #2600]	; 0xa28
    lv_disp_drv_register(&disp_drv);
 80002b4:	f604 201c 	addw	r0, r4, #2588	; 0xa1c
 80002b8:	f00a fd0c 	bl	800acd4 <lv_disp_drv_register>
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 80002bc:	f00a fd90 	bl	800ade0 <lv_disp_get_default>
 80002c0:	f001 fbca 	bl	8001a58 <lv_disp_get_scr_act>
    lv_obj_set_style_bg_color(lv_scr_act(), lv_color_hex(0x1f272a), LV_PART_MAIN);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f641 1125 	movw	r1, #6437	; 0x1925
 80002ca:	f006 fc26 	bl	8006b1a <lv_obj_set_style_bg_color>
}
 80002ce:	bd38      	pop	{r3, r4, r5, pc}
 80002d0:	20000070 	.word	0x20000070
 80002d4:	08000235 	.word	0x08000235

080002d8 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f1xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80002d8:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2110      	movs	r1, #16
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <ILI9341_Select+0x10>)
 80002e0:	f000 fed1 	bl	8001086 <HAL_GPIO_WritePin>
}
 80002e4:	bd08      	pop	{r3, pc}
 80002e6:	bf00      	nop
 80002e8:	40010800 	.word	0x40010800

080002ec <ILI9341_WriteData>:
static void ILI9341_WriteCommand(uint8_t cmd) {
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
}

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	4606      	mov	r6, r0
 80002f0:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <ILI9341_WriteData+0x3c>)
 80002fa:	f000 fec4 	bl	8001086 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80002fe:	e00f      	b.n	8000320 <ILI9341_WriteData+0x34>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000300:	462c      	mov	r4, r5
 8000302:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8000306:	bf28      	it	cs
 8000308:	f44f 4400 	movcs.w	r4, #32768	; 0x8000
 800030c:	b2a4      	uxth	r4, r4
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
 8000312:	4622      	mov	r2, r4
 8000314:	4631      	mov	r1, r6
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <ILI9341_WriteData+0x40>)
 8000318:	f001 fa3a 	bl	8001790 <HAL_SPI_Transmit>
        buff += chunk_size;
 800031c:	4426      	add	r6, r4
        buff_size -= chunk_size;
 800031e:	1b2d      	subs	r5, r5, r4
    while(buff_size > 0) {
 8000320:	2d00      	cmp	r5, #0
 8000322:	d1ed      	bne.n	8000300 <ILI9341_WriteData+0x14>
    }
}
 8000324:	bd70      	pop	{r4, r5, r6, pc}
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00
 800032c:	20000adc 	.word	0x20000adc

08000330 <ILI9341_WriteCommand>:
static void ILI9341_WriteCommand(uint8_t cmd) {
 8000330:	b500      	push	{lr}
 8000332:	b083      	sub	sp, #12
 8000334:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <ILI9341_WriteCommand+0x2c>)
 8000340:	f000 fea1 	bl	8001086 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000344:	f04f 33ff 	mov.w	r3, #4294967295
 8000348:	2201      	movs	r2, #1
 800034a:	f10d 0107 	add.w	r1, sp, #7
 800034e:	4804      	ldr	r0, [pc, #16]	; (8000360 <ILI9341_WriteCommand+0x30>)
 8000350:	f001 fa1e 	bl	8001790 <HAL_SPI_Transmit>
}
 8000354:	b003      	add	sp, #12
 8000356:	f85d fb04 	ldr.w	pc, [sp], #4
 800035a:	bf00      	nop
 800035c:	40010c00 	.word	0x40010c00
 8000360:	20000adc 	.word	0x20000adc

08000364 <ILI9341_Reset>:
static void ILI9341_Reset() {
 8000364:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000366:	4c08      	ldr	r4, [pc, #32]	; (8000388 <ILI9341_Reset+0x24>)
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036e:	4620      	mov	r0, r4
 8000370:	f000 fe89 	bl	8001086 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000374:	2005      	movs	r0, #5
 8000376:	f000 fca1 	bl	8000cbc <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000380:	4620      	mov	r0, r4
 8000382:	f000 fe80 	bl	8001086 <HAL_GPIO_WritePin>
}
 8000386:	bd10      	pop	{r4, pc}
 8000388:	40010c00 	.word	0x40010c00

0800038c <ILI9341_Unselect>:
void ILI9341_Unselect() {
 800038c:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	2110      	movs	r1, #16
 8000392:	4802      	ldr	r0, [pc, #8]	; (800039c <ILI9341_Unselect+0x10>)
 8000394:	f000 fe77 	bl	8001086 <HAL_GPIO_WritePin>
}
 8000398:	bd08      	pop	{r3, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800

080003a0 <ILI9341_SetAddressWindow>:

void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80003a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003a2:	b083      	sub	sp, #12
 80003a4:	4607      	mov	r7, r0
 80003a6:	460d      	mov	r5, r1
 80003a8:	4616      	mov	r6, r2
 80003aa:	461c      	mov	r4, r3
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80003ac:	202a      	movs	r0, #42	; 0x2a
 80003ae:	f7ff ffbf 	bl	8000330 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80003b2:	0a3b      	lsrs	r3, r7, #8
 80003b4:	f88d 3004 	strb.w	r3, [sp, #4]
 80003b8:	f88d 7005 	strb.w	r7, [sp, #5]
 80003bc:	0a33      	lsrs	r3, r6, #8
 80003be:	f88d 3006 	strb.w	r3, [sp, #6]
 80003c2:	f88d 6007 	strb.w	r6, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 80003c6:	2104      	movs	r1, #4
 80003c8:	eb0d 0001 	add.w	r0, sp, r1
 80003cc:	f7ff ff8e 	bl	80002ec <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80003d0:	202b      	movs	r0, #43	; 0x2b
 80003d2:	f7ff ffad 	bl	8000330 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80003d6:	0a2b      	lsrs	r3, r5, #8
 80003d8:	f88d 3004 	strb.w	r3, [sp, #4]
 80003dc:	f88d 5005 	strb.w	r5, [sp, #5]
 80003e0:	0a23      	lsrs	r3, r4, #8
 80003e2:	f88d 3006 	strb.w	r3, [sp, #6]
 80003e6:	f88d 4007 	strb.w	r4, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 80003ea:	2104      	movs	r1, #4
 80003ec:	eb0d 0001 	add.w	r0, sp, r1
 80003f0:	f7ff ff7c 	bl	80002ec <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80003f4:	202c      	movs	r0, #44	; 0x2c
 80003f6:	f7ff ff9b 	bl	8000330 <ILI9341_WriteCommand>
}
 80003fa:	b003      	add	sp, #12
 80003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003fe <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80003fe:	b082      	sub	sp, #8
 8000400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000404:	b083      	sub	sp, #12
 8000406:	4693      	mov	fp, r2
 8000408:	930d      	str	r3, [sp, #52]	; 0x34
 800040a:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 800040e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000412:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8000416:	182a      	adds	r2, r5, r0
 8000418:	b292      	uxth	r2, r2
 800041a:	f89d a035 	ldrb.w	sl, [sp, #53]	; 0x35
 800041e:	eb0a 0301 	add.w	r3, sl, r1
 8000422:	b29b      	uxth	r3, r3
 8000424:	3b01      	subs	r3, #1
 8000426:	3a01      	subs	r2, #1
 8000428:	b29b      	uxth	r3, r3
 800042a:	b292      	uxth	r2, r2
 800042c:	f7ff ffb8 	bl	80003a0 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000430:	f04f 0900 	mov.w	r9, #0
 8000434:	e01d      	b.n	8000472 <ILI9341_WriteChar+0x74>
        for(j = 0; j < font.width; j++) {
            if((b << j) & 0x8000)  {
                uint8_t data[] = { color >> 8, color & 0xFF };
                ILI9341_WriteData(data, sizeof(data));
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000436:	0a3b      	lsrs	r3, r7, #8
 8000438:	f88d 3004 	strb.w	r3, [sp, #4]
 800043c:	f88d 7005 	strb.w	r7, [sp, #5]
                ILI9341_WriteData(data, sizeof(data));
 8000440:	2102      	movs	r1, #2
 8000442:	a801      	add	r0, sp, #4
 8000444:	f7ff ff52 	bl	80002ec <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000448:	3401      	adds	r4, #1
 800044a:	42a5      	cmp	r5, r4
 800044c:	d90f      	bls.n	800046e <ILI9341_WriteChar+0x70>
            if((b << j) & 0x8000)  {
 800044e:	fa06 f304 	lsl.w	r3, r6, r4
 8000452:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000456:	d0ee      	beq.n	8000436 <ILI9341_WriteChar+0x38>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000458:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800045c:	f88d 3004 	strb.w	r3, [sp, #4]
 8000460:	f88d 8005 	strb.w	r8, [sp, #5]
                ILI9341_WriteData(data, sizeof(data));
 8000464:	2102      	movs	r1, #2
 8000466:	a801      	add	r0, sp, #4
 8000468:	f7ff ff40 	bl	80002ec <ILI9341_WriteData>
 800046c:	e7ec      	b.n	8000448 <ILI9341_WriteChar+0x4a>
    for(i = 0; i < font.height; i++) {
 800046e:	f109 0901 	add.w	r9, r9, #1
 8000472:	45ca      	cmp	sl, r9
 8000474:	d908      	bls.n	8000488 <ILI9341_WriteChar+0x8a>
        b = font.data[(ch - 32) * font.height + i];
 8000476:	f1ab 0320 	sub.w	r3, fp, #32
 800047a:	fb0a 9303 	mla	r3, sl, r3, r9
 800047e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000480:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
        for(j = 0; j < font.width; j++) {
 8000484:	2400      	movs	r4, #0
 8000486:	e7e0      	b.n	800044a <ILI9341_WriteChar+0x4c>
            }
        }
    }
}
 8000488:	b003      	add	sp, #12
 800048a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800048e:	b002      	add	sp, #8
 8000490:	4770      	bx	lr
	...

08000494 <ILI9341_Init>:
void ILI9341_Init() {
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	b085      	sub	sp, #20
    ILI9341_Select();
 8000498:	f7ff ff1e 	bl	80002d8 <ILI9341_Select>
    ILI9341_Reset();
 800049c:	f7ff ff62 	bl	8000364 <ILI9341_Reset>
    ILI9341_WriteCommand(0x01);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff ff45 	bl	8000330 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80004a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004aa:	f000 fc07 	bl	8000cbc <HAL_Delay>
    ILI9341_WriteCommand(0xCB);
 80004ae:	20cb      	movs	r0, #203	; 0xcb
 80004b0:	f7ff ff3e 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80004b4:	4c71      	ldr	r4, [pc, #452]	; (800067c <ILI9341_Init+0x1e8>)
 80004b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80004ba:	9000      	str	r0, [sp, #0]
 80004bc:	f88d 1004 	strb.w	r1, [sp, #4]
        ILI9341_WriteData(data, sizeof(data));
 80004c0:	2105      	movs	r1, #5
 80004c2:	4668      	mov	r0, sp
 80004c4:	f7ff ff12 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xCF);
 80004c8:	20cf      	movs	r0, #207	; 0xcf
 80004ca:	f7ff ff31 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80004ce:	68a3      	ldr	r3, [r4, #8]
 80004d0:	f8ad 3000 	strh.w	r3, [sp]
 80004d4:	0c1b      	lsrs	r3, r3, #16
 80004d6:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 80004da:	2103      	movs	r1, #3
 80004dc:	4668      	mov	r0, sp
 80004de:	f7ff ff05 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xE8);
 80004e2:	20e8      	movs	r0, #232	; 0xe8
 80004e4:	f7ff ff24 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80004e8:	68e3      	ldr	r3, [r4, #12]
 80004ea:	f8ad 3000 	strh.w	r3, [sp]
 80004ee:	0c1b      	lsrs	r3, r3, #16
 80004f0:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 80004f4:	2103      	movs	r1, #3
 80004f6:	4668      	mov	r0, sp
 80004f8:	f7ff fef8 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xEA);
 80004fc:	20ea      	movs	r0, #234	; 0xea
 80004fe:	f7ff ff17 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0x00 };
 8000502:	2500      	movs	r5, #0
 8000504:	f8ad 5000 	strh.w	r5, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8000508:	2102      	movs	r1, #2
 800050a:	4668      	mov	r0, sp
 800050c:	f7ff feee 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xED);
 8000510:	20ed      	movs	r0, #237	; 0xed
 8000512:	f7ff ff0d 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000516:	4b5a      	ldr	r3, [pc, #360]	; (8000680 <ILI9341_Init+0x1ec>)
 8000518:	9300      	str	r3, [sp, #0]
        ILI9341_WriteData(data, sizeof(data));
 800051a:	2104      	movs	r1, #4
 800051c:	4668      	mov	r0, sp
 800051e:	f7ff fee5 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xF7);
 8000522:	20f7      	movs	r0, #247	; 0xf7
 8000524:	f7ff ff04 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x20 };
 8000528:	2320      	movs	r3, #32
 800052a:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 800052e:	2101      	movs	r1, #1
 8000530:	4668      	mov	r0, sp
 8000532:	f7ff fedb 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xC0);
 8000536:	20c0      	movs	r0, #192	; 0xc0
 8000538:	f7ff fefa 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x23 };
 800053c:	2323      	movs	r3, #35	; 0x23
 800053e:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8000542:	2101      	movs	r1, #1
 8000544:	4668      	mov	r0, sp
 8000546:	f7ff fed1 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xC1);
 800054a:	20c1      	movs	r0, #193	; 0xc1
 800054c:	f7ff fef0 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x10 };
 8000550:	2310      	movs	r3, #16
 8000552:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8000556:	2101      	movs	r1, #1
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff fec7 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xC5);
 800055e:	20c5      	movs	r0, #197	; 0xc5
 8000560:	f7ff fee6 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x3E, 0x28 };
 8000564:	f642 033e 	movw	r3, #10302	; 0x283e
 8000568:	f8ad 3000 	strh.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 800056c:	2102      	movs	r1, #2
 800056e:	4668      	mov	r0, sp
 8000570:	f7ff febc 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xC7);
 8000574:	20c7      	movs	r0, #199	; 0xc7
 8000576:	f7ff fedb 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x86 };
 800057a:	2386      	movs	r3, #134	; 0x86
 800057c:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8000580:	2101      	movs	r1, #1
 8000582:	4668      	mov	r0, sp
 8000584:	f7ff feb2 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0x36);
 8000588:	2036      	movs	r0, #54	; 0x36
 800058a:	f7ff fed1 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x48 };
 800058e:	2348      	movs	r3, #72	; 0x48
 8000590:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8000594:	2101      	movs	r1, #1
 8000596:	4668      	mov	r0, sp
 8000598:	f7ff fea8 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0x3A);
 800059c:	203a      	movs	r0, #58	; 0x3a
 800059e:	f7ff fec7 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x55 };
 80005a2:	2355      	movs	r3, #85	; 0x55
 80005a4:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80005a8:	2101      	movs	r1, #1
 80005aa:	4668      	mov	r0, sp
 80005ac:	f7ff fe9e 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xB1);
 80005b0:	20b1      	movs	r0, #177	; 0xb1
 80005b2:	f7ff febd 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0x18 };
 80005b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005ba:	f8ad 3000 	strh.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80005be:	2102      	movs	r1, #2
 80005c0:	4668      	mov	r0, sp
 80005c2:	f7ff fe93 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xB6);
 80005c6:	20b6      	movs	r0, #182	; 0xb6
 80005c8:	f7ff feb2 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <ILI9341_Init+0x1f0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f8ad 3000 	strh.w	r3, [sp]
 80005d4:	0c1b      	lsrs	r3, r3, #16
 80005d6:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 80005da:	2103      	movs	r1, #3
 80005dc:	4668      	mov	r0, sp
 80005de:	f7ff fe85 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xF2);
 80005e2:	20f2      	movs	r0, #242	; 0xf2
 80005e4:	f7ff fea4 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00 };
 80005e8:	f88d 5000 	strb.w	r5, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80005ec:	2101      	movs	r1, #1
 80005ee:	4668      	mov	r0, sp
 80005f0:	f7ff fe7c 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0x26);
 80005f4:	2026      	movs	r0, #38	; 0x26
 80005f6:	f7ff fe9b 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x01 };
 80005fa:	2501      	movs	r5, #1
 80005fc:	f88d 5000 	strb.w	r5, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8000600:	4629      	mov	r1, r5
 8000602:	4668      	mov	r0, sp
 8000604:	f7ff fe72 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xE0);
 8000608:	20e0      	movs	r0, #224	; 0xe0
 800060a:	f7ff fe91 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <ILI9341_Init+0x1f4>)
 8000610:	46ec      	mov	ip, sp
 8000612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000614:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000618:	f82c 3b02 	strh.w	r3, [ip], #2
 800061c:	0c1b      	lsrs	r3, r3, #16
 800061e:	f88c 3000 	strb.w	r3, [ip]
        ILI9341_WriteData(data, sizeof(data));
 8000622:	210f      	movs	r1, #15
 8000624:	4668      	mov	r0, sp
 8000626:	f7ff fe61 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0xE1);
 800062a:	20e1      	movs	r0, #225	; 0xe1
 800062c:	f7ff fe80 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000630:	46ec      	mov	ip, sp
 8000632:	3410      	adds	r4, #16
 8000634:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000638:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800063c:	f82c 3b02 	strh.w	r3, [ip], #2
 8000640:	0c1b      	lsrs	r3, r3, #16
 8000642:	f88c 3000 	strb.w	r3, [ip]
        ILI9341_WriteData(data, sizeof(data));
 8000646:	210f      	movs	r1, #15
 8000648:	4668      	mov	r0, sp
 800064a:	f7ff fe4f 	bl	80002ec <ILI9341_WriteData>
    ILI9341_WriteCommand(0x11);
 800064e:	2011      	movs	r0, #17
 8000650:	f7ff fe6e 	bl	8000330 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000654:	2078      	movs	r0, #120	; 0x78
 8000656:	f000 fb31 	bl	8000cbc <HAL_Delay>
    ILI9341_WriteCommand(0x29);
 800065a:	2029      	movs	r0, #41	; 0x29
 800065c:	f7ff fe68 	bl	8000330 <ILI9341_WriteCommand>
    ILI9341_WriteCommand(0x36);
 8000660:	2036      	movs	r0, #54	; 0x36
 8000662:	f7ff fe65 	bl	8000330 <ILI9341_WriteCommand>
        uint8_t data[] = { ILI9341_ROTATION };
 8000666:	2308      	movs	r3, #8
 8000668:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 800066c:	4629      	mov	r1, r5
 800066e:	4668      	mov	r0, sp
 8000670:	f7ff fe3c 	bl	80002ec <ILI9341_WriteData>
    ILI9341_Unselect();
 8000674:	f7ff fe8a 	bl	800038c <ILI9341_Unselect>
}
 8000678:	b005      	add	sp, #20
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	08010f58 	.word	0x08010f58
 8000680:	81120364 	.word	0x81120364
 8000684:	080147d0 	.word	0x080147d0
 8000688:	080147d4 	.word	0x080147d4

0800068c <ILI9341_DrawPixel>:
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800068c:	287f      	cmp	r0, #127	; 0x7f
 800068e:	d81e      	bhi.n	80006ce <ILI9341_DrawPixel+0x42>
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	4604      	mov	r4, r0
 8000696:	460d      	mov	r5, r1
 8000698:	4616      	mov	r6, r2
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800069a:	299f      	cmp	r1, #159	; 0x9f
 800069c:	d901      	bls.n	80006a2 <ILI9341_DrawPixel+0x16>
}
 800069e:	b002      	add	sp, #8
 80006a0:	bd70      	pop	{r4, r5, r6, pc}
    ILI9341_Select();
 80006a2:	f7ff fe19 	bl	80002d8 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80006a6:	1c6b      	adds	r3, r5, #1
 80006a8:	1c62      	adds	r2, r4, #1
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	b292      	uxth	r2, r2
 80006ae:	4629      	mov	r1, r5
 80006b0:	4620      	mov	r0, r4
 80006b2:	f7ff fe75 	bl	80003a0 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80006b6:	0a33      	lsrs	r3, r6, #8
 80006b8:	f88d 3004 	strb.w	r3, [sp, #4]
 80006bc:	f88d 6005 	strb.w	r6, [sp, #5]
    ILI9341_WriteData(data, sizeof(data));
 80006c0:	2102      	movs	r1, #2
 80006c2:	a801      	add	r0, sp, #4
 80006c4:	f7ff fe12 	bl	80002ec <ILI9341_WriteData>
    ILI9341_Unselect();
 80006c8:	f7ff fe60 	bl	800038c <ILI9341_Unselect>
 80006cc:	e7e7      	b.n	800069e <ILI9341_DrawPixel+0x12>
 80006ce:	4770      	bx	lr

080006d0 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80006d0:	b082      	sub	sp, #8
 80006d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006d6:	b085      	sub	sp, #20
 80006d8:	4606      	mov	r6, r0
 80006da:	460d      	mov	r5, r1
 80006dc:	4617      	mov	r7, r2
 80006de:	930d      	str	r3, [sp, #52]	; 0x34
 80006e0:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 80006e4:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
    ILI9341_Select();
 80006e8:	f7ff fdf6 	bl	80002d8 <ILI9341_Select>

    while(*str) {
 80006ec:	e010      	b.n	8000710 <ILI9341_WriteString+0x40>
                break;
            }

            if(*str == ' ') {
                // skip spaces in the beginning of the new line
                str++;
 80006ee:	3701      	adds	r7, #1
            x = 0;
 80006f0:	2600      	movs	r6, #0
                continue;
 80006f2:	e00d      	b.n	8000710 <ILI9341_WriteString+0x40>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80006f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80006f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80006fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000702:	4629      	mov	r1, r5
 8000704:	4630      	mov	r0, r6
 8000706:	f7ff fe7a 	bl	80003fe <ILI9341_WriteChar>
        x += font.width;
 800070a:	4434      	add	r4, r6
 800070c:	b2a6      	uxth	r6, r4
        str++;
 800070e:	3701      	adds	r7, #1
    while(*str) {
 8000710:	783a      	ldrb	r2, [r7, #0]
 8000712:	b17a      	cbz	r2, 8000734 <ILI9341_WriteString+0x64>
        if(x + font.width >= ILI9341_WIDTH) {
 8000714:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
 8000718:	1933      	adds	r3, r6, r4
 800071a:	2b7f      	cmp	r3, #127	; 0x7f
 800071c:	ddea      	ble.n	80006f4 <ILI9341_WriteString+0x24>
            y += font.height;
 800071e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8000722:	441d      	add	r5, r3
 8000724:	b2ad      	uxth	r5, r5
            if(y + font.height >= ILI9341_HEIGHT) {
 8000726:	442b      	add	r3, r5
 8000728:	2b9f      	cmp	r3, #159	; 0x9f
 800072a:	dc03      	bgt.n	8000734 <ILI9341_WriteString+0x64>
            if(*str == ' ') {
 800072c:	2a20      	cmp	r2, #32
 800072e:	d0de      	beq.n	80006ee <ILI9341_WriteString+0x1e>
            x = 0;
 8000730:	2600      	movs	r6, #0
 8000732:	e7df      	b.n	80006f4 <ILI9341_WriteString+0x24>
    }

    ILI9341_Unselect();
 8000734:	f7ff fe2a 	bl	800038c <ILI9341_Unselect>
}
 8000738:	b005      	add	sp, #20
 800073a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073e:	b002      	add	sp, #8
 8000740:	4770      	bx	lr
	...

08000744 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800074e:	287f      	cmp	r0, #127	; 0x7f
 8000750:	d83e      	bhi.n	80007d0 <ILI9341_FillRectangle+0x8c>
 8000752:	4604      	mov	r4, r0
 8000754:	460f      	mov	r7, r1
 8000756:	4616      	mov	r6, r2
 8000758:	461d      	mov	r5, r3
 800075a:	299f      	cmp	r1, #159	; 0x9f
 800075c:	d838      	bhi.n	80007d0 <ILI9341_FillRectangle+0x8c>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 800075e:	1883      	adds	r3, r0, r2
 8000760:	2b80      	cmp	r3, #128	; 0x80
 8000762:	dd02      	ble.n	800076a <ILI9341_FillRectangle+0x26>
 8000764:	f1c0 0680 	rsb	r6, r0, #128	; 0x80
 8000768:	b2b6      	uxth	r6, r6
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800076a:	197b      	adds	r3, r7, r5
 800076c:	2ba0      	cmp	r3, #160	; 0xa0
 800076e:	dd02      	ble.n	8000776 <ILI9341_FillRectangle+0x32>
 8000770:	f1c7 05a0 	rsb	r5, r7, #160	; 0xa0
 8000774:	b2ad      	uxth	r5, r5

    ILI9341_Select();
 8000776:	f7ff fdaf 	bl	80002d8 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800077a:	1932      	adds	r2, r6, r4
 800077c:	b292      	uxth	r2, r2
 800077e:	19eb      	adds	r3, r5, r7
 8000780:	b29b      	uxth	r3, r3
 8000782:	3b01      	subs	r3, #1
 8000784:	3a01      	subs	r2, #1
 8000786:	b29b      	uxth	r3, r3
 8000788:	b292      	uxth	r2, r2
 800078a:	4639      	mov	r1, r7
 800078c:	4620      	mov	r0, r4
 800078e:	f7ff fe07 	bl	80003a0 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000792:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8000796:	f88d 3004 	strb.w	r3, [sp, #4]
 800079a:	f88d 8005 	strb.w	r8, [sp, #5]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <ILI9341_FillRectangle+0x94>)
 80007a6:	f000 fc6e 	bl	8001086 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80007aa:	e00c      	b.n	80007c6 <ILI9341_FillRectangle+0x82>
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	2202      	movs	r2, #2
 80007b2:	a901      	add	r1, sp, #4
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <ILI9341_FillRectangle+0x98>)
 80007b6:	f000 ffeb 	bl	8001790 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80007ba:	3c01      	subs	r4, #1
 80007bc:	b2a4      	uxth	r4, r4
 80007be:	2c00      	cmp	r4, #0
 80007c0:	d1f4      	bne.n	80007ac <ILI9341_FillRectangle+0x68>
    for(y = h; y > 0; y--) {
 80007c2:	3d01      	subs	r5, #1
 80007c4:	b2ad      	uxth	r5, r5
 80007c6:	b10d      	cbz	r5, 80007cc <ILI9341_FillRectangle+0x88>
        for(x = w; x > 0; x--) {
 80007c8:	4634      	mov	r4, r6
 80007ca:	e7f8      	b.n	80007be <ILI9341_FillRectangle+0x7a>
        }
    }

    ILI9341_Unselect();
 80007cc:	f7ff fdde 	bl	800038c <ILI9341_Unselect>
}
 80007d0:	b002      	add	sp, #8
 80007d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007d6:	bf00      	nop
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	20000adc 	.word	0x20000adc

080007e0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80007e0:	b500      	push	{lr}
 80007e2:	b083      	sub	sp, #12
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80007e4:	9000      	str	r0, [sp, #0]
 80007e6:	23a0      	movs	r3, #160	; 0xa0
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	2100      	movs	r1, #0
 80007ec:	4608      	mov	r0, r1
 80007ee:	f7ff ffa9 	bl	8000744 <ILI9341_FillRectangle>
}
 80007f2:	b003      	add	sp, #12
 80007f4:	f85d fb04 	ldr.w	pc, [sp], #4

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007fc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	2400      	movs	r4, #0
 8000800:	9404      	str	r4, [sp, #16]
 8000802:	9405      	str	r4, [sp, #20]
 8000804:	9406      	str	r4, [sp, #24]
 8000806:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <MX_GPIO_Init+0xc4>)
 800080a:	699a      	ldr	r2, [r3, #24]
 800080c:	f042 0204 	orr.w	r2, r2, #4
 8000810:	619a      	str	r2, [r3, #24]
 8000812:	699a      	ldr	r2, [r3, #24]
 8000814:	f002 0204 	and.w	r2, r2, #4
 8000818:	9201      	str	r2, [sp, #4]
 800081a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081c:	699a      	ldr	r2, [r3, #24]
 800081e:	f042 0210 	orr.w	r2, r2, #16
 8000822:	619a      	str	r2, [r3, #24]
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	f002 0210 	and.w	r2, r2, #16
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	699a      	ldr	r2, [r3, #24]
 8000830:	f042 0208 	orr.w	r2, r2, #8
 8000834:	619a      	str	r2, [r3, #24]
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	9303      	str	r3, [sp, #12]
 800083e:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000840:	4f1f      	ldr	r7, [pc, #124]	; (80008c0 <MX_GPIO_Init+0xc8>)
 8000842:	4622      	mov	r2, r4
 8000844:	2110      	movs	r1, #16
 8000846:	4638      	mov	r0, r7
 8000848:	f000 fc1d 	bl	8001086 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800084c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80008c4 <MX_GPIO_Init+0xcc>
 8000850:	4622      	mov	r2, r4
 8000852:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000856:	4648      	mov	r0, r9
 8000858:	f000 fc15 	bl	8001086 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800085c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80008c8 <MX_GPIO_Init+0xd0>
 8000860:	4622      	mov	r2, r4
 8000862:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000866:	4640      	mov	r0, r8
 8000868:	f000 fc0d 	bl	8001086 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086c:	2501      	movs	r5, #1
 800086e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	a904      	add	r1, sp, #16
 8000876:	4638      	mov	r0, r7
 8000878:	f000 faec 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800087c:	2310      	movs	r3, #16
 800087e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2602      	movs	r6, #2
 8000886:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	eb0d 0103 	add.w	r1, sp, r3
 800088c:	4638      	mov	r0, r7
 800088e:	f000 fae1 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000892:	f44f 7740 	mov.w	r7, #768	; 0x300
 8000896:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	a904      	add	r1, sp, #16
 80008a0:	4648      	mov	r0, r9
 80008a2:	f000 fad7 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008a6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	a904      	add	r1, sp, #16
 80008b0:	4640      	mov	r0, r8
 80008b2:	f000 facf 	bl	8000e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	b009      	add	sp, #36	; 0x24
 80008b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010800 	.word	0x40010800
 80008c4:	40011000 	.word	0x40011000
 80008c8:	40010c00 	.word	0x40010c00

080008cc <greeting_init.1>:
  {
 80008cc:	b530      	push	{r4, r5, lr}
 80008ce:	b085      	sub	sp, #20
  	  ILI9341_FillScreen(ILI9341_BLACK);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff ff85 	bl	80007e0 <ILI9341_FillScreen>
  	  for(int x = 0; x < ILI9341_WIDTH; x++) {
 80008d6:	2400      	movs	r4, #0
 80008d8:	e00c      	b.n	80008f4 <greeting_init.1+0x28>
  		  ILI9341_DrawPixel(x, 0, 65535);				//ILI9341_RED
 80008da:	b2a5      	uxth	r5, r4
 80008dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e0:	2100      	movs	r1, #0
 80008e2:	4628      	mov	r0, r5
 80008e4:	f7ff fed2 	bl	800068c <ILI9341_DrawPixel>
  	      ILI9341_DrawPixel(x, ILI9341_HEIGHT-1, ILI9341_RED);
 80008e8:	221f      	movs	r2, #31
 80008ea:	219f      	movs	r1, #159	; 0x9f
 80008ec:	4628      	mov	r0, r5
 80008ee:	f7ff fecd 	bl	800068c <ILI9341_DrawPixel>
  	  for(int x = 0; x < ILI9341_WIDTH; x++) {
 80008f2:	3401      	adds	r4, #1
 80008f4:	2c7f      	cmp	r4, #127	; 0x7f
 80008f6:	ddf0      	ble.n	80008da <greeting_init.1+0xe>
  	  for(int y = 0; y < ILI9341_HEIGHT; y++) {
 80008f8:	2400      	movs	r4, #0
 80008fa:	e00c      	b.n	8000916 <greeting_init.1+0x4a>
  	      ILI9341_DrawPixel(0, y, 65535);			//ILI9341_RED
 80008fc:	b2a5      	uxth	r5, r4
 80008fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000902:	4629      	mov	r1, r5
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fec1 	bl	800068c <ILI9341_DrawPixel>
  	      ILI9341_DrawPixel(ILI9341_WIDTH-1, y, ILI9341_RED);
 800090a:	221f      	movs	r2, #31
 800090c:	4629      	mov	r1, r5
 800090e:	207f      	movs	r0, #127	; 0x7f
 8000910:	f7ff febc 	bl	800068c <ILI9341_DrawPixel>
  	  for(int y = 0; y < ILI9341_HEIGHT; y++) {
 8000914:	3401      	adds	r4, #1
 8000916:	2c9f      	cmp	r4, #159	; 0x9f
 8000918:	ddf0      	ble.n	80008fc <greeting_init.1+0x30>
  	  HAL_Delay(500);
 800091a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091e:	f000 f9cd 	bl	8000cbc <HAL_Delay>
  	  ILI9341_WriteString(2, 72, "Press the button to see variants", Font_7x10, ILI9341_GREEN, ILI9341_BLACK);
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <greeting_init.1+0x78>)
 8000924:	2200      	movs	r2, #0
 8000926:	9202      	str	r2, [sp, #8]
 8000928:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <greeting_init.1+0x7c>)
 8000936:	2148      	movs	r1, #72	; 0x48
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff fec9 	bl	80006d0 <ILI9341_WriteString>
  }
 800093e:	b005      	add	sp, #20
 8000940:	bd30      	pop	{r4, r5, pc}
 8000942:	bf00      	nop
 8000944:	20000010 	.word	0x20000010
 8000948:	080147e4 	.word	0x080147e4

0800094c <init.0>:
    void init() {
 800094c:	b508      	push	{r3, lr}
        greeting_init();
 800094e:	f7ff ffbd 	bl	80008cc <greeting_init.1>
    }
 8000952:	bd08      	pop	{r3, pc}

08000954 <lv_example_label_1.2>:
  {
 8000954:	b510      	push	{r4, lr}
 8000956:	f00a fa43 	bl	800ade0 <lv_disp_get_default>
 800095a:	f001 f87d 	bl	8001a58 <lv_disp_get_scr_act>
      lv_obj_t * label1 = lv_label_create(lv_scr_act());
 800095e:	f00d f86d 	bl	800da3c <lv_label_create>
 8000962:	4604      	mov	r4, r0
      lv_label_set_long_mode(label1, LV_LABEL_LONG_WRAP);
 8000964:	2100      	movs	r1, #0
 8000966:	f00d fc49 	bl	800e1fc <lv_label_set_long_mode>
      lv_label_set_recolor(label1, true);
 800096a:	2101      	movs	r1, #1
 800096c:	4620      	mov	r0, r4
 800096e:	f00d fcb9 	bl	800e2e4 <lv_label_set_recolor>
      lv_label_set_text(label1, "#0000ff Re-color# #ff00ff words# #ff0000 of a# label, align the lines to the center "
 8000972:	490a      	ldr	r1, [pc, #40]	; (800099c <lv_example_label_1.2+0x48>)
 8000974:	4620      	mov	r0, r4
 8000976:	f00d fc03 	bl	800e180 <lv_label_set_text>
      lv_obj_set_width(label1, 100);  /*Set smaller width to make the lines wrap*/
 800097a:	2164      	movs	r1, #100	; 0x64
 800097c:	4620      	mov	r0, r4
 800097e:	f002 ff11 	bl	80037a4 <lv_obj_set_width>
      lv_obj_set_style_text_align(label1, LV_TEXT_ALIGN_CENTER, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4620      	mov	r0, r4
 8000988:	f006 f8ce 	bl	8006b28 <lv_obj_set_style_text_align>
      lv_obj_align(label1, LV_ALIGN_CENTER, 0, 0);
 800098c:	2300      	movs	r3, #0
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	4620      	mov	r0, r4
 8000994:	f002 ff70 	bl	8003878 <lv_obj_align>
  }
 8000998:	bd10      	pop	{r4, pc}
 800099a:	bf00      	nop
 800099c:	08014808 	.word	0x08014808

080009a0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <Error_Handler+0x2>

080009a4 <MX_SPI1_Init>:
{
 80009a4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_SPI1_Init+0x38>)
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_SPI1_Init+0x3c>)
 80009aa:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009b0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b2:	2300      	movs	r3, #0
 80009b4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ba:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ca:	230a      	movs	r3, #10
 80009cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ce:	f000 fea7 	bl	8001720 <HAL_SPI_Init>
 80009d2:	b900      	cbnz	r0, 80009d6 <MX_SPI1_Init+0x32>
}
 80009d4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009d6:	f7ff ffe3 	bl	80009a0 <Error_Handler>
 80009da:	bf00      	nop
 80009dc:	20000adc 	.word	0x20000adc
 80009e0:	40013000 	.word	0x40013000

080009e4 <SystemClock_Config>:
{
 80009e4:	b500      	push	{lr}
 80009e6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e8:	2228      	movs	r2, #40	; 0x28
 80009ea:	2100      	movs	r1, #0
 80009ec:	a806      	add	r0, sp, #24
 80009ee:	f00d fe8d 	bl	800e70c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f2:	2300      	movs	r3, #0
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	9303      	str	r3, [sp, #12]
 80009fa:	9304      	str	r3, [sp, #16]
 80009fc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a02:	2301      	movs	r3, #1
 8000a04:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2310      	movs	r3, #16
 8000a08:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	a806      	add	r0, sp, #24
 8000a0c:	f000 fb5e 	bl	80010cc <HAL_RCC_OscConfig>
 8000a10:	b968      	cbnz	r0, 8000a2e <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a16:	2100      	movs	r1, #0
 8000a18:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a20:	a801      	add	r0, sp, #4
 8000a22:	f000 fd95 	bl	8001550 <HAL_RCC_ClockConfig>
 8000a26:	b920      	cbnz	r0, 8000a32 <SystemClock_Config+0x4e>
}
 8000a28:	b011      	add	sp, #68	; 0x44
 8000a2a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a2e:	f7ff ffb7 	bl	80009a0 <Error_Handler>
    Error_Handler();
 8000a32:	f7ff ffb5 	bl	80009a0 <Error_Handler>
	...

08000a38 <main>:
{
 8000a38:	b510      	push	{r4, lr}
  HAL_Init();
 8000a3a:	f000 f921 	bl	8000c80 <HAL_Init>
  SystemClock_Config();
 8000a3e:	f7ff ffd1 	bl	80009e4 <SystemClock_Config>
  MX_GPIO_Init();
 8000a42:	f7ff fed9 	bl	80007f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a46:	f7ff ffad 	bl	80009a4 <MX_SPI1_Init>
  lv_init();
 8000a4a:	f001 ff89 	bl	8002960 <lv_init>
  lv_port_disp_init();
 8000a4e:	f7ff fc19 	bl	8000284 <lv_port_disp_init>
  init();
 8000a52:	f7ff ff7b 	bl	800094c <init.0>
 8000a56:	f00a f9c3 	bl	800ade0 <lv_disp_get_default>
 8000a5a:	f000 fffd 	bl	8001a58 <lv_disp_get_scr_act>
 8000a5e:	4604      	mov	r4, r0
  lv_obj_set_style_bg_color(lv_scr_act(), lv_palette_main(LV_PALETTE_LIME), LV_PART_MAIN);
 8000a60:	200b      	movs	r0, #11
 8000a62:	f00a ff79 	bl	800b958 <lv_palette_main>
 8000a66:	4601      	mov	r1, r0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f006 f855 	bl	8006b1a <lv_obj_set_style_bg_color>
	  lv_timer_handler();
 8000a70:	f00b ff2c 	bl	800c8cc <lv_timer_handler>
	  HAL_Delay(5);
 8000a74:	2005      	movs	r0, #5
 8000a76:	f000 f921 	bl	8000cbc <HAL_Delay>
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ) {
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <main+0x64>)
 8000a7e:	f000 fafb 	bl	8001078 <HAL_GPIO_ReadPin>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d0f4      	beq.n	8000a70 <main+0x38>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <main+0x68>)
 8000a8c:	f000 fb01 	bl	8001092 <HAL_GPIO_TogglePin>
		  lv_example_label_1();
 8000a90:	f7ff ff60 	bl	8000954 <lv_example_label_1.2>
	 	  HAL_Delay(50);
 8000a94:	2032      	movs	r0, #50	; 0x32
 8000a96:	f000 f911 	bl	8000cbc <HAL_Delay>
 8000a9a:	e7e9      	b.n	8000a70 <main+0x38>
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40011000 	.word	0x40011000

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_MspInit+0x3c>)
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	619a      	str	r2, [r3, #24]
 8000ab0:	699a      	ldr	r2, [r3, #24]
 8000ab2:	f002 0201 	and.w	r2, r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	69da      	ldr	r2, [r3, #28]
 8000abc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac0:	61da      	str	r2, [r3, #28]
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000acc:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <HAL_MspInit+0x40>)
 8000ace:	6853      	ldr	r3, [r2, #4]
 8000ad0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	b002      	add	sp, #8
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae8:	b530      	push	{r4, r5, lr}
 8000aea:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2300      	movs	r3, #0
 8000aee:	9302      	str	r3, [sp, #8]
 8000af0:	9303      	str	r3, [sp, #12]
 8000af2:	9304      	str	r3, [sp, #16]
 8000af4:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8000af6:	6802      	ldr	r2, [r0, #0]
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_SPI_MspInit+0x7c>)
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d001      	beq.n	8000b02 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000afe:	b007      	add	sp, #28
 8000b00:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b02:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b0c:	619a      	str	r2, [r3, #24]
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000b14:	9200      	str	r2, [sp, #0]
 8000b16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	699a      	ldr	r2, [r3, #24]
 8000b1a:	f042 0204 	orr.w	r2, r2, #4
 8000b1e:	619a      	str	r2, [r3, #24]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b2a:	23a0      	movs	r3, #160	; 0xa0
 8000b2c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	4d0c      	ldr	r5, [pc, #48]	; (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b38:	a902      	add	r1, sp, #8
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f000 f98a 	bl	8000e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2400      	movs	r4, #0
 8000b46:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	a902      	add	r1, sp, #8
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 f981 	bl	8000e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b52:	4622      	mov	r2, r4
 8000b54:	4621      	mov	r1, r4
 8000b56:	2023      	movs	r0, #35	; 0x23
 8000b58:	f000 f8d6 	bl	8000d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b5c:	2023      	movs	r0, #35	; 0x23
 8000b5e:	f000 f90b 	bl	8000d78 <HAL_NVIC_EnableIRQ>
}
 8000b62:	e7cc      	b.n	8000afe <HAL_SPI_MspInit+0x16>
 8000b64:	40013000 	.word	0x40013000
 8000b68:	40010800 	.word	0x40010800

08000b6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler>

08000b6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler>

08000b70 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler>

08000b72 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler>

08000b74 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler>

08000b76 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	lv_tick_inc(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f00a f98a 	bl	800ae98 <lv_tick_inc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 f888 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bd08      	pop	{r3, pc}
	...

08000b8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <SPI1_IRQHandler+0xc>)
 8000b90:	f000 fed6 	bl	8001940 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b94:	bd08      	pop	{r3, pc}
 8000b96:	bf00      	nop
 8000b98:	20000adc 	.word	0x20000adc

08000b9c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <SystemInit+0x44>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	f042 0201 	orr.w	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ba6:	6859      	ldr	r1, [r3, #4]
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <SystemInit+0x48>)
 8000baa:	400a      	ands	r2, r1
 8000bac:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000bb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bb8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bc0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000bc8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000bce:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SystemInit+0x4c>)
 8000bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bda:	609a      	str	r2, [r3, #8]
#endif 
}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	f8ff0000 	.word	0xf8ff0000
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bee:	e003      	b.n	8000bf8 <LoopCopyDataInit>

08000bf0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bf2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bf4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bf6:	3104      	adds	r1, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bf8:	480a      	ldr	r0, [pc, #40]	; (8000c24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c00:	d3f6      	bcc.n	8000bf0 <CopyDataInit>
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c04:	e002      	b.n	8000c0c <LoopFillZerobss>

08000c06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c08:	f842 3b04 	str.w	r3, [r2], #4

08000c0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c10:	d3f9      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c12:	f7ff ffc3 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f00d fd55 	bl	800e6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff ff0d 	bl	8000a38 <main>
  bx lr
 8000c1e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c20:	080148cc 	.word	0x080148cc
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c28:	20000054 	.word	0x20000054
  ldr r2, =_sbss
 8000c2c:	20000054 	.word	0x20000054
  ldr r3, = _ebss
 8000c30:	200015e0 	.word	0x200015e0

08000c34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_IRQHandler>
	...

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_InitTick+0x40>)
 8000c3e:	7818      	ldrb	r0, [r3, #0]
 8000c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c44:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <HAL_InitTick+0x44>)
 8000c4a:	6810      	ldr	r0, [r2, #0]
 8000c4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c50:	f000 f8a0 	bl	8000d94 <HAL_SYSTICK_Config>
 8000c54:	b968      	cbnz	r0, 8000c72 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	2c0f      	cmp	r4, #15
 8000c58:	d901      	bls.n	8000c5e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	e00a      	b.n	8000c74 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4621      	mov	r1, r4
 8000c62:	f04f 30ff 	mov.w	r0, #4294967295
 8000c66:	f000 f84f 	bl	8000d08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6a:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_InitTick+0x40>)
 8000c6c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c72:	2001      	movs	r0, #1
}
 8000c74:	bd10      	pop	{r4, pc}
 8000c76:	bf00      	nop
 8000c78:	2000001c 	.word	0x2000001c
 8000c7c:	20000018 	.word	0x20000018

08000c80 <HAL_Init>:
{
 8000c80:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c82:	2003      	movs	r0, #3
 8000c84:	f000 f82e 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c88:	200f      	movs	r0, #15
 8000c8a:	f7ff ffd5 	bl	8000c38 <HAL_InitTick>
  HAL_MspInit();
 8000c8e:	f7ff ff09 	bl	8000aa4 <HAL_MspInit>
}
 8000c92:	2000      	movs	r0, #0
 8000c94:	bd08      	pop	{r3, pc}
	...

08000c98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c98:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <HAL_IncTick+0x10>)
 8000c9a:	6811      	ldr	r1, [r2, #0]
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_IncTick+0x14>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	440b      	add	r3, r1
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000b34 	.word	0x20000b34
 8000cac:	2000001c 	.word	0x2000001c

08000cb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cb0:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <HAL_GetTick+0x8>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000b34 	.word	0x20000b34

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff fff6 	bl	8000cb0 <HAL_GetTick>
 8000cc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000cca:	d002      	beq.n	8000cd2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <HAL_Delay+0x24>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	f7ff ffed 	bl	8000cb0 <HAL_GetTick>
 8000cd6:	1b40      	subs	r0, r0, r5
 8000cd8:	42a0      	cmp	r0, r4
 8000cda:	d3fa      	bcc.n	8000cd2 <HAL_Delay+0x16>
  {
  }
}
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000001c 	.word	0x2000001c

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ce6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cec:	041b      	lsls	r3, r3, #16
 8000cee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf0:	0200      	lsls	r0, r0, #8
 8000cf2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d00:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d08:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_NVIC_SetPriority+0x68>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d12:	f1c3 0c07 	rsb	ip, r3, #7
 8000d16:	f1bc 0f04 	cmp.w	ip, #4
 8000d1a:	bf28      	it	cs
 8000d1c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d20:	f103 0e04 	add.w	lr, r3, #4
 8000d24:	f1be 0f06 	cmp.w	lr, #6
 8000d28:	d918      	bls.n	8000d5c <HAL_NVIC_SetPriority+0x54>
 8000d2a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 3eff 	mov.w	lr, #4294967295
 8000d30:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000d34:	ea21 010c 	bic.w	r1, r1, ip
 8000d38:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3a:	fa0e f303 	lsl.w	r3, lr, r3
 8000d3e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d42:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000d44:	2800      	cmp	r0, #0
 8000d46:	db0b      	blt.n	8000d60 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	0109      	lsls	r1, r1, #4
 8000d4a:	b2c9      	uxtb	r1, r1
 8000d4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d54:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d58:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e7e5      	b.n	8000d2c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	f000 000f 	and.w	r0, r0, #15
 8000d64:	0109      	lsls	r1, r1, #4
 8000d66:	b2c9      	uxtb	r1, r1
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_NVIC_SetPriority+0x6c>)
 8000d6a:	5419      	strb	r1, [r3, r0]
 8000d6c:	e7f4      	b.n	8000d58 <HAL_NVIC_SetPriority+0x50>
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	e000ed14 	.word	0xe000ed14

08000d78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	db07      	blt.n	8000d8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7c:	f000 021f 	and.w	r2, r0, #31
 8000d80:	0940      	lsrs	r0, r0, #5
 8000d82:	2301      	movs	r3, #1
 8000d84:	4093      	lsls	r3, r2
 8000d86:	4a02      	ldr	r2, [pc, #8]	; (8000d90 <HAL_NVIC_EnableIRQ+0x18>)
 8000d88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	3801      	subs	r0, #1
 8000d96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d9a:	d20b      	bcs.n	8000db4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000da0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_SYSTICK_Config+0x24>)
 8000da4:	21f0      	movs	r1, #240	; 0xf0
 8000da6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000daa:	2000      	movs	r0, #0
 8000dac:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	2207      	movs	r2, #7
 8000db0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000db4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dbc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dbe:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d003      	beq.n	8000dce <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dca:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000dcc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dce:	6802      	ldr	r2, [r0, #0]
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	f023 030e 	bic.w	r3, r3, #14
 8000dd6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000dd8:	6802      	ldr	r2, [r0, #0]
 8000dda:	6813      	ldr	r3, [r2, #0]
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_DMA_Abort_IT+0x90>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d014      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x58>
 8000dea:	3214      	adds	r2, #20
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d01f      	beq.n	8000e30 <HAL_DMA_Abort_IT+0x74>
 8000df0:	3214      	adds	r2, #20
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01e      	beq.n	8000e34 <HAL_DMA_Abort_IT+0x78>
 8000df6:	3214      	adds	r2, #20
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d01e      	beq.n	8000e3a <HAL_DMA_Abort_IT+0x7e>
 8000dfc:	3214      	adds	r2, #20
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d01e      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x84>
 8000e02:	3214      	adds	r2, #20
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d002      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x52>
 8000e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e0c:	e003      	b.n	8000e16 <HAL_DMA_Abort_IT+0x5a>
 8000e0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e12:	e000      	b.n	8000e16 <HAL_DMA_Abort_IT+0x5a>
 8000e14:	2201      	movs	r2, #1
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_DMA_Abort_IT+0x94>)
 8000e18:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000e20:	2300      	movs	r3, #0
 8000e22:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000e26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e28:	b16b      	cbz	r3, 8000e46 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000e2a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7cd      	b.n	8000dcc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e30:	2210      	movs	r2, #16
 8000e32:	e7f0      	b.n	8000e16 <HAL_DMA_Abort_IT+0x5a>
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	e7ed      	b.n	8000e16 <HAL_DMA_Abort_IT+0x5a>
 8000e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3e:	e7ea      	b.n	8000e16 <HAL_DMA_Abort_IT+0x5a>
 8000e40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e44:	e7e7      	b.n	8000e16 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000e46:	2000      	movs	r0, #0
 8000e48:	e7c0      	b.n	8000dcc <HAL_DMA_Abort_IT+0x10>
 8000e4a:	bf00      	nop
 8000e4c:	40020008 	.word	0x40020008
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e58:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000e5a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5c:	e0a6      	b.n	8000fac <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5e:	4d80      	ldr	r5, [pc, #512]	; (8001060 <HAL_GPIO_Init+0x20c>)
 8000e60:	42aa      	cmp	r2, r5
 8000e62:	d010      	beq.n	8000e86 <HAL_GPIO_Init+0x32>
 8000e64:	d907      	bls.n	8000e76 <HAL_GPIO_Init+0x22>
 8000e66:	4d7f      	ldr	r5, [pc, #508]	; (8001064 <HAL_GPIO_Init+0x210>)
 8000e68:	42aa      	cmp	r2, r5
 8000e6a:	d00c      	beq.n	8000e86 <HAL_GPIO_Init+0x32>
 8000e6c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000e70:	42aa      	cmp	r2, r5
 8000e72:	d008      	beq.n	8000e86 <HAL_GPIO_Init+0x32>
 8000e74:	e013      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
 8000e76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000e7a:	42aa      	cmp	r2, r5
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x32>
 8000e7e:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000e82:	42aa      	cmp	r2, r5
 8000e84:	d107      	bne.n	8000e96 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e86:	688a      	ldr	r2, [r1, #8]
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	d058      	beq.n	8000f3e <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e8c:	2a01      	cmp	r2, #1
 8000e8e:	d051      	beq.n	8000f34 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000e90:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e92:	2408      	movs	r4, #8
 8000e94:	e003      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000e96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000e9a:	42aa      	cmp	r2, r5
 8000e9c:	d0f3      	beq.n	8000e86 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e9e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000ea2:	d84e      	bhi.n	8000f42 <HAL_GPIO_Init+0xee>
 8000ea4:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000eaa:	d84c      	bhi.n	8000f46 <HAL_GPIO_Init+0xf2>
 8000eac:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb0:	6833      	ldr	r3, [r6, #0]
 8000eb2:	250f      	movs	r5, #15
 8000eb4:	4095      	lsls	r5, r2
 8000eb6:	ea23 0305 	bic.w	r3, r3, r5
 8000eba:	fa04 f202 	lsl.w	r2, r4, r2
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	684b      	ldr	r3, [r1, #4]
 8000ec4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ec8:	d06e      	beq.n	8000fa8 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eca:	4b67      	ldr	r3, [pc, #412]	; (8001068 <HAL_GPIO_Init+0x214>)
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000ede:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000ee2:	1c95      	adds	r5, r2, #2
 8000ee4:	4b61      	ldr	r3, [pc, #388]	; (800106c <HAL_GPIO_Init+0x218>)
 8000ee6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eea:	f00c 0303 	and.w	r3, ip, #3
 8000eee:	009d      	lsls	r5, r3, #2
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	40ab      	lsls	r3, r5
 8000ef4:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef8:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_GPIO_Init+0x21c>)
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d029      	beq.n	8000f52 <HAL_GPIO_Init+0xfe>
 8000efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f02:	4298      	cmp	r0, r3
 8000f04:	f000 808e 	beq.w	8001024 <HAL_GPIO_Init+0x1d0>
 8000f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f0c:	4298      	cmp	r0, r3
 8000f0e:	f000 808b 	beq.w	8001028 <HAL_GPIO_Init+0x1d4>
 8000f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f16:	4298      	cmp	r0, r3
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0xfa>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e01a      	b.n	8000f54 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f1e:	68cc      	ldr	r4, [r1, #12]
          break;
 8000f20:	e7bd      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f22:	68cc      	ldr	r4, [r1, #12]
 8000f24:	3404      	adds	r4, #4
          break;
 8000f26:	e7ba      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f28:	68cc      	ldr	r4, [r1, #12]
 8000f2a:	3408      	adds	r4, #8
          break;
 8000f2c:	e7b7      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f2e:	68cc      	ldr	r4, [r1, #12]
 8000f30:	340c      	adds	r4, #12
          break;
 8000f32:	e7b4      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000f34:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f36:	2408      	movs	r4, #8
 8000f38:	e7b1      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	e7af      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f3e:	2404      	movs	r4, #4
 8000f40:	e7ad      	b.n	8000e9e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f42:	1d06      	adds	r6, r0, #4
 8000f44:	e7af      	b.n	8000ea6 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f46:	f1ac 0208 	sub.w	r2, ip, #8
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	e7b0      	b.n	8000eb0 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x100>
 8000f52:	2300      	movs	r3, #0
 8000f54:	40ab      	lsls	r3, r5
 8000f56:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000f58:	3202      	adds	r2, #2
 8000f5a:	4d44      	ldr	r5, [pc, #272]	; (800106c <HAL_GPIO_Init+0x218>)
 8000f5c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f60:	684b      	ldr	r3, [r1, #4]
 8000f62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f66:	d061      	beq.n	800102c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f68:	4a42      	ldr	r2, [pc, #264]	; (8001074 <HAL_GPIO_Init+0x220>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	ea43 030e 	orr.w	r3, r3, lr
 8000f70:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f72:	684b      	ldr	r3, [r1, #4]
 8000f74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f78:	d05e      	beq.n	8001038 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <HAL_GPIO_Init+0x220>)
 8000f7c:	6853      	ldr	r3, [r2, #4]
 8000f7e:	ea43 030e 	orr.w	r3, r3, lr
 8000f82:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f84:	684b      	ldr	r3, [r1, #4]
 8000f86:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000f8a:	d05b      	beq.n	8001044 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8c:	4a39      	ldr	r2, [pc, #228]	; (8001074 <HAL_GPIO_Init+0x220>)
 8000f8e:	6893      	ldr	r3, [r2, #8]
 8000f90:	ea43 030e 	orr.w	r3, r3, lr
 8000f94:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f96:	684b      	ldr	r3, [r1, #4]
 8000f98:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000f9c:	d058      	beq.n	8001050 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f9e:	4a35      	ldr	r2, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x220>)
 8000fa0:	68d3      	ldr	r3, [r2, #12]
 8000fa2:	ea43 030e 	orr.w	r3, r3, lr
 8000fa6:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000fa8:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fac:	680a      	ldr	r2, [r1, #0]
 8000fae:	fa32 f30c 	lsrs.w	r3, r2, ip
 8000fb2:	d053      	beq.n	800105c <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8000fbe:	ea33 0202 	bics.w	r2, r3, r2
 8000fc2:	d1f1      	bne.n	8000fa8 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8000fc4:	684a      	ldr	r2, [r1, #4]
 8000fc6:	2a12      	cmp	r2, #18
 8000fc8:	f63f af49 	bhi.w	8000e5e <HAL_GPIO_Init+0xa>
 8000fcc:	2a12      	cmp	r2, #18
 8000fce:	f63f af66 	bhi.w	8000e9e <HAL_GPIO_Init+0x4a>
 8000fd2:	a501      	add	r5, pc, #4	; (adr r5, 8000fd8 <HAL_GPIO_Init+0x184>)
 8000fd4:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000fd8:	08000e87 	.word	0x08000e87
 8000fdc:	08000f1f 	.word	0x08000f1f
 8000fe0:	08000f29 	.word	0x08000f29
 8000fe4:	08000f3b 	.word	0x08000f3b
 8000fe8:	08000e9f 	.word	0x08000e9f
 8000fec:	08000e9f 	.word	0x08000e9f
 8000ff0:	08000e9f 	.word	0x08000e9f
 8000ff4:	08000e9f 	.word	0x08000e9f
 8000ff8:	08000e9f 	.word	0x08000e9f
 8000ffc:	08000e9f 	.word	0x08000e9f
 8001000:	08000e9f 	.word	0x08000e9f
 8001004:	08000e9f 	.word	0x08000e9f
 8001008:	08000e9f 	.word	0x08000e9f
 800100c:	08000e9f 	.word	0x08000e9f
 8001010:	08000e9f 	.word	0x08000e9f
 8001014:	08000e9f 	.word	0x08000e9f
 8001018:	08000e9f 	.word	0x08000e9f
 800101c:	08000f23 	.word	0x08000f23
 8001020:	08000f2f 	.word	0x08000f2f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001024:	2301      	movs	r3, #1
 8001026:	e795      	b.n	8000f54 <HAL_GPIO_Init+0x100>
 8001028:	2302      	movs	r3, #2
 800102a:	e793      	b.n	8000f54 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_GPIO_Init+0x220>)
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	ea23 030e 	bic.w	r3, r3, lr
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e79c      	b.n	8000f72 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_GPIO_Init+0x220>)
 800103a:	6853      	ldr	r3, [r2, #4]
 800103c:	ea23 030e 	bic.w	r3, r3, lr
 8001040:	6053      	str	r3, [r2, #4]
 8001042:	e79f      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_GPIO_Init+0x220>)
 8001046:	6893      	ldr	r3, [r2, #8]
 8001048:	ea23 030e 	bic.w	r3, r3, lr
 800104c:	6093      	str	r3, [r2, #8]
 800104e:	e7a2      	b.n	8000f96 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_GPIO_Init+0x220>)
 8001052:	68d3      	ldr	r3, [r2, #12]
 8001054:	ea23 030e 	bic.w	r3, r3, lr
 8001058:	60d3      	str	r3, [r2, #12]
 800105a:	e7a5      	b.n	8000fa8 <HAL_GPIO_Init+0x154>
  }
}
 800105c:	b002      	add	sp, #8
 800105e:	bd70      	pop	{r4, r5, r6, pc}
 8001060:	10220000 	.word	0x10220000
 8001064:	10310000 	.word	0x10310000
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	40010800 	.word	0x40010800
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001078:	6883      	ldr	r3, [r0, #8]
 800107a:	4219      	tst	r1, r3
 800107c:	d001      	beq.n	8001082 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800107e:	2001      	movs	r0, #1
 8001080:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001082:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001084:	4770      	bx	lr

08001086 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001086:	b10a      	cbz	r2, 800108c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001088:	6101      	str	r1, [r0, #16]
 800108a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800108c:	0409      	lsls	r1, r1, #16
 800108e:	6101      	str	r1, [r0, #16]
  }
}
 8001090:	4770      	bx	lr

08001092 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001092:	68c3      	ldr	r3, [r0, #12]
 8001094:	420b      	tst	r3, r1
 8001096:	d001      	beq.n	800109c <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001098:	6141      	str	r1, [r0, #20]
 800109a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109c:	6101      	str	r1, [r0, #16]
  }
}
 800109e:	4770      	bx	lr

080010a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010a0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <RCC_Delay+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <RCC_Delay+0x28>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0a5b      	lsrs	r3, r3, #9
 80010ae:	fb00 f303 	mul.w	r3, r0, r3
 80010b2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80010b4:	bf00      	nop
  }
  while (Delay --);
 80010b6:	9b01      	ldr	r3, [sp, #4]
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	9201      	str	r2, [sp, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f9      	bne.n	80010b4 <RCC_Delay+0x14>
}
 80010c0:	b002      	add	sp, #8
 80010c2:	4770      	bx	lr
 80010c4:	20000018 	.word	0x20000018
 80010c8:	10624dd3 	.word	0x10624dd3

080010cc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80010cc:	2800      	cmp	r0, #0
 80010ce:	f000 81f1 	beq.w	80014b4 <HAL_RCC_OscConfig+0x3e8>
{
 80010d2:	b570      	push	{r4, r5, r6, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d8:	6803      	ldr	r3, [r0, #0]
 80010da:	f013 0f01 	tst.w	r3, #1
 80010de:	d02c      	beq.n	800113a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e0:	4b99      	ldr	r3, [pc, #612]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d01d      	beq.n	8001128 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ec:	4b96      	ldr	r3, [pc, #600]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d012      	beq.n	800111e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f8:	6863      	ldr	r3, [r4, #4]
 80010fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fe:	d041      	beq.n	8001184 <HAL_RCC_OscConfig+0xb8>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d155      	bne.n	80011b0 <HAL_RCC_OscConfig+0xe4>
 8001104:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001108:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e037      	b.n	800118e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800111e:	4b8a      	ldr	r3, [pc, #552]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001126:	d0e7      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4b87      	ldr	r3, [pc, #540]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001130:	d003      	beq.n	800113a <HAL_RCC_OscConfig+0x6e>
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 81bf 	beq.w	80014b8 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	f013 0f02 	tst.w	r3, #2
 8001140:	d075      	beq.n	800122e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001142:	4b81      	ldr	r3, [pc, #516]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f013 0f0c 	tst.w	r3, #12
 800114a:	d05f      	beq.n	800120c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114c:	4b7e      	ldr	r3, [pc, #504]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	d054      	beq.n	8001202 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001158:	6923      	ldr	r3, [r4, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 808a 	beq.w	8001274 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001160:	4b7a      	ldr	r3, [pc, #488]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001166:	f7ff fda3 	bl	8000cb0 <HAL_GetTick>
 800116a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	4b76      	ldr	r3, [pc, #472]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f013 0f02 	tst.w	r3, #2
 8001174:	d175      	bne.n	8001262 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fd9b 	bl	8000cb0 <HAL_GetTick>
 800117a:	1b40      	subs	r0, r0, r5
 800117c:	2802      	cmp	r0, #2
 800117e:	d9f5      	bls.n	800116c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001180:	2003      	movs	r0, #3
 8001182:	e19e      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001184:	4a70      	ldr	r2, [pc, #448]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118e:	6863      	ldr	r3, [r4, #4]
 8001190:	b343      	cbz	r3, 80011e4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001192:	f7ff fd8d 	bl	8000cb0 <HAL_GetTick>
 8001196:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001198:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011a0:	d1cb      	bne.n	800113a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a2:	f7ff fd85 	bl	8000cb0 <HAL_GetTick>
 80011a6:	1b40      	subs	r0, r0, r5
 80011a8:	2864      	cmp	r0, #100	; 0x64
 80011aa:	d9f5      	bls.n	8001198 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80011ac:	2003      	movs	r0, #3
 80011ae:	e188      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b4:	d009      	beq.n	80011ca <HAL_RCC_OscConfig+0xfe>
 80011b6:	4b64      	ldr	r3, [pc, #400]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e7e1      	b.n	800118e <HAL_RCC_OscConfig+0xc2>
 80011ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011ce:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e7d4      	b.n	800118e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80011e4:	f7ff fd64 	bl	8000cb0 <HAL_GetTick>
 80011e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011f2:	d0a2      	beq.n	800113a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fd5c 	bl	8000cb0 <HAL_GetTick>
 80011f8:	1b40      	subs	r0, r0, r5
 80011fa:	2864      	cmp	r0, #100	; 0x64
 80011fc:	d9f5      	bls.n	80011ea <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
 8001200:	e15f      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001202:	4b51      	ldr	r3, [pc, #324]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800120a:	d1a5      	bne.n	8001158 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120c:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f013 0f02 	tst.w	r3, #2
 8001214:	d003      	beq.n	800121e <HAL_RCC_OscConfig+0x152>
 8001216:	6923      	ldr	r3, [r4, #16]
 8001218:	2b01      	cmp	r3, #1
 800121a:	f040 814f 	bne.w	80014bc <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4a4a      	ldr	r2, [pc, #296]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001226:	6961      	ldr	r1, [r4, #20]
 8001228:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800122c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f013 0f08 	tst.w	r3, #8
 8001234:	d033      	beq.n	800129e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	69a3      	ldr	r3, [r4, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d05c      	beq.n	80012f6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <HAL_RCC_OscConfig+0x280>)
 800123e:	2201      	movs	r2, #1
 8001240:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001244:	f7ff fd34 	bl	8000cb0 <HAL_GetTick>
 8001248:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f013 0f02 	tst.w	r3, #2
 8001252:	d121      	bne.n	8001298 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fd2c 	bl	8000cb0 <HAL_GetTick>
 8001258:	1b40      	subs	r0, r0, r5
 800125a:	2802      	cmp	r0, #2
 800125c:	d9f5      	bls.n	800124a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800125e:	2003      	movs	r0, #3
 8001260:	e12f      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4a39      	ldr	r2, [pc, #228]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001264:	6813      	ldr	r3, [r2, #0]
 8001266:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800126a:	6961      	ldr	r1, [r4, #20]
 800126c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e7dc      	b.n	800122e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001274:	4b35      	ldr	r3, [pc, #212]	; (800134c <HAL_RCC_OscConfig+0x280>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800127a:	f7ff fd19 	bl	8000cb0 <HAL_GetTick>
 800127e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f013 0f02 	tst.w	r3, #2
 8001288:	d0d1      	beq.n	800122e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fd11 	bl	8000cb0 <HAL_GetTick>
 800128e:	1b40      	subs	r0, r0, r5
 8001290:	2802      	cmp	r0, #2
 8001292:	d9f5      	bls.n	8001280 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001294:	2003      	movs	r0, #3
 8001296:	e114      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ff01 	bl	80010a0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	f013 0f04 	tst.w	r3, #4
 80012a4:	f000 8096 	beq.w	80013d4 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012b0:	d134      	bne.n	800131c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 80012b4:	69da      	ldr	r2, [r3, #28]
 80012b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ba:	61da      	str	r2, [r3, #28]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012c6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x284>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012d0:	d026      	beq.n	8001320 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	68e3      	ldr	r3, [r4, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d03d      	beq.n	8001354 <HAL_RCC_OscConfig+0x288>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d153      	bne.n	8001384 <HAL_RCC_OscConfig+0x2b8>
 80012dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012e4:	6a1a      	ldr	r2, [r3, #32]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	621a      	str	r2, [r3, #32]
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	f022 0204 	bic.w	r2, r2, #4
 80012f2:	621a      	str	r2, [r3, #32]
 80012f4:	e033      	b.n	800135e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x280>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80012fe:	f7ff fcd7 	bl	8000cb0 <HAL_GetTick>
 8001302:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_OscConfig+0x27c>)
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	f013 0f02 	tst.w	r3, #2
 800130c:	d0c7      	beq.n	800129e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fccf 	bl	8000cb0 <HAL_GetTick>
 8001312:	1b40      	subs	r0, r0, r5
 8001314:	2802      	cmp	r0, #2
 8001316:	d9f5      	bls.n	8001304 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8001318:	2003      	movs	r0, #3
 800131a:	e0d2      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 800131c:	2500      	movs	r5, #0
 800131e:	e7d3      	b.n	80012c8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_RCC_OscConfig+0x284>)
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001328:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800132a:	f7ff fcc1 	bl	8000cb0 <HAL_GetTick>
 800132e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_RCC_OscConfig+0x284>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001338:	d1cb      	bne.n	80012d2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7ff fcb9 	bl	8000cb0 <HAL_GetTick>
 800133e:	1b80      	subs	r0, r0, r6
 8001340:	2864      	cmp	r0, #100	; 0x64
 8001342:	d9f5      	bls.n	8001330 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001344:	2003      	movs	r0, #3
 8001346:	e0bc      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
 8001348:	40021000 	.word	0x40021000
 800134c:	42420000 	.word	0x42420000
 8001350:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 8001356:	6a13      	ldr	r3, [r2, #32]
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135e:	68e3      	ldr	r3, [r4, #12]
 8001360:	b333      	cbz	r3, 80013b0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001362:	f7ff fca5 	bl	8000cb0 <HAL_GetTick>
 8001366:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	f013 0f02 	tst.w	r3, #2
 8001370:	d12f      	bne.n	80013d2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fc9d 	bl	8000cb0 <HAL_GetTick>
 8001376:	1b80      	subs	r0, r0, r6
 8001378:	f241 3388 	movw	r3, #5000	; 0x1388
 800137c:	4298      	cmp	r0, r3
 800137e:	d9f3      	bls.n	8001368 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001380:	2003      	movs	r0, #3
 8001382:	e09e      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	2b05      	cmp	r3, #5
 8001386:	d009      	beq.n	800139c <HAL_RCC_OscConfig+0x2d0>
 8001388:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	621a      	str	r2, [r3, #32]
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	f022 0204 	bic.w	r2, r2, #4
 8001398:	621a      	str	r2, [r3, #32]
 800139a:	e7e0      	b.n	800135e <HAL_RCC_OscConfig+0x292>
 800139c:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 800139e:	6a1a      	ldr	r2, [r3, #32]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	621a      	str	r2, [r3, #32]
 80013a6:	6a1a      	ldr	r2, [r3, #32]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	e7d6      	b.n	800135e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 80013b0:	f7ff fc7e 	bl	8000cb0 <HAL_GetTick>
 80013b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b6:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	f013 0f02 	tst.w	r3, #2
 80013be:	d008      	beq.n	80013d2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fc76 	bl	8000cb0 <HAL_GetTick>
 80013c4:	1b80      	subs	r0, r0, r6
 80013c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ca:	4298      	cmp	r0, r3
 80013cc:	d9f3      	bls.n	80013b6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80013ce:	2003      	movs	r0, #3
 80013d0:	e077      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80013d2:	b9e5      	cbnz	r5, 800140e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d4:	69e3      	ldr	r3, [r4, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d072      	beq.n	80014c0 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013da:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 80013dc:	6852      	ldr	r2, [r2, #4]
 80013de:	f002 020c 	and.w	r2, r2, #12
 80013e2:	2a08      	cmp	r2, #8
 80013e4:	d056      	beq.n	8001494 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d017      	beq.n	800141a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HAL_RCC_OscConfig+0x40c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc5e 	bl	8000cb0 <HAL_GetTick>
 80013f4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013fe:	d047      	beq.n	8001490 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff fc56 	bl	8000cb0 <HAL_GetTick>
 8001404:	1b00      	subs	r0, r0, r4
 8001406:	2802      	cmp	r0, #2
 8001408:	d9f5      	bls.n	80013f6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800140a:	2003      	movs	r0, #3
 800140c:	e059      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800140e:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 8001410:	69d3      	ldr	r3, [r2, #28]
 8001412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001416:	61d3      	str	r3, [r2, #28]
 8001418:	e7dc      	b.n	80013d4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_RCC_OscConfig+0x40c>)
 800141c:	2200      	movs	r2, #0
 800141e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001420:	f7ff fc46 	bl	8000cb0 <HAL_GetTick>
 8001424:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800142e:	d006      	beq.n	800143e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fc3e 	bl	8000cb0 <HAL_GetTick>
 8001434:	1b40      	subs	r0, r0, r5
 8001436:	2802      	cmp	r0, #2
 8001438:	d9f5      	bls.n	8001426 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
 800143c:	e041      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800143e:	6a23      	ldr	r3, [r4, #32]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d01a      	beq.n	800147c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001446:	4923      	ldr	r1, [pc, #140]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 8001448:	684b      	ldr	r3, [r1, #4]
 800144a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800144e:	6a22      	ldr	r2, [r4, #32]
 8001450:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001452:	4302      	orrs	r2, r0
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_RCC_OscConfig+0x40c>)
 800145a:	2201      	movs	r2, #1
 800145c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800145e:	f7ff fc27 	bl	8000cb0 <HAL_GetTick>
 8001462:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800146c:	d10e      	bne.n	800148c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff fc1f 	bl	8000cb0 <HAL_GetTick>
 8001472:	1b00      	subs	r0, r0, r4
 8001474:	2802      	cmp	r0, #2
 8001476:	d9f5      	bls.n	8001464 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001478:	2003      	movs	r0, #3
 800147a:	e022      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 800147e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001480:	f023 030f 	bic.w	r3, r3, #15
 8001484:	68a1      	ldr	r1, [r4, #8]
 8001486:	430b      	orrs	r3, r1
 8001488:	62d3      	str	r3, [r2, #44]	; 0x2c
 800148a:	e7dc      	b.n	8001446 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800148c:	2000      	movs	r0, #0
 800148e:	e018      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
 8001490:	2000      	movs	r0, #0
 8001492:	e016      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001494:	2b01      	cmp	r3, #1
 8001496:	d016      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_RCC_OscConfig+0x408>)
 800149a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80014a0:	6a22      	ldr	r2, [r4, #32]
 80014a2:	4291      	cmp	r1, r2
 80014a4:	d111      	bne.n	80014ca <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014a6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80014aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d10e      	bne.n	80014ce <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80014b0:	2000      	movs	r0, #0
 80014b2:	e006      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80014b4:	2001      	movs	r0, #1
}
 80014b6:	4770      	bx	lr
        return HAL_ERROR;
 80014b8:	2001      	movs	r0, #1
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80014bc:	2001      	movs	r0, #1
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80014c0:	2000      	movs	r0, #0
}
 80014c2:	b002      	add	sp, #8
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
 80014c8:	e7fb      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	e7f9      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
 80014ce:	2001      	movs	r0, #1
 80014d0:	e7f7      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f6>
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	42420000 	.word	0x42420000

080014dc <HAL_RCC_GetSysClockFreq>:
{
 80014dc:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_RCC_GetSysClockFreq+0x60>)
 80014e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e2:	f10d 0c20 	add.w	ip, sp, #32
 80014e6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_GetSysClockFreq+0x64>)
 80014ec:	46ec      	mov	ip, sp
 80014ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_GetSysClockFreq+0x68>)
 80014f6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014f8:	f003 020c 	and.w	r2, r3, #12
 80014fc:	2a08      	cmp	r2, #8
 80014fe:	d002      	beq.n	8001506 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8001500:	4811      	ldr	r0, [pc, #68]	; (8001548 <HAL_RCC_GetSysClockFreq+0x6c>)
}
 8001502:	b008      	add	sp, #32
 8001504:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001506:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800150a:	3220      	adds	r2, #32
 800150c:	446a      	add	r2, sp
 800150e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001512:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001516:	d00d      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_GetSysClockFreq+0x68>)
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	3320      	adds	r3, #32
 8001522:	446b      	add	r3, sp
 8001524:	f813 3c20 	ldrb.w	r3, [r3, #-32]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_RCC_GetSysClockFreq+0x6c>)
 800152a:	fb02 f000 	mul.w	r0, r2, r0
 800152e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001532:	e7e6      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x26>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_GetSysClockFreq+0x70>)
 8001536:	fb03 f000 	mul.w	r0, r3, r0
 800153a:	e7e2      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x26>
 800153c:	08014880 	.word	0x08014880
 8001540:	08014894 	.word	0x08014894
 8001544:	40021000 	.word	0x40021000
 8001548:	007a1200 	.word	0x007a1200
 800154c:	003d0900 	.word	0x003d0900

08001550 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001550:	2800      	cmp	r0, #0
 8001552:	d07b      	beq.n	800164c <HAL_RCC_ClockConfig+0xfc>
{
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	4604      	mov	r4, r0
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	6803      	ldr	r3, [r0, #0]
 800155a:	f013 0f02 	tst.w	r3, #2
 800155e:	d017      	beq.n	8001590 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	f013 0f04 	tst.w	r3, #4
 8001564:	d004      	beq.n	8001570 <HAL_RCC_ClockConfig+0x20>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001566:	4a3b      	ldr	r2, [pc, #236]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 8001568:	6853      	ldr	r3, [r2, #4]
 800156a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800156e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	f013 0f08 	tst.w	r3, #8
 8001576:	d004      	beq.n	8001582 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001578:	4a36      	ldr	r2, [pc, #216]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 800157a:	6853      	ldr	r3, [r2, #4]
 800157c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001580:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001582:	4a34      	ldr	r2, [pc, #208]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 8001584:	6853      	ldr	r3, [r2, #4]
 8001586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800158a:	68a1      	ldr	r1, [r4, #8]
 800158c:	430b      	orrs	r3, r1
 800158e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	f013 0f01 	tst.w	r3, #1
 8001596:	d031      	beq.n	80015fc <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001598:	6863      	ldr	r3, [r4, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d020      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x90>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d025      	beq.n	80015ee <HAL_RCC_ClockConfig+0x9e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	f012 0f02 	tst.w	r2, #2
 80015aa:	d051      	beq.n	8001650 <HAL_RCC_ClockConfig+0x100>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ac:	4929      	ldr	r1, [pc, #164]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 80015ae:	684a      	ldr	r2, [r1, #4]
 80015b0:	f022 0203 	bic.w	r2, r2, #3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80015b8:	f7ff fb7a 	bl	8000cb0 <HAL_GetTick>
 80015bc:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	6862      	ldr	r2, [r4, #4]
 80015c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015cc:	d016      	beq.n	80015fc <HAL_RCC_ClockConfig+0xac>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ce:	f7ff fb6f 	bl	8000cb0 <HAL_GetTick>
 80015d2:	1b40      	subs	r0, r0, r5
 80015d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80015d8:	4298      	cmp	r0, r3
 80015da:	d9f0      	bls.n	80015be <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80015dc:	2003      	movs	r0, #3
 80015de:	e034      	b.n	800164a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80015e8:	d1e0      	bne.n	80015ac <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
 80015ec:	e02d      	b.n	800164a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015f6:	d1d9      	bne.n	80015ac <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
 80015fa:	e026      	b.n	800164a <HAL_RCC_ClockConfig+0xfa>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	f013 0f04 	tst.w	r3, #4
 8001602:	d006      	beq.n	8001612 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 8001606:	6853      	ldr	r3, [r2, #4]
 8001608:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800160c:	68e1      	ldr	r1, [r4, #12]
 800160e:	430b      	orrs	r3, r1
 8001610:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	f013 0f08 	tst.w	r3, #8
 8001618:	d007      	beq.n	800162a <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 800161c:	6853      	ldr	r3, [r2, #4]
 800161e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001622:	6921      	ldr	r1, [r4, #16]
 8001624:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001628:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162a:	f7ff ff57 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x104>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_RCC_ClockConfig+0x108>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	40d8      	lsrs	r0, r3
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_RCC_ClockConfig+0x10c>)
 800163e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_RCC_ClockConfig+0x110>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	f7ff faf8 	bl	8000c38 <HAL_InitTick>
  return HAL_OK;
 8001648:	2000      	movs	r0, #0
}
 800164a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
}
 800164e:	4770      	bx	lr
        return HAL_ERROR;
 8001650:	2001      	movs	r0, #1
 8001652:	e7fa      	b.n	800164a <HAL_RCC_ClockConfig+0xfa>
 8001654:	40021000 	.word	0x40021000
 8001658:	08010f78 	.word	0x08010f78
 800165c:	20000018 	.word	0x20000018
 8001660:	20000020 	.word	0x20000020

08001664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001668:	4606      	mov	r6, r0
 800166a:	4688      	mov	r8, r1
 800166c:	4617      	mov	r7, r2
 800166e:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001670:	6834      	ldr	r4, [r6, #0]
 8001672:	68a4      	ldr	r4, [r4, #8]
 8001674:	ea38 0304 	bics.w	r3, r8, r4
 8001678:	bf0c      	ite	eq
 800167a:	f04f 0c01 	moveq.w	ip, #1
 800167e:	f04f 0c00 	movne.w	ip, #0
 8001682:	45bc      	cmp	ip, r7
 8001684:	d037      	beq.n	80016f6 <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001686:	f1b5 3fff 	cmp.w	r5, #4294967295
 800168a:	d0f1      	beq.n	8001670 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800168c:	f7ff fb10 	bl	8000cb0 <HAL_GetTick>
 8001690:	9b06      	ldr	r3, [sp, #24]
 8001692:	1ac0      	subs	r0, r0, r3
 8001694:	42a8      	cmp	r0, r5
 8001696:	d201      	bcs.n	800169c <SPI_WaitFlagStateUntilTimeout+0x38>
 8001698:	2d00      	cmp	r5, #0
 800169a:	d1e9      	bne.n	8001670 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800169c:	6832      	ldr	r2, [r6, #0]
 800169e:	6853      	ldr	r3, [r2, #4]
 80016a0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80016a4:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016a6:	6873      	ldr	r3, [r6, #4]
 80016a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016ac:	d00b      	beq.n	80016c6 <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80016b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b4:	d014      	beq.n	80016e0 <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80016bc:	2300      	movs	r3, #0
 80016be:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

        return HAL_TIMEOUT;
 80016c2:	2003      	movs	r0, #3
 80016c4:	e018      	b.n	80016f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016c6:	68b3      	ldr	r3, [r6, #8]
 80016c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016cc:	d002      	beq.n	80016d4 <SPI_WaitFlagStateUntilTimeout+0x70>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d1ec      	bne.n	80016ae <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 80016d4:	6832      	ldr	r2, [r6, #0]
 80016d6:	6813      	ldr	r3, [r2, #0]
 80016d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e7e6      	b.n	80016ae <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 80016e0:	6832      	ldr	r2, [r6, #0]
 80016e2:	6813      	ldr	r3, [r2, #0]
 80016e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	6832      	ldr	r2, [r6, #0]
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e7df      	b.n	80016b6 <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
}
 80016f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016fc:	b510      	push	{r4, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	4604      	mov	r4, r0
 8001702:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001704:	9200      	str	r2, [sp, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	f7ff ffab 	bl	8001664 <SPI_WaitFlagStateUntilTimeout>
 800170e:	b908      	cbnz	r0, 8001714 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8001710:	b002      	add	sp, #8
 8001712:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001714:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800171c:	2003      	movs	r0, #3
 800171e:	e7f7      	b.n	8001710 <SPI_EndRxTxTransaction+0x14>

08001720 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001720:	2800      	cmp	r0, #0
 8001722:	d033      	beq.n	800178c <HAL_SPI_Init+0x6c>
{
 8001724:	b510      	push	{r4, lr}
 8001726:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800172c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001730:	b33b      	cbz	r3, 8001782 <HAL_SPI_Init+0x62>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001732:	2302      	movs	r3, #2
 8001734:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001740:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	68a2      	ldr	r2, [r4, #8]
 8001746:	4313      	orrs	r3, r2
 8001748:	68e2      	ldr	r2, [r4, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	6922      	ldr	r2, [r4, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	6962      	ldr	r2, [r4, #20]
 8001752:	4313      	orrs	r3, r2
 8001754:	69a2      	ldr	r2, [r4, #24]
 8001756:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800175a:	4313      	orrs	r3, r2
 800175c:	69e2      	ldr	r2, [r4, #28]
 800175e:	4313      	orrs	r3, r2
 8001760:	6a22      	ldr	r2, [r4, #32]
 8001762:	4313      	orrs	r3, r2
 8001764:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001766:	6822      	ldr	r2, [r4, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800176c:	8b63      	ldrh	r3, [r4, #26]
 800176e:	6822      	ldr	r2, [r4, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001776:	2000      	movs	r0, #0
 8001778:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800177a:	2301      	movs	r3, #1
 800177c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001780:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001782:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001786:	f7ff f9af 	bl	8000ae8 <HAL_SPI_MspInit>
 800178a:	e7d2      	b.n	8001732 <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
}
 800178e:	4770      	bx	lr

08001790 <HAL_SPI_Transmit>:
{
 8001790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001794:	b083      	sub	sp, #12
 8001796:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8001798:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800179c:	2b01      	cmp	r3, #1
 800179e:	f000 80cc 	beq.w	800193a <HAL_SPI_Transmit+0x1aa>
 80017a2:	4604      	mov	r4, r0
 80017a4:	4688      	mov	r8, r1
 80017a6:	4691      	mov	r9, r2
 80017a8:	2301      	movs	r3, #1
 80017aa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80017ae:	f7ff fa7f 	bl	8000cb0 <HAL_GetTick>
 80017b2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80017b4:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80017b8:	b2f6      	uxtb	r6, r6
 80017ba:	2e01      	cmp	r6, #1
 80017bc:	f040 80aa 	bne.w	8001914 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80017c0:	f1b8 0f00 	cmp.w	r8, #0
 80017c4:	f000 80a7 	beq.w	8001916 <HAL_SPI_Transmit+0x186>
 80017c8:	f1b9 0f00 	cmp.w	r9, #0
 80017cc:	f000 80a3 	beq.w	8001916 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80017da:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80017de:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017e2:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017e6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80017e8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017ec:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017ee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017f0:	68a3      	ldr	r3, [r4, #8]
 80017f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017f6:	d01e      	beq.n	8001836 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001800:	d103      	bne.n	800180a <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001808:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800180a:	68e3      	ldr	r3, [r4, #12]
 800180c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001810:	d017      	beq.n	8001842 <HAL_SPI_Transmit+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001812:	6863      	ldr	r3, [r4, #4]
 8001814:	b113      	cbz	r3, 800181c <HAL_SPI_Transmit+0x8c>
 8001816:	f1b9 0f01 	cmp.w	r9, #1
 800181a:	d14d      	bne.n	80018b8 <HAL_SPI_Transmit+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800181c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001824:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001826:	3301      	adds	r3, #1
 8001828:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800182a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001834:	e040      	b.n	80018b8 <HAL_SPI_Transmit+0x128>
    SPI_1LINE_TX(hspi);
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e7da      	b.n	80017f8 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001842:	6863      	ldr	r3, [r4, #4]
 8001844:	b113      	cbz	r3, 800184c <HAL_SPI_Transmit+0xbc>
 8001846:	f1b9 0f01 	cmp.w	r9, #1
 800184a:	d116      	bne.n	800187a <HAL_SPI_Transmit+0xea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800184c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001854:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001856:	3302      	adds	r3, #2
 8001858:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800185a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001864:	e009      	b.n	800187a <HAL_SPI_Transmit+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001866:	f7ff fa23 	bl	8000cb0 <HAL_GetTick>
 800186a:	1bc0      	subs	r0, r0, r7
 800186c:	42a8      	cmp	r0, r5
 800186e:	d302      	bcc.n	8001876 <HAL_SPI_Transmit+0xe6>
 8001870:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001874:	d159      	bne.n	800192a <HAL_SPI_Transmit+0x19a>
 8001876:	2d00      	cmp	r5, #0
 8001878:	d059      	beq.n	800192e <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 800187a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d033      	beq.n	80018ea <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	f012 0f02 	tst.w	r2, #2
 800188a:	d0ec      	beq.n	8001866 <HAL_SPI_Transmit+0xd6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800188c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800188e:	8812      	ldrh	r2, [r2, #0]
 8001890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001892:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001894:	3302      	adds	r3, #2
 8001896:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001898:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29b      	uxth	r3, r3
 80018a0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80018a2:	e7ea      	b.n	800187a <HAL_SPI_Transmit+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018a4:	f7ff fa04 	bl	8000cb0 <HAL_GetTick>
 80018a8:	1bc0      	subs	r0, r0, r7
 80018aa:	42a8      	cmp	r0, r5
 80018ac:	d302      	bcc.n	80018b4 <HAL_SPI_Transmit+0x124>
 80018ae:	f1b5 3fff 	cmp.w	r5, #4294967295
 80018b2:	d13e      	bne.n	8001932 <HAL_SPI_Transmit+0x1a2>
 80018b4:	2d00      	cmp	r5, #0
 80018b6:	d03e      	beq.n	8001936 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 80018b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b1ab      	cbz	r3, 80018ea <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	f012 0f02 	tst.w	r2, #2
 80018c6:	d0ed      	beq.n	80018a4 <HAL_SPI_Transmit+0x114>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018d0:	3301      	adds	r3, #1
 80018d2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80018d4:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 80018d8:	fa1f fc8c 	uxth.w	ip, ip
 80018dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80018e0:	fa1f fc8c 	uxth.w	ip, ip
 80018e4:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 80018e8:	e7e6      	b.n	80018b8 <HAL_SPI_Transmit+0x128>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018ea:	463a      	mov	r2, r7
 80018ec:	4629      	mov	r1, r5
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff ff04 	bl	80016fc <SPI_EndRxTxTransaction>
 80018f4:	b108      	cbz	r0, 80018fa <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018f6:	2320      	movs	r3, #32
 80018f8:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018fa:	68a3      	ldr	r3, [r4, #8]
 80018fc:	b933      	cbnz	r3, 800190c <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	9201      	str	r2, [sp, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800190c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800190e:	b913      	cbnz	r3, 8001916 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001910:	2600      	movs	r6, #0
 8001912:	e000      	b.n	8001916 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8001914:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001916:	2301      	movs	r3, #1
 8001918:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800191c:	2300      	movs	r3, #0
 800191e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001922:	4630      	mov	r0, r6
 8001924:	b003      	add	sp, #12
 8001926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800192a:	2603      	movs	r6, #3
 800192c:	e7f3      	b.n	8001916 <HAL_SPI_Transmit+0x186>
 800192e:	2603      	movs	r6, #3
 8001930:	e7f1      	b.n	8001916 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8001932:	2603      	movs	r6, #3
 8001934:	e7ef      	b.n	8001916 <HAL_SPI_Transmit+0x186>
 8001936:	2603      	movs	r6, #3
 8001938:	e7ed      	b.n	8001916 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 800193a:	2602      	movs	r6, #2
 800193c:	e7f1      	b.n	8001922 <HAL_SPI_Transmit+0x192>

0800193e <HAL_SPI_ErrorCallback>:
}
 800193e:	4770      	bx	lr

08001940 <HAL_SPI_IRQHandler>:
{
 8001940:	b530      	push	{r4, r5, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8001946:	6802      	ldr	r2, [r0, #0]
 8001948:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800194a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800194c:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8001950:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001954:	d105      	bne.n	8001962 <HAL_SPI_IRQHandler+0x22>
 8001956:	f013 0f01 	tst.w	r3, #1
 800195a:	d002      	beq.n	8001962 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800195c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001960:	d15a      	bne.n	8001a18 <HAL_SPI_IRQHandler+0xd8>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001962:	f013 0f02 	tst.w	r3, #2
 8001966:	d002      	beq.n	800196e <HAL_SPI_IRQHandler+0x2e>
 8001968:	f011 0f80 	tst.w	r1, #128	; 0x80
 800196c:	d158      	bne.n	8001a20 <HAL_SPI_IRQHandler+0xe0>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800196e:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8001972:	f013 0f20 	tst.w	r3, #32
 8001976:	d101      	bne.n	800197c <HAL_SPI_IRQHandler+0x3c>
 8001978:	2800      	cmp	r0, #0
 800197a:	d054      	beq.n	8001a26 <HAL_SPI_IRQHandler+0xe6>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800197c:	f011 0f20 	tst.w	r1, #32
 8001980:	d051      	beq.n	8001a26 <HAL_SPI_IRQHandler+0xe6>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001982:	b178      	cbz	r0, 80019a4 <HAL_SPI_IRQHandler+0x64>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001984:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b03      	cmp	r3, #3
 800198c:	d04d      	beq.n	8001a2a <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800198e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001996:	2300      	movs	r3, #0
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	68d3      	ldr	r3, [r2, #12]
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	6893      	ldr	r3, [r2, #8]
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	9b01      	ldr	r3, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80019a4:	b165      	cbz	r5, 80019c0 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80019a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	6893      	ldr	r3, [r2, #8]
 80019b4:	9303      	str	r3, [sp, #12]
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d02f      	beq.n	8001a26 <HAL_SPI_IRQHandler+0xe6>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	6853      	ldr	r3, [r2, #4]
 80019ca:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80019ce:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80019d6:	f011 0f03 	tst.w	r1, #3
 80019da:	d02e      	beq.n	8001a3a <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	6853      	ldr	r3, [r2, #4]
 80019e0:	f023 0303 	bic.w	r3, r3, #3
 80019e4:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80019e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80019e8:	b14b      	cbz	r3, 80019fe <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80019ea:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <HAL_SPI_IRQHandler+0x104>)
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80019ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80019f0:	f7ff f9e4 	bl	8000dbc <HAL_DMA_Abort_IT>
 80019f4:	b118      	cbz	r0, 80019fe <HAL_SPI_IRQHandler+0xbe>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80019f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fc:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80019fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a00:	b18b      	cbz	r3, 8001a26 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_SPI_IRQHandler+0x104>)
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001a06:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a08:	f7ff f9d8 	bl	8000dbc <HAL_DMA_Abort_IT>
 8001a0c:	b158      	cbz	r0, 8001a26 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a14:	6563      	str	r3, [r4, #84]	; 0x54
 8001a16:	e006      	b.n	8001a26 <HAL_SPI_IRQHandler+0xe6>
    hspi->RxISR(hspi);
 8001a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4798      	blx	r3
    return;
 8001a1e:	e002      	b.n	8001a26 <HAL_SPI_IRQHandler+0xe6>
    hspi->TxISR(hspi);
 8001a20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a22:	4620      	mov	r0, r4
 8001a24:	4798      	blx	r3
}
 8001a26:	b005      	add	sp, #20
 8001a28:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	68d3      	ldr	r3, [r2, #12]
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	6893      	ldr	r3, [r2, #8]
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	9b02      	ldr	r3, [sp, #8]
        return;
 8001a38:	e7f5      	b.n	8001a26 <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff ff7f 	bl	800193e <HAL_SPI_ErrorCallback>
    return;
 8001a40:	e7f1      	b.n	8001a26 <HAL_SPI_IRQHandler+0xe6>
 8001a42:	bf00      	nop
 8001a44:	08001a49 	.word	0x08001a49

08001a48 <SPI_DMAAbortOnError>:
{
 8001a48:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001a50:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8001a52:	f7ff ff74 	bl	800193e <HAL_SPI_ErrorCallback>
}
 8001a56:	bd08      	pop	{r3, pc}

08001a58 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8001a58:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b110      	cbz	r0, 8001a64 <lv_disp_get_scr_act+0xc>
    if(!disp) {
 8001a5e:	b12b      	cbz	r3, 8001a6c <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8001a60:	6918      	ldr	r0, [r3, #16]
}
 8001a62:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8001a64:	f009 f9bc 	bl	800ade0 <lv_disp_get_default>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	e7f8      	b.n	8001a5e <lv_disp_get_scr_act+0x6>
        return NULL;
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	e7f8      	b.n	8001a62 <lv_disp_get_scr_act+0xa>

08001a70 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8001a70:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001a72:	4603      	mov	r3, r0
 8001a74:	b110      	cbz	r0, 8001a7c <lv_disp_get_scr_prev+0xc>
    if(!disp) {
 8001a76:	b12b      	cbz	r3, 8001a84 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8001a78:	6958      	ldr	r0, [r3, #20]
}
 8001a7a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8001a7c:	f009 f9b0 	bl	800ade0 <lv_disp_get_default>
 8001a80:	4603      	mov	r3, r0
 8001a82:	e7f8      	b.n	8001a76 <lv_disp_get_scr_prev+0x6>
        return NULL;
 8001a84:	4618      	mov	r0, r3
 8001a86:	e7f8      	b.n	8001a7a <lv_disp_get_scr_prev+0xa>

08001a88 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8001a88:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b110      	cbz	r0, 8001a94 <lv_disp_get_layer_top+0xc>
    if(!disp) {
 8001a8e:	b12b      	cbz	r3, 8001a9c <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8001a90:	69d8      	ldr	r0, [r3, #28]
}
 8001a92:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8001a94:	f009 f9a4 	bl	800ade0 <lv_disp_get_default>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	e7f8      	b.n	8001a8e <lv_disp_get_layer_top+0x6>
        return NULL;
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	e7f8      	b.n	8001a92 <lv_disp_get_layer_top+0xa>

08001aa0 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8001aa0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b110      	cbz	r0, 8001aac <lv_disp_get_layer_sys+0xc>
    if(!disp) {
 8001aa6:	b12b      	cbz	r3, 8001ab4 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8001aa8:	6a18      	ldr	r0, [r3, #32]
}
 8001aaa:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8001aac:	f009 f998 	bl	800ade0 <lv_disp_get_default>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	e7f8      	b.n	8001aa6 <lv_disp_get_layer_sys+0x6>
        return NULL;
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	e7f8      	b.n	8001aaa <lv_disp_get_layer_sys+0xa>

08001ab8 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8001ab8:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8001aba:	4603      	mov	r3, r0
 8001abc:	b108      	cbz	r0, 8001ac2 <lv_disp_get_theme+0xa>
    return disp->theme;
}
 8001abe:	6898      	ldr	r0, [r3, #8]
 8001ac0:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 8001ac2:	f009 f98d 	bl	800ade0 <lv_disp_get_default>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	e7f9      	b.n	8001abe <lv_disp_get_theme+0x6>

08001aca <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 8001aca:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001acc:	4603      	mov	r3, r0
 8001ace:	b138      	cbz	r0, 8001ae0 <lv_disp_is_invalidation_enabled+0x16>
    if(!disp) {
 8001ad0:	b153      	cbz	r3, 8001ae8 <lv_disp_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
    }

    return (disp->inv_en_cnt > 0);
 8001ad2:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	bfd4      	ite	le
 8001ada:	2000      	movle	r0, #0
 8001adc:	2001      	movgt	r0, #1
}
 8001ade:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8001ae0:	f009 f97e 	bl	800ade0 <lv_disp_get_default>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	e7f3      	b.n	8001ad0 <lv_disp_is_invalidation_enabled+0x6>
        return false;
 8001ae8:	2000      	movs	r0, #0
 8001aea:	e7f8      	b.n	8001ade <lv_disp_is_invalidation_enabled+0x14>

08001aec <lv_obj_get_event_dsc>:

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8001aec:	6880      	ldr	r0, [r0, #8]
 8001aee:	b158      	cbz	r0, 8001b08 <lv_obj_get_event_dsc+0x1c>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001af0:	7e83      	ldrb	r3, [r0, #26]
 8001af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af6:	428b      	cmp	r3, r1
 8001af8:	d905      	bls.n	8001b06 <lv_obj_get_event_dsc+0x1a>

    return &obj->spec_attr->event_dsc[id];
 8001afa:	68c0      	ldr	r0, [r0, #12]
 8001afc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001b00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001b04:	4770      	bx	lr
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001b06:	2000      	movs	r0, #0
}
 8001b08:	4770      	bx	lr
	...

08001b0c <event_is_bubbled>:
    return res;
}

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 8001b0c:	7e03      	ldrb	r3, [r0, #24]
 8001b0e:	f013 0f04 	tst.w	r3, #4
 8001b12:	d14f      	bne.n	8001bb4 <event_is_bubbled+0xa8>
{
 8001b14:	b510      	push	{r4, lr}
 8001b16:	4604      	mov	r4, r0

    /*Event codes that always bubble*/
    switch(e->code) {
 8001b18:	7a03      	ldrb	r3, [r0, #8]
 8001b1a:	3b23      	subs	r3, #35	; 0x23
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d801      	bhi.n	8001b24 <event_is_bubbled+0x18>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8001b20:	2001      	movs	r0, #1
        case LV_EVENT_GET_SELF_SIZE:
            return false;
        default:
            return true;
    }
}
 8001b22:	bd10      	pop	{r4, pc}
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8001b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b28:	6840      	ldr	r0, [r0, #4]
 8001b2a:	f000 ffa9 	bl	8002a80 <lv_obj_has_flag>
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d0f7      	beq.n	8001b22 <event_is_bubbled+0x16>
    switch(e->code) {
 8001b32:	7a23      	ldrb	r3, [r4, #8]
 8001b34:	3b11      	subs	r3, #17
 8001b36:	2b1b      	cmp	r3, #27
 8001b38:	d8f3      	bhi.n	8001b22 <event_is_bubbled+0x16>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <event_is_bubbled+0x34>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001bb1 	.word	0x08001bb1
 8001b44:	08001bb1 	.word	0x08001bb1
 8001b48:	08001bb1 	.word	0x08001bb1
 8001b4c:	08001bb1 	.word	0x08001bb1
 8001b50:	08001bb1 	.word	0x08001bb1
 8001b54:	08001bb1 	.word	0x08001bb1
 8001b58:	08001bb1 	.word	0x08001bb1
 8001b5c:	08001bb1 	.word	0x08001bb1
 8001b60:	08001bb1 	.word	0x08001bb1
 8001b64:	08001bb1 	.word	0x08001bb1
 8001b68:	08001bb1 	.word	0x08001bb1
 8001b6c:	08001b23 	.word	0x08001b23
 8001b70:	08001b23 	.word	0x08001b23
 8001b74:	08001bb1 	.word	0x08001bb1
 8001b78:	08001b23 	.word	0x08001b23
 8001b7c:	08001b23 	.word	0x08001b23
 8001b80:	08001bb1 	.word	0x08001bb1
 8001b84:	08001bb1 	.word	0x08001bb1
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	08001bb1 	.word	0x08001bb1
 8001b90:	08001b23 	.word	0x08001b23
 8001b94:	08001b23 	.word	0x08001b23
 8001b98:	08001b23 	.word	0x08001b23
 8001b9c:	08001b23 	.word	0x08001b23
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bb1 	.word	0x08001bb1
 8001ba8:	08001b23 	.word	0x08001b23
 8001bac:	08001bb1 	.word	0x08001bb1
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	e7b6      	b.n	8001b22 <event_is_bubbled+0x16>
    if(e->stop_bubbling) return false;
 8001bb4:	2000      	movs	r0, #0
}
 8001bb6:	4770      	bx	lr

08001bb8 <lv_obj_event_base>:
{
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 8001bbc:	b108      	cbz	r0, 8001bc2 <lv_obj_event_base+0xa>
    else base = class_p->base_class;
 8001bbe:	6800      	ldr	r0, [r0, #0]
 8001bc0:	e003      	b.n	8001bca <lv_obj_event_base+0x12>
    if(class_p == NULL) base = e->current_target->class_p;
 8001bc2:	684b      	ldr	r3, [r1, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	e000      	b.n	8001bca <lv_obj_event_base+0x12>
    while(base && base->event_cb == NULL) base = base->base_class;
 8001bc8:	6800      	ldr	r0, [r0, #0]
 8001bca:	b110      	cbz	r0, 8001bd2 <lv_obj_event_base+0x1a>
 8001bcc:	6903      	ldr	r3, [r0, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0fa      	beq.n	8001bc8 <lv_obj_event_base+0x10>
    if(base == NULL) return LV_RES_OK;
 8001bd2:	b160      	cbz	r0, 8001bee <lv_obj_event_base+0x36>
    if(base->event_cb == NULL) return LV_RES_OK;
 8001bd4:	6903      	ldr	r3, [r0, #16]
 8001bd6:	b163      	cbz	r3, 8001bf2 <lv_obj_event_base+0x3a>
    e->user_data = NULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60e3      	str	r3, [r4, #12]
    base->event_cb(base, e);
 8001bdc:	6903      	ldr	r3, [r0, #16]
 8001bde:	4621      	mov	r1, r4
 8001be0:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 8001be2:	7e23      	ldrb	r3, [r4, #24]
 8001be4:	f013 0f01 	tst.w	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <lv_obj_event_base+0x3e>
    lv_res_t res = LV_RES_OK;
 8001bea:	2001      	movs	r0, #1
}
 8001bec:	bd10      	pop	{r4, pc}
    if(base == NULL) return LV_RES_OK;
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e7fc      	b.n	8001bec <lv_obj_event_base+0x34>
    if(base->event_cb == NULL) return LV_RES_OK;
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	e7fa      	b.n	8001bec <lv_obj_event_base+0x34>
    if(e->deleted) res = LV_RES_INV;
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	e7f8      	b.n	8001bec <lv_obj_event_base+0x34>

08001bfa <event_send_core>:
{
 8001bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfc:	4606      	mov	r6, r0
    lv_indev_t * indev_act = lv_indev_get_act();
 8001bfe:	f000 fa8b 	bl	8002118 <lv_indev_get_act>
    if(indev_act) {
 8001c02:	b158      	cbz	r0, 8001c1c <event_send_core+0x22>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8001c04:	6800      	ldr	r0, [r0, #0]
 8001c06:	6883      	ldr	r3, [r0, #8]
 8001c08:	b10b      	cbz	r3, 8001c0e <event_send_core+0x14>
 8001c0a:	7a31      	ldrb	r1, [r6, #8]
 8001c0c:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8001c0e:	7e33      	ldrb	r3, [r6, #24]
 8001c10:	f013 0702 	ands.w	r7, r3, #2
 8001c14:	d174      	bne.n	8001d00 <event_send_core+0x106>
        if(e->deleted) return LV_RES_INV;
 8001c16:	f013 0f01 	tst.w	r3, #1
 8001c1a:	d15b      	bne.n	8001cd4 <event_send_core+0xda>
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	6870      	ldr	r0, [r6, #4]
 8001c20:	f7ff ff64 	bl	8001aec <lv_obj_get_event_dsc>
 8001c24:	4604      	mov	r4, r0
    uint32_t i = 0;
 8001c26:	2500      	movs	r5, #0
    while(event_dsc && res == LV_RES_OK) {
 8001c28:	e011      	b.n	8001c4e <event_send_core+0x54>
            e->user_data = event_dsc->user_data;
 8001c2a:	6863      	ldr	r3, [r4, #4]
 8001c2c:	60f3      	str	r3, [r6, #12]
            event_dsc->cb(e);
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	4630      	mov	r0, r6
 8001c32:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8001c34:	7e33      	ldrb	r3, [r6, #24]
 8001c36:	f013 0702 	ands.w	r7, r3, #2
 8001c3a:	d163      	bne.n	8001d04 <event_send_core+0x10a>
            if(e->deleted) return LV_RES_INV;
 8001c3c:	f013 0f01 	tst.w	r3, #1
 8001c40:	d148      	bne.n	8001cd4 <event_send_core+0xda>
        i++;
 8001c42:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001c44:	4629      	mov	r1, r5
 8001c46:	6870      	ldr	r0, [r6, #4]
 8001c48:	f7ff ff50 	bl	8001aec <lv_obj_get_event_dsc>
 8001c4c:	4604      	mov	r4, r0
    while(event_dsc && res == LV_RES_OK) {
 8001c4e:	b17c      	cbz	r4, 8001c70 <event_send_core+0x76>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f5      	beq.n	8001c42 <event_send_core+0x48>
 8001c56:	7a23      	ldrb	r3, [r4, #8]
 8001c58:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	daf0      	bge.n	8001c42 <event_send_core+0x48>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	d0e2      	beq.n	8001c2a <event_send_core+0x30>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8001c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c68:	7a32      	ldrb	r2, [r6, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d1e9      	bne.n	8001c42 <event_send_core+0x48>
 8001c6e:	e7dc      	b.n	8001c2a <event_send_core+0x30>
    res = lv_obj_event_base(NULL, e);
 8001c70:	4631      	mov	r1, r6
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff ffa0 	bl	8001bb8 <lv_obj_event_base>
    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8001c78:	4607      	mov	r7, r0
 8001c7a:	b120      	cbz	r0, 8001c86 <event_send_core+0x8c>
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	6870      	ldr	r0, [r6, #4]
 8001c80:	f7ff ff34 	bl	8001aec <lv_obj_get_event_dsc>
 8001c84:	4604      	mov	r4, r0
    uint32_t i = 0;
 8001c86:	2500      	movs	r5, #0
 8001c88:	e011      	b.n	8001cae <event_send_core+0xb4>
            e->user_data = event_dsc->user_data;
 8001c8a:	6863      	ldr	r3, [r4, #4]
 8001c8c:	60f3      	str	r3, [r6, #12]
            event_dsc->cb(e);
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	4630      	mov	r0, r6
 8001c92:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8001c94:	7e33      	ldrb	r3, [r6, #24]
 8001c96:	f013 0202 	ands.w	r2, r3, #2
 8001c9a:	d11b      	bne.n	8001cd4 <event_send_core+0xda>
            if(e->deleted) return LV_RES_INV;
 8001c9c:	f013 0f01 	tst.w	r3, #1
 8001ca0:	d132      	bne.n	8001d08 <event_send_core+0x10e>
        i++;
 8001ca2:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	6870      	ldr	r0, [r6, #4]
 8001ca8:	f7ff ff20 	bl	8001aec <lv_obj_get_event_dsc>
 8001cac:	4604      	mov	r4, r0
    while(event_dsc && res == LV_RES_OK) {
 8001cae:	b17c      	cbz	r4, 8001cd0 <event_send_core+0xd6>
 8001cb0:	2f01      	cmp	r7, #1
 8001cb2:	d10d      	bne.n	8001cd0 <event_send_core+0xd6>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f3      	beq.n	8001ca2 <event_send_core+0xa8>
 8001cba:	7a22      	ldrb	r2, [r4, #8]
 8001cbc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dbee      	blt.n	8001ca2 <event_send_core+0xa8>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d0e0      	beq.n	8001c8a <event_send_core+0x90>
 8001cc8:	7a33      	ldrb	r3, [r6, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d1e9      	bne.n	8001ca2 <event_send_core+0xa8>
 8001cce:	e7dc      	b.n	8001c8a <event_send_core+0x90>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8001cd0:	2f01      	cmp	r7, #1
 8001cd2:	d001      	beq.n	8001cd8 <event_send_core+0xde>
}
 8001cd4:	4638      	mov	r0, r7
 8001cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8001cd8:	6873      	ldr	r3, [r6, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f9      	beq.n	8001cd4 <event_send_core+0xda>
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f7ff ff13 	bl	8001b0c <event_is_bubbled>
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d0f4      	beq.n	8001cd4 <event_send_core+0xda>
        e->current_target = e->current_target->parent;
 8001cea:	6873      	ldr	r3, [r6, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	6073      	str	r3, [r6, #4]
        res = event_send_core(e);
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7ff ff82 	bl	8001bfa <event_send_core>
 8001cf6:	4607      	mov	r7, r0
        if(res != LV_RES_OK) return LV_RES_INV;
 8001cf8:	2801      	cmp	r0, #1
 8001cfa:	d0eb      	beq.n	8001cd4 <event_send_core+0xda>
 8001cfc:	2700      	movs	r7, #0
 8001cfe:	e7e9      	b.n	8001cd4 <event_send_core+0xda>
        if(e->stop_processing) return LV_RES_OK;
 8001d00:	2701      	movs	r7, #1
 8001d02:	e7e7      	b.n	8001cd4 <event_send_core+0xda>
            if(e->stop_processing) return LV_RES_OK;
 8001d04:	2701      	movs	r7, #1
 8001d06:	e7e5      	b.n	8001cd4 <event_send_core+0xda>
            if(e->deleted) return LV_RES_INV;
 8001d08:	4617      	mov	r7, r2
 8001d0a:	e7e3      	b.n	8001cd4 <event_send_core+0xda>

08001d0c <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
 8001d0c:	b318      	cbz	r0, 8001d56 <lv_event_send+0x4a>
{
 8001d0e:	b510      	push	{r4, lr}
 8001d10:	b088      	sub	sp, #32
    e.target = obj;
 8001d12:	9001      	str	r0, [sp, #4]
    e.current_target = obj;
 8001d14:	9002      	str	r0, [sp, #8]
    e.code = event_code;
 8001d16:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9304      	str	r3, [sp, #16]
    e.param = param;
 8001d1e:	9205      	str	r2, [sp, #20]
    e.deleted = 0;
 8001d20:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8001d24:	f363 0200 	bfi	r2, r3, #0, #1
 8001d28:	f88d 201c 	strb.w	r2, [sp, #28]
    e.stop_bubbling = 0;
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f363 0282 	bfi	r2, r3, #2, #1
 8001d32:	f88d 201c 	strb.w	r2, [sp, #28]
    e.stop_processing = 0;
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f363 0241 	bfi	r2, r3, #1, #1
 8001d3c:	f88d 201c 	strb.w	r2, [sp, #28]
    e.prev = event_head;
 8001d40:	4c06      	ldr	r4, [pc, #24]	; (8001d5c <lv_event_send+0x50>)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	9306      	str	r3, [sp, #24]
    event_head = &e;
 8001d46:	a801      	add	r0, sp, #4
 8001d48:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8001d4a:	f7ff ff56 	bl	8001bfa <event_send_core>
    event_head = e.prev;
 8001d4e:	9b06      	ldr	r3, [sp, #24]
 8001d50:	6023      	str	r3, [r4, #0]
}
 8001d52:	b008      	add	sp, #32
 8001d54:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8001d56:	2001      	movs	r0, #1
}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000b38 	.word	0x20000b38

08001d60 <lv_event_get_target>:
}
 8001d60:	6800      	ldr	r0, [r0, #0]
 8001d62:	4770      	bx	lr

08001d64 <lv_event_get_current_target>:
}
 8001d64:	6840      	ldr	r0, [r0, #4]
 8001d66:	4770      	bx	lr

08001d68 <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 8001d68:	7a00      	ldrb	r0, [r0, #8]
}
 8001d6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001d6e:	4770      	bx	lr

08001d70 <lv_event_get_param>:
}
 8001d70:	6900      	ldr	r0, [r0, #16]
 8001d72:	4770      	bx	lr

08001d74 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_lv_event_mark_deleted+0x24>)
 8001d76:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8001d78:	e004      	b.n	8001d84 <_lv_event_mark_deleted+0x10>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8001d7a:	7e1a      	ldrb	r2, [r3, #24]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8001d82:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8001d84:	b133      	cbz	r3, 8001d94 <_lv_event_mark_deleted+0x20>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4282      	cmp	r2, r0
 8001d8a:	d0f6      	beq.n	8001d7a <_lv_event_mark_deleted+0x6>
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4282      	cmp	r2, r0
 8001d90:	d1f7      	bne.n	8001d82 <_lv_event_mark_deleted+0xe>
 8001d92:	e7f2      	b.n	8001d7a <_lv_event_mark_deleted+0x6>
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000b38 	.word	0x20000b38

08001d9c <lv_event_get_indev>:
{
 8001d9c:	b508      	push	{r3, lr}
    if(e->code == LV_EVENT_PRESSED ||
 8001d9e:	7a03      	ldrb	r3, [r0, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b2db      	uxtb	r3, r3
    if(e->code == LV_EVENT_PRESSED ||
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d802      	bhi.n	8001dae <lv_event_get_indev+0x12>
        return lv_event_get_param(e);
 8001da8:	f7ff ffe2 	bl	8001d70 <lv_event_get_param>
}
 8001dac:	bd08      	pop	{r3, pc}
        return NULL;
 8001dae:	2000      	movs	r0, #0
 8001db0:	e7fc      	b.n	8001dac <lv_event_get_indev+0x10>

08001db2 <lv_event_get_draw_ctx>:
{
 8001db2:	b508      	push	{r3, lr}
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8001db4:	7a02      	ldrb	r2, [r0, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8001db6:	f1a2 0314 	sub.w	r3, r2, #20
 8001dba:	b2db      	uxtb	r3, r3
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d905      	bls.n	8001dcc <lv_event_get_draw_ctx+0x1a>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8001dc0:	2a18      	cmp	r2, #24
 8001dc2:	d003      	beq.n	8001dcc <lv_event_get_draw_ctx+0x1a>
       e->code == LV_EVENT_DRAW_POST ||
 8001dc4:	2a17      	cmp	r2, #23
 8001dc6:	d001      	beq.n	8001dcc <lv_event_get_draw_ctx+0x1a>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8001dc8:	2a19      	cmp	r2, #25
 8001dca:	d102      	bne.n	8001dd2 <lv_event_get_draw_ctx+0x20>
        return lv_event_get_param(e);
 8001dcc:	f7ff ffd0 	bl	8001d70 <lv_event_get_param>
}
 8001dd0:	bd08      	pop	{r3, pc}
        return NULL;
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e7fc      	b.n	8001dd0 <lv_event_get_draw_ctx+0x1e>

08001dd6 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8001dd6:	7a03      	ldrb	r3, [r0, #8]
 8001dd8:	2b13      	cmp	r3, #19
 8001dda:	d000      	beq.n	8001dde <lv_event_set_ext_draw_size+0x8>
 8001ddc:	4770      	bx	lr
{
 8001dde:	b510      	push	{r4, lr}
 8001de0:	460c      	mov	r4, r1
        lv_coord_t * cur_size = lv_event_get_param(e);
 8001de2:	f7ff ffc5 	bl	8001d70 <lv_event_get_param>
        *cur_size = LV_MAX(*cur_size, size);
 8001de6:	f9b0 1000 	ldrsh.w	r1, [r0]
 8001dea:	42a1      	cmp	r1, r4
 8001dec:	bfb8      	it	lt
 8001dee:	4621      	movlt	r1, r4
 8001df0:	8001      	strh	r1, [r0, #0]
}
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	4605      	mov	r5, r0
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f009 f83f 	bl	800ae7c <lv_indev_get_next>
 8001dfe:	4604      	mov	r4, r0
    lv_indev_t * indev_group = NULL;
 8001e00:	2600      	movs	r6, #0
    lv_indev_t * indev_encoder = NULL;
 8001e02:	4637      	mov	r7, r6
    while(indev) {
 8001e04:	e005      	b.n	8001e12 <get_indev+0x1e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
        if(indev->group == g) {
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
            indev_group = indev;
 8001e06:	4626      	mov	r6, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8001e08:	4627      	mov	r7, r4
        }
        indev = lv_indev_get_next(indev);
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f009 f836 	bl	800ae7c <lv_indev_get_next>
 8001e10:	4604      	mov	r4, r0
    while(indev) {
 8001e12:	b15c      	cbz	r4, 8001e2c <get_indev+0x38>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8001e14:	4620      	mov	r0, r4
 8001e16:	f000 f985 	bl	8002124 <lv_indev_get_type>
        if(indev->group == g) {
 8001e1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e1c:	42ab      	cmp	r3, r5
 8001e1e:	d1f4      	bne.n	8001e0a <get_indev+0x16>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8001e20:	2802      	cmp	r0, #2
 8001e22:	d00e      	beq.n	8001e42 <get_indev+0x4e>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8001e24:	2804      	cmp	r0, #4
 8001e26:	d0ee      	beq.n	8001e06 <get_indev+0x12>
            indev_group = indev;
 8001e28:	4626      	mov	r6, r4
 8001e2a:	e7ee      	b.n	8001e0a <get_indev+0x16>
    }

    if(indev_encoder) return indev_encoder;
 8001e2c:	b10f      	cbz	r7, 8001e32 <get_indev+0x3e>
    if(indev_group) return indev_group;

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
}
 8001e2e:	4638      	mov	r0, r7
 8001e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(indev_group) return indev_group;
 8001e32:	b10e      	cbz	r6, 8001e38 <get_indev+0x44>
 8001e34:	4637      	mov	r7, r6
 8001e36:	e7fa      	b.n	8001e2e <get_indev+0x3a>
    return lv_indev_get_next(NULL);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f009 f81f 	bl	800ae7c <lv_indev_get_next>
 8001e3e:	4607      	mov	r7, r0
 8001e40:	e7f5      	b.n	8001e2e <get_indev+0x3a>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8001e42:	4627      	mov	r7, r4
 8001e44:	e7f3      	b.n	8001e2e <get_indev+0x3a>

08001e46 <focus_next_core>:
{
 8001e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->frozen) return focus_changed;
 8001e4a:	7f03      	ldrb	r3, [r0, #28]
 8001e4c:	f013 0f01 	tst.w	r3, #1
 8001e50:	d16f      	bne.n	8001f32 <focus_next_core+0xec>
 8001e52:	4606      	mov	r6, r0
 8001e54:	468a      	mov	sl, r1
 8001e56:	4691      	mov	r9, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 8001e58:	68c5      	ldr	r5, [r0, #12]
    bool can_begin           = true;
 8001e5a:	f04f 0801 	mov.w	r8, #1
    lv_obj_t ** obj_sentinel = NULL;
 8001e5e:	2700      	movs	r7, #0
        if(obj_next == NULL) {
 8001e60:	b1e5      	cbz	r5, 8001e9c <focus_next_core+0x56>
 8001e62:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
 8001e64:	b357      	cbz	r7, 8001ebc <focus_next_core+0x76>
        if(can_move) {
 8001e66:	b12b      	cbz	r3, 8001e74 <focus_next_core+0x2e>
            obj_next = move(&group->obj_ll, obj_next);
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	47c8      	blx	r9
 8001e6e:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return focus_changed;
 8001e70:	4287      	cmp	r7, r0
 8001e72:	d069      	beq.n	8001f48 <focus_next_core+0x102>
        if(obj_next == NULL) continue;
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	d0f3      	beq.n	8001e60 <focus_next_core+0x1a>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8001e78:	6828      	ldr	r0, [r5, #0]
 8001e7a:	f000 fe0e 	bl	8002a9a <lv_obj_get_state>
 8001e7e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e82:	d1ed      	bne.n	8001e60 <focus_next_core+0x1a>
        lv_obj_t * parent = *obj_next;
 8001e84:	682c      	ldr	r4, [r5, #0]
        while(parent) {
 8001e86:	b1ec      	cbz	r4, 8001ec4 <focus_next_core+0x7e>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f000 fdf8 	bl	8002a80 <lv_obj_has_flag>
 8001e90:	b9c0      	cbnz	r0, 8001ec4 <focus_next_core+0x7e>
            parent = lv_obj_get_parent(parent);
 8001e92:	4620      	mov	r0, r4
 8001e94:	f004 fe4f 	bl	8006b36 <lv_obj_get_parent>
 8001e98:	4604      	mov	r4, r0
 8001e9a:	e7f4      	b.n	8001e86 <focus_next_core+0x40>
            if(group->wrap || obj_sentinel == NULL) {
 8001e9c:	7f33      	ldrb	r3, [r6, #28]
 8001e9e:	f013 0f08 	tst.w	r3, #8
 8001ea2:	d101      	bne.n	8001ea8 <focus_next_core+0x62>
 8001ea4:	2f00      	cmp	r7, #0
 8001ea6:	d149      	bne.n	8001f3c <focus_next_core+0xf6>
                if(!can_begin) return focus_changed;
 8001ea8:	f1b8 0f00 	cmp.w	r8, #0
 8001eac:	d043      	beq.n	8001f36 <focus_next_core+0xf0>
                obj_next  = begin(&group->obj_ll);
 8001eae:	4630      	mov	r0, r6
 8001eb0:	47d0      	blx	sl
 8001eb2:	4605      	mov	r5, r0
                can_begin = false;
 8001eb4:	f04f 0800 	mov.w	r8, #0
                can_move  = false;
 8001eb8:	4643      	mov	r3, r8
                can_begin = false;
 8001eba:	e7d3      	b.n	8001e64 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d040      	beq.n	8001f42 <focus_next_core+0xfc>
            obj_sentinel = obj_next;
 8001ec0:	462f      	mov	r7, r5
 8001ec2:	e7d0      	b.n	8001e66 <focus_next_core+0x20>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8001ec4:	b12c      	cbz	r4, 8001ed2 <focus_next_core+0x8c>
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f000 fdd9 	bl	8002a80 <lv_obj_has_flag>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d1c6      	bne.n	8001e60 <focus_next_core+0x1a>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8001ed2:	68f3      	ldr	r3, [r6, #12]
 8001ed4:	42ab      	cmp	r3, r5
 8001ed6:	d03a      	beq.n	8001f4e <focus_next_core+0x108>
    if(group->obj_focus) {
 8001ed8:	b18b      	cbz	r3, 8001efe <focus_next_core+0xb8>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8001eda:	681c      	ldr	r4, [r3, #0]
 8001edc:	4630      	mov	r0, r6
 8001ede:	f7ff ff89 	bl	8001df4 <get_indev>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff ff10 	bl	8001d0c <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8001eec:	2801      	cmp	r0, #1
 8001eee:	d002      	beq.n	8001ef6 <focus_next_core+0xb0>
 8001ef0:	f04f 0800 	mov.w	r8, #0
 8001ef4:	e01f      	b.n	8001f36 <focus_next_core+0xf0>
        lv_obj_invalidate(*group->obj_focus);
 8001ef6:	68f3      	ldr	r3, [r6, #12]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	f002 f8b8 	bl	800406e <lv_obj_invalidate>
    group->obj_focus = obj_next;
 8001efe:	60f5      	str	r5, [r6, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8001f00:	682c      	ldr	r4, [r5, #0]
 8001f02:	4630      	mov	r0, r6
 8001f04:	f7ff ff76 	bl	8001df4 <get_indev>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	210e      	movs	r1, #14
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff fefd 	bl	8001d0c <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 8001f12:	2801      	cmp	r0, #1
 8001f14:	d002      	beq.n	8001f1c <focus_next_core+0xd6>
 8001f16:	f04f 0800 	mov.w	r8, #0
 8001f1a:	e00c      	b.n	8001f36 <focus_next_core+0xf0>
    lv_obj_invalidate(*group->obj_focus);
 8001f1c:	68f3      	ldr	r3, [r6, #12]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	f002 f8a5 	bl	800406e <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8001f24:	6933      	ldr	r3, [r6, #16]
 8001f26:	b1ab      	cbz	r3, 8001f54 <focus_next_core+0x10e>
 8001f28:	4630      	mov	r0, r6
 8001f2a:	4798      	blx	r3
    return focus_changed;
 8001f2c:	f04f 0801 	mov.w	r8, #1
 8001f30:	e001      	b.n	8001f36 <focus_next_core+0xf0>
    if(group->frozen) return focus_changed;
 8001f32:	f04f 0800 	mov.w	r8, #0
}
 8001f36:	4640      	mov	r0, r8
 8001f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return focus_changed;
 8001f3c:	f04f 0800 	mov.w	r8, #0
 8001f40:	e7f9      	b.n	8001f36 <focus_next_core+0xf0>
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8001f42:	f04f 0800 	mov.w	r8, #0
 8001f46:	e7f6      	b.n	8001f36 <focus_next_core+0xf0>
            if(obj_next == obj_sentinel) return focus_changed;
 8001f48:	f04f 0800 	mov.w	r8, #0
 8001f4c:	e7f3      	b.n	8001f36 <focus_next_core+0xf0>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8001f4e:	f04f 0800 	mov.w	r8, #0
 8001f52:	e7f0      	b.n	8001f36 <focus_next_core+0xf0>
    return focus_changed;
 8001f54:	f04f 0801 	mov.w	r8, #1
 8001f58:	e7ed      	b.n	8001f36 <focus_next_core+0xf0>
	...

08001f5c <_lv_group_init>:
{
 8001f5c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8001f5e:	2120      	movs	r1, #32
 8001f60:	4801      	ldr	r0, [pc, #4]	; (8001f68 <_lv_group_init+0xc>)
 8001f62:	f009 fecb 	bl	800bcfc <_lv_ll_init>
}
 8001f66:	bd08      	pop	{r3, pc}
 8001f68:	20000be4 	.word	0x20000be4

08001f6c <lv_group_get_default>:
}
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <lv_group_get_default+0x8>)
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000b3c 	.word	0x20000b3c

08001f78 <lv_group_focus_next>:
{
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <lv_group_focus_next+0x1c>)
 8001f7e:	4906      	ldr	r1, [pc, #24]	; (8001f98 <lv_group_focus_next+0x20>)
 8001f80:	f7ff ff61 	bl	8001e46 <focus_next_core>
    if(group->edge_cb) {
 8001f84:	6963      	ldr	r3, [r4, #20]
 8001f86:	b11b      	cbz	r3, 8001f90 <lv_group_focus_next+0x18>
        if(!focus_changed)
 8001f88:	b910      	cbnz	r0, 8001f90 <lv_group_focus_next+0x18>
            group->edge_cb(group, true);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	4798      	blx	r3
}
 8001f90:	bd10      	pop	{r4, pc}
 8001f92:	bf00      	nop
 8001f94:	0800bd99 	.word	0x0800bd99
 8001f98:	0800bd89 	.word	0x0800bd89

08001f9c <lv_group_focus_prev>:
{
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8001fa0:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <lv_group_focus_prev+0x1c>)
 8001fa2:	4906      	ldr	r1, [pc, #24]	; (8001fbc <lv_group_focus_prev+0x20>)
 8001fa4:	f7ff ff4f 	bl	8001e46 <focus_next_core>
    if(group->edge_cb) {
 8001fa8:	6963      	ldr	r3, [r4, #20]
 8001faa:	b11b      	cbz	r3, 8001fb4 <lv_group_focus_prev+0x18>
        if(!focus_changed)
 8001fac:	b910      	cbnz	r0, 8001fb4 <lv_group_focus_prev+0x18>
            group->edge_cb(group, false);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4798      	blx	r3
}
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	bf00      	nop
 8001fb8:	0800bda1 	.word	0x0800bda1
 8001fbc:	0800bd91 	.word	0x0800bd91

08001fc0 <lv_group_refocus>:
{
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8001fc4:	7f03      	ldrb	r3, [r0, #28]
 8001fc6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	7703      	strb	r3, [r0, #28]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f013 0f04 	tst.w	r3, #4
 8001fd6:	d106      	bne.n	8001fe6 <lv_group_refocus+0x26>
        lv_group_focus_next(g);
 8001fd8:	f7ff ffce 	bl	8001f78 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8001fdc:	7f23      	ldrb	r3, [r4, #28]
 8001fde:	f365 03c3 	bfi	r3, r5, #3, #1
 8001fe2:	7723      	strb	r3, [r4, #28]
}
 8001fe4:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8001fe6:	f7ff ffd9 	bl	8001f9c <lv_group_focus_prev>
 8001fea:	e7f7      	b.n	8001fdc <lv_group_refocus+0x1c>

08001fec <lv_group_remove_obj>:
{
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 8001ff0:	f000 fd55 	bl	8002a9e <lv_obj_get_group>
    if(g == NULL) return;
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d049      	beq.n	800208c <lv_group_remove_obj+0xa0>
 8001ff8:	4605      	mov	r5, r0
    if(g->obj_focus && *g->obj_focus == obj) {
 8001ffa:	68c3      	ldr	r3, [r0, #12]
 8001ffc:	b113      	cbz	r3, 8002004 <lv_group_remove_obj+0x18>
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	42b3      	cmp	r3, r6
 8002002:	d013      	beq.n	800202c <lv_group_remove_obj+0x40>
    if(g->obj_focus && *g->obj_focus == obj) {
 8002004:	68eb      	ldr	r3, [r5, #12]
 8002006:	b113      	cbz	r3, 800200e <lv_group_remove_obj+0x22>
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	42b3      	cmp	r3, r6
 800200c:	d030      	beq.n	8002070 <lv_group_remove_obj+0x84>
    _LV_LL_READ(&g->obj_ll, i) {
 800200e:	4628      	mov	r0, r5
 8002010:	f009 feba 	bl	800bd88 <_lv_ll_get_head>
 8002014:	4604      	mov	r4, r0
 8002016:	2c00      	cmp	r4, #0
 8002018:	d038      	beq.n	800208c <lv_group_remove_obj+0xa0>
        if(*i == obj) {
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	42b3      	cmp	r3, r6
 800201e:	d02a      	beq.n	8002076 <lv_group_remove_obj+0x8a>
    _LV_LL_READ(&g->obj_ll, i) {
 8002020:	4621      	mov	r1, r4
 8002022:	4628      	mov	r0, r5
 8002024:	f009 feb8 	bl	800bd98 <_lv_ll_get_next>
 8002028:	4604      	mov	r4, r0
 800202a:	e7f4      	b.n	8002016 <lv_group_remove_obj+0x2a>
        if(g->frozen) g->frozen = 0;
 800202c:	7f03      	ldrb	r3, [r0, #28]
 800202e:	f013 0f01 	tst.w	r3, #1
 8002032:	d003      	beq.n	800203c <lv_group_remove_obj+0x50>
 8002034:	7f03      	ldrb	r3, [r0, #28]
 8002036:	f36f 0300 	bfc	r3, #0, #1
 800203a:	7703      	strb	r3, [r0, #28]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800203c:	4628      	mov	r0, r5
 800203e:	f009 fea3 	bl	800bd88 <_lv_ll_get_head>
 8002042:	68eb      	ldr	r3, [r5, #12]
 8002044:	4283      	cmp	r3, r0
 8002046:	d003      	beq.n	8002050 <lv_group_remove_obj+0x64>
            lv_group_refocus(g);
 8002048:	4628      	mov	r0, r5
 800204a:	f7ff ffb9 	bl	8001fc0 <lv_group_refocus>
 800204e:	e7d9      	b.n	8002004 <lv_group_remove_obj+0x18>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8002050:	4628      	mov	r0, r5
 8002052:	f009 fe9d 	bl	800bd90 <_lv_ll_get_tail>
 8002056:	68eb      	ldr	r3, [r5, #12]
 8002058:	4283      	cmp	r3, r0
 800205a:	d1f5      	bne.n	8002048 <lv_group_remove_obj+0x5c>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 800205c:	681c      	ldr	r4, [r3, #0]
 800205e:	4628      	mov	r0, r5
 8002060:	f7ff fec8 	bl	8001df4 <get_indev>
 8002064:	4602      	mov	r2, r0
 8002066:	210f      	movs	r1, #15
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff fe4f 	bl	8001d0c <lv_event_send>
 800206e:	e7c9      	b.n	8002004 <lv_group_remove_obj+0x18>
        g->obj_focus = NULL;
 8002070:	2300      	movs	r3, #0
 8002072:	60eb      	str	r3, [r5, #12]
 8002074:	e7cb      	b.n	800200e <lv_group_remove_obj+0x22>
            _lv_ll_remove(&g->obj_ll, i);
 8002076:	4621      	mov	r1, r4
 8002078:	4628      	mov	r0, r5
 800207a:	f009 fec7 	bl	800be0c <_lv_ll_remove>
            lv_mem_free(i);
 800207e:	4620      	mov	r0, r4
 8002080:	f009 ffe0 	bl	800c044 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8002084:	68b3      	ldr	r3, [r6, #8]
 8002086:	b10b      	cbz	r3, 800208c <lv_group_remove_obj+0xa0>
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
}
 800208c:	bd70      	pop	{r4, r5, r6, pc}

0800208e <lv_group_add_obj>:
    if(group == NULL) return;
 800208e:	2800      	cmp	r0, #0
 8002090:	d039      	beq.n	8002106 <lv_group_add_obj+0x78>
{
 8002092:	b570      	push	{r4, r5, r6, lr}
 8002094:	460c      	mov	r4, r1
 8002096:	4605      	mov	r5, r0
    lv_group_remove_obj(obj);
 8002098:	4608      	mov	r0, r1
 800209a:	f7ff ffa7 	bl	8001fec <lv_group_remove_obj>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800209e:	4628      	mov	r0, r5
 80020a0:	f009 fe72 	bl	800bd88 <_lv_ll_get_head>
 80020a4:	4601      	mov	r1, r0
 80020a6:	b139      	cbz	r1, 80020b8 <lv_group_add_obj+0x2a>
        if((*obj_i) == obj) {
 80020a8:	680b      	ldr	r3, [r1, #0]
 80020aa:	42a3      	cmp	r3, r4
 80020ac:	d01e      	beq.n	80020ec <lv_group_add_obj+0x5e>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 80020ae:	4628      	mov	r0, r5
 80020b0:	f009 fe72 	bl	800bd98 <_lv_ll_get_next>
 80020b4:	4601      	mov	r1, r0
 80020b6:	e7f6      	b.n	80020a6 <lv_group_add_obj+0x18>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 80020b8:	4620      	mov	r0, r4
 80020ba:	f000 fcf0 	bl	8002a9e <lv_obj_get_group>
    if(group_cur) {
 80020be:	b130      	cbz	r0, 80020ce <lv_group_add_obj+0x40>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 80020c0:	68a3      	ldr	r3, [r4, #8]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	b11b      	cbz	r3, 80020ce <lv_group_add_obj+0x40>
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	42a3      	cmp	r3, r4
 80020cc:	d00f      	beq.n	80020ee <lv_group_add_obj+0x60>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 80020ce:	68a3      	ldr	r3, [r4, #8]
 80020d0:	b183      	cbz	r3, 80020f4 <lv_group_add_obj+0x66>
    obj->spec_attr->group_p = group;
 80020d2:	68a3      	ldr	r3, [r4, #8]
 80020d4:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80020d6:	4628      	mov	r0, r5
 80020d8:	f009 fe37 	bl	800bd4a <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 80020dc:	4606      	mov	r6, r0
 80020de:	b168      	cbz	r0, 80020fc <lv_group_add_obj+0x6e>
    *next = obj;
 80020e0:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80020e2:	4628      	mov	r0, r5
 80020e4:	f009 fe50 	bl	800bd88 <_lv_ll_get_head>
 80020e8:	4286      	cmp	r6, r0
 80020ea:	d008      	beq.n	80020fe <lv_group_add_obj+0x70>
}
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(group_cur);
 80020ee:	f7ff ff67 	bl	8001fc0 <lv_group_refocus>
 80020f2:	e7ec      	b.n	80020ce <lv_group_add_obj+0x40>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 80020f4:	4620      	mov	r0, r4
 80020f6:	f000 fef5 	bl	8002ee4 <lv_obj_allocate_spec_attr>
 80020fa:	e7ea      	b.n	80020d2 <lv_group_add_obj+0x44>
    LV_ASSERT_MALLOC(next);
 80020fc:	e7fe      	b.n	80020fc <lv_group_add_obj+0x6e>
        lv_group_refocus(group);
 80020fe:	4628      	mov	r0, r5
 8002100:	f7ff ff5e 	bl	8001fc0 <lv_group_refocus>
    LV_LOG_TRACE("finished");
 8002104:	e7f2      	b.n	80020ec <lv_group_add_obj+0x5e>
 8002106:	4770      	bx	lr

08002108 <lv_group_get_editing>:
    if(!group) return false;
 8002108:	b118      	cbz	r0, 8002112 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800210a:	7f00      	ldrb	r0, [r0, #28]
 800210c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002110:	4770      	bx	lr
    if(!group) return false;
 8002112:	2000      	movs	r0, #0
}
 8002114:	4770      	bx	lr
	...

08002118 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 8002118:	4b01      	ldr	r3, [pc, #4]	; (8002120 <lv_indev_get_act+0x8>)
 800211a:	6858      	ldr	r0, [r3, #4]
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000b40 	.word	0x20000b40

08002124 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8002124:	b110      	cbz	r0, 800212c <lv_indev_get_type+0x8>

    return indev->driver->type;
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	7818      	ldrb	r0, [r3, #0]
 800212a:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800212c:	2000      	movs	r0, #0
}
 800212e:	4770      	bx	lr

08002130 <lv_indev_get_scroll_dir>:
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 8002130:	4603      	mov	r3, r0
 8002132:	b150      	cbz	r0, 800214a <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8002134:	6802      	ldr	r2, [r0, #0]
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	2a01      	cmp	r2, #1
 800213a:	d001      	beq.n	8002140 <lv_indev_get_scroll_dir+0x10>
 800213c:	2a03      	cmp	r2, #3
 800213e:	d106      	bne.n	800214e <lv_indev_get_scroll_dir+0x1e>
    return indev->proc.types.pointer.scroll_dir;
 8002140:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 8002144:	f000 000f 	and.w	r0, r0, #15
 8002148:	4770      	bx	lr
    if(indev == NULL) return false;
 800214a:	2000      	movs	r0, #0
 800214c:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 800214e:	2000      	movs	r0, #0
}
 8002150:	4770      	bx	lr

08002152 <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
    if(indev == NULL) return NULL;
 8002152:	4603      	mov	r3, r0
 8002154:	b138      	cbz	r0, 8002166 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	2a01      	cmp	r2, #1
 800215c:	d001      	beq.n	8002162 <lv_indev_get_scroll_obj+0x10>
 800215e:	2a03      	cmp	r2, #3
 8002160:	d102      	bne.n	8002168 <lv_indev_get_scroll_obj+0x16>
    return indev->proc.types.pointer.scroll_obj;
 8002162:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002164:	4770      	bx	lr
 8002166:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8002168:	2000      	movs	r0, #0
}
 800216a:	4770      	bx	lr

0800216c <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4605      	mov	r5, r0
 8002170:	460c      	mov	r4, r1
    lv_draw_rect_dsc_init(dsc);
 8002172:	4608      	mov	r0, r1
 8002174:	f007 f8b4 	bl	80092e0 <lv_draw_rect_dsc_init>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8002178:	2221      	movs	r2, #33	; 0x21
 800217a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800217e:	4628      	mov	r0, r5
 8002180:	f004 f8b2 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002184:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8002186:	70e0      	strb	r0, [r4, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8002188:	2802      	cmp	r0, #2
 800218a:	d83b      	bhi.n	8002204 <scrollbar_init_draw_dsc+0x98>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800218c:	2231      	movs	r2, #49	; 0x31
 800218e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002192:	4628      	mov	r0, r5
 8002194:	f004 f8a8 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002198:	b2c0      	uxtb	r0, r0
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 800219a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    if(dsc->border_opa > LV_OPA_MIN) {
 800219e:	2802      	cmp	r0, #2
 80021a0:	d838      	bhi.n	8002214 <scrollbar_init_draw_dsc+0xa8>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80021a2:	2245      	movs	r2, #69	; 0x45
 80021a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80021a8:	4628      	mov	r0, r5
 80021aa:	f004 f89d 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80021ae:	b2c0      	uxtb	r0, r0
            dsc->border_opa = LV_OPA_TRANSP;
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80021b0:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80021b4:	2802      	cmp	r0, #2
 80021b6:	d843      	bhi.n	8002240 <scrollbar_init_draw_dsc+0xd4>
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, LV_PART_SCROLLBAR);
 80021b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80021bc:	4628      	mov	r0, r5
 80021be:	f004 fc55 	bl	8006a6c <lv_obj_get_style_opa_recursive>
    if(opa < LV_OPA_MAX) {
 80021c2:	28fc      	cmp	r0, #252	; 0xfc
 80021c4:	d80d      	bhi.n	80021e2 <scrollbar_init_draw_dsc+0x76>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 80021c6:	78e3      	ldrb	r3, [r4, #3]
 80021c8:	fb00 f303 	mul.w	r3, r0, r3
 80021cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80021d0:	70e3      	strb	r3, [r4, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 80021d2:	fb03 f000 	mul.w	r0, r3, r0
 80021d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80021da:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 80021de:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 80021e2:	78e3      	ldrb	r3, [r4, #3]
 80021e4:	b92b      	cbnz	r3, 80021f2 <scrollbar_init_draw_dsc+0x86>
 80021e6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80021ea:	b913      	cbnz	r3, 80021f2 <scrollbar_init_draw_dsc+0x86>
 80021ec:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 80021f0:	b138      	cbz	r0, 8002202 <scrollbar_init_draw_dsc+0x96>
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80021f2:	220b      	movs	r2, #11
 80021f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80021f8:	4628      	mov	r0, r5
 80021fa:	f004 f875 	bl	80062e8 <lv_obj_get_style_prop>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 80021fe:	8020      	strh	r0, [r4, #0]
        return LV_RES_OK;
 8002200:	2001      	movs	r0, #1
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 8002202:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8002204:	2220      	movs	r2, #32
 8002206:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800220a:	4628      	mov	r0, r5
 800220c:	f004 f86c 	bl	80062e8 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8002210:	80a0      	strh	r0, [r4, #4]
 8002212:	e7bb      	b.n	800218c <scrollbar_init_draw_dsc+0x20>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8002214:	2232      	movs	r2, #50	; 0x32
 8002216:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800221a:	4628      	mov	r0, r5
 800221c:	f004 f864 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002220:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8002222:	8420      	strh	r0, [r4, #32]
        if(dsc->border_width > 0) {
 8002224:	2800      	cmp	r0, #0
 8002226:	dc03      	bgt.n	8002230 <scrollbar_init_draw_dsc+0xc4>
            dsc->border_opa = LV_OPA_TRANSP;
 8002228:	2300      	movs	r3, #0
 800222a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800222e:	e7b8      	b.n	80021a2 <scrollbar_init_draw_dsc+0x36>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8002230:	2230      	movs	r2, #48	; 0x30
 8002232:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002236:	4628      	mov	r0, r5
 8002238:	f004 f856 	bl	80062e8 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 800223c:	83e0      	strh	r0, [r4, #30]
 800223e:	e7b0      	b.n	80021a2 <scrollbar_init_draw_dsc+0x36>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002246:	4628      	mov	r0, r5
 8002248:	f004 f84e 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800224c:	b200      	sxth	r0, r0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 800224e:	85e0      	strh	r0, [r4, #46]	; 0x2e
        if(dsc->shadow_width > 0) {
 8002250:	2800      	cmp	r0, #0
 8002252:	dc03      	bgt.n	800225c <scrollbar_init_draw_dsc+0xf0>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8002254:	2300      	movs	r3, #0
 8002256:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 800225a:	e7ad      	b.n	80021b8 <scrollbar_init_draw_dsc+0x4c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800225c:	2243      	movs	r2, #67	; 0x43
 800225e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002262:	4628      	mov	r0, r5
 8002264:	f004 f840 	bl	80062e8 <lv_obj_get_style_prop>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8002268:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 800226a:	2244      	movs	r2, #68	; 0x44
 800226c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002270:	4628      	mov	r0, r5
 8002272:	f004 f839 	bl	80062e8 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8002276:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8002278:	e79e      	b.n	80021b8 <scrollbar_init_draw_dsc+0x4c>
	...

0800227c <draw_scrollbar>:
{
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	b0a4      	sub	sp, #144	; 0x90
 8002280:	4604      	mov	r4, r0
 8002282:	460d      	mov	r5, r1
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8002284:	aa20      	add	r2, sp, #128	; 0x80
 8002286:	a922      	add	r1, sp, #136	; 0x88
 8002288:	f003 f88e 	bl	80053a8 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800228c:	a822      	add	r0, sp, #136	; 0x88
 800228e:	f009 f835 	bl	800b2fc <lv_area_get_size>
 8002292:	b918      	cbnz	r0, 800229c <draw_scrollbar+0x20>
 8002294:	a820      	add	r0, sp, #128	; 0x80
 8002296:	f009 f831 	bl	800b2fc <lv_area_get_size>
 800229a:	b128      	cbz	r0, 80022a8 <draw_scrollbar+0x2c>
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 800229c:	a912      	add	r1, sp, #72	; 0x48
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff ff64 	bl	800216c <scrollbar_init_draw_dsc>
    if(sb_res != LV_RES_OK) return;
 80022a4:	2801      	cmp	r0, #1
 80022a6:	d001      	beq.n	80022ac <draw_scrollbar+0x30>
}
 80022a8:	b024      	add	sp, #144	; 0x90
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80022ac:	4629      	mov	r1, r5
 80022ae:	4668      	mov	r0, sp
 80022b0:	f001 f96b 	bl	800358a <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <draw_scrollbar+0xa8>)
 80022b6:	9301      	str	r3, [sp, #4]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 80022b8:	2302      	movs	r3, #2
 80022ba:	9302      	str	r3, [sp, #8]
    part_dsc.rect_dsc = &draw_dsc;
 80022bc:	ab12      	add	r3, sp, #72	; 0x48
 80022be:	9304      	str	r3, [sp, #16]
    part_dsc.part = LV_PART_SCROLLBAR;
 80022c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c4:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_area_get_size(&hor_area) > 0) {
 80022c6:	a822      	add	r0, sp, #136	; 0x88
 80022c8:	f009 f818 	bl	800b2fc <lv_area_get_size>
 80022cc:	b9b8      	cbnz	r0, 80022fe <draw_scrollbar+0x82>
    if(lv_area_get_size(&ver_area) > 0) {
 80022ce:	a820      	add	r0, sp, #128	; 0x80
 80022d0:	f009 f814 	bl	800b2fc <lv_area_get_size>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d0e7      	beq.n	80022a8 <draw_scrollbar+0x2c>
        part_dsc.draw_area = &ver_area;
 80022d8:	ae20      	add	r6, sp, #128	; 0x80
 80022da:	9603      	str	r6, [sp, #12]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80022dc:	466a      	mov	r2, sp
 80022de:	211a      	movs	r1, #26
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff fd13 	bl	8001d0c <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80022e6:	9603      	str	r6, [sp, #12]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80022e8:	4632      	mov	r2, r6
 80022ea:	a912      	add	r1, sp, #72	; 0x48
 80022ec:	4628      	mov	r0, r5
 80022ee:	f007 f81f 	bl	8009330 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80022f2:	466a      	mov	r2, sp
 80022f4:	211b      	movs	r1, #27
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff fd08 	bl	8001d0c <lv_event_send>
 80022fc:	e7d4      	b.n	80022a8 <draw_scrollbar+0x2c>
        part_dsc.draw_area = &hor_area;
 80022fe:	ae22      	add	r6, sp, #136	; 0x88
 8002300:	9603      	str	r6, [sp, #12]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8002302:	466a      	mov	r2, sp
 8002304:	211a      	movs	r1, #26
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff fd00 	bl	8001d0c <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 800230c:	4632      	mov	r2, r6
 800230e:	a912      	add	r1, sp, #72	; 0x48
 8002310:	4628      	mov	r0, r5
 8002312:	f007 f80d 	bl	8009330 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8002316:	466a      	mov	r2, sp
 8002318:	211b      	movs	r1, #27
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff fcf6 	bl	8001d0c <lv_event_send>
 8002320:	e7d5      	b.n	80022ce <draw_scrollbar+0x52>
 8002322:	bf00      	nop
 8002324:	08010f90 	.word	0x08010f90

08002328 <lv_obj_draw>:
{
 8002328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800232c:	b0a2      	sub	sp, #136	; 0x88
 800232e:	4606      	mov	r6, r0
    lv_event_code_t code = lv_event_get_code(e);
 8002330:	f7ff fd1a 	bl	8001d68 <lv_event_get_code>
 8002334:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8002336:	4630      	mov	r0, r6
 8002338:	f7ff fd12 	bl	8001d60 <lv_event_get_target>
 800233c:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 800233e:	2d12      	cmp	r5, #18
 8002340:	d007      	beq.n	8002352 <lv_obj_draw+0x2a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8002342:	2d15      	cmp	r5, #21
 8002344:	d066      	beq.n	8002414 <lv_obj_draw+0xec>
    else if(code == LV_EVENT_DRAW_POST) {
 8002346:	2d18      	cmp	r5, #24
 8002348:	f000 80f9 	beq.w	800253e <lv_obj_draw+0x216>
}
 800234c:	b022      	add	sp, #136	; 0x88
 800234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8002352:	4630      	mov	r0, r6
 8002354:	f7ff fd0c 	bl	8001d70 <lv_event_get_param>
 8002358:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 800235a:	7803      	ldrb	r3, [r0, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d0f5      	beq.n	800234c <lv_obj_draw+0x24>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8002360:	2217      	movs	r2, #23
 8002362:	2100      	movs	r1, #0
 8002364:	4620      	mov	r0, r4
 8002366:	f003 ffbf 	bl	80062e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 800236a:	b110      	cbz	r0, 8002372 <lv_obj_draw+0x4a>
            info->res = LV_COVER_RES_MASKED;
 800236c:	2302      	movs	r3, #2
 800236e:	702b      	strb	r3, [r5, #0]
            return;
 8002370:	e7ec      	b.n	800234c <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8002372:	220b      	movs	r2, #11
 8002374:	2100      	movs	r1, #0
 8002376:	4620      	mov	r0, r4
 8002378:	f003 ffb6 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800237c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800237e:	2269      	movs	r2, #105	; 0x69
 8002380:	2100      	movs	r1, #0
 8002382:	4620      	mov	r0, r4
 8002384:	f003 ffb0 	bl	80062e8 <lv_obj_get_style_prop>
 8002388:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800238a:	226a      	movs	r2, #106	; 0x6a
 800238c:	2100      	movs	r1, #0
 800238e:	4620      	mov	r0, r4
 8002390:	f003 ffaa 	bl	80062e8 <lv_obj_get_style_prop>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 8002394:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8002398:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
    dest->y1 = src->y1;
 800239c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80023a0:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
    dest->x2 = src->x2;
 80023a4:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 80023a8:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
    dest->y2 = src->y2;
 80023ac:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
 80023b0:	f8ad c046 	strh.w	ip, [sp, #70]	; 0x46
        coords.x1 -= w;
 80023b4:	b2b3      	uxth	r3, r6
 80023b6:	1ac9      	subs	r1, r1, r3
 80023b8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
        coords.x2 += w;
 80023bc:	4473      	add	r3, lr
 80023be:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        coords.y1 -= h;
 80023c2:	b280      	uxth	r0, r0
 80023c4:	1a12      	subs	r2, r2, r0
 80023c6:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
        coords.y2 += h;
 80023ca:	4460      	add	r0, ip
 80023cc:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80023d0:	463a      	mov	r2, r7
 80023d2:	a910      	add	r1, sp, #64	; 0x40
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	f009 f8f1 	bl	800b5bc <_lv_area_is_in>
 80023da:	b910      	cbnz	r0, 80023e2 <lv_obj_draw+0xba>
            info->res = LV_COVER_RES_NOT_COVER;
 80023dc:	2301      	movs	r3, #1
 80023de:	702b      	strb	r3, [r5, #0]
            return;
 80023e0:	e7b4      	b.n	800234c <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80023e2:	2221      	movs	r2, #33	; 0x21
 80023e4:	2100      	movs	r1, #0
 80023e6:	4620      	mov	r0, r4
 80023e8:	f003 ff7e 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80023ec:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80023ee:	28fc      	cmp	r0, #252	; 0xfc
 80023f0:	d802      	bhi.n	80023f8 <lv_obj_draw+0xd0>
            info->res = LV_COVER_RES_NOT_COVER;
 80023f2:	2301      	movs	r3, #1
 80023f4:	702b      	strb	r3, [r5, #0]
            return;
 80023f6:	e7a9      	b.n	800234c <lv_obj_draw+0x24>
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80023f8:	2260      	movs	r2, #96	; 0x60
 80023fa:	2100      	movs	r1, #0
 80023fc:	4620      	mov	r0, r4
 80023fe:	f003 ff73 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002402:	b2c3      	uxtb	r3, r0
        if(lv_obj_get_style_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8002404:	2bfc      	cmp	r3, #252	; 0xfc
 8002406:	d902      	bls.n	800240e <lv_obj_draw+0xe6>
        info->res = LV_COVER_RES_COVER;
 8002408:	2300      	movs	r3, #0
 800240a:	702b      	strb	r3, [r5, #0]
 800240c:	e79e      	b.n	800234c <lv_obj_draw+0x24>
            info->res = LV_COVER_RES_NOT_COVER;
 800240e:	2301      	movs	r3, #1
 8002410:	702b      	strb	r3, [r5, #0]
            return;
 8002412:	e79b      	b.n	800234c <lv_obj_draw+0x24>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8002414:	4630      	mov	r0, r6
 8002416:	f7ff fccc 	bl	8001db2 <lv_event_get_draw_ctx>
 800241a:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 800241c:	a802      	add	r0, sp, #8
 800241e:	f006 ff5f 	bl	80092e0 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8002422:	2234      	movs	r2, #52	; 0x34
 8002424:	2100      	movs	r1, #0
 8002426:	4620      	mov	r0, r4
 8002428:	f003 ff5e 	bl	80062e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 800242c:	b128      	cbz	r0, 800243a <lv_obj_draw+0x112>
            draw_dsc.border_post = 1;
 800242e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800243a:	af02      	add	r7, sp, #8
 800243c:	463a      	mov	r2, r7
 800243e:	2100      	movs	r1, #0
 8002440:	4620      	mov	r0, r4
 8002442:	f000 fe5a 	bl	80030fa <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8002446:	2269      	movs	r2, #105	; 0x69
 8002448:	2100      	movs	r1, #0
 800244a:	4620      	mov	r0, r4
 800244c:	f003 ff4c 	bl	80062e8 <lv_obj_get_style_prop>
 8002450:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8002452:	226a      	movs	r2, #106	; 0x6a
 8002454:	2100      	movs	r1, #0
 8002456:	4620      	mov	r0, r4
 8002458:	f003 ff46 	bl	80062e8 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 800245c:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8002460:	f8ad c000 	strh.w	ip, [sp]
    dest->y1 = src->y1;
 8002464:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8002468:	f8ad 1002 	strh.w	r1, [sp, #2]
    dest->x2 = src->x2;
 800246c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8002470:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8002474:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
 8002478:	f8ad e006 	strh.w	lr, [sp, #6]
        coords.x1 -= w;
 800247c:	b2aa      	uxth	r2, r5
 800247e:	ebac 0c02 	sub.w	ip, ip, r2
 8002482:	f8ad c000 	strh.w	ip, [sp]
        coords.x2 += w;
 8002486:	441a      	add	r2, r3
 8002488:	f8ad 2004 	strh.w	r2, [sp, #4]
        coords.y1 -= h;
 800248c:	b283      	uxth	r3, r0
 800248e:	1ac9      	subs	r1, r1, r3
 8002490:	f8ad 1002 	strh.w	r1, [sp, #2]
        coords.y2 += h;
 8002494:	4473      	add	r3, lr
 8002496:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800249a:	4631      	mov	r1, r6
 800249c:	a810      	add	r0, sp, #64	; 0x40
 800249e:	f001 f874 	bl	800358a <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <lv_obj_draw+0x310>)
 80024a4:	9311      	str	r3, [sp, #68]	; 0x44
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80024a6:	2500      	movs	r5, #0
 80024a8:	9512      	str	r5, [sp, #72]	; 0x48
        part_dsc.rect_dsc = &draw_dsc;
 80024aa:	9714      	str	r7, [sp, #80]	; 0x50
        part_dsc.draw_area = &coords;
 80024ac:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
        part_dsc.part = LV_PART_MAIN;
 80024b0:	951d      	str	r5, [sp, #116]	; 0x74
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80024b2:	aa10      	add	r2, sp, #64	; 0x40
 80024b4:	211a      	movs	r1, #26
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff fc28 	bl	8001d0c <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80024bc:	2217      	movs	r2, #23
 80024be:	4629      	mov	r1, r5
 80024c0:	4620      	mov	r0, r4
 80024c2:	f003 ff11 	bl	80062e8 <lv_obj_get_style_prop>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 80024c6:	b120      	cbz	r0, 80024d2 <lv_obj_draw+0x1aa>
 80024c8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80024cc:	b99b      	cbnz	r3, 80024f6 <lv_obj_draw+0x1ce>
 80024ce:	462b      	mov	r3, r5
 80024d0:	e000      	b.n	80024d4 <lv_obj_draw+0x1ac>
 80024d2:	2300      	movs	r3, #0
        const void * bg_img_src = draw_dsc.bg_img_src;
 80024d4:	9f06      	ldr	r7, [sp, #24]
        if(clip_corner) {
 80024d6:	461d      	mov	r5, r3
 80024d8:	b10b      	cbz	r3, 80024de <lv_obj_draw+0x1b6>
            draw_dsc.bg_img_src = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	9306      	str	r3, [sp, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80024de:	466a      	mov	r2, sp
 80024e0:	a902      	add	r1, sp, #8
 80024e2:	4630      	mov	r0, r6
 80024e4:	f006 ff24 	bl	8009330 <lv_draw_rect>
        if(clip_corner) {
 80024e8:	b93d      	cbnz	r5, 80024fa <lv_obj_draw+0x1d2>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80024ea:	aa10      	add	r2, sp, #64	; 0x40
 80024ec:	211b      	movs	r1, #27
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff fc0c 	bl	8001d0c <lv_event_send>
 80024f4:	e72a      	b.n	800234c <lv_obj_draw+0x24>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e7ec      	b.n	80024d4 <lv_obj_draw+0x1ac>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 80024fa:	2018      	movs	r0, #24
 80024fc:	f009 fdda 	bl	800c0b4 <lv_mem_buf_get>
 8002500:	4605      	mov	r5, r0
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8002502:	2300      	movs	r3, #0
 8002504:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8002508:	f104 0114 	add.w	r1, r4, #20
 800250c:	f006 fe34 	bl	8009178 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8002510:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8002514:	4628      	mov	r0, r5
 8002516:	f006 fdad 	bl	8009074 <lv_draw_mask_add>
            if(bg_img_src) {
 800251a:	2f00      	cmp	r7, #0
 800251c:	d0e5      	beq.n	80024ea <lv_obj_draw+0x1c2>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 800251e:	2300      	movs	r3, #0
 8002520:	f88d 300b 	strb.w	r3, [sp, #11]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8002524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8002528:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 800252c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
                draw_dsc.bg_img_src = bg_img_src;
 8002530:	9706      	str	r7, [sp, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8002532:	466a      	mov	r2, sp
 8002534:	a902      	add	r1, sp, #8
 8002536:	4630      	mov	r0, r6
 8002538:	f006 fefa 	bl	8009330 <lv_draw_rect>
 800253c:	e7d5      	b.n	80024ea <lv_obj_draw+0x1c2>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800253e:	4630      	mov	r0, r6
 8002540:	f7ff fc37 	bl	8001db2 <lv_event_get_draw_ctx>
 8002544:	4605      	mov	r5, r0
        draw_scrollbar(obj, draw_ctx);
 8002546:	4601      	mov	r1, r0
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fe97 	bl	800227c <draw_scrollbar>
 800254e:	2217      	movs	r2, #23
 8002550:	2100      	movs	r1, #0
 8002552:	4620      	mov	r0, r4
 8002554:	f003 fec8 	bl	80062e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8002558:	2800      	cmp	r0, #0
 800255a:	d15f      	bne.n	800261c <lv_obj_draw+0x2f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 800255c:	2234      	movs	r2, #52	; 0x34
 800255e:	2100      	movs	r1, #0
 8002560:	4620      	mov	r0, r4
 8002562:	f003 fec1 	bl	80062e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8002566:	2800      	cmp	r0, #0
 8002568:	f43f aef0 	beq.w	800234c <lv_obj_draw+0x24>
            lv_draw_rect_dsc_init(&draw_dsc);
 800256c:	af02      	add	r7, sp, #8
 800256e:	4638      	mov	r0, r7
 8002570:	f006 feb6 	bl	80092e0 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8002574:	2600      	movs	r6, #0
 8002576:	f88d 600b 	strb.w	r6, [sp, #11]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 800257a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 800257e:	f88d 6032 	strb.w	r6, [sp, #50]	; 0x32
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8002582:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8002586:	463a      	mov	r2, r7
 8002588:	4631      	mov	r1, r6
 800258a:	4620      	mov	r0, r4
 800258c:	f000 fdb5 	bl	80030fa <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8002590:	2269      	movs	r2, #105	; 0x69
 8002592:	4631      	mov	r1, r6
 8002594:	4620      	mov	r0, r4
 8002596:	f003 fea7 	bl	80062e8 <lv_obj_get_style_prop>
 800259a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800259c:	226a      	movs	r2, #106	; 0x6a
 800259e:	4631      	mov	r1, r6
 80025a0:	4620      	mov	r0, r4
 80025a2:	f003 fea1 	bl	80062e8 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 80025a6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80025aa:	f8ad 1000 	strh.w	r1, [sp]
    dest->y1 = src->y1;
 80025ae:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80025b2:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 80025b6:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 80025ba:	f8ad e004 	strh.w	lr, [sp, #4]
    dest->y2 = src->y2;
 80025be:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
 80025c2:	f8ad c006 	strh.w	ip, [sp, #6]
            coords.x1 -= w;
 80025c6:	fa1f f388 	uxth.w	r3, r8
 80025ca:	1ac9      	subs	r1, r1, r3
 80025cc:	f8ad 1000 	strh.w	r1, [sp]
            coords.x2 += w;
 80025d0:	4473      	add	r3, lr
 80025d2:	f8ad 3004 	strh.w	r3, [sp, #4]
            coords.y1 -= h;
 80025d6:	b280      	uxth	r0, r0
 80025d8:	1a12      	subs	r2, r2, r0
 80025da:	f8ad 2002 	strh.w	r2, [sp, #2]
            coords.y2 += h;
 80025de:	4460      	add	r0, ip
 80025e0:	f8ad 0006 	strh.w	r0, [sp, #6]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80025e4:	4629      	mov	r1, r5
 80025e6:	a810      	add	r0, sp, #64	; 0x40
 80025e8:	f000 ffcf 	bl	800358a <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <lv_obj_draw+0x310>)
 80025ee:	9311      	str	r3, [sp, #68]	; 0x44
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 80025f0:	2301      	movs	r3, #1
 80025f2:	9312      	str	r3, [sp, #72]	; 0x48
            part_dsc.rect_dsc = &draw_dsc;
 80025f4:	9714      	str	r7, [sp, #80]	; 0x50
            part_dsc.draw_area = &coords;
 80025f6:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
            part_dsc.part = LV_PART_MAIN;
 80025fa:	961d      	str	r6, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80025fc:	aa10      	add	r2, sp, #64	; 0x40
 80025fe:	211a      	movs	r1, #26
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff fb83 	bl	8001d0c <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8002606:	466a      	mov	r2, sp
 8002608:	4639      	mov	r1, r7
 800260a:	4628      	mov	r0, r5
 800260c:	f006 fe90 	bl	8009330 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8002610:	aa10      	add	r2, sp, #64	; 0x40
 8002612:	211b      	movs	r1, #27
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff fb79 	bl	8001d0c <lv_event_send>
 800261a:	e697      	b.n	800234c <lv_obj_draw+0x24>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 800261c:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8002620:	f006 fd54 	bl	80090cc <lv_draw_mask_remove_custom>
            if(param) {
 8002624:	4606      	mov	r6, r0
 8002626:	2800      	cmp	r0, #0
 8002628:	d098      	beq.n	800255c <lv_obj_draw+0x234>
                lv_draw_mask_free_param(param);
 800262a:	f006 fd69 	bl	8009100 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 800262e:	4630      	mov	r0, r6
 8002630:	f009 fda2 	bl	800c178 <lv_mem_buf_release>
 8002634:	e792      	b.n	800255c <lv_obj_draw+0x234>
 8002636:	bf00      	nop
 8002638:	08010f90 	.word	0x08010f90

0800263c <lv_obj_constructor>:
{
 800263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002640:	460c      	mov	r4, r1
    lv_obj_t * parent = obj->parent;
 8002642:	684d      	ldr	r5, [r1, #4]
    if(parent) {
 8002644:	b325      	cbz	r5, 8002690 <lv_obj_constructor+0x54>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8002646:	4628      	mov	r0, r5
 8002648:	f002 fa78 	bl	8004b3c <lv_obj_get_scroll_left>
 800264c:	4607      	mov	r7, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800264e:	4628      	mov	r0, r5
 8002650:	f002 fa12 	bl	8004a78 <lv_obj_get_scroll_top>
 8002654:	4680      	mov	r8, r0
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8002656:	8aee      	ldrh	r6, [r5, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002658:	2210      	movs	r2, #16
 800265a:	2100      	movs	r1, #0
 800265c:	4628      	mov	r0, r5
 800265e:	f003 fe43 	bl	80062e8 <lv_obj_get_style_prop>
 8002662:	b283      	uxth	r3, r0
 8002664:	4433      	add	r3, r6
 8002666:	b29b      	uxth	r3, r3
 8002668:	eba3 0308 	sub.w	r3, r3, r8
 800266c:	b29a      	uxth	r2, r3
 800266e:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8002670:	1e53      	subs	r3, r2, #1
 8002672:	8363      	strh	r3, [r4, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8002674:	8aae      	ldrh	r6, [r5, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002676:	2212      	movs	r2, #18
 8002678:	2100      	movs	r1, #0
 800267a:	4628      	mov	r0, r5
 800267c:	f003 fe34 	bl	80062e8 <lv_obj_get_style_prop>
 8002680:	b280      	uxth	r0, r0
 8002682:	4406      	add	r6, r0
 8002684:	b2b6      	uxth	r6, r6
 8002686:	1bf0      	subs	r0, r6, r7
 8002688:	b283      	uxth	r3, r0
 800268a:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 800268c:	3b01      	subs	r3, #1
 800268e:	8323      	strh	r3, [r4, #24]
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 8002690:	2302      	movs	r3, #2
 8002692:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8002694:	f241 0302 	movw	r3, #4098	; 0x1002
 8002698:	61e3      	str	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 800269a:	b115      	cbz	r5, 80026a2 <lv_obj_constructor+0x66>
 800269c:	f243 0302 	movw	r3, #12290	; 0x3002
 80026a0:	61e3      	str	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 80026a2:	b11d      	cbz	r5, 80026ac <lv_obj_constructor+0x70>
 80026a4:	69e3      	ldr	r3, [r4, #28]
 80026a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026aa:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 80026ac:	69e3      	ldr	r3, [r4, #28]
 80026ae:	f043 0204 	orr.w	r2, r3, #4
 80026b2:	61e2      	str	r2, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 80026b4:	f043 0214 	orr.w	r2, r3, #20
 80026b8:	61e2      	str	r2, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 80026ba:	f043 0234 	orr.w	r2, r3, #52	; 0x34
 80026be:	61e2      	str	r2, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 80026c0:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 80026c4:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 80026c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ca:	61e3      	str	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80026cc:	b115      	cbz	r5, 80026d4 <lv_obj_constructor+0x98>
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	61e3      	str	r3, [r4, #28]
}
 80026d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026d8 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 80026d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	b08d      	sub	sp, #52	; 0x34
 80026de:	4682      	mov	sl, r0
 80026e0:	9106      	str	r1, [sp, #24]
    if(obj->state == new_state) return;
 80026e2:	8c00      	ldrh	r0, [r0, #32]
 80026e4:	9009      	str	r0, [sp, #36]	; 0x24
 80026e6:	4288      	cmp	r0, r1
 80026e8:	d008      	beq.n	80026fc <lv_obj_set_state+0x24>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
 80026ea:	f8aa 1020 	strh.w	r1, [sl, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 80026ee:	460a      	mov	r2, r1
 80026f0:	4601      	mov	r1, r0
 80026f2:	4650      	mov	r0, sl
 80026f4:	f003 fc2b 	bl	8005f4e <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 80026f8:	9008      	str	r0, [sp, #32]
 80026fa:	b910      	cbnz	r0, 8002702 <lv_obj_set_state+0x2a>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 80026fc:	b00d      	add	sp, #52	; 0x34
 80026fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8002702:	f44f 7020 	mov.w	r0, #640	; 0x280
 8002706:	f009 fcd5 	bl	800c0b4 <lv_mem_buf_get>
 800270a:	4683      	mov	fp, r0
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800270c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002710:	f009 fdf7 	bl	800c302 <lv_memset_00>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8002714:	2600      	movs	r6, #0
    uint32_t tsi = 0;
 8002716:	46b1      	mov	r9, r6
 8002718:	f8cd a014 	str.w	sl, [sp, #20]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800271c:	e043      	b.n	80027a6 <lv_obj_set_state+0xce>
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
            const_prop = style->v_p.const_props + i;
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
            if(prop_id == prop) {
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 800271e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8002722:	d13a      	bne.n	800279a <lv_obj_set_state+0xc2>
                    return LV_STYLE_RES_INHERIT;
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8002724:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8002728:	d103      	bne.n	8002732 <lv_obj_set_state+0x5a>
 800272a:	686b      	ldr	r3, [r5, #4]
 800272c:	930a      	str	r3, [sp, #40]	; 0x28
                return LV_STYLE_RES_FOUND;
 800272e:	2301      	movs	r3, #1
 8002730:	e036      	b.n	80027a0 <lv_obj_set_state+0xc8>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8002732:	f009 fed1 	bl	800c4d8 <lv_style_prop_get_default>
 8002736:	900a      	str	r0, [sp, #40]	; 0x28
 8002738:	e7f9      	b.n	800272e <lv_obj_set_state+0x56>
        for(i = 0; i < style->prop_cnt; i++) {
 800273a:	2200      	movs	r2, #0
 800273c:	79c8      	ldrb	r0, [r1, #7]
 800273e:	4282      	cmp	r2, r0
 8002740:	d22e      	bcs.n	80027a0 <lv_obj_set_state+0xc8>
            const_prop = style->v_p.const_props + i;
 8002742:	6808      	ldr	r0, [r1, #0]
 8002744:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8002748:	f830 4032 	ldrh.w	r4, [r0, r2, lsl #3]
 800274c:	f3c4 000d 	ubfx	r0, r4, #0, #14
            if(prop_id == prop) {
 8002750:	2867      	cmp	r0, #103	; 0x67
 8002752:	d0e4      	beq.n	800271e <lv_obj_set_state+0x46>
        for(i = 0; i < style->prop_cnt; i++) {
 8002754:	3201      	adds	r2, #1
 8002756:	e7f1      	b.n	800273c <lv_obj_set_state+0x64>
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
            if(prop_id == prop) {
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8002758:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800275c:	d167      	bne.n	800282e <lv_obj_set_state+0x156>
                    return LV_STYLE_RES_INHERIT;
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 800275e:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 8002762:	d104      	bne.n	800276e <lv_obj_set_state+0x96>
                    *value = lv_style_prop_get_default(prop_id);
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                    *value = values[i];
 8002764:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8002768:	930a      	str	r3, [sp, #40]	; 0x28
                }
                return LV_STYLE_RES_FOUND;
 800276a:	2301      	movs	r3, #1
 800276c:	e018      	b.n	80027a0 <lv_obj_set_state+0xc8>
                    *value = lv_style_prop_get_default(prop_id);
 800276e:	f009 feb3 	bl	800c4d8 <lv_style_prop_get_default>
 8002772:	900a      	str	r0, [sp, #40]	; 0x28
 8002774:	e7f9      	b.n	800276a <lv_obj_set_state+0x92>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8002776:	f3c2 000d 	ubfx	r0, r2, #0, #14
 800277a:	2867      	cmp	r0, #103	; 0x67
 800277c:	d110      	bne.n	80027a0 <lv_obj_set_state+0xc8>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 800277e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002782:	d156      	bne.n	8002832 <lv_obj_set_state+0x15a>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8002784:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002788:	d103      	bne.n	8002792 <lv_obj_set_state+0xba>
 800278a:	680b      	ldr	r3, [r1, #0]
 800278c:	930a      	str	r3, [sp, #40]	; 0x28
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 800278e:	2301      	movs	r3, #1
 8002790:	e006      	b.n	80027a0 <lv_obj_set_state+0xc8>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8002792:	f009 fea1 	bl	800c4d8 <lv_style_prop_get_default>
 8002796:	900a      	str	r0, [sp, #40]	; 0x28
 8002798:	e7f9      	b.n	800278e <lv_obj_set_state+0xb6>
                    return LV_STYLE_RES_INHERIT;
 800279a:	2302      	movs	r3, #2
 800279c:	e000      	b.n	80027a0 <lv_obj_set_state+0xc8>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 800279e:	4623      	mov	r3, r4
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d048      	beq.n	8002836 <lv_obj_set_state+0x15e>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80027a4:	3601      	adds	r6, #1
 80027a6:	9b05      	ldr	r3, [sp, #20]
 80027a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80027aa:	f3c3 1305 	ubfx	r3, r3, #4, #6
 80027ae:	42b3      	cmp	r3, r6
 80027b0:	f240 80c3 	bls.w	800293a <lv_obj_set_state+0x262>
 80027b4:	f1b9 0f1f 	cmp.w	r9, #31
 80027b8:	f200 8094 	bhi.w	80028e4 <lv_obj_set_state+0x20c>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80027bc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80027c0:	f8d8 500c 	ldr.w	r5, [r8, #12]
 80027c4:	00f4      	lsls	r4, r6, #3
 80027c6:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
 80027ca:	9707      	str	r7, [sp, #28]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80027d2:	f003 fbba 	bl	8005f4a <lv_obj_style_get_selector_state>
 80027d6:	4682      	mov	sl, r0
 80027d8:	9004      	str	r0, [sp, #16]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80027da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80027de:	4423      	add	r3, r4
 80027e0:	6858      	ldr	r0, [r3, #4]
 80027e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80027e6:	f003 fce7 	bl	80061b8 <lv_obj_style_get_selector_part>
 80027ea:	9002      	str	r0, [sp, #8]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80027ec:	9b06      	ldr	r3, [sp, #24]
 80027ee:	ea3a 0303 	bics.w	r3, sl, r3
 80027f2:	d1d7      	bne.n	80027a4 <lv_obj_set_state+0xcc>
        if(obj_style->is_trans) continue;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f013 0302 	ands.w	r3, r3, #2
 80027fa:	d1d3      	bne.n	80027a4 <lv_obj_set_state+0xcc>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80027fc:	5929      	ldr	r1, [r5, r4]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80027fe:	888a      	ldrh	r2, [r1, #4]
 8002800:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002804:	4282      	cmp	r2, r0
 8002806:	d098      	beq.n	800273a <lv_obj_set_state+0x62>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8002808:	79cc      	ldrb	r4, [r1, #7]
 800280a:	2c00      	cmp	r4, #0
 800280c:	d0c7      	beq.n	800279e <lv_obj_set_state+0xc6>
    if(style->prop_cnt > 1) {
 800280e:	2c01      	cmp	r4, #1
 8002810:	d9b1      	bls.n	8002776 <lv_obj_set_state+0x9e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8002812:	680f      	ldr	r7, [r1, #0]
 8002814:	eb07 0584 	add.w	r5, r7, r4, lsl #2
        for(i = 0; i < style->prop_cnt; i++) {
 8002818:	2200      	movs	r2, #0
 800281a:	4294      	cmp	r4, r2
 800281c:	d9c0      	bls.n	80027a0 <lv_obj_set_state+0xc8>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 800281e:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 8002822:	f3c1 000d 	ubfx	r0, r1, #0, #14
            if(prop_id == prop) {
 8002826:	2867      	cmp	r0, #103	; 0x67
 8002828:	d096      	beq.n	8002758 <lv_obj_set_state+0x80>
        for(i = 0; i < style->prop_cnt; i++) {
 800282a:	3201      	adds	r2, #1
 800282c:	e7f5      	b.n	800281a <lv_obj_set_state+0x142>
                    return LV_STYLE_RES_INHERIT;
 800282e:	2302      	movs	r3, #2
 8002830:	e7b6      	b.n	80027a0 <lv_obj_set_state+0xc8>
            return LV_STYLE_RES_INHERIT;
 8002832:	2302      	movs	r3, #2
 8002834:	e7b4      	b.n	80027a0 <lv_obj_set_state+0xc8>
        const lv_style_transition_dsc_t * tr = v.ptr;
 8002836:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 800283a:	2300      	movs	r3, #0
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	960b      	str	r6, [sp, #44]	; 0x2c
 8002840:	9e02      	ldr	r6, [sp, #8]
 8002842:	e020      	b.n	8002886 <lv_obj_set_state+0x1ae>
            for(t = 0; t < tsi; t++) {
 8002844:	3401      	adds	r4, #1
 8002846:	45a1      	cmp	r9, r4
 8002848:	d918      	bls.n	800287c <lv_obj_set_state+0x1a4>
                lv_style_selector_t selector = ts[t].selector;
 800284a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800284e:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8002852:	686f      	ldr	r7, [r5, #4]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8002854:	4638      	mov	r0, r7
 8002856:	f003 fb78 	bl	8005f4a <lv_obj_style_get_selector_state>
 800285a:	9002      	str	r0, [sp, #8]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 800285c:	4638      	mov	r0, r7
 800285e:	f003 fcab 	bl	80061b8 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8002862:	892a      	ldrh	r2, [r5, #8]
 8002864:	f8d8 3000 	ldr.w	r3, [r8]
 8002868:	f833 300a 	ldrh.w	r3, [r3, sl]
 800286c:	429a      	cmp	r2, r3
 800286e:	d1e9      	bne.n	8002844 <lv_obj_set_state+0x16c>
 8002870:	4286      	cmp	r6, r0
 8002872:	d1e7      	bne.n	8002844 <lv_obj_set_state+0x16c>
 8002874:	9b04      	ldr	r3, [sp, #16]
 8002876:	9a02      	ldr	r2, [sp, #8]
 8002878:	4293      	cmp	r3, r2
 800287a:	d8e3      	bhi.n	8002844 <lv_obj_set_state+0x16c>
            if(t == tsi) {
 800287c:	45a1      	cmp	r9, r4
 800287e:	d00f      	beq.n	80028a0 <lv_obj_set_state+0x1c8>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	3301      	adds	r3, #1
 8002884:	9303      	str	r3, [sp, #12]
 8002886:	f8d8 3000 	ldr.w	r3, [r8]
 800288a:	9a03      	ldr	r2, [sp, #12]
 800288c:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8002890:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002894:	b323      	cbz	r3, 80028e0 <lv_obj_set_state+0x208>
 8002896:	f1b9 0f1f 	cmp.w	r9, #31
 800289a:	d81f      	bhi.n	80028dc <lv_obj_set_state+0x204>
            for(t = 0; t < tsi; t++) {
 800289c:	2400      	movs	r4, #0
 800289e:	e7d2      	b.n	8002846 <lv_obj_set_state+0x16e>
                ts[tsi].time = tr->time;
 80028a0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80028a4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 80028a8:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80028ac:	f82b 1022 	strh.w	r1, [fp, r2, lsl #2]
                ts[tsi].delay = tr->delay;
 80028b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80028b4:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 80028b6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80028ba:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 80028bc:	f8d8 2000 	ldr.w	r2, [r8]
 80028c0:	f832 200a 	ldrh.w	r2, [r2, sl]
 80028c4:	811a      	strh	r2, [r3, #8]
                ts[tsi].user_data = tr->user_data;
 80028c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80028ca:	611a      	str	r2, [r3, #16]
                ts[tsi].selector = obj_style->selector;
 80028cc:	9a07      	ldr	r2, [sp, #28]
 80028ce:	6852      	ldr	r2, [r2, #4]
 80028d0:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80028d4:	605a      	str	r2, [r3, #4]
                tsi++;
 80028d6:	f109 0901 	add.w	r9, r9, #1
 80028da:	e7d1      	b.n	8002880 <lv_obj_set_state+0x1a8>
 80028dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80028de:	e761      	b.n	80027a4 <lv_obj_set_state+0xcc>
 80028e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80028e2:	e75f      	b.n	80027a4 <lv_obj_set_state+0xcc>
 80028e4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80028e8:	2400      	movs	r4, #0
 80028ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80028ec:	9f06      	ldr	r7, [sp, #24]
 80028ee:	e00e      	b.n	800290e <lv_obj_set_state+0x236>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 80028f0:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80028f4:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80028f8:	6868      	ldr	r0, [r5, #4]
 80028fa:	f003 fc5d 	bl	80061b8 <lv_obj_style_get_selector_part>
 80028fe:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8002900:	9500      	str	r5, [sp, #0]
 8002902:	463b      	mov	r3, r7
 8002904:	4632      	mov	r2, r6
 8002906:	4650      	mov	r0, sl
 8002908:	f003 fd64 	bl	80063d4 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 800290c:	3401      	adds	r4, #1
 800290e:	45a1      	cmp	r9, r4
 8002910:	d8ee      	bhi.n	80028f0 <lv_obj_set_state+0x218>
    lv_mem_buf_release(ts);
 8002912:	4658      	mov	r0, fp
 8002914:	f009 fc30 	bl	800c178 <lv_mem_buf_release>
    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8002918:	9b08      	ldr	r3, [sp, #32]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d013      	beq.n	8002946 <lv_obj_set_state+0x26e>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 800291e:	9b08      	ldr	r3, [sp, #32]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d014      	beq.n	800294e <lv_obj_set_state+0x276>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 8002924:	9b08      	ldr	r3, [sp, #32]
 8002926:	2b02      	cmp	r3, #2
 8002928:	f47f aee8 	bne.w	80026fc <lv_obj_set_state+0x24>
        lv_obj_invalidate(obj);
 800292c:	4650      	mov	r0, sl
 800292e:	f001 fb9e 	bl	800406e <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 8002932:	4650      	mov	r0, sl
 8002934:	f000 fe38 	bl	80035a8 <lv_obj_refresh_ext_draw_size>
 8002938:	e6e0      	b.n	80026fc <lv_obj_set_state+0x24>
 800293a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800293e:	2400      	movs	r4, #0
 8002940:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002942:	9f06      	ldr	r7, [sp, #24]
 8002944:	e7e3      	b.n	800290e <lv_obj_set_state+0x236>
        lv_obj_invalidate(obj);
 8002946:	4650      	mov	r0, sl
 8002948:	f001 fb91 	bl	800406e <lv_obj_invalidate>
 800294c:	e6d6      	b.n	80026fc <lv_obj_set_state+0x24>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800294e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002952:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8002956:	4650      	mov	r0, sl
 8002958:	f003 fdfe 	bl	8006558 <lv_obj_refresh_style>
 800295c:	e6ce      	b.n	80026fc <lv_obj_set_state+0x24>
	...

08002960 <lv_init>:
{
 8002960:	b508      	push	{r3, lr}
    if(lv_initialized) {
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <lv_init+0x4c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b103      	cbz	r3, 800296a <lv_init+0xa>
}
 8002968:	bd08      	pop	{r3, pc}
    lv_mem_init();
 800296a:	f009 fb41 	bl	800bff0 <lv_mem_init>
    _lv_timer_core_init();
 800296e:	f00a f84f 	bl	800ca10 <_lv_timer_core_init>
    _lv_fs_init();
 8002972:	f009 f8a7 	bl	800bac4 <_lv_fs_init>
    _lv_anim_core_init();
 8002976:	f008 fb99 	bl	800b0ac <_lv_anim_core_init>
    _lv_group_init();
 800297a:	f7ff faef 	bl	8001f5c <_lv_group_init>
    lv_draw_init();
 800297e:	f005 fad9 	bl	8007f34 <lv_draw_init>
    _lv_obj_style_init();
 8002982:	f003 fab3 	bl	8005eec <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8002986:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800298a:	4809      	ldr	r0, [pc, #36]	; (80029b0 <lv_init+0x50>)
 800298c:	f009 f9b6 	bl	800bcfc <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8002990:	215c      	movs	r1, #92	; 0x5c
 8002992:	4808      	ldr	r0, [pc, #32]	; (80029b4 <lv_init+0x54>)
 8002994:	f009 f9b2 	bl	800bcfc <_lv_ll_init>
    _lv_refr_init();
 8002998:	f004 fd86 	bl	80074a8 <_lv_refr_init>
    _lv_img_decoder_init();
 800299c:	f007 f9d4 	bl	8009d48 <_lv_img_decoder_init>
    lv_extra_init();
 80029a0:	f007 ffe0 	bl	800a964 <lv_extra_init>
    lv_initialized = true;
 80029a4:	4b01      	ldr	r3, [pc, #4]	; (80029ac <lv_init+0x4c>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
    LV_LOG_TRACE("finished");
 80029aa:	e7dd      	b.n	8002968 <lv_init+0x8>
 80029ac:	20000b48 	.word	0x20000b48
 80029b0:	20000bb4 	.word	0x20000bb4
 80029b4:	20000bc0 	.word	0x20000bc0

080029b8 <lv_obj_create>:
{
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80029bc:	4803      	ldr	r0, [pc, #12]	; (80029cc <lv_obj_create+0x14>)
 80029be:	f000 fad3 	bl	8002f68 <lv_obj_class_create_obj>
 80029c2:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80029c4:	f000 fb60 	bl	8003088 <lv_obj_class_init_obj>
}
 80029c8:	4620      	mov	r0, r4
 80029ca:	bd10      	pop	{r4, pc}
 80029cc:	08010f90 	.word	0x08010f90

080029d0 <lv_obj_clear_flag>:
{
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	4604      	mov	r4, r0
 80029d6:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 80029d8:	f000 fefc 	bl	80037d4 <lv_obj_is_layout_positioned>
 80029dc:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 80029de:	f015 0f10 	tst.w	r5, #16
 80029e2:	d115      	bne.n	8002a10 <lv_obj_clear_flag+0x40>
    obj->flags &= (~f);
 80029e4:	69e3      	ldr	r3, [r4, #28]
 80029e6:	ea23 0305 	bic.w	r3, r3, r5
 80029ea:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 80029ec:	f015 0f01 	tst.w	r5, #1
 80029f0:	d11c      	bne.n	8002a2c <lv_obj_clear_flag+0x5c>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 80029f2:	4620      	mov	r0, r4
 80029f4:	f000 feee 	bl	80037d4 <lv_obj_is_layout_positioned>
 80029f8:	42b0      	cmp	r0, r6
 80029fa:	d102      	bne.n	8002a02 <lv_obj_clear_flag+0x32>
 80029fc:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8002a00:	d004      	beq.n	8002a0c <lv_obj_clear_flag+0x3c>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8002a02:	4620      	mov	r0, r4
 8002a04:	f004 f897 	bl	8006b36 <lv_obj_get_parent>
 8002a08:	f000 fefe 	bl	8003808 <lv_obj_mark_layout_as_dirty>
}
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8002a10:	aa02      	add	r2, sp, #8
 8002a12:	4669      	mov	r1, sp
 8002a14:	4620      	mov	r0, r4
 8002a16:	f002 fcc7 	bl	80053a8 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8002a1a:	4669      	mov	r1, sp
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f001 fafe 	bl	800401e <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8002a22:	a902      	add	r1, sp, #8
 8002a24:	4620      	mov	r0, r4
 8002a26:	f001 fafa 	bl	800401e <lv_obj_invalidate_area>
 8002a2a:	e7db      	b.n	80029e4 <lv_obj_clear_flag+0x14>
        lv_obj_invalidate(obj);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f001 fb1e 	bl	800406e <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8002a32:	4620      	mov	r0, r4
 8002a34:	f000 fece 	bl	80037d4 <lv_obj_is_layout_positioned>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d0da      	beq.n	80029f2 <lv_obj_clear_flag+0x22>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f004 f87a 	bl	8006b36 <lv_obj_get_parent>
 8002a42:	f000 fee1 	bl	8003808 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f000 fede 	bl	8003808 <lv_obj_mark_layout_as_dirty>
 8002a4c:	e7d1      	b.n	80029f2 <lv_obj_clear_flag+0x22>

08002a4e <lv_obj_add_state>:
{
 8002a4e:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state | state;
 8002a50:	8c03      	ldrh	r3, [r0, #32]
 8002a52:	ea43 0201 	orr.w	r2, r3, r1
    if(obj->state != new_state) {
 8002a56:	ea31 0303 	bics.w	r3, r1, r3
 8002a5a:	d100      	bne.n	8002a5e <lv_obj_add_state+0x10>
}
 8002a5c:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 8002a5e:	4611      	mov	r1, r2
 8002a60:	f7ff fe3a 	bl	80026d8 <lv_obj_set_state>
}
 8002a64:	e7fa      	b.n	8002a5c <lv_obj_add_state+0xe>

08002a66 <lv_obj_clear_state>:
{
 8002a66:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state & (~state);
 8002a68:	8c02      	ldrh	r2, [r0, #32]
 8002a6a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8002a6e:	ea23 0101 	bic.w	r1, r3, r1
 8002a72:	b289      	uxth	r1, r1
    if(obj->state != new_state) {
 8002a74:	428a      	cmp	r2, r1
 8002a76:	d100      	bne.n	8002a7a <lv_obj_clear_state+0x14>
}
 8002a78:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 8002a7a:	f7ff fe2d 	bl	80026d8 <lv_obj_set_state>
}
 8002a7e:	e7fb      	b.n	8002a78 <lv_obj_clear_state+0x12>

08002a80 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 8002a80:	69c3      	ldr	r3, [r0, #28]
 8002a82:	ea31 0303 	bics.w	r3, r1, r3
}
 8002a86:	bf0c      	ite	eq
 8002a88:	2001      	moveq	r0, #1
 8002a8a:	2000      	movne	r0, #0
 8002a8c:	4770      	bx	lr

08002a8e <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 8002a8e:	69c3      	ldr	r3, [r0, #28]
 8002a90:	420b      	tst	r3, r1
}
 8002a92:	bf14      	ite	ne
 8002a94:	2001      	movne	r0, #1
 8002a96:	2000      	moveq	r0, #0
 8002a98:	4770      	bx	lr

08002a9a <lv_obj_get_state>:
}
 8002a9a:	8c00      	ldrh	r0, [r0, #32]
 8002a9c:	4770      	bx	lr

08002a9e <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8002a9e:	6880      	ldr	r0, [r0, #8]
 8002aa0:	b100      	cbz	r0, 8002aa4 <lv_obj_get_group+0x6>
 8002aa2:	6880      	ldr	r0, [r0, #8]
}
 8002aa4:	4770      	bx	lr

08002aa6 <lv_obj_event>:
{
 8002aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8002aac:	4608      	mov	r0, r1
 8002aae:	f7ff f95b 	bl	8001d68 <lv_event_get_code>
 8002ab2:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	f7ff f955 	bl	8001d64 <lv_event_get_current_target>
 8002aba:	4605      	mov	r5, r0
    if(code == LV_EVENT_PRESSED) {
 8002abc:	2c01      	cmp	r4, #1
 8002abe:	d029      	beq.n	8002b14 <lv_obj_event+0x6e>
    else if(code == LV_EVENT_RELEASED) {
 8002ac0:	2c08      	cmp	r4, #8
 8002ac2:	d02c      	beq.n	8002b1e <lv_obj_event+0x78>
    else if(code == LV_EVENT_PRESS_LOST) {
 8002ac4:	2c03      	cmp	r4, #3
 8002ac6:	d04f      	beq.n	8002b68 <lv_obj_event+0xc2>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8002ac8:	2c2a      	cmp	r4, #42	; 0x2a
 8002aca:	d051      	beq.n	8002b70 <lv_obj_event+0xca>
    else if(code == LV_EVENT_KEY) {
 8002acc:	2c0d      	cmp	r4, #13
 8002ace:	d05d      	beq.n	8002b8c <lv_obj_event+0xe6>
    else if(code == LV_EVENT_FOCUSED) {
 8002ad0:	2c0e      	cmp	r4, #14
 8002ad2:	f000 812d 	beq.w	8002d30 <lv_obj_event+0x28a>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8002ad6:	2c09      	cmp	r4, #9
 8002ad8:	f000 815b 	beq.w	8002d92 <lv_obj_event+0x2ec>
    else if(code == LV_EVENT_SCROLL_END) {
 8002adc:	2c0a      	cmp	r4, #10
 8002ade:	f000 815c 	beq.w	8002d9a <lv_obj_event+0x2f4>
    else if(code == LV_EVENT_DEFOCUSED) {
 8002ae2:	2c0f      	cmp	r4, #15
 8002ae4:	f000 8170 	beq.w	8002dc8 <lv_obj_event+0x322>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8002ae8:	2c29      	cmp	r4, #41	; 0x29
 8002aea:	f000 8171 	beq.w	8002dd0 <lv_obj_event+0x32a>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8002aee:	2c22      	cmp	r4, #34	; 0x22
 8002af0:	f000 818e 	beq.w	8002e10 <lv_obj_event+0x36a>
    else if(code == LV_EVENT_CHILD_DELETED) {
 8002af4:	2c24      	cmp	r4, #36	; 0x24
 8002af6:	f000 81af 	beq.w	8002e58 <lv_obj_event+0x3b2>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8002afa:	2c13      	cmp	r4, #19
 8002afc:	f000 81b5 	beq.w	8002e6a <lv_obj_event+0x3c4>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8002b00:	2c15      	cmp	r4, #21
 8002b02:	d003      	beq.n	8002b0c <lv_obj_event+0x66>
 8002b04:	2c18      	cmp	r4, #24
 8002b06:	d001      	beq.n	8002b0c <lv_obj_event+0x66>
 8002b08:	2c12      	cmp	r4, #18
 8002b0a:	d106      	bne.n	8002b1a <lv_obj_event+0x74>
        lv_obj_draw(e);
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	f7ff fc0b 	bl	8002328 <lv_obj_draw>
 8002b12:	e002      	b.n	8002b1a <lv_obj_event+0x74>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8002b14:	2120      	movs	r1, #32
 8002b16:	f7ff ff9a 	bl	8002a4e <lv_obj_add_state>
}
 8002b1a:	b005      	add	sp, #20
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8002b1e:	2120      	movs	r1, #32
 8002b20:	f7ff ffa1 	bl	8002a66 <lv_obj_clear_state>
        lv_indev_t * indev = lv_event_get_indev(e);
 8002b24:	4630      	mov	r0, r6
 8002b26:	f7ff f939 	bl	8001d9c <lv_event_get_indev>
        if(lv_indev_get_scroll_obj(indev) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8002b2a:	f7ff fb12 	bl	8002152 <lv_indev_get_scroll_obj>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d1f3      	bne.n	8002b1a <lv_obj_event+0x74>
 8002b32:	2108      	movs	r1, #8
 8002b34:	4628      	mov	r0, r5
 8002b36:	f7ff ffa3 	bl	8002a80 <lv_obj_has_flag>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d0ed      	beq.n	8002b1a <lv_obj_event+0x74>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f7ff ffab 	bl	8002a9a <lv_obj_get_state>
 8002b44:	f010 0f01 	tst.w	r0, #1
 8002b48:	d109      	bne.n	8002b5e <lv_obj_event+0xb8>
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f7ff ff7e 	bl	8002a4e <lv_obj_add_state>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8002b52:	2200      	movs	r2, #0
 8002b54:	211c      	movs	r1, #28
 8002b56:	4628      	mov	r0, r5
 8002b58:	f7ff f8d8 	bl	8001d0c <lv_event_send>
            if(res != LV_RES_OK) return;
 8002b5c:	e7dd      	b.n	8002b1a <lv_obj_event+0x74>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4628      	mov	r0, r5
 8002b62:	f7ff ff80 	bl	8002a66 <lv_obj_clear_state>
 8002b66:	e7f4      	b.n	8002b52 <lv_obj_event+0xac>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8002b68:	2120      	movs	r1, #32
 8002b6a:	f7ff ff7c 	bl	8002a66 <lv_obj_clear_state>
 8002b6e:	e7d4      	b.n	8002b1a <lv_obj_event+0x74>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8002b70:	f004 f821 	bl	8006bb6 <lv_obj_get_child_cnt>
 8002b74:	4606      	mov	r6, r0
        for(uint32_t i = 0; i < child_cnt; i++) {
 8002b76:	2400      	movs	r4, #0
 8002b78:	42b4      	cmp	r4, r6
 8002b7a:	d2ce      	bcs.n	8002b1a <lv_obj_event+0x74>
            lv_obj_t * child = obj->spec_attr->children[i];
 8002b7c:	68ab      	ldr	r3, [r5, #8]
 8002b7e:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 8002b80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b84:	f000 fe40 	bl	8003808 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8002b88:	3401      	adds	r4, #1
 8002b8a:	e7f5      	b.n	8002b78 <lv_obj_event+0xd2>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8002b8c:	2108      	movs	r1, #8
 8002b8e:	f7ff ff77 	bl	8002a80 <lv_obj_has_flag>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d13e      	bne.n	8002c14 <lv_obj_event+0x16e>
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8002b96:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f7ff ff70 	bl	8002a80 <lv_obj_has_flag>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d0ba      	beq.n	8002b1a <lv_obj_event+0x74>
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	f000 fa49 	bl	800303c <lv_obj_is_editable>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d1b5      	bne.n	8002b1a <lv_obj_event+0x74>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f001 ffc4 	bl	8004b3c <lv_obj_get_scroll_left>
 8002bb4:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	f002 f830 	bl	8004c1c <lv_obj_get_scroll_right>
 8002bbc:	4604      	mov	r4, r0
            char c = *((char *)lv_event_get_param(e));
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f7ff f8d6 	bl	8001d70 <lv_event_get_param>
 8002bc4:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 8002bc6:	2b12      	cmp	r3, #18
 8002bc8:	d042      	beq.n	8002c50 <lv_obj_event+0x1aa>
            else if(c == LV_KEY_UP) {
 8002bca:	2b11      	cmp	r3, #17
 8002bcc:	d054      	beq.n	8002c78 <lv_obj_event+0x1d2>
            else if(c == LV_KEY_RIGHT) {
 8002bce:	2b13      	cmp	r3, #19
 8002bd0:	d066      	beq.n	8002ca0 <lv_obj_event+0x1fa>
            else if(c == LV_KEY_LEFT) {
 8002bd2:	2b14      	cmp	r3, #20
 8002bd4:	d1a1      	bne.n	8002b1a <lv_obj_event+0x74>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f001 ff26 	bl	8004a28 <lv_obj_get_scroll_dir>
 8002bdc:	f010 0f03 	tst.w	r0, #3
 8002be0:	f000 8090 	beq.w	8002d04 <lv_obj_event+0x25e>
 8002be4:	2f00      	cmp	r7, #0
 8002be6:	dc02      	bgt.n	8002bee <lv_obj_event+0x148>
 8002be8:	2c00      	cmp	r4, #0
 8002bea:	f340 808b 	ble.w	8002d04 <lv_obj_event+0x25e>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f001 ff32 	bl	8004a58 <lv_obj_get_scroll_x>
 8002bf4:	b284      	uxth	r4, r0
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 fe58 	bl	80038ac <lv_obj_get_width>
 8002bfc:	4601      	mov	r1, r0
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	f2c0 8094 	blt.w	8002d2c <lv_obj_event+0x286>
 8002c04:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 8002c08:	2200      	movs	r2, #0
 8002c0a:	b209      	sxth	r1, r1
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f002 f9bf 	bl	8004f90 <lv_obj_scroll_to_x>
 8002c12:	e782      	b.n	8002b1a <lv_obj_event+0x74>
            char c = *((char *)lv_event_get_param(e));
 8002c14:	4630      	mov	r0, r6
 8002c16:	f7ff f8ab 	bl	8001d70 <lv_event_get_param>
 8002c1a:	7804      	ldrb	r4, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8002c1c:	2c13      	cmp	r4, #19
 8002c1e:	d00a      	beq.n	8002c36 <lv_obj_event+0x190>
 8002c20:	2c11      	cmp	r4, #17
 8002c22:	d008      	beq.n	8002c36 <lv_obj_event+0x190>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8002c24:	2c14      	cmp	r4, #20
 8002c26:	d001      	beq.n	8002c2c <lv_obj_event+0x186>
 8002c28:	2c12      	cmp	r4, #18
 8002c2a:	d108      	bne.n	8002c3e <lv_obj_event+0x198>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f7ff ff19 	bl	8002a66 <lv_obj_clear_state>
 8002c34:	e003      	b.n	8002c3e <lv_obj_event+0x198>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8002c36:	2101      	movs	r1, #1
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f7ff ff08 	bl	8002a4e <lv_obj_add_state>
            if(c != LV_KEY_ENTER) {
 8002c3e:	2c0a      	cmp	r4, #10
 8002c40:	f43f af6b 	beq.w	8002b1a <lv_obj_event+0x74>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8002c44:	2200      	movs	r2, #0
 8002c46:	211c      	movs	r1, #28
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f7ff f85f 	bl	8001d0c <lv_event_send>
                if(res != LV_RES_OK) return;
 8002c4e:	e764      	b.n	8002b1a <lv_obj_event+0x74>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8002c50:	4628      	mov	r0, r5
 8002c52:	f001 ff09 	bl	8004a68 <lv_obj_get_scroll_y>
 8002c56:	b284      	uxth	r4, r0
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f000 fe2f 	bl	80038bc <lv_obj_get_height>
 8002c5e:	4601      	mov	r1, r0
 8002c60:	2800      	cmp	r0, #0
 8002c62:	db07      	blt.n	8002c74 <lv_obj_event+0x1ce>
 8002c64:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8002c68:	2200      	movs	r2, #0
 8002c6a:	b209      	sxth	r1, r1
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f002 f9a3 	bl	8004fb8 <lv_obj_scroll_to_y>
 8002c72:	e752      	b.n	8002b1a <lv_obj_event+0x74>
 8002c74:	1cc1      	adds	r1, r0, #3
 8002c76:	e7f5      	b.n	8002c64 <lv_obj_event+0x1be>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f001 fef5 	bl	8004a68 <lv_obj_get_scroll_y>
 8002c7e:	b284      	uxth	r4, r0
 8002c80:	4628      	mov	r0, r5
 8002c82:	f000 fe1b 	bl	80038bc <lv_obj_get_height>
 8002c86:	4601      	mov	r1, r0
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	db07      	blt.n	8002c9c <lv_obj_event+0x1f6>
 8002c8c:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 8002c90:	2200      	movs	r2, #0
 8002c92:	b209      	sxth	r1, r1
 8002c94:	4628      	mov	r0, r5
 8002c96:	f002 f98f 	bl	8004fb8 <lv_obj_scroll_to_y>
 8002c9a:	e73e      	b.n	8002b1a <lv_obj_event+0x74>
 8002c9c:	1cc1      	adds	r1, r0, #3
 8002c9e:	e7f5      	b.n	8002c8c <lv_obj_event+0x1e6>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	f001 fec1 	bl	8004a28 <lv_obj_get_scroll_dir>
 8002ca6:	f010 0f03 	tst.w	r0, #3
 8002caa:	d015      	beq.n	8002cd8 <lv_obj_event+0x232>
 8002cac:	2f00      	cmp	r7, #0
 8002cae:	dc01      	bgt.n	8002cb4 <lv_obj_event+0x20e>
 8002cb0:	2c00      	cmp	r4, #0
 8002cb2:	dd11      	ble.n	8002cd8 <lv_obj_event+0x232>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f001 fecf 	bl	8004a58 <lv_obj_get_scroll_x>
 8002cba:	b284      	uxth	r4, r0
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f000 fdf5 	bl	80038ac <lv_obj_get_width>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	db1b      	blt.n	8002d00 <lv_obj_event+0x25a>
 8002cc8:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8002ccc:	2200      	movs	r2, #0
 8002cce:	b209      	sxth	r1, r1
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f002 f95d 	bl	8004f90 <lv_obj_scroll_to_x>
 8002cd6:	e720      	b.n	8002b1a <lv_obj_event+0x74>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f001 fec5 	bl	8004a68 <lv_obj_get_scroll_y>
 8002cde:	b284      	uxth	r4, r0
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 fdeb 	bl	80038bc <lv_obj_get_height>
 8002ce6:	4601      	mov	r1, r0
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	db07      	blt.n	8002cfc <lv_obj_event+0x256>
 8002cec:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	b209      	sxth	r1, r1
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f002 f95f 	bl	8004fb8 <lv_obj_scroll_to_y>
 8002cfa:	e70e      	b.n	8002b1a <lv_obj_event+0x74>
 8002cfc:	1cc1      	adds	r1, r0, #3
 8002cfe:	e7f5      	b.n	8002cec <lv_obj_event+0x246>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8002d00:	1cc1      	adds	r1, r0, #3
 8002d02:	e7e1      	b.n	8002cc8 <lv_obj_event+0x222>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8002d04:	4628      	mov	r0, r5
 8002d06:	f001 feaf 	bl	8004a68 <lv_obj_get_scroll_y>
 8002d0a:	b284      	uxth	r4, r0
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 fdd5 	bl	80038bc <lv_obj_get_height>
 8002d12:	4601      	mov	r1, r0
 8002d14:	2800      	cmp	r0, #0
 8002d16:	db07      	blt.n	8002d28 <lv_obj_event+0x282>
 8002d18:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	b209      	sxth	r1, r1
 8002d20:	4628      	mov	r0, r5
 8002d22:	f002 f949 	bl	8004fb8 <lv_obj_scroll_to_y>
 8002d26:	e6f8      	b.n	8002b1a <lv_obj_event+0x74>
 8002d28:	1cc1      	adds	r1, r0, #3
 8002d2a:	e7f5      	b.n	8002d18 <lv_obj_event+0x272>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8002d2c:	1cc1      	adds	r1, r0, #3
 8002d2e:	e769      	b.n	8002c04 <lv_obj_event+0x15e>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8002d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d34:	f7ff fea4 	bl	8002a80 <lv_obj_has_flag>
 8002d38:	b9b0      	cbnz	r0, 8002d68 <lv_obj_event+0x2c2>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f7ff feaf 	bl	8002a9e <lv_obj_get_group>
 8002d40:	f7ff f9e2 	bl	8002108 <lv_group_get_editing>
 8002d44:	4604      	mov	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
 8002d46:	f7ff f9e7 	bl	8002118 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8002d4a:	b190      	cbz	r0, 8002d72 <lv_obj_event+0x2cc>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8002d4c:	f7ff f9ea 	bl	8002124 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8002d50:	2802      	cmp	r0, #2
 8002d52:	d012      	beq.n	8002d7a <lv_obj_event+0x2d4>
 8002d54:	2804      	cmp	r0, #4
 8002d56:	d012      	beq.n	8002d7e <lv_obj_event+0x2d8>
        lv_state_t state = LV_STATE_FOCUSED;
 8002d58:	2102      	movs	r1, #2
        if(editing) {
 8002d5a:	b194      	cbz	r4, 8002d82 <lv_obj_event+0x2dc>
            lv_obj_add_state(obj, state);
 8002d5c:	f041 0108 	orr.w	r1, r1, #8
 8002d60:	4628      	mov	r0, r5
 8002d62:	f7ff fe74 	bl	8002a4e <lv_obj_add_state>
 8002d66:	e6d8      	b.n	8002b1a <lv_obj_event+0x74>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f002 fafc 	bl	8005368 <lv_obj_scroll_to_view_recursive>
 8002d70:	e7e3      	b.n	8002d3a <lv_obj_event+0x294>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8002d72:	4630      	mov	r0, r6
 8002d74:	f7ff f812 	bl	8001d9c <lv_event_get_indev>
 8002d78:	e7e8      	b.n	8002d4c <lv_obj_event+0x2a6>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8002d7a:	2106      	movs	r1, #6
 8002d7c:	e7ed      	b.n	8002d5a <lv_obj_event+0x2b4>
 8002d7e:	2106      	movs	r1, #6
 8002d80:	e7eb      	b.n	8002d5a <lv_obj_event+0x2b4>
            lv_obj_add_state(obj, state);
 8002d82:	4628      	mov	r0, r5
 8002d84:	f7ff fe63 	bl	8002a4e <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8002d88:	2108      	movs	r1, #8
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f7ff fe6b 	bl	8002a66 <lv_obj_clear_state>
 8002d90:	e6c3      	b.n	8002b1a <lv_obj_event+0x74>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8002d92:	2140      	movs	r1, #64	; 0x40
 8002d94:	f7ff fe5b 	bl	8002a4e <lv_obj_add_state>
 8002d98:	e6bf      	b.n	8002b1a <lv_obj_event+0x74>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8002d9a:	2140      	movs	r1, #64	; 0x40
 8002d9c:	f7ff fe63 	bl	8002a66 <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8002da0:	4628      	mov	r0, r5
 8002da2:	f001 fe39 	bl	8004a18 <lv_obj_get_scrollbar_mode>
 8002da6:	2802      	cmp	r0, #2
 8002da8:	f47f aeb7 	bne.w	8002b1a <lv_obj_event+0x74>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8002dac:	aa02      	add	r2, sp, #8
 8002dae:	4669      	mov	r1, sp
 8002db0:	4628      	mov	r0, r5
 8002db2:	f002 faf9 	bl	80053a8 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8002db6:	4669      	mov	r1, sp
 8002db8:	4628      	mov	r0, r5
 8002dba:	f001 f930 	bl	800401e <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8002dbe:	a902      	add	r1, sp, #8
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f001 f92c 	bl	800401e <lv_obj_invalidate_area>
 8002dc6:	e6a8      	b.n	8002b1a <lv_obj_event+0x74>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8002dc8:	210e      	movs	r1, #14
 8002dca:	f7ff fe4c 	bl	8002a66 <lv_obj_clear_state>
 8002dce:	e6a4      	b.n	8002b1a <lv_obj_event+0x74>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8002dd0:	2209      	movs	r2, #9
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f003 fa88 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 8002dd8:	b2c4      	uxtb	r4, r0
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8002dda:	220a      	movs	r2, #10
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4628      	mov	r0, r5
 8002de0:	f003 fa82 	bl	80062e8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8002de4:	b280      	uxth	r0, r0
        if(layout || align) {
 8002de6:	b900      	cbnz	r0, 8002dea <lv_obj_event+0x344>
 8002de8:	b114      	cbz	r4, 8002df0 <lv_obj_event+0x34a>
            lv_obj_mark_layout_as_dirty(obj);
 8002dea:	4628      	mov	r0, r5
 8002dec:	f000 fd0c 	bl	8003808 <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8002df0:	4628      	mov	r0, r5
 8002df2:	f003 fee0 	bl	8006bb6 <lv_obj_get_child_cnt>
 8002df6:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 8002df8:	2400      	movs	r4, #0
 8002dfa:	e006      	b.n	8002e0a <lv_obj_event+0x364>
            lv_obj_t * child = obj->spec_attr->children[i];
 8002dfc:	68ab      	ldr	r3, [r5, #8]
 8002dfe:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 8002e00:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002e04:	f000 fd00 	bl	8003808 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8002e08:	3401      	adds	r4, #1
 8002e0a:	42b4      	cmp	r4, r6
 8002e0c:	d3f6      	bcc.n	8002dfc <lv_obj_event+0x356>
 8002e0e:	e684      	b.n	8002b1a <lv_obj_event+0x74>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8002e10:	2201      	movs	r2, #1
 8002e12:	2100      	movs	r1, #0
 8002e14:	f003 fa68 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002e18:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f003 fa62 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002e24:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8002e26:	2209      	movs	r2, #9
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f003 fa5c 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 8002e30:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8002e32:	220a      	movs	r2, #10
 8002e34:	2100      	movs	r1, #0
 8002e36:	4628      	mov	r0, r5
 8002e38:	f003 fa56 	bl	80062e8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8002e3c:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8002e3e:	b938      	cbnz	r0, 8002e50 <lv_obj_event+0x3aa>
 8002e40:	b934      	cbnz	r4, 8002e50 <lv_obj_event+0x3aa>
 8002e42:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8002e46:	429f      	cmp	r7, r3
 8002e48:	d002      	beq.n	8002e50 <lv_obj_event+0x3aa>
 8002e4a:	429e      	cmp	r6, r3
 8002e4c:	f47f ae65 	bne.w	8002b1a <lv_obj_event+0x74>
            lv_obj_mark_layout_as_dirty(obj);
 8002e50:	4628      	mov	r0, r5
 8002e52:	f000 fcd9 	bl	8003808 <lv_obj_mark_layout_as_dirty>
 8002e56:	e660      	b.n	8002b1a <lv_obj_event+0x74>
        obj->readjust_scroll_after_layout = 1;
 8002e58:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
        lv_obj_mark_layout_as_dirty(obj);
 8002e64:	f000 fcd0 	bl	8003808 <lv_obj_mark_layout_as_dirty>
 8002e68:	e657      	b.n	8002b1a <lv_obj_event+0x74>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f000 fb21 	bl	80034b2 <lv_obj_calculate_ext_draw_size>
 8002e70:	4601      	mov	r1, r0
        lv_event_set_ext_draw_size(e, d);
 8002e72:	4630      	mov	r0, r6
 8002e74:	f7fe ffaf 	bl	8001dd6 <lv_event_set_ext_draw_size>
 8002e78:	e64f      	b.n	8002b1a <lv_obj_event+0x74>
	...

08002e7c <lv_obj_destructor>:
{
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 8002e80:	4608      	mov	r0, r1
 8002e82:	f7fe ff77 	bl	8001d74 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8002e86:	2000      	movs	r0, #0
 8002e88:	f003 f838 	bl	8005efc <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, (lv_style_selector_t)LV_PART_ANY | (lv_style_selector_t)LV_STATE_ANY);
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <lv_obj_destructor+0x64>)
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4620      	mov	r0, r4
 8002e92:	f003 fccb 	bl	800682c <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f003 f830 	bl	8005efc <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f008 f936 	bl	800b110 <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f7ff fdfa 	bl	8002a9e <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8002eaa:	b110      	cbz	r0, 8002eb2 <lv_obj_destructor+0x36>
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff f89d 	bl	8001fec <lv_group_remove_obj>
    if(obj->spec_attr) {
 8002eb2:	68a3      	ldr	r3, [r4, #8]
 8002eb4:	b19b      	cbz	r3, 8002ede <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	b120      	cbz	r0, 8002ec4 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 8002eba:	f009 f8c3 	bl	800c044 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8002ebe:	68a3      	ldr	r3, [r4, #8]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 8002ec4:	68a3      	ldr	r3, [r4, #8]
 8002ec6:	68d8      	ldr	r0, [r3, #12]
 8002ec8:	b120      	cbz	r0, 8002ed4 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 8002eca:	f009 f8bb 	bl	800c044 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8002ece:	68a3      	ldr	r3, [r4, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 8002ed4:	68a0      	ldr	r0, [r4, #8]
 8002ed6:	f009 f8b5 	bl	800c044 <lv_mem_free>
        obj->spec_attr = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60a3      	str	r3, [r4, #8]
}
 8002ede:	bd10      	pop	{r4, pc}
 8002ee0:	000fffff 	.word	0x000fffff

08002ee4 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 8002ee4:	6883      	ldr	r3, [r0, #8]
 8002ee6:	b103      	cbz	r3, 8002eea <lv_obj_allocate_spec_attr+0x6>
 8002ee8:	4770      	bx	lr
{
 8002eea:	b510      	push	{r4, lr}
 8002eec:	4604      	mov	r4, r0
        x++;
 8002eee:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <lv_obj_allocate_spec_attr+0x3c>)
 8002ef0:	6853      	ldr	r3, [r2, #4]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	6053      	str	r3, [r2, #4]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8002ef6:	201c      	movs	r0, #28
 8002ef8:	f009 f886 	bl	800c008 <lv_mem_alloc>
 8002efc:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8002efe:	b168      	cbz	r0, 8002f1c <lv_obj_allocate_spec_attr+0x38>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8002f00:	211c      	movs	r1, #28
 8002f02:	f009 f9fe 	bl	800c302 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8002f06:	68a2      	ldr	r2, [r4, #8]
 8002f08:	7e53      	ldrb	r3, [r2, #25]
 8002f0a:	f043 030f 	orr.w	r3, r3, #15
 8002f0e:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8002f10:	68a2      	ldr	r2, [r4, #8]
 8002f12:	7e13      	ldrb	r3, [r2, #24]
 8002f14:	f043 0303 	orr.w	r3, r3, #3
 8002f18:	7613      	strb	r3, [r2, #24]
}
 8002f1a:	bd10      	pop	{r4, pc}
        LV_ASSERT_MALLOC(obj->spec_attr);
 8002f1c:	e7fe      	b.n	8002f1c <lv_obj_allocate_spec_attr+0x38>
 8002f1e:	bf00      	nop
 8002f20:	20000b48 	.word	0x20000b48

08002f24 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4604      	mov	r4, r0
    const lv_obj_class_t * original_class_p = obj->class_p;
 8002f28:	6805      	ldr	r5, [r0, #0]

    if(obj->class_p->base_class) {
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	b113      	cbz	r3, 8002f34 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8002f2e:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8002f30:	f7ff fff8 	bl	8002f24 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 8002f34:	6025      	str	r5, [r4, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8002f36:	686b      	ldr	r3, [r5, #4]
 8002f38:	b113      	cbz	r3, 8002f40 <lv_obj_construct+0x1c>
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	4798      	blx	r3
}
 8002f40:	bd38      	pop	{r3, r4, r5, pc}
	...

08002f44 <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
 8002f44:	e000      	b.n	8002f48 <get_instance_size+0x4>
 8002f46:	6800      	ldr	r0, [r0, #0]
 8002f48:	b120      	cbz	r0, 8002f54 <get_instance_size+0x10>
 8002f4a:	6982      	ldr	r2, [r0, #24]
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <get_instance_size+0x20>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f8      	beq.n	8002f46 <get_instance_size+0x2>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8002f54:	b118      	cbz	r0, 8002f5e <get_instance_size+0x1a>

    return base->instance_size;
 8002f56:	6980      	ldr	r0, [r0, #24]
 8002f58:	f3c0 100f 	ubfx	r0, r0, #4, #16
 8002f5c:	4770      	bx	lr
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8002f5e:	2000      	movs	r0, #0
}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	000ffff0 	.word	0x000ffff0

08002f68 <lv_obj_class_create_obj>:
{
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	460c      	mov	r4, r1
    uint32_t s = get_instance_size(class_p);
 8002f6e:	f7ff ffe9 	bl	8002f44 <get_instance_size>
 8002f72:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_mem_alloc(s);
 8002f74:	f009 f848 	bl	800c008 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 8002f78:	4607      	mov	r7, r0
 8002f7a:	b1f0      	cbz	r0, 8002fba <lv_obj_class_create_obj+0x52>
    lv_memset_00(obj, s);
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	f009 f9c0 	bl	800c302 <lv_memset_00>
    obj->class_p = class_p;
 8002f82:	603d      	str	r5, [r7, #0]
    obj->parent = parent;
 8002f84:	607c      	str	r4, [r7, #4]
    if(parent == NULL) {
 8002f86:	b1d4      	cbz	r4, 8002fbe <lv_obj_class_create_obj+0x56>
        if(parent->spec_attr == NULL) {
 8002f88:	68a3      	ldr	r3, [r4, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d047      	beq.n	800301e <lv_obj_class_create_obj+0xb6>
        if(parent->spec_attr->children == NULL) {
 8002f8e:	68a5      	ldr	r5, [r4, #8]
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d047      	beq.n	8003026 <lv_obj_class_create_obj+0xbe>
            parent->spec_attr->child_cnt++;
 8002f96:	686b      	ldr	r3, [r5, #4]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	606b      	str	r3, [r5, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8002f9c:	68a5      	ldr	r5, [r4, #8]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8002f9e:	6869      	ldr	r1, [r5, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8002fa0:	0089      	lsls	r1, r1, #2
 8002fa2:	6828      	ldr	r0, [r5, #0]
 8002fa4:	f009 f86c 	bl	800c080 <lv_mem_realloc>
 8002fa8:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8002faa:	68a3      	ldr	r3, [r4, #8]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
}
 8002fba:	4638      	mov	r0, r7
 8002fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_disp_t * disp = lv_disp_get_default();
 8002fbe:	f007 ff0f 	bl	800ade0 <lv_disp_get_default>
        if(!disp) {
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	b1f0      	cbz	r0, 8003004 <lv_obj_class_create_obj+0x9c>
        if(disp->screens == NULL) {
 8002fc6:	68c0      	ldr	r0, [r0, #12]
 8002fc8:	b308      	cbz	r0, 800300e <lv_obj_class_create_obj+0xa6>
            disp->screen_cnt++;
 8002fca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fcc:	3101      	adds	r1, #1
 8002fce:	6261      	str	r1, [r4, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8002fd0:	0089      	lsls	r1, r1, #2
 8002fd2:	f009 f855 	bl	800c080 <lv_mem_realloc>
 8002fd6:	60e0      	str	r0, [r4, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8002fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        obj->coords.x1 = 0;
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	82bc      	strh	r4, [r7, #20]
        obj->coords.y1 = 0;
 8002fe8:	82fc      	strh	r4, [r7, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8002fea:	4620      	mov	r0, r4
 8002fec:	f007 fefe 	bl	800adec <lv_disp_get_hor_res>
 8002ff0:	b280      	uxth	r0, r0
 8002ff2:	3801      	subs	r0, #1
 8002ff4:	8338      	strh	r0, [r7, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f007 ff10 	bl	800ae1c <lv_disp_get_ver_res>
 8002ffc:	b280      	uxth	r0, r0
 8002ffe:	3801      	subs	r0, #1
 8003000:	8378      	strh	r0, [r7, #26]
 8003002:	e7da      	b.n	8002fba <lv_obj_class_create_obj+0x52>
            lv_mem_free(obj);
 8003004:	4638      	mov	r0, r7
 8003006:	f009 f81d 	bl	800c044 <lv_mem_free>
            return NULL;
 800300a:	4627      	mov	r7, r4
 800300c:	e7d5      	b.n	8002fba <lv_obj_class_create_obj+0x52>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 800300e:	2004      	movs	r0, #4
 8003010:	f008 fffa 	bl	800c008 <lv_mem_alloc>
 8003014:	60e0      	str	r0, [r4, #12]
            disp->screens[0] = obj;
 8003016:	6007      	str	r7, [r0, #0]
            disp->screen_cnt = 1;
 8003018:	2301      	movs	r3, #1
 800301a:	6263      	str	r3, [r4, #36]	; 0x24
 800301c:	e7e2      	b.n	8002fe4 <lv_obj_class_create_obj+0x7c>
            lv_obj_allocate_spec_attr(parent);
 800301e:	4620      	mov	r0, r4
 8003020:	f7ff ff60 	bl	8002ee4 <lv_obj_allocate_spec_attr>
 8003024:	e7b3      	b.n	8002f8e <lv_obj_class_create_obj+0x26>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8003026:	2004      	movs	r0, #4
 8003028:	f008 ffee 	bl	800c008 <lv_mem_alloc>
 800302c:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[0] = obj;
 800302e:	68a3      	ldr	r3, [r4, #8]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	601f      	str	r7, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8003034:	68a3      	ldr	r3, [r4, #8]
 8003036:	2201      	movs	r2, #1
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e7be      	b.n	8002fba <lv_obj_class_create_obj+0x52>

0800303c <lv_obj_is_editable>:
    const lv_obj_class_t * class_p = obj->class_p;
 800303c:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 800303e:	e000      	b.n	8003042 <lv_obj_is_editable+0x6>
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b11b      	cbz	r3, 800304c <lv_obj_is_editable+0x10>
 8003044:	7e1a      	ldrb	r2, [r3, #24]
 8003046:	f012 0f03 	tst.w	r2, #3
 800304a:	d0f9      	beq.n	8003040 <lv_obj_is_editable+0x4>
    if(class_p == NULL) return false;
 800304c:	b13b      	cbz	r3, 800305e <lv_obj_is_editable+0x22>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 800304e:	7e18      	ldrb	r0, [r3, #24]
 8003050:	f000 0003 	and.w	r0, r0, #3
 8003054:	2801      	cmp	r0, #1
 8003056:	bf14      	ite	ne
 8003058:	2000      	movne	r0, #0
 800305a:	2001      	moveq	r0, #1
 800305c:	4770      	bx	lr
    if(class_p == NULL) return false;
 800305e:	2000      	movs	r0, #0
}
 8003060:	4770      	bx	lr

08003062 <lv_obj_is_group_def>:
    const lv_obj_class_t * class_p = obj->class_p;
 8003062:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 8003064:	e000      	b.n	8003068 <lv_obj_is_group_def+0x6>
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b11b      	cbz	r3, 8003072 <lv_obj_is_group_def+0x10>
 800306a:	7e1a      	ldrb	r2, [r3, #24]
 800306c:	f012 0f0c 	tst.w	r2, #12
 8003070:	d0f9      	beq.n	8003066 <lv_obj_is_group_def+0x4>
    if(class_p == NULL) return false;
 8003072:	b13b      	cbz	r3, 8003084 <lv_obj_is_group_def+0x22>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8003074:	7e18      	ldrb	r0, [r3, #24]
 8003076:	f000 000c 	and.w	r0, r0, #12
 800307a:	2804      	cmp	r0, #4
 800307c:	bf14      	ite	ne
 800307e:	2000      	movne	r0, #0
 8003080:	2001      	moveq	r0, #1
 8003082:	4770      	bx	lr
    if(class_p == NULL) return false;
 8003084:	2000      	movs	r0, #0
}
 8003086:	4770      	bx	lr

08003088 <lv_obj_class_init_obj>:
{
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 800308c:	f000 fbbc 	bl	8003808 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8003090:	2000      	movs	r0, #0
 8003092:	f002 ff33 	bl	8005efc <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 8003096:	4620      	mov	r0, r4
 8003098:	f004 ff3a 	bl	8007f10 <lv_theme_apply>
    lv_obj_construct(obj);
 800309c:	4620      	mov	r0, r4
 800309e:	f7ff ff41 	bl	8002f24 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f002 ff2a 	bl	8005efc <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80030a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ac:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80030b0:	4620      	mov	r0, r4
 80030b2:	f003 fa51 	bl	8006558 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 fe2c 	bl	8003d14 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 80030bc:	f7fe ff56 	bl	8001f6c <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 80030c0:	b120      	cbz	r0, 80030cc <lv_obj_class_init_obj+0x44>
 80030c2:	4605      	mov	r5, r0
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff ffcc 	bl	8003062 <lv_obj_is_group_def>
 80030ca:	b988      	cbnz	r0, 80030f0 <lv_obj_class_init_obj+0x68>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f003 fd32 	bl	8006b36 <lv_obj_get_parent>
    if(parent) {
 80030d2:	4605      	mov	r5, r0
 80030d4:	b158      	cbz	r0, 80030ee <lv_obj_class_init_obj+0x66>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80030d6:	4622      	mov	r2, r4
 80030d8:	2122      	movs	r1, #34	; 0x22
 80030da:	f7fe fe17 	bl	8001d0c <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80030de:	4622      	mov	r2, r4
 80030e0:	2123      	movs	r1, #35	; 0x23
 80030e2:	4628      	mov	r0, r5
 80030e4:	f7fe fe12 	bl	8001d0c <lv_event_send>
        lv_obj_invalidate(obj);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 ffc0 	bl	800406e <lv_obj_invalidate>
}
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_add_obj(def_group, obj);
 80030f0:	4621      	mov	r1, r4
 80030f2:	4628      	mov	r0, r5
 80030f4:	f7fe ffcb 	bl	800208e <lv_group_add_obj>
 80030f8:	e7e8      	b.n	80030cc <lv_obj_class_init_obj+0x44>

080030fa <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 80030fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fc:	4606      	mov	r6, r0
 80030fe:	460d      	mov	r5, r1
 8003100:	4614      	mov	r4, r2
    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, part);
 8003102:	f003 fcb3 	bl	8006a6c <lv_obj_get_style_opa_recursive>
 8003106:	4607      	mov	r7, r0
    if(part != LV_PART_MAIN) {
 8003108:	b10d      	cbz	r5, 800310e <lv_obj_init_draw_rect_dsc+0x14>
        if(opa <= LV_OPA_MIN) {
 800310a:	2802      	cmp	r0, #2
 800310c:	d94f      	bls.n	80031ae <lv_obj_init_draw_rect_dsc+0xb4>
            return;
        }
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800310e:	2d00      	cmp	r5, #0
 8003110:	d157      	bne.n	80031c2 <lv_obj_init_draw_rect_dsc+0xc8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8003112:	220b      	movs	r2, #11
 8003114:	4629      	mov	r1, r5
 8003116:	4630      	mov	r0, r6
 8003118:	f003 f8e6 	bl	80062e8 <lv_obj_get_style_prop>

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 800311c:	8020      	strh	r0, [r4, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 800311e:	78e3      	ldrb	r3, [r4, #3]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d155      	bne.n	80031d0 <lv_obj_init_draw_rect_dsc+0xd6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8003124:	2232      	movs	r2, #50	; 0x32
 8003126:	4629      	mov	r1, r5
 8003128:	4630      	mov	r0, r6
 800312a:	f003 f8dd 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800312e:	b200      	sxth	r0, r0
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8003130:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 8003132:	b120      	cbz	r0, 800313e <lv_obj_init_draw_rect_dsc+0x44>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8003134:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 80a7 	bne.w	800328c <lv_obj_init_draw_rect_dsc+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800313e:	2235      	movs	r2, #53	; 0x35
 8003140:	4629      	mov	r1, r5
 8003142:	4630      	mov	r0, r6
 8003144:	f003 f8d0 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003148:	b200      	sxth	r0, r0
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 800314a:	84e0      	strh	r0, [r4, #38]	; 0x26
    if(draw_dsc->outline_width) {
 800314c:	b120      	cbz	r0, 8003158 <lv_obj_init_draw_rect_dsc+0x5e>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 800314e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 80bc 	bne.w	80032d0 <lv_obj_init_draw_rect_dsc+0x1d6>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8003158:	7ea3      	ldrb	r3, [r4, #26]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 80d5 	bne.w	800330a <lv_obj_init_draw_rect_dsc+0x210>
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 8003160:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003164:	2b00      	cmp	r3, #0
 8003166:	f040 8115 	bne.w	8003394 <lv_obj_init_draw_rect_dsc+0x29a>
                }
            }
        }
    }
#endif
    if(opa < LV_OPA_MAX) {
 800316a:	2ffc      	cmp	r7, #252	; 0xfc
 800316c:	d81e      	bhi.n	80031ac <lv_obj_init_draw_rect_dsc+0xb2>
        draw_dsc->bg_opa = (opa * draw_dsc->bg_opa) >> 8;
 800316e:	78e3      	ldrb	r3, [r4, #3]
 8003170:	fb07 f303 	mul.w	r3, r7, r3
 8003174:	121b      	asrs	r3, r3, #8
 8003176:	70e3      	strb	r3, [r4, #3]
        draw_dsc->bg_img_opa = (opa * draw_dsc->bg_img_opa) >> 8;
 8003178:	7ea3      	ldrb	r3, [r4, #26]
 800317a:	fb07 f303 	mul.w	r3, r7, r3
 800317e:	121b      	asrs	r3, r3, #8
 8003180:	76a3      	strb	r3, [r4, #26]
        draw_dsc->border_opa = (opa * draw_dsc->border_opa) >> 8;
 8003182:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003186:	fb07 f303 	mul.w	r3, r7, r3
 800318a:	121b      	asrs	r3, r3, #8
 800318c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        draw_dsc->outline_opa = (opa * draw_dsc->outline_opa) >> 8;
 8003190:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003194:	fb07 f303 	mul.w	r3, r7, r3
 8003198:	121b      	asrs	r3, r3, #8
 800319a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800319e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 80031a2:	fb00 f707 	mul.w	r7, r0, r7
 80031a6:	123f      	asrs	r7, r7, #8
 80031a8:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
    }
}
 80031ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 80031ae:	2300      	movs	r3, #0
 80031b0:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 80031b2:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 80031b4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 80031b8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80031bc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
            return;
 80031c0:	e7f4      	b.n	80031ac <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80031c2:	2268      	movs	r2, #104	; 0x68
 80031c4:	4629      	mov	r1, r5
 80031c6:	4630      	mov	r0, r6
 80031c8:	f003 f88e 	bl	80062e8 <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80031cc:	70a0      	strb	r0, [r4, #2]
 80031ce:	e7a0      	b.n	8003112 <lv_obj_init_draw_rect_dsc+0x18>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80031d0:	2221      	movs	r2, #33	; 0x21
 80031d2:	4629      	mov	r1, r5
 80031d4:	4630      	mov	r0, r6
 80031d6:	f003 f887 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80031da:	b2c0      	uxtb	r0, r0
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80031dc:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80031de:	2802      	cmp	r0, #2
 80031e0:	d9a0      	bls.n	8003124 <lv_obj_init_draw_rect_dsc+0x2a>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 80031e2:	2220      	movs	r2, #32
 80031e4:	4629      	mov	r1, r5
 80031e6:	4630      	mov	r0, r6
 80031e8:	f003 f87e 	bl	80062e8 <lv_obj_get_style_prop>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4629      	mov	r1, r5
 80031f0:	4630      	mov	r0, r6
 80031f2:	f003 f993 	bl	800651c <_lv_obj_style_apply_color_filter>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 80031f6:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 80031f8:	2226      	movs	r2, #38	; 0x26
 80031fa:	4629      	mov	r1, r5
 80031fc:	4630      	mov	r0, r6
 80031fe:	f003 f873 	bl	80062e8 <lv_obj_get_style_prop>
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8003202:	4601      	mov	r1, r0
 8003204:	b118      	cbz	r0, 800320e <lv_obj_init_draw_rect_dsc+0x114>
 8003206:	7a43      	ldrb	r3, [r0, #9]
 8003208:	f013 0f07 	tst.w	r3, #7
 800320c:	d116      	bne.n	800323c <lv_obj_init_draw_rect_dsc+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 800320e:	2223      	movs	r2, #35	; 0x23
 8003210:	4629      	mov	r1, r5
 8003212:	4630      	mov	r0, r6
 8003214:	f003 f868 	bl	80062e8 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8003218:	7be3      	ldrb	r3, [r4, #15]
 800321a:	f360 0302 	bfi	r3, r0, #0, #3
 800321e:	73e3      	strb	r3, [r4, #15]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f013 0f07 	tst.w	r3, #7
 8003226:	d10e      	bne.n	8003246 <lv_obj_init_draw_rect_dsc+0x14c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 8003228:	2227      	movs	r2, #39	; 0x27
 800322a:	4629      	mov	r1, r5
 800322c:	4630      	mov	r0, r6
 800322e:	f003 f85b 	bl	80062e8 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8003232:	7be3      	ldrb	r3, [r4, #15]
 8003234:	f360 03c5 	bfi	r3, r0, #3, #3
 8003238:	73e3      	strb	r3, [r4, #15]
 800323a:	e773      	b.n	8003124 <lv_obj_init_draw_rect_dsc+0x2a>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 800323c:	220a      	movs	r2, #10
 800323e:	1da0      	adds	r0, r4, #6
 8003240:	f008 ffd0 	bl	800c1e4 <lv_memcpy>
 8003244:	e76e      	b.n	8003124 <lv_obj_init_draw_rect_dsc+0x2a>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8003246:	2220      	movs	r2, #32
 8003248:	4629      	mov	r1, r5
 800324a:	4630      	mov	r0, r6
 800324c:	f003 f84c 	bl	80062e8 <lv_obj_get_style_prop>
 8003250:	4602      	mov	r2, r0
 8003252:	4629      	mov	r1, r5
 8003254:	4630      	mov	r0, r6
 8003256:	f003 f961 	bl	800651c <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 800325a:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 800325c:	2222      	movs	r2, #34	; 0x22
 800325e:	4629      	mov	r1, r5
 8003260:	4630      	mov	r0, r6
 8003262:	f003 f841 	bl	80062e8 <lv_obj_get_style_prop>
 8003266:	4602      	mov	r2, r0
 8003268:	4629      	mov	r1, r5
 800326a:	4630      	mov	r0, r6
 800326c:	f003 f956 	bl	800651c <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8003270:	8160      	strh	r0, [r4, #10]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	4629      	mov	r1, r5
 8003276:	4630      	mov	r0, r6
 8003278:	f003 f836 	bl	80062e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 800327c:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 800327e:	2225      	movs	r2, #37	; 0x25
 8003280:	4629      	mov	r1, r5
 8003282:	4630      	mov	r0, r6
 8003284:	f003 f830 	bl	80062e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8003288:	7320      	strb	r0, [r4, #12]
 800328a:	e7cd      	b.n	8003228 <lv_obj_init_draw_rect_dsc+0x12e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800328c:	2231      	movs	r2, #49	; 0x31
 800328e:	4629      	mov	r1, r5
 8003290:	4630      	mov	r0, r6
 8003292:	f003 f829 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003296:	b2c0      	uxtb	r0, r0
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8003298:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 800329c:	2802      	cmp	r0, #2
 800329e:	f67f af4e 	bls.w	800313e <lv_obj_init_draw_rect_dsc+0x44>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80032a2:	2233      	movs	r2, #51	; 0x33
 80032a4:	4629      	mov	r1, r5
 80032a6:	4630      	mov	r0, r6
 80032a8:	f003 f81e 	bl	80062e8 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80032ac:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80032b0:	f360 0345 	bfi	r3, r0, #1, #5
 80032b4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80032b8:	2230      	movs	r2, #48	; 0x30
 80032ba:	4629      	mov	r1, r5
 80032bc:	4630      	mov	r0, r6
 80032be:	f003 f813 	bl	80062e8 <lv_obj_get_style_prop>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4629      	mov	r1, r5
 80032c6:	4630      	mov	r0, r6
 80032c8:	f003 f928 	bl	800651c <_lv_obj_style_apply_color_filter>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 80032cc:	83e0      	strh	r0, [r4, #30]
 80032ce:	e736      	b.n	800313e <lv_obj_init_draw_rect_dsc+0x44>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80032d0:	2237      	movs	r2, #55	; 0x37
 80032d2:	4629      	mov	r1, r5
 80032d4:	4630      	mov	r0, r6
 80032d6:	f003 f807 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80032da:	b2c0      	uxtb	r0, r0
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80032dc:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80032e0:	2802      	cmp	r0, #2
 80032e2:	f67f af39 	bls.w	8003158 <lv_obj_init_draw_rect_dsc+0x5e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80032e6:	2238      	movs	r2, #56	; 0x38
 80032e8:	4629      	mov	r1, r5
 80032ea:	4630      	mov	r0, r6
 80032ec:	f002 fffc 	bl	80062e8 <lv_obj_get_style_prop>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80032f0:	8520      	strh	r0, [r4, #40]	; 0x28
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 80032f2:	2236      	movs	r2, #54	; 0x36
 80032f4:	4629      	mov	r1, r5
 80032f6:	4630      	mov	r0, r6
 80032f8:	f002 fff6 	bl	80062e8 <lv_obj_get_style_prop>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4629      	mov	r1, r5
 8003300:	4630      	mov	r0, r6
 8003302:	f003 f90b 	bl	800651c <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8003306:	84a0      	strh	r0, [r4, #36]	; 0x24
 8003308:	e726      	b.n	8003158 <lv_obj_init_draw_rect_dsc+0x5e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 800330a:	2228      	movs	r2, #40	; 0x28
 800330c:	4629      	mov	r1, r5
 800330e:	4630      	mov	r0, r6
 8003310:	f002 ffea 	bl	80062e8 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8003314:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 8003316:	2800      	cmp	r0, #0
 8003318:	f43f af22 	beq.w	8003160 <lv_obj_init_draw_rect_dsc+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 800331c:	2229      	movs	r2, #41	; 0x29
 800331e:	4629      	mov	r1, r5
 8003320:	4630      	mov	r0, r6
 8003322:	f002 ffe1 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003326:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8003328:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 800332a:	2802      	cmp	r0, #2
 800332c:	f67f af18 	bls.w	8003160 <lv_obj_init_draw_rect_dsc+0x66>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8003330:	6920      	ldr	r0, [r4, #16]
 8003332:	f004 fe6a 	bl	800800a <lv_img_src_get_type>
 8003336:	2802      	cmp	r0, #2
 8003338:	d01a      	beq.n	8003370 <lv_obj_init_draw_rect_dsc+0x276>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 800333a:	222a      	movs	r2, #42	; 0x2a
 800333c:	4629      	mov	r1, r5
 800333e:	4630      	mov	r0, r6
 8003340:	f002 ffd2 	bl	80062e8 <lv_obj_get_style_prop>
 8003344:	4602      	mov	r2, r0
 8003346:	4629      	mov	r1, r5
 8003348:	4630      	mov	r0, r6
 800334a:	f003 f8e7 	bl	800651c <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 800334e:	8320      	strh	r0, [r4, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8003350:	222b      	movs	r2, #43	; 0x2b
 8003352:	4629      	mov	r1, r5
 8003354:	4630      	mov	r0, r6
 8003356:	f002 ffc7 	bl	80062e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 800335a:	76e0      	strb	r0, [r4, #27]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 800335c:	222c      	movs	r2, #44	; 0x2c
 800335e:	4629      	mov	r1, r5
 8003360:	4630      	mov	r0, r6
 8003362:	f002 ffc1 	bl	80062e8 <lv_obj_get_style_prop>
    return (bool)v.num;
 8003366:	3800      	subs	r0, #0
 8003368:	bf18      	it	ne
 800336a:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 800336c:	7720      	strb	r0, [r4, #28]
 800336e:	e6f7      	b.n	8003160 <lv_obj_init_draw_rect_dsc+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8003370:	2257      	movs	r2, #87	; 0x57
 8003372:	4629      	mov	r1, r5
 8003374:	4630      	mov	r0, r6
 8003376:	f002 ffb7 	bl	80062e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 800337a:	6160      	str	r0, [r4, #20]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 800337c:	2255      	movs	r2, #85	; 0x55
 800337e:	4629      	mov	r1, r5
 8003380:	4630      	mov	r0, r6
 8003382:	f002 ffb1 	bl	80062e8 <lv_obj_get_style_prop>
 8003386:	4602      	mov	r2, r0
 8003388:	4629      	mov	r1, r5
 800338a:	4630      	mov	r0, r6
 800338c:	f003 f8c6 	bl	800651c <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8003390:	8320      	strh	r0, [r4, #24]
 8003392:	e6e5      	b.n	8003160 <lv_obj_init_draw_rect_dsc+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	4629      	mov	r1, r5
 8003398:	4630      	mov	r0, r6
 800339a:	f002 ffa5 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800339e:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 80033a0:	85e0      	strh	r0, [r4, #46]	; 0x2e
        if(draw_dsc->shadow_width) {
 80033a2:	2800      	cmp	r0, #0
 80033a4:	f43f aee1 	beq.w	800316a <lv_obj_init_draw_rect_dsc+0x70>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80033a8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	f67f aedc 	bls.w	800316a <lv_obj_init_draw_rect_dsc+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80033b2:	2245      	movs	r2, #69	; 0x45
 80033b4:	4629      	mov	r1, r5
 80033b6:	4630      	mov	r0, r6
 80033b8:	f002 ff96 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80033bc:	b2c0      	uxtb	r0, r0
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 80033be:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80033c2:	2802      	cmp	r0, #2
 80033c4:	f67f aed1 	bls.w	800316a <lv_obj_init_draw_rect_dsc+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80033c8:	2241      	movs	r2, #65	; 0x41
 80033ca:	4629      	mov	r1, r5
 80033cc:	4630      	mov	r0, r6
 80033ce:	f002 ff8b 	bl	80062e8 <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 80033d2:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80033d4:	2242      	movs	r2, #66	; 0x42
 80033d6:	4629      	mov	r1, r5
 80033d8:	4630      	mov	r0, r6
 80033da:	f002 ff85 	bl	80062e8 <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 80033de:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80033e0:	2243      	movs	r2, #67	; 0x43
 80033e2:	4629      	mov	r1, r5
 80033e4:	4630      	mov	r0, r6
 80033e6:	f002 ff7f 	bl	80062e8 <lv_obj_get_style_prop>
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 80033ea:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 80033ec:	2244      	movs	r2, #68	; 0x44
 80033ee:	4629      	mov	r1, r5
 80033f0:	4630      	mov	r0, r6
 80033f2:	f002 ff79 	bl	80062e8 <lv_obj_get_style_prop>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4629      	mov	r1, r5
 80033fa:	4630      	mov	r0, r6
 80033fc:	f003 f88e 	bl	800651c <_lv_obj_style_apply_color_filter>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8003400:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8003402:	e6b2      	b.n	800316a <lv_obj_init_draw_rect_dsc+0x70>

08003404 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	4606      	mov	r6, r0
 8003408:	460d      	mov	r5, r1
 800340a:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 800340c:	2256      	movs	r2, #86	; 0x56
 800340e:	f002 ff6b 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003412:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8003414:	76a3      	strb	r3, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8003416:	2b02      	cmp	r3, #2
 8003418:	d800      	bhi.n	800341c <lv_obj_init_draw_label_dsc+0x18>
#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
}
 800341a:	bd70      	pop	{r4, r5, r6, pc}
    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, part);
 800341c:	4629      	mov	r1, r5
 800341e:	4630      	mov	r0, r6
 8003420:	f003 fb24 	bl	8006a6c <lv_obj_get_style_opa_recursive>
    if(opa <= LV_OPA_MIN) {
 8003424:	2802      	cmp	r0, #2
 8003426:	d937      	bls.n	8003498 <lv_obj_init_draw_label_dsc+0x94>
    if(opa < LV_OPA_MAX) {
 8003428:	28fc      	cmp	r0, #252	; 0xfc
 800342a:	d804      	bhi.n	8003436 <lv_obj_init_draw_label_dsc+0x32>
        draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 800342c:	7ea3      	ldrb	r3, [r4, #26]
 800342e:	fb03 f000 	mul.w	r0, r3, r0
 8003432:	1200      	asrs	r0, r0, #8
 8003434:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8003436:	7ea3      	ldrb	r3, [r4, #26]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d9ee      	bls.n	800341a <lv_obj_init_draw_label_dsc+0x16>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 800343c:	2255      	movs	r2, #85	; 0x55
 800343e:	4629      	mov	r1, r5
 8003440:	4630      	mov	r0, r6
 8003442:	f002 ff51 	bl	80062e8 <lv_obj_get_style_prop>
 8003446:	4602      	mov	r2, r0
 8003448:	4629      	mov	r1, r5
 800344a:	4630      	mov	r0, r6
 800344c:	f003 f866 	bl	800651c <_lv_obj_style_apply_color_filter>
    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8003450:	81a0      	strh	r0, [r4, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8003452:	2258      	movs	r2, #88	; 0x58
 8003454:	4629      	mov	r1, r5
 8003456:	4630      	mov	r0, r6
 8003458:	f002 ff46 	bl	80062e8 <lv_obj_get_style_prop>
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800345c:	82a0      	strh	r0, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800345e:	2259      	movs	r2, #89	; 0x59
 8003460:	4629      	mov	r1, r5
 8003462:	4630      	mov	r0, r6
 8003464:	f002 ff40 	bl	80062e8 <lv_obj_get_style_prop>
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8003468:	8260      	strh	r0, [r4, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 800346a:	225a      	movs	r2, #90	; 0x5a
 800346c:	4629      	mov	r1, r5
 800346e:	4630      	mov	r0, r6
 8003470:	f002 ff3a 	bl	80062e8 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8003474:	7fa3      	ldrb	r3, [r4, #30]
 8003476:	f360 0302 	bfi	r3, r0, #0, #3
 800347a:	77a3      	strb	r3, [r4, #30]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800347c:	b97d      	cbnz	r5, 800349e <lv_obj_init_draw_label_dsc+0x9a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800347e:	2257      	movs	r2, #87	; 0x57
 8003480:	4629      	mov	r1, r5
 8003482:	4630      	mov	r0, r6
 8003484:	f002 ff30 	bl	80062e8 <lv_obj_get_style_prop>
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8003488:	6020      	str	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800348a:	225b      	movs	r2, #91	; 0x5b
 800348c:	4629      	mov	r1, r5
 800348e:	4630      	mov	r0, r6
 8003490:	f002 ff2a 	bl	80062e8 <lv_obj_get_style_prop>
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8003494:	7720      	strb	r0, [r4, #28]
 8003496:	e7c0      	b.n	800341a <lv_obj_init_draw_label_dsc+0x16>
        draw_dsc->opa = LV_OPA_TRANSP;
 8003498:	2300      	movs	r3, #0
 800349a:	76a3      	strb	r3, [r4, #26]
        return;
 800349c:	e7bd      	b.n	800341a <lv_obj_init_draw_label_dsc+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800349e:	2268      	movs	r2, #104	; 0x68
 80034a0:	4629      	mov	r1, r5
 80034a2:	4630      	mov	r0, r6
 80034a4:	f002 ff20 	bl	80062e8 <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80034a8:	7fa3      	ldrb	r3, [r4, #30]
 80034aa:	f360 03c5 	bfi	r3, r0, #3, #3
 80034ae:	77a3      	strb	r3, [r4, #30]
 80034b0:	e7e5      	b.n	800347e <lv_obj_init_draw_label_dsc+0x7a>

080034b2 <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 80034b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b4:	4605      	mov	r5, r0
 80034b6:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	f002 ff15 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80034be:	b204      	sxth	r4, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 80034c0:	b9e4      	cbnz	r4, 80034fc <lv_obj_calculate_ext_draw_size+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 80034c2:	2235      	movs	r2, #53	; 0x35
 80034c4:	4631      	mov	r1, r6
 80034c6:	4628      	mov	r0, r5
 80034c8:	f002 ff0e 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80034cc:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 80034ce:	2f00      	cmp	r7, #0
 80034d0:	d147      	bne.n	8003562 <lv_obj_calculate_ext_draw_size+0xb0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80034d2:	2269      	movs	r2, #105	; 0x69
 80034d4:	4631      	mov	r1, r6
 80034d6:	4628      	mov	r0, r5
 80034d8:	f002 ff06 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80034dc:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80034de:	226a      	movs	r2, #106	; 0x6a
 80034e0:	4631      	mov	r1, r6
 80034e2:	4628      	mov	r0, r5
 80034e4:	f002 ff00 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80034e8:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 80034ea:	42b8      	cmp	r0, r7
 80034ec:	bfb8      	it	lt
 80034ee:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 80034f0:	2800      	cmp	r0, #0
 80034f2:	dd01      	ble.n	80034f8 <lv_obj_calculate_ext_draw_size+0x46>
 80034f4:	4404      	add	r4, r0
 80034f6:	b224      	sxth	r4, r4

    return s;
}
 80034f8:	4620      	mov	r0, r4
 80034fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80034fc:	2245      	movs	r2, #69	; 0x45
 80034fe:	4631      	mov	r1, r6
 8003500:	4628      	mov	r0, r5
 8003502:	f002 fef1 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003506:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 8003508:	2802      	cmp	r0, #2
 800350a:	d801      	bhi.n	8003510 <lv_obj_calculate_ext_draw_size+0x5e>
    lv_coord_t s = 0;
 800350c:	2400      	movs	r4, #0
 800350e:	e7d8      	b.n	80034c2 <lv_obj_calculate_ext_draw_size+0x10>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8003510:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8003514:	1064      	asrs	r4, r4, #1
 8003516:	3401      	adds	r4, #1
 8003518:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800351a:	2243      	movs	r2, #67	; 0x43
 800351c:	4631      	mov	r1, r6
 800351e:	4628      	mov	r0, r5
 8003520:	f002 fee2 	bl	80062e8 <lv_obj_get_style_prop>
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8003524:	b280      	uxth	r0, r0
 8003526:	4404      	add	r4, r0
 8003528:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 800352a:	2241      	movs	r2, #65	; 0x41
 800352c:	4631      	mov	r1, r6
 800352e:	4628      	mov	r0, r5
 8003530:	f002 feda 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003534:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8003536:	2242      	movs	r2, #66	; 0x42
 8003538:	4631      	mov	r1, r6
 800353a:	4628      	mov	r0, r5
 800353c:	f002 fed4 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003540:	b203      	sxth	r3, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8003542:	2b00      	cmp	r3, #0
 8003544:	bfb8      	it	lt
 8003546:	425b      	neglt	r3, r3
 8003548:	b29b      	uxth	r3, r3
 800354a:	2f00      	cmp	r7, #0
 800354c:	bfb8      	it	lt
 800354e:	427f      	neglt	r7, r7
 8003550:	b2bf      	uxth	r7, r7
 8003552:	42bb      	cmp	r3, r7
 8003554:	bf2c      	ite	cs
 8003556:	18e4      	addcs	r4, r4, r3
 8003558:	19e4      	addcc	r4, r4, r7
 800355a:	b224      	sxth	r4, r4
            s = LV_MAX(s, sh_width);
 800355c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003560:	e7af      	b.n	80034c2 <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8003562:	2237      	movs	r2, #55	; 0x37
 8003564:	4631      	mov	r1, r6
 8003566:	4628      	mov	r0, r5
 8003568:	f002 febe 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800356c:	b2c0      	uxtb	r0, r0
        if(outline_opa > LV_OPA_MIN) {
 800356e:	2802      	cmp	r0, #2
 8003570:	d9af      	bls.n	80034d2 <lv_obj_calculate_ext_draw_size+0x20>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8003572:	2238      	movs	r2, #56	; 0x38
 8003574:	4631      	mov	r1, r6
 8003576:	4628      	mov	r0, r5
 8003578:	f002 feb6 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800357c:	b200      	sxth	r0, r0
            s = LV_MAX(s, outline_pad + outline_width);
 800357e:	4407      	add	r7, r0
 8003580:	42bc      	cmp	r4, r7
 8003582:	bfb8      	it	lt
 8003584:	463c      	movlt	r4, r7
 8003586:	b224      	sxth	r4, r4
 8003588:	e7a3      	b.n	80034d2 <lv_obj_calculate_ext_draw_size+0x20>

0800358a <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 800358a:	b538      	push	{r3, r4, r5, lr}
 800358c:	4604      	mov	r4, r0
 800358e:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8003590:	2148      	movs	r1, #72	; 0x48
 8003592:	f008 feb6 	bl	800c302 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8003596:	6025      	str	r5, [r4, #0]
}
 8003598:	bd38      	pop	{r3, r4, r5, pc}

0800359a <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 800359a:	6883      	ldr	r3, [r0, #8]
 800359c:	b113      	cbz	r3, 80035a4 <_lv_obj_get_ext_draw_size+0xa>
 800359e:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80035a2:	4770      	bx	lr
    else return 0;
 80035a4:	2000      	movs	r0, #0
}
 80035a6:	4770      	bx	lr

080035a8 <lv_obj_refresh_ext_draw_size>:
{
 80035a8:	b530      	push	{r4, r5, lr}
 80035aa:	b083      	sub	sp, #12
 80035ac:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 80035ae:	f7ff fff4 	bl	800359a <_lv_obj_get_ext_draw_size>
 80035b2:	4605      	mov	r5, r0
    lv_coord_t s_new = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 80035ba:	f10d 0206 	add.w	r2, sp, #6
 80035be:	2113      	movs	r1, #19
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7fe fba3 	bl	8001d0c <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 80035c6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80035ca:	42ab      	cmp	r3, r5
 80035cc:	d10a      	bne.n	80035e4 <lv_obj_refresh_ext_draw_size+0x3c>
    if(obj->spec_attr) {
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	b163      	cbz	r3, 80035ec <lv_obj_refresh_ext_draw_size+0x44>
        obj->spec_attr->ext_draw_size = s_new;
 80035d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80035d6:	82da      	strh	r2, [r3, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 80035d8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80035dc:	42ab      	cmp	r3, r5
 80035de:	d111      	bne.n	8003604 <lv_obj_refresh_ext_draw_size+0x5c>
}
 80035e0:	b003      	add	sp, #12
 80035e2:	bd30      	pop	{r4, r5, pc}
    if(s_new != s_old) lv_obj_invalidate(obj);
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 fd42 	bl	800406e <lv_obj_invalidate>
 80035ea:	e7f0      	b.n	80035ce <lv_obj_refresh_ext_draw_size+0x26>
    else if(s_new != 0) {
 80035ec:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f1      	beq.n	80035d8 <lv_obj_refresh_ext_draw_size+0x30>
        lv_obj_allocate_spec_attr(obj);
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff fc75 	bl	8002ee4 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 80035fa:	68a3      	ldr	r3, [r4, #8]
 80035fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003600:	82da      	strh	r2, [r3, #22]
 8003602:	e7e9      	b.n	80035d8 <lv_obj_refresh_ext_draw_size+0x30>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8003604:	4620      	mov	r0, r4
 8003606:	f000 fd32 	bl	800406e <lv_obj_invalidate>
}
 800360a:	e7e9      	b.n	80035e0 <lv_obj_refresh_ext_draw_size+0x38>

0800360c <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 800360c:	6883      	ldr	r3, [r0, #8]
 800360e:	b113      	cbz	r3, 8003616 <_lv_obj_get_layer_type+0xa>
 8003610:	7e98      	ldrb	r0, [r3, #26]
 8003612:	0980      	lsrs	r0, r0, #6
 8003614:	4770      	bx	lr
    else return LV_LAYER_TYPE_NONE;
 8003616:	2000      	movs	r0, #0
}
 8003618:	4770      	bx	lr
	...

0800361c <transform_point>:
        lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 800361c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003620:	b083      	sub	sp, #12
 8003622:	4604      	mov	r4, r0
 8003624:	460f      	mov	r7, r1
 8003626:	4690      	mov	r8, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8003628:	226e      	movs	r2, #110	; 0x6e
 800362a:	2100      	movs	r1, #0
 800362c:	f002 fe5c 	bl	80062e8 <lv_obj_get_style_prop>
 8003630:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8003632:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8003636:	226d      	movs	r2, #109	; 0x6d
 8003638:	2100      	movs	r1, #0
 800363a:	4620      	mov	r0, r4
 800363c:	f002 fe54 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003640:	b205      	sxth	r5, r0
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 8003642:	f1b9 0f00 	cmp.w	r9, #0
 8003646:	d102      	bne.n	800364e <transform_point+0x32>
 8003648:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800364c:	d037      	beq.n	80036be <transform_point+0xa2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800364e:	226f      	movs	r2, #111	; 0x6f
 8003650:	2100      	movs	r1, #0
 8003652:	4620      	mov	r0, r4
 8003654:	f002 fe48 	bl	80062e8 <lv_obj_get_style_prop>

    lv_point_t pivot = {
 8003658:	f8ad 0004 	strh.w	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800365c:	2270      	movs	r2, #112	; 0x70
 800365e:	2100      	movs	r1, #0
 8003660:	4620      	mov	r0, r4
 8003662:	f002 fe41 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003666:	b203      	sxth	r3, r0
 8003668:	f8ad 3006 	strh.w	r3, [sp, #6]
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 800366c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003670:	f402 41c0 	and.w	r1, r2, #24576	; 0x6000
 8003674:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003678:	d024      	beq.n	80036c4 <transform_point+0xa8>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 800367a:	f403 42c0 	and.w	r2, r3, #24576	; 0x6000
 800367e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003682:	d03a      	beq.n	80036fa <transform_point+0xde>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
    }

    pivot.x = obj->coords.x1 + pivot.x;
 8003684:	8aa3      	ldrh	r3, [r4, #20]
 8003686:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800368a:	4413      	add	r3, r2
 800368c:	f8ad 3004 	strh.w	r3, [sp, #4]
    pivot.y = obj->coords.y1 + pivot.y;
 8003690:	8ae3      	ldrh	r3, [r4, #22]
 8003692:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003696:	4413      	add	r3, r2
 8003698:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(inv) {
 800369c:	f1b8 0f00 	cmp.w	r8, #0
 80036a0:	d007      	beq.n	80036b2 <transform_point+0x96>
        angle = -angle;
 80036a2:	4276      	negs	r6, r6
 80036a4:	fa0f f986 	sxth.w	r9, r6
        zoom = (256 * 256) / zoom;
 80036a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80036ac:	fb90 f5f5 	sdiv	r5, r0, r5
 80036b0:	b22d      	sxth	r5, r5
    }

    lv_point_transform(p, angle, zoom, &pivot);
 80036b2:	ab01      	add	r3, sp, #4
 80036b4:	462a      	mov	r2, r5
 80036b6:	4649      	mov	r1, r9
 80036b8:	4638      	mov	r0, r7
 80036ba:	f008 f897 	bl	800b7ec <lv_point_transform>
}
 80036be:	b003      	add	sp, #12
 80036c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(LV_COORD_IS_PCT(pivot.x)) {
 80036c4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80036c8:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80036cc:	dcd5      	bgt.n	800367a <transform_point+0x5e>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 80036ce:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80036d2:	dd01      	ble.n	80036d8 <transform_point+0xbc>
 80036d4:	f5c2 727a 	rsb	r2, r2, #1000	; 0x3e8
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80036d8:	8b21      	ldrh	r1, [r4, #24]
 80036da:	8aa0      	ldrh	r0, [r4, #20]
 80036dc:	1a09      	subs	r1, r1, r0
 80036de:	b289      	uxth	r1, r1
 80036e0:	3101      	adds	r1, #1
 80036e2:	b209      	sxth	r1, r1
 80036e4:	fb01 f202 	mul.w	r2, r1, r2
 80036e8:	4911      	ldr	r1, [pc, #68]	; (8003730 <transform_point+0x114>)
 80036ea:	fb81 0102 	smull	r0, r1, r1, r2
 80036ee:	17d2      	asrs	r2, r2, #31
 80036f0:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 80036f4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80036f8:	e7bf      	b.n	800367a <transform_point+0x5e>
    if(LV_COORD_IS_PCT(pivot.y)) {
 80036fa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80036fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003702:	dcbf      	bgt.n	8003684 <transform_point+0x68>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8003704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003708:	dd01      	ble.n	800370e <transform_point+0xf2>
 800370a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800370e:	8b62      	ldrh	r2, [r4, #26]
 8003710:	8ae1      	ldrh	r1, [r4, #22]
 8003712:	1a52      	subs	r2, r2, r1
 8003714:	b292      	uxth	r2, r2
 8003716:	3201      	adds	r2, #1
 8003718:	b212      	sxth	r2, r2
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <transform_point+0x114>)
 8003720:	fb82 1203 	smull	r1, r2, r2, r3
 8003724:	17db      	asrs	r3, r3, #31
 8003726:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800372a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800372e:	e7a9      	b.n	8003684 <transform_point+0x68>
 8003730:	51eb851f 	.word	0x51eb851f

08003734 <lv_obj_set_x>:
{
 8003734:	b530      	push	{r4, r5, lr}
 8003736:	b083      	sub	sp, #12
 8003738:	4605      	mov	r5, r0
 800373a:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 800373c:	2300      	movs	r3, #0
 800373e:	aa01      	add	r2, sp, #4
 8003740:	2107      	movs	r1, #7
 8003742:	f002 fbe1 	bl	8005f08 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8003746:	2801      	cmp	r0, #1
 8003748:	d007      	beq.n	800375a <lv_obj_set_x+0x26>
 800374a:	b920      	cbnz	r0, 8003756 <lv_obj_set_x+0x22>
        lv_obj_set_style_x(obj, x, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	4621      	mov	r1, r4
 8003750:	4628      	mov	r0, r5
 8003752:	f003 f9cd 	bl	8006af0 <lv_obj_set_style_x>
}
 8003756:	b003      	add	sp, #12
 8003758:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800375a:	9b01      	ldr	r3, [sp, #4]
 800375c:	42a3      	cmp	r3, r4
 800375e:	d1f5      	bne.n	800374c <lv_obj_set_x+0x18>
 8003760:	e7f3      	b.n	800374a <lv_obj_set_x+0x16>

08003762 <lv_obj_set_y>:
{
 8003762:	b530      	push	{r4, r5, lr}
 8003764:	b083      	sub	sp, #12
 8003766:	4605      	mov	r5, r0
 8003768:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800376a:	2300      	movs	r3, #0
 800376c:	aa01      	add	r2, sp, #4
 800376e:	2108      	movs	r1, #8
 8003770:	f002 fbca 	bl	8005f08 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8003774:	2801      	cmp	r0, #1
 8003776:	d007      	beq.n	8003788 <lv_obj_set_y+0x26>
 8003778:	b920      	cbnz	r0, 8003784 <lv_obj_set_y+0x22>
        lv_obj_set_style_y(obj, y, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	4621      	mov	r1, r4
 800377e:	4628      	mov	r0, r5
 8003780:	f003 f9bd 	bl	8006afe <lv_obj_set_style_y>
}
 8003784:	b003      	add	sp, #12
 8003786:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8003788:	9b01      	ldr	r3, [sp, #4]
 800378a:	42a3      	cmp	r3, r4
 800378c:	d1f5      	bne.n	800377a <lv_obj_set_y+0x18>
 800378e:	e7f3      	b.n	8003778 <lv_obj_set_y+0x16>

08003790 <lv_obj_set_pos>:
{
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 8003796:	f7ff ffcd 	bl	8003734 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 800379a:	4629      	mov	r1, r5
 800379c:	4620      	mov	r0, r4
 800379e:	f7ff ffe0 	bl	8003762 <lv_obj_set_y>
}
 80037a2:	bd38      	pop	{r3, r4, r5, pc}

080037a4 <lv_obj_set_width>:
{
 80037a4:	b530      	push	{r4, r5, lr}
 80037a6:	b083      	sub	sp, #12
 80037a8:	4605      	mov	r5, r0
 80037aa:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 80037ac:	2300      	movs	r3, #0
 80037ae:	aa01      	add	r2, sp, #4
 80037b0:	2101      	movs	r1, #1
 80037b2:	f002 fba9 	bl	8005f08 <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 80037b6:	2801      	cmp	r0, #1
 80037b8:	d007      	beq.n	80037ca <lv_obj_set_width+0x26>
 80037ba:	b920      	cbnz	r0, 80037c6 <lv_obj_set_width+0x22>
        lv_obj_set_style_width(obj, w, 0);
 80037bc:	2200      	movs	r2, #0
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f003 f98e 	bl	8006ae2 <lv_obj_set_style_width>
}
 80037c6:	b003      	add	sp, #12
 80037c8:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 80037ca:	9b01      	ldr	r3, [sp, #4]
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d1f5      	bne.n	80037bc <lv_obj_set_width+0x18>
 80037d0:	e7f3      	b.n	80037ba <lv_obj_set_width+0x16>
	...

080037d4 <lv_obj_is_layout_positioned>:
{
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4604      	mov	r4, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 80037d8:	490a      	ldr	r1, [pc, #40]	; (8003804 <lv_obj_is_layout_positioned+0x30>)
 80037da:	f7ff f958 	bl	8002a8e <lv_obj_has_flag_any>
 80037de:	b110      	cbz	r0, 80037e6 <lv_obj_is_layout_positioned+0x12>
 80037e0:	2500      	movs	r5, #0
}
 80037e2:	4628      	mov	r0, r5
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
 80037e6:	4605      	mov	r5, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80037e8:	4620      	mov	r0, r4
 80037ea:	f003 f9a4 	bl	8006b36 <lv_obj_get_parent>
    if(parent == NULL) return false;
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d0f7      	beq.n	80037e2 <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80037f2:	220a      	movs	r2, #10
 80037f4:	2100      	movs	r1, #0
 80037f6:	f002 fd77 	bl	80062e8 <lv_obj_get_style_prop>
    if(layout) return true;
 80037fa:	b280      	uxth	r0, r0
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d0f0      	beq.n	80037e2 <lv_obj_is_layout_positioned+0xe>
 8003800:	2501      	movs	r5, #1
 8003802:	e7ee      	b.n	80037e2 <lv_obj_is_layout_positioned+0xe>
 8003804:	00060001 	.word	0x00060001

08003808 <lv_obj_mark_layout_as_dirty>:
{
 8003808:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 800380a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8003816:	f003 f992 	bl	8006b3e <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 800381a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800381e:	f042 0204 	orr.w	r2, r2, #4
 8003822:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8003826:	f003 f993 	bl	8006b50 <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800382a:	6840      	ldr	r0, [r0, #4]
 800382c:	b108      	cbz	r0, 8003832 <lv_obj_mark_layout_as_dirty+0x2a>
 800382e:	f009 f8da 	bl	800c9e6 <lv_timer_resume>
}
 8003832:	bd08      	pop	{r3, pc}

08003834 <lv_layout_register>:
{
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	4605      	mov	r5, r0
 8003838:	460c      	mov	r4, r1
    layout_cnt++;
 800383a:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <lv_layout_register+0x3c>)
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	6013      	str	r3, [r2, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8003842:	4e0c      	ldr	r6, [pc, #48]	; (8003874 <lv_layout_register+0x40>)
 8003844:	00d9      	lsls	r1, r3, #3
 8003846:	6830      	ldr	r0, [r6, #0]
 8003848:	f008 fc1a 	bl	800c080 <lv_mem_realloc>
 800384c:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 800384e:	b168      	cbz	r0, 800386c <lv_layout_register+0x38>
 8003850:	4603      	mov	r3, r0
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <lv_layout_register+0x3c>)
 8003854:	6810      	ldr	r0, [r2, #0]
 8003856:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 800385a:	3a01      	subs	r2, #1
 800385c:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <lv_layout_register+0x40>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8003868:	6054      	str	r4, [r2, #4]
}
 800386a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 800386c:	e7fe      	b.n	800386c <lv_layout_register+0x38>
 800386e:	bf00      	nop
 8003870:	20000b50 	.word	0x20000b50
 8003874:	20000c08 	.word	0x20000c08

08003878 <lv_obj_align>:
{
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4604      	mov	r4, r0
 800387c:	4615      	mov	r5, r2
 800387e:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 8003880:	2200      	movs	r2, #0
 8003882:	f003 f943 	bl	8006b0c <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8003886:	4632      	mov	r2, r6
 8003888:	4629      	mov	r1, r5
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff ff80 	bl	8003790 <lv_obj_set_pos>
}
 8003890:	bd70      	pop	{r4, r5, r6, pc}

08003892 <lv_obj_get_coords>:
    dest->x1 = src->x1;
 8003892:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8003896:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8003898:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 800389c:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 800389e:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 80038a2:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 80038a4:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 80038a8:	80cb      	strh	r3, [r1, #6]
}
 80038aa:	4770      	bx	lr

080038ac <lv_obj_get_width>:
{
 80038ac:	4603      	mov	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80038ae:	8b00      	ldrh	r0, [r0, #24]
 80038b0:	8a9b      	ldrh	r3, [r3, #20]
 80038b2:	1ac0      	subs	r0, r0, r3
 80038b4:	b280      	uxth	r0, r0
 80038b6:	3001      	adds	r0, #1
}
 80038b8:	b200      	sxth	r0, r0
 80038ba:	4770      	bx	lr

080038bc <lv_obj_get_height>:
{
 80038bc:	4603      	mov	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80038be:	8b40      	ldrh	r0, [r0, #26]
 80038c0:	8adb      	ldrh	r3, [r3, #22]
 80038c2:	1ac0      	subs	r0, r0, r3
 80038c4:	b280      	uxth	r0, r0
 80038c6:	3001      	adds	r0, #1
}
 80038c8:	b200      	sxth	r0, r0
 80038ca:	4770      	bx	lr

080038cc <lv_obj_get_content_width>:
{
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ce:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80038d0:	2212      	movs	r2, #18
 80038d2:	2100      	movs	r1, #0
 80038d4:	f002 fd08 	bl	80062e8 <lv_obj_get_style_prop>
 80038d8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80038da:	2213      	movs	r2, #19
 80038dc:	2100      	movs	r1, #0
 80038de:	4628      	mov	r0, r5
 80038e0:	f002 fd02 	bl	80062e8 <lv_obj_get_style_prop>
 80038e4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80038e6:	2232      	movs	r2, #50	; 0x32
 80038e8:	2100      	movs	r1, #0
 80038ea:	4628      	mov	r0, r5
 80038ec:	f002 fcfc 	bl	80062e8 <lv_obj_get_style_prop>
 80038f0:	4604      	mov	r4, r0
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7ff ffda 	bl	80038ac <lv_obj_get_width>
 80038f8:	b283      	uxth	r3, r0
 80038fa:	1bdb      	subs	r3, r3, r7
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	1b9b      	subs	r3, r3, r6
 8003900:	b29b      	uxth	r3, r3
 8003902:	0060      	lsls	r0, r4, #1
 8003904:	b280      	uxth	r0, r0
 8003906:	1a18      	subs	r0, r3, r0
}
 8003908:	b200      	sxth	r0, r0
 800390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800390c <lv_obj_get_content_height>:
{
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003910:	2210      	movs	r2, #16
 8003912:	2100      	movs	r1, #0
 8003914:	f002 fce8 	bl	80062e8 <lv_obj_get_style_prop>
 8003918:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800391a:	2211      	movs	r2, #17
 800391c:	2100      	movs	r1, #0
 800391e:	4628      	mov	r0, r5
 8003920:	f002 fce2 	bl	80062e8 <lv_obj_get_style_prop>
 8003924:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8003926:	2232      	movs	r2, #50	; 0x32
 8003928:	2100      	movs	r1, #0
 800392a:	4628      	mov	r0, r5
 800392c:	f002 fcdc 	bl	80062e8 <lv_obj_get_style_prop>
 8003930:	4604      	mov	r4, r0
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8003932:	4628      	mov	r0, r5
 8003934:	f7ff ffc2 	bl	80038bc <lv_obj_get_height>
 8003938:	b283      	uxth	r3, r0
 800393a:	1bdb      	subs	r3, r3, r7
 800393c:	b29b      	uxth	r3, r3
 800393e:	1b9b      	subs	r3, r3, r6
 8003940:	b29b      	uxth	r3, r3
 8003942:	0060      	lsls	r0, r4, #1
 8003944:	b280      	uxth	r0, r0
 8003946:	1a18      	subs	r0, r3, r0
}
 8003948:	b200      	sxth	r0, r0
 800394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800394c <lv_obj_get_content_coords>:
{
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4606      	mov	r6, r0
 8003950:	460c      	mov	r4, r1
 8003952:	2232      	movs	r2, #50	; 0x32
 8003954:	2100      	movs	r1, #0
 8003956:	f002 fcc7 	bl	80062e8 <lv_obj_get_style_prop>
 800395a:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, area);
 800395c:	4621      	mov	r1, r4
 800395e:	4630      	mov	r0, r6
 8003960:	f7ff ff97 	bl	8003892 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8003964:	4269      	negs	r1, r5
 8003966:	b209      	sxth	r1, r1
 8003968:	460a      	mov	r2, r1
 800396a:	4620      	mov	r0, r4
 800396c:	f007 fcd4 	bl	800b318 <lv_area_increase>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003970:	2212      	movs	r2, #18
 8003972:	2100      	movs	r1, #0
 8003974:	4630      	mov	r0, r6
 8003976:	f002 fcb7 	bl	80062e8 <lv_obj_get_style_prop>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800397a:	b280      	uxth	r0, r0
 800397c:	8823      	ldrh	r3, [r4, #0]
 800397e:	4418      	add	r0, r3
 8003980:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003982:	2213      	movs	r2, #19
 8003984:	2100      	movs	r1, #0
 8003986:	4630      	mov	r0, r6
 8003988:	f002 fcae 	bl	80062e8 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800398c:	b283      	uxth	r3, r0
 800398e:	88a0      	ldrh	r0, [r4, #4]
 8003990:	1ac0      	subs	r0, r0, r3
 8003992:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003994:	2210      	movs	r2, #16
 8003996:	2100      	movs	r1, #0
 8003998:	4630      	mov	r0, r6
 800399a:	f002 fca5 	bl	80062e8 <lv_obj_get_style_prop>
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800399e:	b280      	uxth	r0, r0
 80039a0:	8863      	ldrh	r3, [r4, #2]
 80039a2:	4418      	add	r0, r3
 80039a4:	8060      	strh	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80039a6:	2211      	movs	r2, #17
 80039a8:	2100      	movs	r1, #0
 80039aa:	4630      	mov	r0, r6
 80039ac:	f002 fc9c 	bl	80062e8 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80039b0:	b283      	uxth	r3, r0
 80039b2:	88e0      	ldrh	r0, [r4, #6]
 80039b4:	1ac0      	subs	r0, r0, r3
 80039b6:	80e0      	strh	r0, [r4, #6]
}
 80039b8:	bd70      	pop	{r4, r5, r6, pc}

080039ba <lv_obj_get_self_width>:
{
 80039ba:	b500      	push	{lr}
 80039bc:	b083      	sub	sp, #12
    lv_point_t p = {0, LV_COORD_MIN};
 80039be:	2300      	movs	r3, #0
 80039c0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80039c4:	f24e 0301 	movw	r3, #57345	; 0xe001
 80039c8:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 80039cc:	aa01      	add	r2, sp, #4
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	f7fe f99c 	bl	8001d0c <lv_event_send>
}
 80039d4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80039d8:	b003      	add	sp, #12
 80039da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080039e0 <calc_content_width>:
{
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	b083      	sub	sp, #12
 80039e6:	4605      	mov	r5, r0
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 80039e8:	2200      	movs	r2, #0
 80039ea:	4611      	mov	r1, r2
 80039ec:	f001 fad0 	bl	8004f90 <lv_obj_scroll_to_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80039f0:	2232      	movs	r2, #50	; 0x32
 80039f2:	2100      	movs	r1, #0
 80039f4:	4628      	mov	r0, r5
 80039f6:	f002 fc77 	bl	80062e8 <lv_obj_get_style_prop>
 80039fa:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80039fc:	2213      	movs	r2, #19
 80039fe:	2100      	movs	r1, #0
 8003a00:	4628      	mov	r0, r5
 8003a02:	f002 fc71 	bl	80062e8 <lv_obj_get_style_prop>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8003a06:	b280      	uxth	r0, r0
 8003a08:	b2a4      	uxth	r4, r4
 8003a0a:	4420      	add	r0, r4
 8003a0c:	fa1f fa80 	uxth.w	sl, r0
 8003a10:	b203      	sxth	r3, r0
 8003a12:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003a14:	2212      	movs	r2, #18
 8003a16:	2100      	movs	r1, #0
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f002 fc65 	bl	80062e8 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8003a1e:	b280      	uxth	r0, r0
 8003a20:	4404      	add	r4, r0
 8003a22:	fa1f fb84 	uxth.w	fp, r4
 8003a26:	b223      	sxth	r3, r4
 8003a28:	9300      	str	r3, [sp, #0]
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7ff ffc5 	bl	80039ba <lv_obj_get_self_width>
 8003a30:	b287      	uxth	r7, r0
 8003a32:	445f      	add	r7, fp
 8003a34:	b2bf      	uxth	r7, r7
 8003a36:	4457      	add	r7, sl
 8003a38:	b23f      	sxth	r7, r7
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f003 f8bb 	bl	8006bb6 <lv_obj_get_child_cnt>
 8003a40:	4681      	mov	r9, r0
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8003a42:	2216      	movs	r2, #22
 8003a44:	2100      	movs	r1, #0
 8003a46:	4628      	mov	r0, r5
 8003a48:	f002 fc4e 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8003a4c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8003a4e:	2801      	cmp	r0, #1
 8003a50:	d052      	beq.n	8003af8 <calc_content_width+0x118>
        for(i = 0; i < child_cnt; i++) {
 8003a52:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8003a54:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8003bcc <calc_content_width+0x1ec>
 8003a58:	e073      	b.n	8003b42 <calc_content_width+0x162>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003a5a:	2209      	movs	r2, #9
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f002 fc42 	bl	80062e8 <lv_obj_get_style_prop>
                switch(align) {
 8003a64:	b2c0      	uxtb	r0, r0
 8003a66:	2808      	cmp	r0, #8
 8003a68:	d82f      	bhi.n	8003aca <calc_content_width+0xea>
 8003a6a:	e8df f000 	tbb	[pc, r0]
 8003a6e:	2e05      	.short	0x2e05
 8003a70:	2e2e052e 	.word	0x2e2e052e
 8003a74:	2e05      	.short	0x2e05
 8003a76:	05          	.byte	0x05
 8003a77:	00          	.byte	0x00
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8003a78:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8003a7c:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	3301      	adds	r3, #1
 8003a84:	4598      	cmp	r8, r3
 8003a86:	bfb8      	it	lt
 8003a88:	4698      	movlt	r8, r3
 8003a8a:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < child_cnt; i++) {
 8003a8e:	3401      	adds	r4, #1
 8003a90:	454c      	cmp	r4, r9
 8003a92:	d235      	bcs.n	8003b00 <calc_content_width+0x120>
            lv_obj_t * child = obj->spec_attr->children[i];
 8003a94:	68ab      	ldr	r3, [r5, #8]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003a9c:	494c      	ldr	r1, [pc, #304]	; (8003bd0 <calc_content_width+0x1f0>)
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7fe fff5 	bl	8002a8e <lv_obj_has_flag_any>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d1f2      	bne.n	8003a8e <calc_content_width+0xae>
            if(!lv_obj_is_layout_positioned(child)) {
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f7ff fe93 	bl	80037d4 <lv_obj_is_layout_positioned>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d0d3      	beq.n	8003a5a <calc_content_width+0x7a>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8003ab2:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8003ab6:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	3301      	adds	r3, #1
 8003abe:	4598      	cmp	r8, r3
 8003ac0:	bfb8      	it	lt
 8003ac2:	4698      	movlt	r8, r3
 8003ac4:	fa0f f888 	sxth.w	r8, r8
 8003ac8:	e7e1      	b.n	8003a8e <calc_content_width+0xae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8003aca:	2207      	movs	r2, #7
 8003acc:	2100      	movs	r1, #0
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f002 fc0a 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003ad4:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d1d9      	bne.n	8003a8e <calc_content_width+0xae>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003ada:	8b33      	ldrh	r3, [r6, #24]
 8003adc:	8ab2      	ldrh	r2, [r6, #20]
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	b21b      	sxth	r3, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8003ae8:	9901      	ldr	r1, [sp, #4]
 8003aea:	440b      	add	r3, r1
 8003aec:	4598      	cmp	r8, r3
 8003aee:	dcce      	bgt.n	8003a8e <calc_content_width+0xae>
 8003af0:	4452      	add	r2, sl
 8003af2:	fa0f f882 	sxth.w	r8, r2
 8003af6:	e7ca      	b.n	8003a8e <calc_content_width+0xae>
        for(i = 0; i < child_cnt; i++) {
 8003af8:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8003afa:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bcc <calc_content_width+0x1ec>
 8003afe:	e7c7      	b.n	8003a90 <calc_content_width+0xb0>
        if(child_res != LV_COORD_MIN) {
 8003b00:	4b32      	ldr	r3, [pc, #200]	; (8003bcc <calc_content_width+0x1ec>)
 8003b02:	4598      	cmp	r8, r3
 8003b04:	d057      	beq.n	8003bb6 <calc_content_width+0x1d6>
            child_res += pad_left;
 8003b06:	44d8      	add	r8, fp
 8003b08:	fa0f f888 	sxth.w	r8, r8
 8003b0c:	e053      	b.n	8003bb6 <calc_content_width+0x1d6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003b0e:	2209      	movs	r2, #9
 8003b10:	2100      	movs	r1, #0
 8003b12:	4630      	mov	r0, r6
 8003b14:	f002 fbe8 	bl	80062e8 <lv_obj_get_style_prop>
                switch(align) {
 8003b18:	b2c0      	uxtb	r0, r0
 8003b1a:	2807      	cmp	r0, #7
 8003b1c:	d82e      	bhi.n	8003b7c <calc_content_width+0x19c>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	fa03 f000 	lsl.w	r0, r3, r0
 8003b24:	f010 0f93 	tst.w	r0, #147	; 0x93
 8003b28:	d028      	beq.n	8003b7c <calc_content_width+0x19c>
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8003b2a:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8003b2e:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	3301      	adds	r3, #1
 8003b36:	4598      	cmp	r8, r3
 8003b38:	bfb8      	it	lt
 8003b3a:	4698      	movlt	r8, r3
 8003b3c:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < child_cnt; i++) {
 8003b40:	3401      	adds	r4, #1
 8003b42:	454c      	cmp	r4, r9
 8003b44:	d231      	bcs.n	8003baa <calc_content_width+0x1ca>
            lv_obj_t * child = obj->spec_attr->children[i];
 8003b46:	68ab      	ldr	r3, [r5, #8]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003b4e:	4920      	ldr	r1, [pc, #128]	; (8003bd0 <calc_content_width+0x1f0>)
 8003b50:	4630      	mov	r0, r6
 8003b52:	f7fe ff9c 	bl	8002a8e <lv_obj_has_flag_any>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d1f2      	bne.n	8003b40 <calc_content_width+0x160>
            if(!lv_obj_is_layout_positioned(child)) {
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7ff fe3a 	bl	80037d4 <lv_obj_is_layout_positioned>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0d4      	beq.n	8003b0e <calc_content_width+0x12e>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8003b64:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8003b68:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4598      	cmp	r8, r3
 8003b72:	bfb8      	it	lt
 8003b74:	4698      	movlt	r8, r3
 8003b76:	fa0f f888 	sxth.w	r8, r8
 8003b7a:	e7e1      	b.n	8003b40 <calc_content_width+0x160>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4630      	mov	r0, r6
 8003b82:	f002 fbb1 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003b86:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d1d9      	bne.n	8003b40 <calc_content_width+0x160>
 8003b8c:	8b33      	ldrh	r3, [r6, #24]
 8003b8e:	8ab2      	ldrh	r2, [r6, #20]
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	b21b      	sxth	r3, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8003b9a:	9900      	ldr	r1, [sp, #0]
 8003b9c:	440b      	add	r3, r1
 8003b9e:	4598      	cmp	r8, r3
 8003ba0:	dcce      	bgt.n	8003b40 <calc_content_width+0x160>
 8003ba2:	445a      	add	r2, fp
 8003ba4:	fa0f f882 	sxth.w	r8, r2
 8003ba8:	e7ca      	b.n	8003b40 <calc_content_width+0x160>
        if(child_res != LV_COORD_MIN) {
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <calc_content_width+0x1ec>)
 8003bac:	4598      	cmp	r8, r3
 8003bae:	d002      	beq.n	8003bb6 <calc_content_width+0x1d6>
            child_res += pad_right;
 8003bb0:	44d0      	add	r8, sl
 8003bb2:	fa0f f888 	sxth.w	r8, r8
    if(child_res == LV_COORD_MIN) return self_w;
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <calc_content_width+0x1ec>)
 8003bb8:	4598      	cmp	r8, r3
 8003bba:	d002      	beq.n	8003bc2 <calc_content_width+0x1e2>
    else return LV_MAX(child_res, self_w);
 8003bbc:	4547      	cmp	r7, r8
 8003bbe:	bfb8      	it	lt
 8003bc0:	4647      	movlt	r7, r8
}
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	b003      	add	sp, #12
 8003bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bca:	bf00      	nop
 8003bcc:	ffffe001 	.word	0xffffe001
 8003bd0:	00040001 	.word	0x00040001

08003bd4 <lv_obj_get_self_height>:
{
 8003bd4:	b500      	push	{lr}
 8003bd6:	b083      	sub	sp, #12
    lv_point_t p = {LV_COORD_MIN, 0};
 8003bd8:	f24e 0301 	movw	r3, #57345	; 0xe001
 8003bdc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8003be6:	aa01      	add	r2, sp, #4
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	f7fe f88f 	bl	8001d0c <lv_event_send>
}
 8003bee:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8003bf2:	b003      	add	sp, #12
 8003bf4:	f85d fb04 	ldr.w	pc, [sp], #4

08003bf8 <calc_content_height>:
{
 8003bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	4606      	mov	r6, r0
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8003c00:	2200      	movs	r2, #0
 8003c02:	4611      	mov	r1, r2
 8003c04:	f001 f9d8 	bl	8004fb8 <lv_obj_scroll_to_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8003c08:	2232      	movs	r2, #50	; 0x32
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	f002 fb6b 	bl	80062e8 <lv_obj_get_style_prop>
 8003c12:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003c14:	2210      	movs	r2, #16
 8003c16:	2100      	movs	r1, #0
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f002 fb65 	bl	80062e8 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8003c1e:	b280      	uxth	r0, r0
 8003c20:	b2bf      	uxth	r7, r7
 8003c22:	4438      	add	r0, r7
 8003c24:	fa1f fb80 	uxth.w	fp, r0
 8003c28:	b203      	sxth	r3, r0
 8003c2a:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003c2c:	2211      	movs	r2, #17
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4630      	mov	r0, r6
 8003c32:	f002 fb59 	bl	80062e8 <lv_obj_get_style_prop>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8003c36:	b280      	uxth	r0, r0
 8003c38:	4407      	add	r7, r0
 8003c3a:	b2bf      	uxth	r7, r7
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	f7ff ffc9 	bl	8003bd4 <lv_obj_get_self_height>
 8003c42:	fa1f f880 	uxth.w	r8, r0
 8003c46:	44d8      	add	r8, fp
 8003c48:	fa1f f888 	uxth.w	r8, r8
 8003c4c:	44b8      	add	r8, r7
 8003c4e:	fa0f f888 	sxth.w	r8, r8
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8003c52:	4630      	mov	r0, r6
 8003c54:	f002 ffaf 	bl	8006bb6 <lv_obj_get_child_cnt>
 8003c58:	4681      	mov	r9, r0
    for(i = 0; i < child_cnt; i++) {
 8003c5a:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8003c5c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003d0c <calc_content_height+0x114>
    for(i = 0; i < child_cnt; i++) {
 8003c60:	e013      	b.n	8003c8a <calc_content_height+0x92>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003c62:	2209      	movs	r2, #9
 8003c64:	2100      	movs	r1, #0
 8003c66:	4628      	mov	r0, r5
 8003c68:	f002 fb3e 	bl	80062e8 <lv_obj_get_style_prop>
            switch(align) {
 8003c6c:	b2c0      	uxtb	r0, r0
 8003c6e:	2803      	cmp	r0, #3
 8003c70:	d828      	bhi.n	8003cc4 <calc_content_height+0xcc>
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8003c72:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8003c76:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	459a      	cmp	sl, r3
 8003c80:	bfb8      	it	lt
 8003c82:	469a      	movlt	sl, r3
 8003c84:	fa0f fa8a 	sxth.w	sl, sl
    for(i = 0; i < child_cnt; i++) {
 8003c88:	3401      	adds	r4, #1
 8003c8a:	454c      	cmp	r4, r9
 8003c8c:	d231      	bcs.n	8003cf2 <calc_content_height+0xfa>
        lv_obj_t * child = obj->spec_attr->children[i];
 8003c8e:	68b3      	ldr	r3, [r6, #8]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003c96:	491e      	ldr	r1, [pc, #120]	; (8003d10 <calc_content_height+0x118>)
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f7fe fef8 	bl	8002a8e <lv_obj_has_flag_any>
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d1f2      	bne.n	8003c88 <calc_content_height+0x90>
        if(!lv_obj_is_layout_positioned(child)) {
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7ff fd96 	bl	80037d4 <lv_obj_is_layout_positioned>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d0da      	beq.n	8003c62 <calc_content_height+0x6a>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8003cac:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8003cb0:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	459a      	cmp	sl, r3
 8003cba:	bfb8      	it	lt
 8003cbc:	469a      	movlt	sl, r3
 8003cbe:	fa0f fa8a 	sxth.w	sl, sl
 8003cc2:	e7e1      	b.n	8003c88 <calc_content_height+0x90>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f002 fb0d 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003cce:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d1d9      	bne.n	8003c88 <calc_content_height+0x90>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003cd4:	8b6b      	ldrh	r3, [r5, #26]
 8003cd6:	8aea      	ldrh	r2, [r5, #22]
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	b21b      	sxth	r3, r3
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8003ce2:	9901      	ldr	r1, [sp, #4]
 8003ce4:	440b      	add	r3, r1
 8003ce6:	459a      	cmp	sl, r3
 8003ce8:	dcce      	bgt.n	8003c88 <calc_content_height+0x90>
 8003cea:	445a      	add	r2, fp
 8003cec:	fa0f fa82 	sxth.w	sl, r2
 8003cf0:	e7ca      	b.n	8003c88 <calc_content_height+0x90>
    if(child_res != LV_COORD_MIN) {
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <calc_content_height+0x114>)
 8003cf4:	459a      	cmp	sl, r3
 8003cf6:	d004      	beq.n	8003d02 <calc_content_height+0x10a>
        child_res += pad_bottom;
 8003cf8:	4457      	add	r7, sl
 8003cfa:	b23f      	sxth	r7, r7
        return LV_MAX(child_res, self_h);
 8003cfc:	45b8      	cmp	r8, r7
 8003cfe:	bfb8      	it	lt
 8003d00:	46b8      	movlt	r8, r7
}
 8003d02:	4640      	mov	r0, r8
 8003d04:	b003      	add	sp, #12
 8003d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0a:	bf00      	nop
 8003d0c:	ffffe001 	.word	0xffffe001
 8003d10:	00040001 	.word	0x00040001

08003d14 <lv_obj_refresh_self_size>:
{
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	f002 fae4 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003d20:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003d22:	2204      	movs	r2, #4
 8003d24:	2100      	movs	r1, #0
 8003d26:	4620      	mov	r0, r4
 8003d28:	f002 fade 	bl	80062e8 <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8003d2c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8003d30:	429d      	cmp	r5, r3
 8003d32:	d002      	beq.n	8003d3a <lv_obj_refresh_self_size+0x26>
 8003d34:	b200      	sxth	r0, r0
 8003d36:	4298      	cmp	r0, r3
 8003d38:	d104      	bne.n	8003d44 <lv_obj_refresh_self_size+0x30>
    lv_obj_mark_layout_as_dirty(obj);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff fd64 	bl	8003808 <lv_obj_mark_layout_as_dirty>
    return true;
 8003d40:	2001      	movs	r0, #1
}
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8003d44:	2000      	movs	r0, #0
 8003d46:	e7fc      	b.n	8003d42 <lv_obj_refresh_self_size+0x2e>

08003d48 <lv_obj_move_children_by>:
{
 8003d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	460f      	mov	r7, r1
 8003d50:	4616      	mov	r6, r2
 8003d52:	4699      	mov	r9, r3
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8003d54:	f002 ff2f 	bl	8006bb6 <lv_obj_get_child_cnt>
 8003d58:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8003d5a:	2500      	movs	r5, #0
 8003d5c:	e016      	b.n	8003d8c <lv_obj_move_children_by+0x44>
        child->coords.x1 += x_diff;
 8003d5e:	b2bb      	uxth	r3, r7
 8003d60:	8aa2      	ldrh	r2, [r4, #20]
 8003d62:	441a      	add	r2, r3
 8003d64:	82a2      	strh	r2, [r4, #20]
        child->coords.y1 += y_diff;
 8003d66:	fa1f fc86 	uxth.w	ip, r6
 8003d6a:	8ae2      	ldrh	r2, [r4, #22]
 8003d6c:	4462      	add	r2, ip
 8003d6e:	82e2      	strh	r2, [r4, #22]
        child->coords.x2 += x_diff;
 8003d70:	8b22      	ldrh	r2, [r4, #24]
 8003d72:	4413      	add	r3, r2
 8003d74:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 8003d76:	8b63      	ldrh	r3, [r4, #26]
 8003d78:	449c      	add	ip, r3
 8003d7a:	f8a4 c01a 	strh.w	ip, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	4632      	mov	r2, r6
 8003d82:	4639      	mov	r1, r7
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7ff ffdf 	bl	8003d48 <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 8003d8a:	3501      	adds	r5, #1
 8003d8c:	4545      	cmp	r5, r8
 8003d8e:	d20f      	bcs.n	8003db0 <lv_obj_move_children_by+0x68>
        lv_obj_t * child = obj->spec_attr->children[i];
 8003d90:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8003d9a:	f1b9 0f00 	cmp.w	r9, #0
 8003d9e:	d0de      	beq.n	8003d5e <lv_obj_move_children_by+0x16>
 8003da0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003da4:	4620      	mov	r0, r4
 8003da6:	f7fe fe6b 	bl	8002a80 <lv_obj_has_flag>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d0d7      	beq.n	8003d5e <lv_obj_move_children_by+0x16>
 8003dae:	e7ec      	b.n	8003d8a <lv_obj_move_children_by+0x42>
}
 8003db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003db4 <lv_obj_transform_point>:
    if(obj) {
 8003db4:	b380      	cbz	r0, 8003e18 <lv_obj_transform_point+0x64>
{
 8003db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	460f      	mov	r7, r1
 8003dbc:	4615      	mov	r5, r2
 8003dbe:	461c      	mov	r4, r3
 8003dc0:	4680      	mov	r8, r0
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8003dc2:	f7ff fc23 	bl	800360c <_lv_obj_get_layer_type>
 8003dc6:	4606      	mov	r6, r0
        if(inv) {
 8003dc8:	b19c      	cbz	r4, 8003df2 <lv_obj_transform_point+0x3e>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8003dca:	b91d      	cbnz	r5, 8003dd4 <lv_obj_transform_point+0x20>
            if(do_tranf) transform_point(obj, p, inv);
 8003dcc:	2e02      	cmp	r6, #2
 8003dce:	d00a      	beq.n	8003de6 <lv_obj_transform_point+0x32>
}
 8003dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	f002 feae 	bl	8006b36 <lv_obj_get_parent>
 8003dda:	4623      	mov	r3, r4
 8003ddc:	462a      	mov	r2, r5
 8003dde:	4639      	mov	r1, r7
 8003de0:	f7ff ffe8 	bl	8003db4 <lv_obj_transform_point>
 8003de4:	e7f2      	b.n	8003dcc <lv_obj_transform_point+0x18>
            if(do_tranf) transform_point(obj, p, inv);
 8003de6:	4622      	mov	r2, r4
 8003de8:	4639      	mov	r1, r7
 8003dea:	4640      	mov	r0, r8
 8003dec:	f7ff fc16 	bl	800361c <transform_point>
 8003df0:	e7ee      	b.n	8003dd0 <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 8003df2:	2802      	cmp	r0, #2
 8003df4:	d00a      	beq.n	8003e0c <lv_obj_transform_point+0x58>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	d0ea      	beq.n	8003dd0 <lv_obj_transform_point+0x1c>
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f002 fe9b 	bl	8006b36 <lv_obj_get_parent>
 8003e00:	4623      	mov	r3, r4
 8003e02:	462a      	mov	r2, r5
 8003e04:	4639      	mov	r1, r7
 8003e06:	f7ff ffd5 	bl	8003db4 <lv_obj_transform_point>
}
 8003e0a:	e7e1      	b.n	8003dd0 <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4639      	mov	r1, r7
 8003e10:	4640      	mov	r0, r8
 8003e12:	f7ff fc03 	bl	800361c <transform_point>
 8003e16:	e7ee      	b.n	8003df6 <lv_obj_transform_point+0x42>
 8003e18:	4770      	bx	lr

08003e1a <lv_obj_get_transformed_area>:
{
 8003e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	4605      	mov	r5, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	4616      	mov	r6, r2
 8003e24:	461f      	mov	r7, r3
        {area->x1, area->y1},
 8003e26:	f9b1 1000 	ldrsh.w	r1, [r1]
    lv_point_t p[4] = {
 8003e2a:	f8ad 1000 	strh.w	r1, [sp]
        {area->x1, area->y1},
 8003e2e:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
    lv_point_t p[4] = {
 8003e32:	f8ad e002 	strh.w	lr, [sp, #2]
 8003e36:	f8ad 1004 	strh.w	r1, [sp, #4]
        {area->x1, area->y2},
 8003e3a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    lv_point_t p[4] = {
 8003e3e:	f8ad 1006 	strh.w	r1, [sp, #6]
        {area->x2, area->y1},
 8003e42:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
    lv_point_t p[4] = {
 8003e46:	f8ad c008 	strh.w	ip, [sp, #8]
 8003e4a:	f8ad e00a 	strh.w	lr, [sp, #10]
 8003e4e:	f8ad c00c 	strh.w	ip, [sp, #12]
 8003e52:	f8ad 100e 	strh.w	r1, [sp, #14]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 8003e56:	4669      	mov	r1, sp
 8003e58:	f7ff ffac 	bl	8003db4 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	4632      	mov	r2, r6
 8003e60:	a901      	add	r1, sp, #4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f7ff ffa6 	bl	8003db4 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 8003e68:	463b      	mov	r3, r7
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	a902      	add	r1, sp, #8
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f7ff ffa0 	bl	8003db4 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 8003e74:	463b      	mov	r3, r7
 8003e76:	4632      	mov	r2, r6
 8003e78:	a903      	add	r1, sp, #12
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff ff9a 	bl	8003db4 <lv_obj_transform_point>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 8003e80:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003e84:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	42ab      	cmp	r3, r5
 8003e8c:	bfa8      	it	ge
 8003e8e:	4629      	movge	r1, r5
 8003e90:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003e94:	f9bd 0000 	ldrsh.w	r0, [sp]
 8003e98:	4616      	mov	r6, r2
 8003e9a:	4282      	cmp	r2, r0
 8003e9c:	bfa8      	it	ge
 8003e9e:	4606      	movge	r6, r0
 8003ea0:	42b1      	cmp	r1, r6
 8003ea2:	bfa8      	it	ge
 8003ea4:	4631      	movge	r1, r6
 8003ea6:	8021      	strh	r1, [r4, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 8003ea8:	42ab      	cmp	r3, r5
 8003eaa:	bfb8      	it	lt
 8003eac:	462b      	movlt	r3, r5
 8003eae:	4282      	cmp	r2, r0
 8003eb0:	bfb8      	it	lt
 8003eb2:	4602      	movlt	r2, r0
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bfb8      	it	lt
 8003eb8:	4613      	movlt	r3, r2
 8003eba:	80a3      	strh	r3, [r4, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8003ebc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8003ec0:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	42ab      	cmp	r3, r5
 8003ec8:	bfa8      	it	ge
 8003eca:	4629      	movge	r1, r5
 8003ecc:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8003ed0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	4282      	cmp	r2, r0
 8003ed8:	bfa8      	it	ge
 8003eda:	4606      	movge	r6, r0
 8003edc:	42b1      	cmp	r1, r6
 8003ede:	bfa8      	it	ge
 8003ee0:	4631      	movge	r1, r6
 8003ee2:	8061      	strh	r1, [r4, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8003ee4:	42ab      	cmp	r3, r5
 8003ee6:	bfb8      	it	lt
 8003ee8:	462b      	movlt	r3, r5
 8003eea:	4282      	cmp	r2, r0
 8003eec:	bfb8      	it	lt
 8003eee:	4602      	movlt	r2, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bfb8      	it	lt
 8003ef4:	4613      	movlt	r3, r2
 8003ef6:	80e3      	strh	r3, [r4, #6]
    lv_area_increase(area, 5, 5);
 8003ef8:	2205      	movs	r2, #5
 8003efa:	4611      	mov	r1, r2
 8003efc:	4620      	mov	r0, r4
 8003efe:	f007 fa0b 	bl	800b318 <lv_area_increase>
}
 8003f02:	b005      	add	sp, #20
 8003f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f06 <lv_obj_area_is_visible>:
{
 8003f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	460e      	mov	r6, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8003f10:	2101      	movs	r1, #1
 8003f12:	f7fe fdb5 	bl	8002a80 <lv_obj_has_flag>
 8003f16:	b120      	cbz	r0, 8003f22 <lv_obj_area_is_visible+0x1c>
 8003f18:	2700      	movs	r7, #0
}
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f22:	4607      	mov	r7, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8003f24:	4620      	mov	r0, r4
 8003f26:	f002 fe0a 	bl	8006b3e <lv_obj_get_screen>
 8003f2a:	4605      	mov	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8003f2c:	f002 fe10 	bl	8006b50 <lv_obj_get_disp>
 8003f30:	4680      	mov	r8, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8003f32:	f7fd fd91 	bl	8001a58 <lv_disp_get_scr_act>
 8003f36:	4285      	cmp	r5, r0
 8003f38:	d00e      	beq.n	8003f58 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	f7fd fd98 	bl	8001a70 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8003f40:	4285      	cmp	r5, r0
 8003f42:	d009      	beq.n	8003f58 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8003f44:	4640      	mov	r0, r8
 8003f46:	f7fd fd9f 	bl	8001a88 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8003f4a:	4285      	cmp	r5, r0
 8003f4c:	d004      	beq.n	8003f58 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8003f4e:	4640      	mov	r0, r8
 8003f50:	f7fd fda6 	bl	8001aa0 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8003f54:	4285      	cmp	r5, r0
 8003f56:	d1e0      	bne.n	8003f1a <lv_obj_area_is_visible+0x14>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8003f58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7fe fd96 	bl	8002a8e <lv_obj_has_flag_any>
 8003f62:	bb28      	cbnz	r0, 8003fb0 <lv_obj_area_is_visible+0xaa>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7ff fb18 	bl	800359a <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8003f6a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8003f6e:	f8ad 1000 	strh.w	r1, [sp]
    dest->y1 = src->y1;
 8003f72:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8003f76:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 8003f7a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8003f7e:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8003f82:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
 8003f86:	f8ad 5006 	strh.w	r5, [sp, #6]
        obj_coords.x1 -= ext_size;
 8003f8a:	b280      	uxth	r0, r0
 8003f8c:	1a09      	subs	r1, r1, r0
 8003f8e:	f8ad 1000 	strh.w	r1, [sp]
        obj_coords.y1 -= ext_size;
 8003f92:	1a12      	subs	r2, r2, r0
 8003f94:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
 8003f98:	4403      	add	r3, r0
 8003f9a:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
 8003f9e:	4428      	add	r0, r5
 8003fa0:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8003fa4:	466a      	mov	r2, sp
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f007 f9d3 	bl	800b354 <_lv_area_intersect>
 8003fae:	b150      	cbz	r0, 8003fc6 <lv_obj_area_is_visible+0xc0>
    lv_obj_get_transformed_area(obj, area, true, false);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7ff ff2f 	bl	8003e1a <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f002 fdba 	bl	8006b36 <lv_obj_get_parent>
 8003fc2:	4604      	mov	r4, r0
    while(par != NULL) {
 8003fc4:	e005      	b.n	8003fd2 <lv_obj_area_is_visible+0xcc>
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8003fc6:	4607      	mov	r7, r0
 8003fc8:	e7a7      	b.n	8003f1a <lv_obj_area_is_visible+0x14>
        par = lv_obj_get_parent(par);
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f002 fdb3 	bl	8006b36 <lv_obj_get_parent>
 8003fd0:	4604      	mov	r4, r0
    while(par != NULL) {
 8003fd2:	b314      	cbz	r4, 800401a <lv_obj_area_is_visible+0x114>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7fe fd52 	bl	8002a80 <lv_obj_has_flag>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d19c      	bne.n	8003f1a <lv_obj_area_is_visible+0x14>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8003fe0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7fe fd52 	bl	8002a8e <lv_obj_has_flag_any>
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d1ed      	bne.n	8003fca <lv_obj_area_is_visible+0xc4>
            lv_area_t par_area = par->coords;
 8003fee:	466d      	mov	r5, sp
 8003ff0:	f104 0314 	add.w	r3, r4, #20
 8003ff4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ff8:	e885 0003 	stmia.w	r5, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2201      	movs	r2, #1
 8004000:	4629      	mov	r1, r5
 8004002:	4620      	mov	r0, r4
 8004004:	f7ff ff09 	bl	8003e1a <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 8004008:	462a      	mov	r2, r5
 800400a:	4631      	mov	r1, r6
 800400c:	4630      	mov	r0, r6
 800400e:	f007 f9a1 	bl	800b354 <_lv_area_intersect>
 8004012:	2800      	cmp	r0, #0
 8004014:	d1d9      	bne.n	8003fca <lv_obj_area_is_visible+0xc4>
 8004016:	4607      	mov	r7, r0
 8004018:	e77f      	b.n	8003f1a <lv_obj_area_is_visible+0x14>
    return true;
 800401a:	2701      	movs	r7, #1
 800401c:	e77d      	b.n	8003f1a <lv_obj_area_is_visible+0x14>

0800401e <lv_obj_invalidate_area>:
{
 800401e:	b530      	push	{r4, r5, lr}
 8004020:	b083      	sub	sp, #12
 8004022:	4605      	mov	r5, r0
 8004024:	460c      	mov	r4, r1
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8004026:	f002 fd93 	bl	8006b50 <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800402a:	f7fd fd4e 	bl	8001aca <lv_disp_is_invalidation_enabled>
 800402e:	b908      	cbnz	r0, 8004034 <lv_obj_invalidate_area+0x16>
}
 8004030:	b003      	add	sp, #12
 8004032:	bd30      	pop	{r4, r5, pc}
    dest->x1 = src->x1;
 8004034:	f9b4 3000 	ldrsh.w	r3, [r4]
 8004038:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 800403c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8004040:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8004044:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8004048:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 800404c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8004050:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8004054:	4669      	mov	r1, sp
 8004056:	4628      	mov	r0, r5
 8004058:	f7ff ff55 	bl	8003f06 <lv_obj_area_is_visible>
 800405c:	2800      	cmp	r0, #0
 800405e:	d0e7      	beq.n	8004030 <lv_obj_invalidate_area+0x12>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8004060:	4628      	mov	r0, r5
 8004062:	f002 fd75 	bl	8006b50 <lv_obj_get_disp>
 8004066:	4669      	mov	r1, sp
 8004068:	f003 fe22 	bl	8007cb0 <_lv_inv_area>
 800406c:	e7e0      	b.n	8004030 <lv_obj_invalidate_area+0x12>

0800406e <lv_obj_invalidate>:
{
 800406e:	b510      	push	{r4, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8004074:	f7ff fa91 	bl	800359a <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8004078:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 800407c:	f8ad c000 	strh.w	ip, [sp]
    dest->y1 = src->y1;
 8004080:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8004084:	f8ad 1002 	strh.w	r1, [sp, #2]
    dest->x2 = src->x2;
 8004088:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800408c:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 8004090:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
 8004094:	f8ad e006 	strh.w	lr, [sp, #6]
    obj_coords.x1 -= ext_size;
 8004098:	b283      	uxth	r3, r0
 800409a:	ebac 0c03 	sub.w	ip, ip, r3
 800409e:	f8ad c000 	strh.w	ip, [sp]
    obj_coords.y1 -= ext_size;
 80040a2:	1ac9      	subs	r1, r1, r3
 80040a4:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.x2 += ext_size;
 80040a8:	441a      	add	r2, r3
 80040aa:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 80040ae:	4473      	add	r3, lr
 80040b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 80040b4:	4669      	mov	r1, sp
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7ff ffb1 	bl	800401e <lv_obj_invalidate_area>
}
 80040bc:	b002      	add	sp, #8
 80040be:	bd10      	pop	{r4, pc}

080040c0 <lv_obj_move_to>:
{
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	b087      	sub	sp, #28
 80040c6:	4604      	mov	r4, r0
 80040c8:	460d      	mov	r5, r1
 80040ca:	4616      	mov	r6, r2
    lv_obj_t * parent = obj->parent;
 80040cc:	6847      	ldr	r7, [r0, #4]
    if(parent) {
 80040ce:	b357      	cbz	r7, 8004126 <lv_obj_move_to+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80040d0:	2212      	movs	r2, #18
 80040d2:	2100      	movs	r1, #0
 80040d4:	4638      	mov	r0, r7
 80040d6:	f002 f907 	bl	80062e8 <lv_obj_get_style_prop>
 80040da:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
 80040dc:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80040e0:	2210      	movs	r2, #16
 80040e2:	2100      	movs	r1, #0
 80040e4:	4638      	mov	r0, r7
 80040e6:	f002 f8ff 	bl	80062e8 <lv_obj_get_style_prop>
 80040ea:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 80040ec:	fa0f f880 	sxth.w	r8, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80040f0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7fe fcc3 	bl	8002a80 <lv_obj_has_flag>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d03b      	beq.n	8004176 <lv_obj_move_to+0xb6>
            x += pad_left + parent->coords.x1;
 80040fe:	8ab9      	ldrh	r1, [r7, #20]
 8004100:	4451      	add	r1, sl
 8004102:	b289      	uxth	r1, r1
 8004104:	440d      	add	r5, r1
 8004106:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1;
 8004108:	8afa      	ldrh	r2, [r7, #22]
 800410a:	444a      	add	r2, r9
 800410c:	b292      	uxth	r2, r2
 800410e:	4416      	add	r6, r2
 8004110:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004112:	2232      	movs	r2, #50	; 0x32
 8004114:	2100      	movs	r1, #0
 8004116:	4638      	mov	r0, r7
 8004118:	f002 f8e6 	bl	80062e8 <lv_obj_get_style_prop>
        x += border_width;
 800411c:	b280      	uxth	r0, r0
 800411e:	4405      	add	r5, r0
 8004120:	b22d      	sxth	r5, r5
        y += border_width;
 8004122:	4406      	add	r6, r0
 8004124:	b236      	sxth	r6, r6
    diff.x = x - obj->coords.x1;
 8004126:	8aa1      	ldrh	r1, [r4, #20]
 8004128:	1a6d      	subs	r5, r5, r1
 800412a:	fa1f f885 	uxth.w	r8, r5
 800412e:	b22d      	sxth	r5, r5
 8004130:	f8ad 5014 	strh.w	r5, [sp, #20]
    diff.y = y - obj->coords.y1;
 8004134:	8ae2      	ldrh	r2, [r4, #22]
 8004136:	1ab2      	subs	r2, r6, r2
 8004138:	fa1f f982 	uxth.w	r9, r2
 800413c:	b216      	sxth	r6, r2
 800413e:	f8ad 6016 	strh.w	r6, [sp, #22]
    if(diff.x == 0 && diff.y == 0) return;
 8004142:	b90d      	cbnz	r5, 8004148 <lv_obj_move_to+0x88>
 8004144:	2e00      	cmp	r6, #0
 8004146:	d058      	beq.n	80041fa <lv_obj_move_to+0x13a>
    lv_obj_invalidate(obj);
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff ff90 	bl	800406e <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 800414e:	a903      	add	r1, sp, #12
 8004150:	4620      	mov	r0, r4
 8004152:	f7ff fb9e 	bl	8003892 <lv_obj_get_coords>
    if(parent) {
 8004156:	b31f      	cbz	r7, 80041a0 <lv_obj_move_to+0xe0>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8004158:	a901      	add	r1, sp, #4
 800415a:	4638      	mov	r0, r7
 800415c:	f7ff fbf6 	bl	800394c <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8004160:	2200      	movs	r2, #0
 8004162:	a901      	add	r1, sp, #4
 8004164:	a803      	add	r0, sp, #12
 8004166:	f007 fa29 	bl	800b5bc <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 800416a:	4682      	mov	sl, r0
 800416c:	b9d0      	cbnz	r0, 80041a4 <lv_obj_move_to+0xe4>
 800416e:	4638      	mov	r0, r7
 8004170:	f001 fd20 	bl	8005bb4 <lv_obj_scrollbar_invalidate>
 8004174:	e016      	b.n	80041a4 <lv_obj_move_to+0xe4>
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8004176:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800417a:	449b      	add	fp, r3
 800417c:	4638      	mov	r0, r7
 800417e:	f000 fc6b 	bl	8004a58 <lv_obj_get_scroll_x>
 8004182:	ebab 0b00 	sub.w	fp, fp, r0
 8004186:	445d      	add	r5, fp
 8004188:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800418a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800418e:	4498      	add	r8, r3
 8004190:	4638      	mov	r0, r7
 8004192:	f000 fc69 	bl	8004a68 <lv_obj_get_scroll_y>
 8004196:	eba8 0800 	sub.w	r8, r8, r0
 800419a:	4446      	add	r6, r8
 800419c:	b236      	sxth	r6, r6
 800419e:	e7b8      	b.n	8004112 <lv_obj_move_to+0x52>
    bool on1 = false;
 80041a0:	f04f 0a00 	mov.w	sl, #0
    obj->coords.x1 += diff.x;
 80041a4:	8aa3      	ldrh	r3, [r4, #20]
 80041a6:	4443      	add	r3, r8
 80041a8:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 80041aa:	8ae3      	ldrh	r3, [r4, #22]
 80041ac:	444b      	add	r3, r9
 80041ae:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 80041b0:	8b23      	ldrh	r3, [r4, #24]
 80041b2:	4498      	add	r8, r3
 80041b4:	f8a4 8018 	strh.w	r8, [r4, #24]
    obj->coords.y2 += diff.y;
 80041b8:	8b63      	ldrh	r3, [r4, #26]
 80041ba:	4499      	add	r9, r3
 80041bc:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 80041c0:	2300      	movs	r3, #0
 80041c2:	4632      	mov	r2, r6
 80041c4:	4629      	mov	r1, r5
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7ff fdbe 	bl	8003d48 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80041cc:	b127      	cbz	r7, 80041d8 <lv_obj_move_to+0x118>
 80041ce:	4622      	mov	r2, r4
 80041d0:	2122      	movs	r1, #34	; 0x22
 80041d2:	4638      	mov	r0, r7
 80041d4:	f7fd fd9a 	bl	8001d0c <lv_event_send>
    lv_obj_invalidate(obj);
 80041d8:	4620      	mov	r0, r4
 80041da:	f7ff ff48 	bl	800406e <lv_obj_invalidate>
    if(parent) {
 80041de:	b167      	cbz	r7, 80041fa <lv_obj_move_to+0x13a>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	a901      	add	r1, sp, #4
 80041e4:	f104 0014 	add.w	r0, r4, #20
 80041e8:	f007 f9e8 	bl	800b5bc <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80041ec:	f1ba 0f00 	cmp.w	sl, #0
 80041f0:	d100      	bne.n	80041f4 <lv_obj_move_to+0x134>
 80041f2:	b110      	cbz	r0, 80041fa <lv_obj_move_to+0x13a>
 80041f4:	4638      	mov	r0, r7
 80041f6:	f001 fcdd 	bl	8005bb4 <lv_obj_scrollbar_invalidate>
}
 80041fa:	b007      	add	sp, #28
 80041fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004200 <lv_obj_refr_pos>:
{
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	b085      	sub	sp, #20
 8004206:	4604      	mov	r4, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 8004208:	f7ff fae4 	bl	80037d4 <lv_obj_is_layout_positioned>
 800420c:	b110      	cbz	r0, 8004214 <lv_obj_refr_pos+0x14>
}
 800420e:	b005      	add	sp, #20
 8004210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004214:	4620      	mov	r0, r4
 8004216:	f002 fc8e 	bl	8006b36 <lv_obj_get_parent>
 800421a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800421c:	2207      	movs	r2, #7
 800421e:	2100      	movs	r1, #0
 8004220:	4620      	mov	r0, r4
 8004222:	f002 f861 	bl	80062e8 <lv_obj_get_style_prop>
 8004226:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 8004228:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800422a:	2208      	movs	r2, #8
 800422c:	2100      	movs	r1, #0
 800422e:	4620      	mov	r0, r4
 8004230:	f002 f85a 	bl	80062e8 <lv_obj_get_style_prop>
 8004234:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8004236:	b206      	sxth	r6, r0
    if(parent == NULL) {
 8004238:	2f00      	cmp	r7, #0
 800423a:	d053      	beq.n	80042e4 <lv_obj_refr_pos+0xe4>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 800423c:	4638      	mov	r0, r7
 800423e:	f7ff fb45 	bl	80038cc <lv_obj_get_content_width>
 8004242:	9000      	str	r0, [sp, #0]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8004244:	4638      	mov	r0, r7
 8004246:	f7ff fb61 	bl	800390c <lv_obj_get_content_height>
 800424a:	9001      	str	r0, [sp, #4]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800424c:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 8004250:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8004254:	d04c      	beq.n	80042f0 <lv_obj_refr_pos+0xf0>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8004256:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800425a:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800425e:	d05c      	beq.n	800431a <lv_obj_refr_pos+0x11a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8004260:	226b      	movs	r2, #107	; 0x6b
 8004262:	2100      	movs	r1, #0
 8004264:	4620      	mov	r0, r4
 8004266:	f002 f83f 	bl	80062e8 <lv_obj_get_style_prop>
 800426a:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800426c:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8004270:	226c      	movs	r2, #108	; 0x6c
 8004272:	2100      	movs	r1, #0
 8004274:	4620      	mov	r0, r4
 8004276:	f002 f837 	bl	80062e8 <lv_obj_get_style_prop>
 800427a:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 800427c:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(obj);
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff fb13 	bl	80038ac <lv_obj_get_width>
 8004286:	9002      	str	r0, [sp, #8]
    lv_coord_t h = lv_obj_get_height(obj);
 8004288:	4620      	mov	r0, r4
 800428a:	f7ff fb17 	bl	80038bc <lv_obj_get_height>
 800428e:	9003      	str	r0, [sp, #12]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8004290:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 8004294:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8004298:	d054      	beq.n	8004344 <lv_obj_refr_pos+0x144>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800429a:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800429e:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 80042a2:	d066      	beq.n	8004372 <lv_obj_refr_pos+0x172>
    x += tr_x;
 80042a4:	445d      	add	r5, fp
 80042a6:	fa1f f885 	uxth.w	r8, r5
 80042aa:	b22d      	sxth	r5, r5
    y += tr_y;
 80042ac:	4456      	add	r6, sl
 80042ae:	fa1f f986 	uxth.w	r9, r6
 80042b2:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80042b4:	2209      	movs	r2, #9
 80042b6:	2100      	movs	r1, #0
 80042b8:	4620      	mov	r0, r4
 80042ba:	f002 f815 	bl	80062e8 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 80042be:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80042c2:	d06d      	beq.n	80043a0 <lv_obj_refr_pos+0x1a0>
    if(align == LV_ALIGN_TOP_LEFT) {
 80042c4:	2801      	cmp	r0, #1
 80042c6:	d073      	beq.n	80043b0 <lv_obj_refr_pos+0x1b0>
        switch(align) {
 80042c8:	3802      	subs	r0, #2
 80042ca:	2807      	cmp	r0, #7
 80042cc:	f200 8084 	bhi.w	80043d8 <lv_obj_refr_pos+0x1d8>
 80042d0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80042d4:	00880076 	.word	0x00880076
 80042d8:	00a3009c 	.word	0x00a3009c
 80042dc:	008f00b6 	.word	0x008f00b6
 80042e0:	00d600c3 	.word	0x00d600c3
        lv_obj_move_to(obj, x, y);
 80042e4:	4632      	mov	r2, r6
 80042e6:	4629      	mov	r1, r5
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff fee9 	bl	80040c0 <lv_obj_move_to>
        return;
 80042ee:	e78e      	b.n	800420e <lv_obj_refr_pos+0xe>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80042f0:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
 80042f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042f8:	dcad      	bgt.n	8004256 <lv_obj_refr_pos+0x56>
 80042fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042fe:	dd01      	ble.n	8004304 <lv_obj_refr_pos+0x104>
 8004300:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004304:	9a00      	ldr	r2, [sp, #0]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	4a6a      	ldr	r2, [pc, #424]	; (80044b4 <lv_obj_refr_pos+0x2b4>)
 800430c:	fb82 1203 	smull	r1, r2, r2, r3
 8004310:	17dd      	asrs	r5, r3, #31
 8004312:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 8004316:	b22d      	sxth	r5, r5
 8004318:	e79d      	b.n	8004256 <lv_obj_refr_pos+0x56>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800431a:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 800431e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004322:	dc9d      	bgt.n	8004260 <lv_obj_refr_pos+0x60>
 8004324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004328:	dd01      	ble.n	800432e <lv_obj_refr_pos+0x12e>
 800432a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800432e:	9a01      	ldr	r2, [sp, #4]
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	4a5f      	ldr	r2, [pc, #380]	; (80044b4 <lv_obj_refr_pos+0x2b4>)
 8004336:	fb82 1203 	smull	r1, r2, r2, r3
 800433a:	17de      	asrs	r6, r3, #31
 800433c:	ebc6 1662 	rsb	r6, r6, r2, asr #5
 8004340:	b236      	sxth	r6, r6
 8004342:	e78d      	b.n	8004260 <lv_obj_refr_pos+0x60>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8004344:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 8004348:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800434c:	dca5      	bgt.n	800429a <lv_obj_refr_pos+0x9a>
 800434e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004352:	dd01      	ble.n	8004358 <lv_obj_refr_pos+0x158>
 8004354:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004358:	9a02      	ldr	r2, [sp, #8]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	4a55      	ldr	r2, [pc, #340]	; (80044b4 <lv_obj_refr_pos+0x2b4>)
 8004360:	fb82 1203 	smull	r1, r2, r2, r3
 8004364:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8004368:	ebcb 1b62 	rsb	fp, fp, r2, asr #5
 800436c:	fa0f fb8b 	sxth.w	fp, fp
 8004370:	e793      	b.n	800429a <lv_obj_refr_pos+0x9a>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8004372:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 8004376:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800437a:	dc93      	bgt.n	80042a4 <lv_obj_refr_pos+0xa4>
 800437c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004380:	dd01      	ble.n	8004386 <lv_obj_refr_pos+0x186>
 8004382:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004386:	9a03      	ldr	r2, [sp, #12]
 8004388:	fb02 f303 	mul.w	r3, r2, r3
 800438c:	4a49      	ldr	r2, [pc, #292]	; (80044b4 <lv_obj_refr_pos+0x2b4>)
 800438e:	fb82 1203 	smull	r1, r2, r2, r3
 8004392:	ea4f 7ae3 	mov.w	sl, r3, asr #31
 8004396:	ebca 1a62 	rsb	sl, sl, r2, asr #5
 800439a:	fa0f fa8a 	sxth.w	sl, sl
 800439e:	e781      	b.n	80042a4 <lv_obj_refr_pos+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80043a0:	2216      	movs	r2, #22
 80043a2:	2100      	movs	r1, #0
 80043a4:	4638      	mov	r0, r7
 80043a6:	f001 ff9f 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80043aa:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80043ac:	2801      	cmp	r0, #1
 80043ae:	d005      	beq.n	80043bc <lv_obj_refr_pos+0x1bc>
        lv_obj_move_to(obj, x, y);
 80043b0:	4632      	mov	r2, r6
 80043b2:	4629      	mov	r1, r5
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7ff fe83 	bl	80040c0 <lv_obj_move_to>
 80043ba:	e728      	b.n	800420e <lv_obj_refr_pos+0xe>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80043bc:	2003      	movs	r0, #3
 80043be:	e783      	b.n	80042c8 <lv_obj_refr_pos+0xc8>
                x += pw / 2 - w / 2;
 80043c0:	9b00      	ldr	r3, [sp, #0]
 80043c2:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80043c6:	9b02      	ldr	r3, [sp, #8]
 80043c8:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 80043cc:	106d      	asrs	r5, r5, #1
 80043ce:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 80043d2:	b2ad      	uxth	r5, r5
 80043d4:	4445      	add	r5, r8
 80043d6:	b22d      	sxth	r5, r5
        lv_obj_move_to(obj, x, y);
 80043d8:	4632      	mov	r2, r6
 80043da:	4629      	mov	r1, r5
 80043dc:	4620      	mov	r0, r4
 80043de:	f7ff fe6f 	bl	80040c0 <lv_obj_move_to>
 80043e2:	e714      	b.n	800420e <lv_obj_refr_pos+0xe>
                x += pw - w;
 80043e4:	9b00      	ldr	r3, [sp, #0]
 80043e6:	9a02      	ldr	r2, [sp, #8]
 80043e8:	1a9d      	subs	r5, r3, r2
 80043ea:	b2ad      	uxth	r5, r5
 80043ec:	4445      	add	r5, r8
 80043ee:	b22d      	sxth	r5, r5
                break;
 80043f0:	e7f2      	b.n	80043d8 <lv_obj_refr_pos+0x1d8>
                y += ph / 2 - h / 2;
 80043f2:	9b01      	ldr	r3, [sp, #4]
 80043f4:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 80043fe:	1076      	asrs	r6, r6, #1
 8004400:	ebc6 0660 	rsb	r6, r6, r0, asr #1
 8004404:	b2b6      	uxth	r6, r6
 8004406:	444e      	add	r6, r9
 8004408:	b236      	sxth	r6, r6
                break;
 800440a:	e7e5      	b.n	80043d8 <lv_obj_refr_pos+0x1d8>
                y += ph - h;
 800440c:	9b01      	ldr	r3, [sp, #4]
 800440e:	9a03      	ldr	r2, [sp, #12]
 8004410:	1a9e      	subs	r6, r3, r2
 8004412:	b2b6      	uxth	r6, r6
 8004414:	444e      	add	r6, r9
 8004416:	b236      	sxth	r6, r6
                break;
 8004418:	e7de      	b.n	80043d8 <lv_obj_refr_pos+0x1d8>
                x += pw / 2 - w / 2;
 800441a:	9b00      	ldr	r3, [sp, #0]
 800441c:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8004420:	9b02      	ldr	r3, [sp, #8]
 8004422:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 8004426:	106d      	asrs	r5, r5, #1
 8004428:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 800442c:	b2ad      	uxth	r5, r5
 800442e:	4445      	add	r5, r8
 8004430:	b22d      	sxth	r5, r5
                y += ph - h;
 8004432:	9b01      	ldr	r3, [sp, #4]
 8004434:	9a03      	ldr	r2, [sp, #12]
 8004436:	1a9e      	subs	r6, r3, r2
 8004438:	b2b6      	uxth	r6, r6
 800443a:	444e      	add	r6, r9
 800443c:	b236      	sxth	r6, r6
                break;
 800443e:	e7cb      	b.n	80043d8 <lv_obj_refr_pos+0x1d8>
                x += pw - w;
 8004440:	9b00      	ldr	r3, [sp, #0]
 8004442:	9a02      	ldr	r2, [sp, #8]
 8004444:	1a9d      	subs	r5, r3, r2
 8004446:	b2ad      	uxth	r5, r5
 8004448:	4445      	add	r5, r8
 800444a:	b22d      	sxth	r5, r5
                y += ph - h;
 800444c:	9b01      	ldr	r3, [sp, #4]
 800444e:	9a03      	ldr	r2, [sp, #12]
 8004450:	1a9e      	subs	r6, r3, r2
 8004452:	b2b6      	uxth	r6, r6
 8004454:	444e      	add	r6, r9
 8004456:	b236      	sxth	r6, r6
                break;
 8004458:	e7be      	b.n	80043d8 <lv_obj_refr_pos+0x1d8>
                x += pw - w;
 800445a:	9b00      	ldr	r3, [sp, #0]
 800445c:	9a02      	ldr	r2, [sp, #8]
 800445e:	1a9d      	subs	r5, r3, r2
 8004460:	b2ad      	uxth	r5, r5
 8004462:	4445      	add	r5, r8
 8004464:	b22d      	sxth	r5, r5
                y += ph / 2 - h / 2;
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 8004472:	1076      	asrs	r6, r6, #1
 8004474:	ebc6 0660 	rsb	r6, r6, r0, asr #1
 8004478:	b2b6      	uxth	r6, r6
 800447a:	444e      	add	r6, r9
 800447c:	b236      	sxth	r6, r6
                break;
 800447e:	e7ab      	b.n	80043d8 <lv_obj_refr_pos+0x1d8>
                x += pw / 2 - w / 2;
 8004480:	9b00      	ldr	r3, [sp, #0]
 8004482:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8004486:	9b02      	ldr	r3, [sp, #8]
 8004488:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 800448c:	106d      	asrs	r5, r5, #1
 800448e:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 8004492:	b2ad      	uxth	r5, r5
 8004494:	4445      	add	r5, r8
 8004496:	b22d      	sxth	r5, r5
                y += ph / 2 - h / 2;
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 80044a4:	1076      	asrs	r6, r6, #1
 80044a6:	ebc6 0660 	rsb	r6, r6, r0, asr #1
 80044aa:	b2b6      	uxth	r6, r6
 80044ac:	444e      	add	r6, r9
 80044ae:	b236      	sxth	r6, r6
                break;
 80044b0:	e792      	b.n	80043d8 <lv_obj_refr_pos+0x1d8>
 80044b2:	bf00      	nop
 80044b4:	51eb851f 	.word	0x51eb851f

080044b8 <lv_clamp_width>:
{
 80044b8:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80044ba:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 80044be:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 80044c2:	d00c      	beq.n	80044de <lv_clamp_width+0x26>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80044c4:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 80044c8:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 80044cc:	d01c      	beq.n	8004508 <lv_clamp_width+0x50>
    return LV_CLAMP(min_width, width, max_width);
 80044ce:	4290      	cmp	r0, r2
 80044d0:	bfa8      	it	ge
 80044d2:	4610      	movge	r0, r2
}
 80044d4:	4288      	cmp	r0, r1
 80044d6:	bfb8      	it	lt
 80044d8:	4608      	movlt	r0, r1
 80044da:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80044de:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 80044e2:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 80044e6:	dced      	bgt.n	80044c4 <lv_clamp_width+0xc>
 80044e8:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 80044ec:	dd01      	ble.n	80044f2 <lv_clamp_width+0x3a>
 80044ee:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 80044f2:	fb0c fc03 	mul.w	ip, ip, r3
 80044f6:	490e      	ldr	r1, [pc, #56]	; (8004530 <lv_clamp_width+0x78>)
 80044f8:	fb81 1e0c 	smull	r1, lr, r1, ip
 80044fc:	ea4f 71ec 	mov.w	r1, ip, asr #31
 8004500:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 8004504:	b209      	sxth	r1, r1
 8004506:	e7dd      	b.n	80044c4 <lv_clamp_width+0xc>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8004508:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 800450c:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8004510:	dcdd      	bgt.n	80044ce <lv_clamp_width+0x16>
 8004512:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8004516:	dd01      	ble.n	800451c <lv_clamp_width+0x64>
 8004518:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 800451c:	fb0c f303 	mul.w	r3, ip, r3
 8004520:	4a03      	ldr	r2, [pc, #12]	; (8004530 <lv_clamp_width+0x78>)
 8004522:	fb82 c203 	smull	ip, r2, r2, r3
 8004526:	17db      	asrs	r3, r3, #31
 8004528:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800452c:	b21a      	sxth	r2, r3
 800452e:	e7ce      	b.n	80044ce <lv_clamp_width+0x16>
 8004530:	51eb851f 	.word	0x51eb851f

08004534 <lv_clamp_height>:
{
 8004534:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8004536:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 800453a:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 800453e:	d00c      	beq.n	800455a <lv_clamp_height+0x26>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8004540:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 8004544:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 8004548:	d01c      	beq.n	8004584 <lv_clamp_height+0x50>
    return LV_CLAMP(min_height, height, max_height);
 800454a:	4290      	cmp	r0, r2
 800454c:	bfa8      	it	ge
 800454e:	4610      	movge	r0, r2
}
 8004550:	4288      	cmp	r0, r1
 8004552:	bfb8      	it	lt
 8004554:	4608      	movlt	r0, r1
 8004556:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 800455a:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 800455e:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8004562:	dced      	bgt.n	8004540 <lv_clamp_height+0xc>
 8004564:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8004568:	dd01      	ble.n	800456e <lv_clamp_height+0x3a>
 800456a:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 800456e:	fb0c fc03 	mul.w	ip, ip, r3
 8004572:	490e      	ldr	r1, [pc, #56]	; (80045ac <lv_clamp_height+0x78>)
 8004574:	fb81 1e0c 	smull	r1, lr, r1, ip
 8004578:	ea4f 71ec 	mov.w	r1, ip, asr #31
 800457c:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 8004580:	b209      	sxth	r1, r1
 8004582:	e7dd      	b.n	8004540 <lv_clamp_height+0xc>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8004584:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 8004588:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 800458c:	dcdd      	bgt.n	800454a <lv_clamp_height+0x16>
 800458e:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8004592:	dd01      	ble.n	8004598 <lv_clamp_height+0x64>
 8004594:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 8004598:	fb0c f303 	mul.w	r3, ip, r3
 800459c:	4a03      	ldr	r2, [pc, #12]	; (80045ac <lv_clamp_height+0x78>)
 800459e:	fb82 c203 	smull	ip, r2, r2, r3
 80045a2:	17db      	asrs	r3, r3, #31
 80045a4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80045a8:	b21a      	sxth	r2, r3
 80045aa:	e7ce      	b.n	800454a <lv_clamp_height+0x16>
 80045ac:	51eb851f 	.word	0x51eb851f

080045b0 <lv_obj_refr_size>:
    if(obj->w_layout && obj->h_layout) return false;
 80045b0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b0c      	cmp	r3, #12
 80045ba:	f000 8198 	beq.w	80048ee <lv_obj_refr_size+0x33e>
{
 80045be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c2:	b087      	sub	sp, #28
 80045c4:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80045c6:	f002 fab6 	bl	8006b36 <lv_obj_get_parent>
    if(parent == NULL) return false;
 80045ca:	4605      	mov	r5, r0
 80045cc:	2800      	cmp	r0, #0
 80045ce:	f000 8190 	beq.w	80048f2 <lv_obj_refr_size+0x342>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 fab2 	bl	8004b3c <lv_obj_get_scroll_left>
 80045d8:	9000      	str	r0, [sp, #0]
    if(obj->w_layout) {
 80045da:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80045de:	f013 0f08 	tst.w	r3, #8
 80045e2:	d078      	beq.n	80046d6 <lv_obj_refr_size+0x126>
        w = lv_obj_get_width(obj);
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff f961 	bl	80038ac <lv_obj_get_width>
 80045ea:	4606      	mov	r6, r0
    bool w_is_content = false;
 80045ec:	f04f 0900 	mov.w	r9, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 fa41 	bl	8004a78 <lv_obj_get_scroll_top>
 80045f6:	4607      	mov	r7, r0
    if(obj->h_layout) {
 80045f8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80045fc:	f013 0f04 	tst.w	r3, #4
 8004600:	f000 80e7 	beq.w	80047d2 <lv_obj_refr_size+0x222>
        h = lv_obj_get_height(obj);
 8004604:	4620      	mov	r0, r4
 8004606:	f7ff f959 	bl	80038bc <lv_obj_get_height>
 800460a:	4680      	mov	r8, r0
    bool h_is_content = false;
 800460c:	f04f 0a00 	mov.w	sl, #0
    if(w_is_content || h_is_content) {
 8004610:	f1b9 0f00 	cmp.w	r9, #0
 8004614:	d102      	bne.n	800461c <lv_obj_refr_size+0x6c>
 8004616:	f1ba 0f00 	cmp.w	sl, #0
 800461a:	d005      	beq.n	8004628 <lv_obj_refr_size+0x78>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 800461c:	2300      	movs	r3, #0
 800461e:	463a      	mov	r2, r7
 8004620:	9900      	ldr	r1, [sp, #0]
 8004622:	4620      	mov	r0, r4
 8004624:	f000 fcdc 	bl	8004fe0 <lv_obj_scroll_to>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8004628:	4620      	mov	r0, r4
 800462a:	f7ff f93f 	bl	80038ac <lv_obj_get_width>
 800462e:	42b0      	cmp	r0, r6
 8004630:	d105      	bne.n	800463e <lv_obj_refr_size+0x8e>
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff f942 	bl	80038bc <lv_obj_get_height>
 8004638:	4540      	cmp	r0, r8
 800463a:	f000 815c 	beq.w	80048f6 <lv_obj_refr_size+0x346>
    lv_obj_invalidate(obj);
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff fd15 	bl	800406e <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 8004644:	a904      	add	r1, sp, #16
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff f923 	bl	8003892 <lv_obj_get_coords>
    lv_obj_get_content_coords(parent, &parent_fit_area);
 800464c:	a902      	add	r1, sp, #8
 800464e:	4628      	mov	r0, r5
 8004650:	f7ff f97c 	bl	800394c <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8004654:	2200      	movs	r2, #0
 8004656:	a902      	add	r1, sp, #8
 8004658:	a804      	add	r0, sp, #16
 800465a:	f006 ffaf 	bl	800b5bc <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 800465e:	4607      	mov	r7, r0
 8004660:	2800      	cmp	r0, #0
 8004662:	f000 813a 	beq.w	80048da <lv_obj_refr_size+0x32a>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8004666:	8ae3      	ldrh	r3, [r4, #22]
 8004668:	4443      	add	r3, r8
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	8363      	strh	r3, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8004670:	2216      	movs	r2, #22
 8004672:	2100      	movs	r1, #0
 8004674:	4620      	mov	r0, r4
 8004676:	f001 fe37 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800467a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800467c:	2801      	cmp	r0, #1
 800467e:	f000 8130 	beq.w	80048e2 <lv_obj_refr_size+0x332>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8004682:	8aa0      	ldrh	r0, [r4, #20]
 8004684:	4406      	add	r6, r0
 8004686:	b2b6      	uxth	r6, r6
 8004688:	3e01      	subs	r6, #1
 800468a:	8326      	strh	r6, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 800468c:	aa04      	add	r2, sp, #16
 800468e:	2129      	movs	r1, #41	; 0x29
 8004690:	4620      	mov	r0, r4
 8004692:	f7fd fb3b 	bl	8001d0c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8004696:	4622      	mov	r2, r4
 8004698:	2122      	movs	r1, #34	; 0x22
 800469a:	4628      	mov	r0, r5
 800469c:	f7fd fb36 	bl	8001d0c <lv_event_send>
    lv_obj_invalidate(obj);
 80046a0:	4620      	mov	r0, r4
 80046a2:	f7ff fce4 	bl	800406e <lv_obj_invalidate>
    obj->readjust_scroll_after_layout = 1;
 80046a6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80046aa:	f043 0302 	orr.w	r3, r3, #2
 80046ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80046b2:	2200      	movs	r2, #0
 80046b4:	a902      	add	r1, sp, #8
 80046b6:	f104 0014 	add.w	r0, r4, #20
 80046ba:	f006 ff7f 	bl	800b5bc <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80046be:	b907      	cbnz	r7, 80046c2 <lv_obj_refr_size+0x112>
 80046c0:	b110      	cbz	r0, 80046c8 <lv_obj_refr_size+0x118>
 80046c2:	4628      	mov	r0, r5
 80046c4:	f001 fa76 	bl	8005bb4 <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7fe ff6d 	bl	80035a8 <lv_obj_refresh_ext_draw_size>
    return true;
 80046ce:	2001      	movs	r0, #1
}
 80046d0:	b007      	add	sp, #28
 80046d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80046d6:	2201      	movs	r2, #1
 80046d8:	2100      	movs	r1, #0
 80046da:	4620      	mov	r0, r4
 80046dc:	f001 fe04 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80046e0:	b206      	sxth	r6, r0
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 80046e2:	f242 79d1 	movw	r9, #10193	; 0x27d1
 80046e6:	454e      	cmp	r6, r9
 80046e8:	bf14      	ite	ne
 80046ea:	f04f 0900 	movne.w	r9, #0
 80046ee:	f04f 0901 	moveq.w	r9, #1
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 80046f2:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 80046f6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80046fa:	d036      	beq.n	800476a <lv_obj_refr_size+0x1ba>
 80046fc:	f04f 0800 	mov.w	r8, #0
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8004700:	4628      	mov	r0, r5
 8004702:	f7ff f8e3 	bl	80038cc <lv_obj_get_content_width>
 8004706:	4607      	mov	r7, r0
        if(w_is_content) {
 8004708:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800470c:	429e      	cmp	r6, r3
 800470e:	d037      	beq.n	8004780 <lv_obj_refr_size+0x1d0>
        else if(w_is_pct) {
 8004710:	f1b8 0f00 	cmp.w	r8, #0
 8004714:	d015      	beq.n	8004742 <lv_obj_refr_size+0x192>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8004716:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800471a:	f013 0f08 	tst.w	r3, #8
 800471e:	d034      	beq.n	800478a <lv_obj_refr_size+0x1da>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8004720:	f426 42c0 	bic.w	r2, r6, #24576	; 0x6000
 8004724:	b212      	sxth	r2, r2
 8004726:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800472a:	dd01      	ble.n	8004730 <lv_obj_refr_size+0x180>
 800472c:	f5c2 727a 	rsb	r2, r2, #1000	; 0x3e8
 8004730:	fb07 f202 	mul.w	r2, r7, r2
 8004734:	4b71      	ldr	r3, [pc, #452]	; (80048fc <lv_obj_refr_size+0x34c>)
 8004736:	fb83 1302 	smull	r1, r3, r3, r2
 800473a:	17d6      	asrs	r6, r2, #31
 800473c:	ebc6 1663 	rsb	r6, r6, r3, asr #5
 8004740:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8004742:	2202      	movs	r2, #2
 8004744:	2100      	movs	r1, #0
 8004746:	4620      	mov	r0, r4
 8004748:	f001 fdce 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800474c:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8004750:	2203      	movs	r2, #3
 8004752:	2100      	movs	r1, #0
 8004754:	4620      	mov	r0, r4
 8004756:	f001 fdc7 	bl	80062e8 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 800475a:	463b      	mov	r3, r7
 800475c:	b202      	sxth	r2, r0
 800475e:	4641      	mov	r1, r8
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff fea9 	bl	80044b8 <lv_clamp_width>
 8004766:	4606      	mov	r6, r0
 8004768:	e742      	b.n	80045f0 <lv_obj_refr_size+0x40>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 800476a:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 800476e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004772:	dd02      	ble.n	800477a <lv_obj_refr_size+0x1ca>
 8004774:	f04f 0800 	mov.w	r8, #0
 8004778:	e7c2      	b.n	8004700 <lv_obj_refr_size+0x150>
 800477a:	f04f 0801 	mov.w	r8, #1
 800477e:	e7bf      	b.n	8004700 <lv_obj_refr_size+0x150>
            w = calc_content_width(obj);
 8004780:	4620      	mov	r0, r4
 8004782:	f7ff f92d 	bl	80039e0 <calc_content_width>
 8004786:	4606      	mov	r6, r0
 8004788:	e7db      	b.n	8004742 <lv_obj_refr_size+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800478a:	2201      	movs	r2, #1
 800478c:	2100      	movs	r1, #0
 800478e:	4628      	mov	r0, r5
 8004790:	f001 fdaa 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004794:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8004796:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800479a:	4298      	cmp	r0, r3
 800479c:	d1c0      	bne.n	8004720 <lv_obj_refr_size+0x170>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800479e:	2232      	movs	r2, #50	; 0x32
 80047a0:	2100      	movs	r1, #0
 80047a2:	4620      	mov	r0, r4
 80047a4:	f001 fda0 	bl	80062e8 <lv_obj_get_style_prop>
 80047a8:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
 80047aa:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80047ae:	2212      	movs	r2, #18
 80047b0:	2100      	movs	r1, #0
 80047b2:	4620      	mov	r0, r4
 80047b4:	f001 fd98 	bl	80062e8 <lv_obj_get_style_prop>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 80047b8:	b286      	uxth	r6, r0
 80047ba:	4456      	add	r6, sl
 80047bc:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80047be:	2213      	movs	r2, #19
 80047c0:	2100      	movs	r1, #0
 80047c2:	4620      	mov	r0, r4
 80047c4:	f001 fd90 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80047c8:	b203      	sxth	r3, r0
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 80047ca:	4498      	add	r8, r3
 80047cc:	4446      	add	r6, r8
 80047ce:	b236      	sxth	r6, r6
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80047d0:	e7b7      	b.n	8004742 <lv_obj_refr_size+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80047d2:	2204      	movs	r2, #4
 80047d4:	2100      	movs	r1, #0
 80047d6:	4620      	mov	r0, r4
 80047d8:	f001 fd86 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80047dc:	fa0f f880 	sxth.w	r8, r0
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 80047e0:	f242 7ad1 	movw	sl, #10193	; 0x27d1
 80047e4:	45d0      	cmp	r8, sl
 80047e6:	bf14      	ite	ne
 80047e8:	f04f 0a00 	movne.w	sl, #0
 80047ec:	f04f 0a01 	moveq.w	sl, #1
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 80047f0:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 80047f4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80047f8:	d039      	beq.n	800486e <lv_obj_refr_size+0x2be>
 80047fa:	f04f 0b00 	mov.w	fp, #0
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 80047fe:	4628      	mov	r0, r5
 8004800:	f7ff f884 	bl	800390c <lv_obj_get_content_height>
 8004804:	9001      	str	r0, [sp, #4]
        if(h_is_content) {
 8004806:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800480a:	4598      	cmp	r8, r3
 800480c:	d03a      	beq.n	8004884 <lv_obj_refr_size+0x2d4>
        else if(h_is_pct) {
 800480e:	f1bb 0f00 	cmp.w	fp, #0
 8004812:	d018      	beq.n	8004846 <lv_obj_refr_size+0x296>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8004814:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8004818:	f013 0f04 	tst.w	r3, #4
 800481c:	d037      	beq.n	800488e <lv_obj_refr_size+0x2de>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 800481e:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 8004822:	b21b      	sxth	r3, r3
 8004824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004828:	dd01      	ble.n	800482e <lv_obj_refr_size+0x27e>
 800482a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800482e:	9a01      	ldr	r2, [sp, #4]
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	4a31      	ldr	r2, [pc, #196]	; (80048fc <lv_obj_refr_size+0x34c>)
 8004836:	fb82 1203 	smull	r1, r2, r2, r3
 800483a:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800483e:	ebc8 1862 	rsb	r8, r8, r2, asr #5
 8004842:	fa0f f888 	sxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8004846:	2205      	movs	r2, #5
 8004848:	2100      	movs	r1, #0
 800484a:	4620      	mov	r0, r4
 800484c:	f001 fd4c 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004850:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8004854:	2206      	movs	r2, #6
 8004856:	2100      	movs	r1, #0
 8004858:	4620      	mov	r0, r4
 800485a:	f001 fd45 	bl	80062e8 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 800485e:	9b01      	ldr	r3, [sp, #4]
 8004860:	b202      	sxth	r2, r0
 8004862:	4659      	mov	r1, fp
 8004864:	4640      	mov	r0, r8
 8004866:	f7ff fe65 	bl	8004534 <lv_clamp_height>
 800486a:	4680      	mov	r8, r0
 800486c:	e6d0      	b.n	8004610 <lv_obj_refr_size+0x60>
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 800486e:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 8004872:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004876:	dd02      	ble.n	800487e <lv_obj_refr_size+0x2ce>
 8004878:	f04f 0b00 	mov.w	fp, #0
 800487c:	e7bf      	b.n	80047fe <lv_obj_refr_size+0x24e>
 800487e:	f04f 0b01 	mov.w	fp, #1
 8004882:	e7bc      	b.n	80047fe <lv_obj_refr_size+0x24e>
            h = calc_content_height(obj);
 8004884:	4620      	mov	r0, r4
 8004886:	f7ff f9b7 	bl	8003bf8 <calc_content_height>
 800488a:	4680      	mov	r8, r0
 800488c:	e7db      	b.n	8004846 <lv_obj_refr_size+0x296>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800488e:	2204      	movs	r2, #4
 8004890:	2100      	movs	r1, #0
 8004892:	4628      	mov	r0, r5
 8004894:	f001 fd28 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004898:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800489a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800489e:	4298      	cmp	r0, r3
 80048a0:	d1bd      	bne.n	800481e <lv_obj_refr_size+0x26e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80048a2:	2232      	movs	r2, #50	; 0x32
 80048a4:	2100      	movs	r1, #0
 80048a6:	4620      	mov	r0, r4
 80048a8:	f001 fd1e 	bl	80062e8 <lv_obj_get_style_prop>
 80048ac:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 80048ae:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80048b2:	2210      	movs	r2, #16
 80048b4:	2100      	movs	r1, #0
 80048b6:	4620      	mov	r0, r4
 80048b8:	f001 fd16 	bl	80062e8 <lv_obj_get_style_prop>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80048bc:	b283      	uxth	r3, r0
 80048be:	4498      	add	r8, r3
 80048c0:	fa1f f888 	uxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80048c4:	2211      	movs	r2, #17
 80048c6:	2100      	movs	r1, #0
 80048c8:	4620      	mov	r0, r4
 80048ca:	f001 fd0d 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80048ce:	b203      	sxth	r3, r0
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 80048d0:	449b      	add	fp, r3
 80048d2:	44d8      	add	r8, fp
 80048d4:	fa0f f888 	sxth.w	r8, r8
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80048d8:	e7b5      	b.n	8004846 <lv_obj_refr_size+0x296>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 80048da:	4628      	mov	r0, r5
 80048dc:	f001 f96a 	bl	8005bb4 <lv_obj_scrollbar_invalidate>
 80048e0:	e6c1      	b.n	8004666 <lv_obj_refr_size+0xb6>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80048e2:	8b20      	ldrh	r0, [r4, #24]
 80048e4:	1b86      	subs	r6, r0, r6
 80048e6:	b2b6      	uxth	r6, r6
 80048e8:	3601      	adds	r6, #1
 80048ea:	82a6      	strh	r6, [r4, #20]
 80048ec:	e6ce      	b.n	800468c <lv_obj_refr_size+0xdc>
    if(obj->w_layout && obj->h_layout) return false;
 80048ee:	2000      	movs	r0, #0
}
 80048f0:	4770      	bx	lr
    if(parent == NULL) return false;
 80048f2:	2000      	movs	r0, #0
 80048f4:	e6ec      	b.n	80046d0 <lv_obj_refr_size+0x120>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 80048f6:	2000      	movs	r0, #0
 80048f8:	e6ea      	b.n	80046d0 <lv_obj_refr_size+0x120>
 80048fa:	bf00      	nop
 80048fc:	51eb851f 	.word	0x51eb851f

08004900 <layout_update_core>:
{
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	4605      	mov	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004904:	f002 f957 	bl	8006bb6 <lv_obj_get_child_cnt>
 8004908:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 800490a:	2400      	movs	r4, #0
 800490c:	e006      	b.n	800491c <layout_update_core+0x1c>
        lv_obj_t * child = obj->spec_attr->children[i];
 800490e:	68ab      	ldr	r3, [r5, #8]
 8004910:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 8004912:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004916:	f7ff fff3 	bl	8004900 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 800491a:	3401      	adds	r4, #1
 800491c:	42b4      	cmp	r4, r6
 800491e:	d3f6      	bcc.n	800490e <layout_update_core+0xe>
    if(obj->layout_inv) {
 8004920:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8004924:	f013 0f01 	tst.w	r3, #1
 8004928:	d105      	bne.n	8004936 <layout_update_core+0x36>
    if(obj->readjust_scroll_after_layout) {
 800492a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800492e:	f013 0f02 	tst.w	r3, #2
 8004932:	d127      	bne.n	8004984 <layout_update_core+0x84>
}
 8004934:	bd70      	pop	{r4, r5, r6, pc}
        obj->layout_inv = 0;
 8004936:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800493a:	f36f 0300 	bfc	r3, #0, #1
 800493e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        lv_obj_refr_size(obj);
 8004942:	4628      	mov	r0, r5
 8004944:	f7ff fe34 	bl	80045b0 <lv_obj_refr_size>
        lv_obj_refr_pos(obj);
 8004948:	4628      	mov	r0, r5
 800494a:	f7ff fc59 	bl	8004200 <lv_obj_refr_pos>
        if(child_cnt > 0) {
 800494e:	2e00      	cmp	r6, #0
 8004950:	d0eb      	beq.n	800492a <layout_update_core+0x2a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004952:	220a      	movs	r2, #10
 8004954:	2100      	movs	r1, #0
 8004956:	4628      	mov	r0, r5
 8004958:	f001 fcc6 	bl	80062e8 <lv_obj_get_style_prop>
            uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 800495c:	b280      	uxth	r0, r0
            if(layout_id > 0 && layout_id <= layout_cnt) {
 800495e:	2800      	cmp	r0, #0
 8004960:	d0e3      	beq.n	800492a <layout_update_core+0x2a>
 8004962:	4b0e      	ldr	r3, [pc, #56]	; (800499c <layout_update_core+0x9c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4283      	cmp	r3, r0
 8004968:	d3df      	bcc.n	800492a <layout_update_core+0x2a>
                void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800496a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800496e:	3801      	subs	r0, #1
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <layout_update_core+0xa0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
                LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8004978:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800497c:	6851      	ldr	r1, [r2, #4]
 800497e:	4628      	mov	r0, r5
 8004980:	4798      	blx	r3
 8004982:	e7d2      	b.n	800492a <layout_update_core+0x2a>
        obj->readjust_scroll_after_layout = 0;
 8004984:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8004988:	f36f 0341 	bfc	r3, #1, #1
 800498c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8004990:	2100      	movs	r1, #0
 8004992:	4628      	mov	r0, r5
 8004994:	f001 f931 	bl	8005bfa <lv_obj_readjust_scroll>
}
 8004998:	e7cc      	b.n	8004934 <layout_update_core+0x34>
 800499a:	bf00      	nop
 800499c:	20000b50 	.word	0x20000b50
 80049a0:	20000c08 	.word	0x20000c08

080049a4 <lv_obj_update_layout>:
    if(mutex) {
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <lv_obj_update_layout+0x3c>)
 80049a6:	791b      	ldrb	r3, [r3, #4]
 80049a8:	b103      	cbz	r3, 80049ac <lv_obj_update_layout+0x8>
 80049aa:	4770      	bx	lr
{
 80049ac:	b510      	push	{r4, lr}
    mutex = true;
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <lv_obj_update_layout+0x3c>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	711a      	strb	r2, [r3, #4]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80049b4:	f002 f8c3 	bl	8006b3e <lv_obj_get_screen>
 80049b8:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 80049ba:	e008      	b.n	80049ce <lv_obj_update_layout+0x2a>
        scr->scr_layout_inv = 0;
 80049bc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80049c0:	f36f 0382 	bfc	r3, #2, #1
 80049c4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7ff ff99 	bl	8004900 <layout_update_core>
    while(scr->scr_layout_inv) {
 80049ce:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80049d2:	f013 0f04 	tst.w	r3, #4
 80049d6:	d1f1      	bne.n	80049bc <lv_obj_update_layout+0x18>
    mutex = false;
 80049d8:	4b01      	ldr	r3, [pc, #4]	; (80049e0 <lv_obj_update_layout+0x3c>)
 80049da:	2200      	movs	r2, #0
 80049dc:	711a      	strb	r2, [r3, #4]
}
 80049de:	bd10      	pop	{r4, pc}
 80049e0:	20000b50 	.word	0x20000b50

080049e4 <scroll_anim_ready_cb>:
{
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 80049e4:	b508      	push	{r3, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 80049e6:	2200      	movs	r2, #0
 80049e8:	210a      	movs	r1, #10
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	f7fd f98e 	bl	8001d0c <lv_event_send>
}
 80049f0:	bd08      	pop	{r3, pc}

080049f2 <lv_obj_set_scrollbar_mode>:
{
 80049f2:	b538      	push	{r3, r4, r5, lr}
 80049f4:	4604      	mov	r4, r0
 80049f6:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 80049f8:	f7fe fa74 	bl	8002ee4 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 80049fc:	68a2      	ldr	r2, [r4, #8]
 80049fe:	7e13      	ldrb	r3, [r2, #24]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	d006      	beq.n	8004a16 <lv_obj_set_scrollbar_mode+0x24>
    obj->spec_attr->scrollbar_mode = mode;
 8004a08:	7e13      	ldrb	r3, [r2, #24]
 8004a0a:	f365 0301 	bfi	r3, r5, #0, #2
 8004a0e:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff fb2c 	bl	800406e <lv_obj_invalidate>
}
 8004a16:	bd38      	pop	{r3, r4, r5, pc}

08004a18 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8004a18:	6883      	ldr	r3, [r0, #8]
 8004a1a:	b11b      	cbz	r3, 8004a24 <lv_obj_get_scrollbar_mode+0xc>
 8004a1c:	7e18      	ldrb	r0, [r3, #24]
 8004a1e:	f000 0003 	and.w	r0, r0, #3
 8004a22:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 8004a24:	2003      	movs	r0, #3
}
 8004a26:	4770      	bx	lr

08004a28 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8004a28:	6883      	ldr	r3, [r0, #8]
 8004a2a:	b11b      	cbz	r3, 8004a34 <lv_obj_get_scroll_dir+0xc>
 8004a2c:	7e58      	ldrb	r0, [r3, #25]
 8004a2e:	f000 000f 	and.w	r0, r0, #15
 8004a32:	4770      	bx	lr
    else return LV_DIR_ALL;
 8004a34:	200f      	movs	r0, #15
}
 8004a36:	4770      	bx	lr

08004a38 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8004a38:	6883      	ldr	r3, [r0, #8]
 8004a3a:	b11b      	cbz	r3, 8004a44 <lv_obj_get_scroll_snap_x+0xc>
 8004a3c:	7e18      	ldrb	r0, [r3, #24]
 8004a3e:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8004a42:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 8004a44:	2000      	movs	r0, #0
}
 8004a46:	4770      	bx	lr

08004a48 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8004a48:	6883      	ldr	r3, [r0, #8]
 8004a4a:	b11b      	cbz	r3, 8004a54 <lv_obj_get_scroll_snap_y+0xc>
 8004a4c:	7e18      	ldrb	r0, [r3, #24]
 8004a4e:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8004a52:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 8004a54:	2000      	movs	r0, #0
}
 8004a56:	4770      	bx	lr

08004a58 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8004a58:	6883      	ldr	r3, [r0, #8]
 8004a5a:	b11b      	cbz	r3, 8004a64 <lv_obj_get_scroll_x+0xc>
    return -obj->spec_attr->scroll.x;
 8004a5c:	8a18      	ldrh	r0, [r3, #16]
 8004a5e:	4240      	negs	r0, r0
 8004a60:	b200      	sxth	r0, r0
 8004a62:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8004a64:	2000      	movs	r0, #0
}
 8004a66:	4770      	bx	lr

08004a68 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 8004a68:	6883      	ldr	r3, [r0, #8]
 8004a6a:	b11b      	cbz	r3, 8004a74 <lv_obj_get_scroll_y+0xc>
    return -obj->spec_attr->scroll.y;
 8004a6c:	8a58      	ldrh	r0, [r3, #18]
 8004a6e:	4240      	negs	r0, r0
 8004a70:	b200      	sxth	r0, r0
 8004a72:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8004a74:	2000      	movs	r0, #0
}
 8004a76:	4770      	bx	lr

08004a78 <lv_obj_get_scroll_top>:
    if(obj->spec_attr == NULL) return 0;
 8004a78:	6883      	ldr	r3, [r0, #8]
 8004a7a:	b11b      	cbz	r3, 8004a84 <lv_obj_get_scroll_top+0xc>
    return -obj->spec_attr->scroll.y;
 8004a7c:	8a58      	ldrh	r0, [r3, #18]
 8004a7e:	4240      	negs	r0, r0
 8004a80:	b200      	sxth	r0, r0
 8004a82:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8004a84:	2000      	movs	r0, #0
}
 8004a86:	4770      	bx	lr

08004a88 <lv_obj_get_scroll_bottom>:
{
 8004a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a8c:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004a8e:	f002 f892 	bl	8006bb6 <lv_obj_get_child_cnt>
 8004a92:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8004a94:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8004a96:	4f27      	ldr	r7, [pc, #156]	; (8004b34 <lv_obj_get_scroll_bottom+0xac>)
    for(i = 0; i < child_cnt; i++) {
 8004a98:	e005      	b.n	8004aa6 <lv_obj_get_scroll_bottom+0x1e>
        child_res = LV_MAX(child_res, child->coords.y2);
 8004a9a:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8004a9e:	429f      	cmp	r7, r3
 8004aa0:	bfb8      	it	lt
 8004aa2:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8004aa4:	3401      	adds	r4, #1
 8004aa6:	4544      	cmp	r4, r8
 8004aa8:	d20a      	bcs.n	8004ac0 <lv_obj_get_scroll_bottom+0x38>
        lv_obj_t * child = obj->spec_attr->children[i];
 8004aaa:	68b3      	ldr	r3, [r6, #8]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004ab2:	4921      	ldr	r1, [pc, #132]	; (8004b38 <lv_obj_get_scroll_bottom+0xb0>)
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f7fd ffea 	bl	8002a8e <lv_obj_has_flag_any>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d0ed      	beq.n	8004a9a <lv_obj_get_scroll_bottom+0x12>
 8004abe:	e7f1      	b.n	8004aa4 <lv_obj_get_scroll_bottom+0x1c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f001 fc0f 	bl	80062e8 <lv_obj_get_style_prop>
 8004aca:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004acc:	2211      	movs	r2, #17
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f001 fc09 	bl	80062e8 <lv_obj_get_style_prop>
 8004ad6:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004ad8:	2232      	movs	r2, #50	; 0x32
 8004ada:	2100      	movs	r1, #0
 8004adc:	4630      	mov	r0, r6
 8004ade:	f001 fc03 	bl	80062e8 <lv_obj_get_style_prop>
 8004ae2:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <lv_obj_get_scroll_bottom+0xac>)
 8004ae6:	429f      	cmp	r7, r3
 8004ae8:	d005      	beq.n	8004af6 <lv_obj_get_scroll_bottom+0x6e>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8004aea:	8b73      	ldrh	r3, [r6, #26]
 8004aec:	ebaa 0303 	sub.w	r3, sl, r3
 8004af0:	4403      	add	r3, r0
 8004af2:	441f      	add	r7, r3
 8004af4:	b23f      	sxth	r7, r7
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7ff f86c 	bl	8003bd4 <lv_obj_get_self_height>
 8004afc:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8004afe:	006d      	lsls	r5, r5, #1
 8004b00:	b2ad      	uxth	r5, r5
 8004b02:	4630      	mov	r0, r6
 8004b04:	f7fe feda 	bl	80038bc <lv_obj_get_height>
 8004b08:	b284      	uxth	r4, r0
 8004b0a:	eba8 0404 	sub.w	r4, r8, r4
 8004b0e:	b2a4      	uxth	r4, r4
 8004b10:	4454      	add	r4, sl
 8004b12:	b2a4      	uxth	r4, r4
 8004b14:	442c      	add	r4, r5
 8004b16:	b2a4      	uxth	r4, r4
 8004b18:	444c      	add	r4, r9
 8004b1a:	b2a4      	uxth	r4, r4
    self_h -= lv_obj_get_scroll_y(obj);
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7ff ffa3 	bl	8004a68 <lv_obj_get_scroll_y>
 8004b22:	b280      	uxth	r0, r0
 8004b24:	1a20      	subs	r0, r4, r0
 8004b26:	b200      	sxth	r0, r0
}
 8004b28:	42b8      	cmp	r0, r7
 8004b2a:	bfb8      	it	lt
 8004b2c:	4638      	movlt	r0, r7
 8004b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b32:	bf00      	nop
 8004b34:	ffffe001 	.word	0xffffe001
 8004b38:	00040001 	.word	0x00040001

08004b3c <lv_obj_get_scroll_left>:
{
 8004b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8004b42:	2216      	movs	r2, #22
 8004b44:	2100      	movs	r1, #0
 8004b46:	f001 fbcf 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8004b4a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8004b4c:	2801      	cmp	r0, #1
 8004b4e:	d007      	beq.n	8004b60 <lv_obj_get_scroll_left+0x24>
        if(obj->spec_attr == NULL) return 0;
 8004b50:	68a3      	ldr	r3, [r4, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d05c      	beq.n	8004c10 <lv_obj_get_scroll_left+0xd4>
        return -obj->spec_attr->scroll.x;
 8004b56:	8a18      	ldrh	r0, [r3, #16]
 8004b58:	4240      	negs	r0, r0
 8004b5a:	b200      	sxth	r0, r0
}
 8004b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004b60:	2213      	movs	r2, #19
 8004b62:	2100      	movs	r1, #0
 8004b64:	4620      	mov	r0, r4
 8004b66:	f001 fbbf 	bl	80062e8 <lv_obj_get_style_prop>
 8004b6a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004b6c:	2212      	movs	r2, #18
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4620      	mov	r0, r4
 8004b72:	f001 fbb9 	bl	80062e8 <lv_obj_get_style_prop>
 8004b76:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004b78:	2232      	movs	r2, #50	; 0x32
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f001 fbb3 	bl	80062e8 <lv_obj_get_style_prop>
 8004b82:	4607      	mov	r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f002 f816 	bl	8006bb6 <lv_obj_get_child_cnt>
 8004b8a:	4683      	mov	fp, r0
    lv_coord_t x1 = LV_COORD_MAX;
 8004b8c:	f641 78ff 	movw	r8, #8191	; 0x1fff
    for(i = 0; i < child_cnt; i++) {
 8004b90:	2500      	movs	r5, #0
 8004b92:	e005      	b.n	8004ba0 <lv_obj_get_scroll_left+0x64>
        x1 = LV_MIN(x1, child->coords.x1);
 8004b94:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8004b98:	4598      	cmp	r8, r3
 8004b9a:	bfa8      	it	ge
 8004b9c:	4698      	movge	r8, r3
    for(i = 0; i < child_cnt; i++) {
 8004b9e:	3501      	adds	r5, #1
 8004ba0:	455d      	cmp	r5, fp
 8004ba2:	d20a      	bcs.n	8004bba <lv_obj_get_scroll_left+0x7e>
        lv_obj_t * child = obj->spec_attr->children[i];
 8004ba4:	68a3      	ldr	r3, [r4, #8]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004bac:	4919      	ldr	r1, [pc, #100]	; (8004c14 <lv_obj_get_scroll_left+0xd8>)
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7fd ff6d 	bl	8002a8e <lv_obj_has_flag_any>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d0ed      	beq.n	8004b94 <lv_obj_get_scroll_left+0x58>
 8004bb8:	e7f1      	b.n	8004b9e <lv_obj_get_scroll_left+0x62>
    if(x1 != LV_COORD_MAX) {
 8004bba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004bbe:	4598      	cmp	r8, r3
 8004bc0:	d024      	beq.n	8004c0c <lv_obj_get_scroll_left+0xd0>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8004bc2:	8aa0      	ldrh	r0, [r4, #20]
 8004bc4:	4450      	add	r0, sl
 8004bc6:	b280      	uxth	r0, r0
 8004bc8:	4438      	add	r0, r7
 8004bca:	b280      	uxth	r0, r0
 8004bcc:	eba0 0008 	sub.w	r0, r0, r8
 8004bd0:	b205      	sxth	r5, r0
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7fe fef1 	bl	80039ba <lv_obj_get_self_width>
 8004bd8:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8004bda:	007f      	lsls	r7, r7, #1
 8004bdc:	b2bf      	uxth	r7, r7
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7fe fe64 	bl	80038ac <lv_obj_get_width>
 8004be4:	b286      	uxth	r6, r0
 8004be6:	eba9 0606 	sub.w	r6, r9, r6
 8004bea:	b2b6      	uxth	r6, r6
 8004bec:	4456      	add	r6, sl
 8004bee:	b2b6      	uxth	r6, r6
 8004bf0:	443e      	add	r6, r7
 8004bf2:	b2b6      	uxth	r6, r6
 8004bf4:	4446      	add	r6, r8
 8004bf6:	b2b6      	uxth	r6, r6
    self_w += lv_obj_get_scroll_x(obj);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7ff ff2d 	bl	8004a58 <lv_obj_get_scroll_x>
 8004bfe:	b280      	uxth	r0, r0
 8004c00:	4430      	add	r0, r6
 8004c02:	b200      	sxth	r0, r0
    return LV_MAX(child_res, self_w);
 8004c04:	42a8      	cmp	r0, r5
 8004c06:	bfb8      	it	lt
 8004c08:	4628      	movlt	r0, r5
 8004c0a:	e7a7      	b.n	8004b5c <lv_obj_get_scroll_left+0x20>
        child_res = LV_COORD_MIN;
 8004c0c:	4d02      	ldr	r5, [pc, #8]	; (8004c18 <lv_obj_get_scroll_left+0xdc>)
 8004c0e:	e7e0      	b.n	8004bd2 <lv_obj_get_scroll_left+0x96>
        if(obj->spec_attr == NULL) return 0;
 8004c10:	2000      	movs	r0, #0
 8004c12:	e7a3      	b.n	8004b5c <lv_obj_get_scroll_left+0x20>
 8004c14:	00040001 	.word	0x00040001
 8004c18:	ffffe001 	.word	0xffffe001

08004c1c <lv_obj_get_scroll_right>:
{
 8004c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8004c22:	2216      	movs	r2, #22
 8004c24:	2100      	movs	r1, #0
 8004c26:	f001 fb5f 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8004c2a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8004c2c:	2801      	cmp	r0, #1
 8004c2e:	d105      	bne.n	8004c3c <lv_obj_get_scroll_right+0x20>
        if(obj->spec_attr == NULL) return 0;
 8004c30:	68ab      	ldr	r3, [r5, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d055      	beq.n	8004ce2 <lv_obj_get_scroll_right+0xc6>
        return obj->spec_attr->scroll.x;
 8004c36:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
 8004c3a:	e050      	b.n	8004cde <lv_obj_get_scroll_right+0xc2>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f001 ffba 	bl	8006bb6 <lv_obj_get_child_cnt>
 8004c42:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8004c44:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8004c46:	4f28      	ldr	r7, [pc, #160]	; (8004ce8 <lv_obj_get_scroll_right+0xcc>)
    for(i = 0; i < child_cnt; i++) {
 8004c48:	e005      	b.n	8004c56 <lv_obj_get_scroll_right+0x3a>
        child_res = LV_MAX(child_res, child->coords.x2);
 8004c4a:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8004c4e:	429f      	cmp	r7, r3
 8004c50:	bfb8      	it	lt
 8004c52:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8004c54:	3401      	adds	r4, #1
 8004c56:	4544      	cmp	r4, r8
 8004c58:	d20a      	bcs.n	8004c70 <lv_obj_get_scroll_right+0x54>
        lv_obj_t * child = obj->spec_attr->children[i];
 8004c5a:	68ab      	ldr	r3, [r5, #8]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004c62:	4922      	ldr	r1, [pc, #136]	; (8004cec <lv_obj_get_scroll_right+0xd0>)
 8004c64:	4630      	mov	r0, r6
 8004c66:	f7fd ff12 	bl	8002a8e <lv_obj_has_flag_any>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0ed      	beq.n	8004c4a <lv_obj_get_scroll_right+0x2e>
 8004c6e:	e7f1      	b.n	8004c54 <lv_obj_get_scroll_right+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004c70:	2213      	movs	r2, #19
 8004c72:	2100      	movs	r1, #0
 8004c74:	4628      	mov	r0, r5
 8004c76:	f001 fb37 	bl	80062e8 <lv_obj_get_style_prop>
 8004c7a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004c7c:	2212      	movs	r2, #18
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4628      	mov	r0, r5
 8004c82:	f001 fb31 	bl	80062e8 <lv_obj_get_style_prop>
 8004c86:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004c88:	2232      	movs	r2, #50	; 0x32
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f001 fb2b 	bl	80062e8 <lv_obj_get_style_prop>
 8004c92:	4606      	mov	r6, r0
    if(child_res != LV_COORD_MIN) {
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <lv_obj_get_scroll_right+0xcc>)
 8004c96:	429f      	cmp	r7, r3
 8004c98:	d005      	beq.n	8004ca6 <lv_obj_get_scroll_right+0x8a>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8004c9a:	8b28      	ldrh	r0, [r5, #24]
 8004c9c:	eba8 0000 	sub.w	r0, r8, r0
 8004ca0:	4430      	add	r0, r6
 8004ca2:	4438      	add	r0, r7
 8004ca4:	b207      	sxth	r7, r0
    self_w = lv_obj_get_self_width(obj);
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f7fe fe87 	bl	80039ba <lv_obj_get_self_width>
 8004cac:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8004cae:	0076      	lsls	r6, r6, #1
 8004cb0:	b2b6      	uxth	r6, r6
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f7fe fdfa 	bl	80038ac <lv_obj_get_width>
 8004cb8:	b284      	uxth	r4, r0
 8004cba:	eba8 0404 	sub.w	r4, r8, r4
 8004cbe:	b2a4      	uxth	r4, r4
 8004cc0:	4454      	add	r4, sl
 8004cc2:	b2a4      	uxth	r4, r4
 8004cc4:	4434      	add	r4, r6
 8004cc6:	b2a4      	uxth	r4, r4
 8004cc8:	444c      	add	r4, r9
 8004cca:	b2a4      	uxth	r4, r4
    self_w -= lv_obj_get_scroll_x(obj);
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f7ff fec3 	bl	8004a58 <lv_obj_get_scroll_x>
 8004cd2:	b280      	uxth	r0, r0
 8004cd4:	1a20      	subs	r0, r4, r0
 8004cd6:	b200      	sxth	r0, r0
    return LV_MAX(child_res, self_w);
 8004cd8:	42b8      	cmp	r0, r7
 8004cda:	bfb8      	it	lt
 8004cdc:	4638      	movlt	r0, r7
}
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(obj->spec_attr == NULL) return 0;
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e7fb      	b.n	8004cde <lv_obj_get_scroll_right+0xc2>
 8004ce6:	bf00      	nop
 8004ce8:	ffffe001 	.word	0xffffe001
 8004cec:	00040001 	.word	0x00040001

08004cf0 <_lv_obj_scroll_by_raw>:
{
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4615      	mov	r5, r2
    if(x == 0 && y == 0) return LV_RES_OK;
 8004cf6:	460e      	mov	r6, r1
 8004cf8:	b901      	cbnz	r1, 8004cfc <_lv_obj_scroll_by_raw+0xc>
 8004cfa:	b1f2      	cbz	r2, 8004d3a <_lv_obj_scroll_by_raw+0x4a>
    lv_obj_allocate_spec_attr(obj);
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f7fe f8f1 	bl	8002ee4 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 8004d02:	68a2      	ldr	r2, [r4, #8]
 8004d04:	8a13      	ldrh	r3, [r2, #16]
 8004d06:	4433      	add	r3, r6
 8004d08:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
 8004d0a:	68a2      	ldr	r2, [r4, #8]
 8004d0c:	8a53      	ldrh	r3, [r2, #18]
 8004d0e:	442b      	add	r3, r5
 8004d10:	8253      	strh	r3, [r2, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8004d12:	2301      	movs	r3, #1
 8004d14:	462a      	mov	r2, r5
 8004d16:	4631      	mov	r1, r6
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff f815 	bl	8003d48 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	210b      	movs	r1, #11
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7fc fff2 	bl	8001d0c <lv_event_send>
 8004d28:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8004d2a:	2801      	cmp	r0, #1
 8004d2c:	d001      	beq.n	8004d32 <_lv_obj_scroll_by_raw+0x42>
}
 8004d2e:	4628      	mov	r0, r5
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_invalidate(obj);
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff f99b 	bl	800406e <lv_obj_invalidate>
    return LV_RES_OK;
 8004d38:	e7f9      	b.n	8004d2e <_lv_obj_scroll_by_raw+0x3e>
    if(x == 0 && y == 0) return LV_RES_OK;
 8004d3a:	2501      	movs	r5, #1
 8004d3c:	e7f7      	b.n	8004d2e <_lv_obj_scroll_by_raw+0x3e>

08004d3e <scroll_y_anim>:
{
 8004d3e:	b538      	push	{r3, r4, r5, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8004d44:	f7ff fe90 	bl	8004a68 <lv_obj_get_scroll_y>
 8004d48:	b282      	uxth	r2, r0
 8004d4a:	442a      	add	r2, r5
 8004d4c:	b212      	sxth	r2, r2
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7ff ffcd 	bl	8004cf0 <_lv_obj_scroll_by_raw>
}
 8004d56:	bd38      	pop	{r3, r4, r5, pc}

08004d58 <scroll_x_anim>:
{
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8004d5e:	f7ff fe7b 	bl	8004a58 <lv_obj_get_scroll_x>
 8004d62:	b283      	uxth	r3, r0
 8004d64:	1959      	adds	r1, r3, r5
 8004d66:	2200      	movs	r2, #0
 8004d68:	b209      	sxth	r1, r1
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f7ff ffc0 	bl	8004cf0 <_lv_obj_scroll_by_raw>
}
 8004d70:	bd38      	pop	{r3, r4, r5, pc}
	...

08004d74 <lv_obj_scroll_by>:
{
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	b093      	sub	sp, #76	; 0x4c
 8004d78:	4604      	mov	r4, r0
 8004d7a:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	b901      	cbnz	r1, 8004d82 <lv_obj_scroll_by+0xe>
 8004d80:	b182      	cbz	r2, 8004da4 <lv_obj_scroll_by+0x30>
    if(anim_en == LV_ANIM_ON) {
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d010      	beq.n	8004da8 <lv_obj_scroll_by+0x34>
        lv_anim_del(obj, scroll_y_anim);
 8004d86:	493f      	ldr	r1, [pc, #252]	; (8004e84 <lv_obj_scroll_by+0x110>)
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f006 f9c1 	bl	800b110 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8004d8e:	493e      	ldr	r1, [pc, #248]	; (8004e88 <lv_obj_scroll_by+0x114>)
 8004d90:	4620      	mov	r0, r4
 8004d92:	f006 f9bd 	bl	800b110 <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2109      	movs	r1, #9
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7fc ffb6 	bl	8001d0c <lv_event_send>
        if(res != LV_RES_OK) return;
 8004da0:	2801      	cmp	r0, #1
 8004da2:	d062      	beq.n	8004e6a <lv_obj_scroll_by+0xf6>
}
 8004da4:	b013      	add	sp, #76	; 0x4c
 8004da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
 8004da8:	4620      	mov	r0, r4
 8004daa:	f001 fed1 	bl	8006b50 <lv_obj_get_disp>
 8004dae:	4607      	mov	r7, r0
        lv_anim_init(&a);
 8004db0:	a801      	add	r0, sp, #4
 8004db2:	f006 f993 	bl	800b0dc <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 8004db6:	9401      	str	r4, [sp, #4]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8004db8:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <lv_obj_scroll_by+0x118>)
 8004dba:	9304      	str	r3, [sp, #16]
        if(dx) {
 8004dbc:	b996      	cbnz	r6, 8004de4 <lv_obj_scroll_by+0x70>
        if(dy) {
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	d0f0      	beq.n	8004da4 <lv_obj_scroll_by+0x30>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f006 f82a 	bl	800ae1c <lv_disp_get_ver_res>
 8004dc8:	462a      	mov	r2, r5
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f340 005d 	sbfx	r0, r0, #1, #30
 8004dd0:	f006 fa2e 	bl	800b230 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8004dd4:	28c7      	cmp	r0, #199	; 0xc7
 8004dd6:	d92f      	bls.n	8004e38 <lv_obj_scroll_by+0xc4>
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8004dd8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8004ddc:	d92d      	bls.n	8004e3a <lv_obj_scroll_by+0xc6>
 8004dde:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004de2:	e02a      	b.n	8004e3a <lv_obj_scroll_by+0xc6>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8004de4:	4638      	mov	r0, r7
 8004de6:	f006 f801 	bl	800adec <lv_disp_get_hor_res>
 8004dea:	4632      	mov	r2, r6
 8004dec:	2100      	movs	r1, #0
 8004dee:	f340 005d 	sbfx	r0, r0, #1, #30
 8004df2:	f006 fa1d 	bl	800b230 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8004df6:	28c7      	cmp	r0, #199	; 0xc7
 8004df8:	d905      	bls.n	8004e06 <lv_obj_scroll_by+0x92>
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8004dfa:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8004dfe:	d903      	bls.n	8004e08 <lv_obj_scroll_by+0x94>
 8004e00:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004e04:	e000      	b.n	8004e08 <lv_obj_scroll_by+0x94>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8004e06:	20c8      	movs	r0, #200	; 0xc8
    a->time = duration;
 8004e08:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f7ff fe24 	bl	8004a58 <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 8004e10:	4243      	negs	r3, r0
 8004e12:	1a30      	subs	r0, r6, r0
    a->start_value = start;
 8004e14:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 8004e16:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 8004e18:	900b      	str	r0, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <lv_obj_scroll_by+0x114>)
 8004e1c:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8004e1e:	4b1c      	ldr	r3, [pc, #112]	; (8004e90 <lv_obj_scroll_by+0x11c>)
 8004e20:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8004e22:	aa01      	add	r2, sp, #4
 8004e24:	2109      	movs	r1, #9
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7fc ff70 	bl	8001d0c <lv_event_send>
            if(res != LV_RES_OK) return;
 8004e2c:	2801      	cmp	r0, #1
 8004e2e:	d1b9      	bne.n	8004da4 <lv_obj_scroll_by+0x30>
            lv_anim_start(&a);
 8004e30:	a801      	add	r0, sp, #4
 8004e32:	f006 f99f 	bl	800b174 <lv_anim_start>
 8004e36:	e7c2      	b.n	8004dbe <lv_obj_scroll_by+0x4a>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8004e38:	20c8      	movs	r0, #200	; 0xc8
    a->time = duration;
 8004e3a:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f7ff fe13 	bl	8004a68 <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 8004e42:	4243      	negs	r3, r0
 8004e44:	1a28      	subs	r0, r5, r0
    a->start_value = start;
 8004e46:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 8004e48:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 8004e4a:	900b      	str	r0, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <lv_obj_scroll_by+0x110>)
 8004e4e:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <lv_obj_scroll_by+0x11c>)
 8004e52:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8004e54:	aa01      	add	r2, sp, #4
 8004e56:	2109      	movs	r1, #9
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7fc ff57 	bl	8001d0c <lv_event_send>
            if(res != LV_RES_OK) return;
 8004e5e:	2801      	cmp	r0, #1
 8004e60:	d1a0      	bne.n	8004da4 <lv_obj_scroll_by+0x30>
            lv_anim_start(&a);
 8004e62:	a801      	add	r0, sp, #4
 8004e64:	f006 f986 	bl	800b174 <lv_anim_start>
 8004e68:	e79c      	b.n	8004da4 <lv_obj_scroll_by+0x30>
        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff ff3e 	bl	8004cf0 <_lv_obj_scroll_by_raw>
        if(res != LV_RES_OK) return;
 8004e74:	2801      	cmp	r0, #1
 8004e76:	d195      	bne.n	8004da4 <lv_obj_scroll_by+0x30>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	210a      	movs	r1, #10
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7fc ff45 	bl	8001d0c <lv_event_send>
        if(res != LV_RES_OK) return;
 8004e82:	e78f      	b.n	8004da4 <lv_obj_scroll_by+0x30>
 8004e84:	08004d3f 	.word	0x08004d3f
 8004e88:	08004d59 	.word	0x08004d59
 8004e8c:	080049e5 	.word	0x080049e5
 8004e90:	0800b24f 	.word	0x0800b24f

08004e94 <lv_obj_scroll_by_bounded>:
{
 8004e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e98:	4605      	mov	r5, r0
 8004e9a:	4614      	mov	r4, r2
 8004e9c:	461e      	mov	r6, r3
    if(dx == 0 && dy == 0) return;
 8004e9e:	4688      	mov	r8, r1
 8004ea0:	b901      	cbnz	r1, 8004ea4 <lv_obj_scroll_by_bounded+0x10>
 8004ea2:	b37a      	cbz	r2, 8004f04 <lv_obj_scroll_by_bounded+0x70>
    lv_obj_update_layout(obj);
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7ff fd7d 	bl	80049a4 <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f7ff fdd4 	bl	8004a58 <lv_obj_get_scroll_x>
 8004eb0:	fa1f f980 	uxth.w	r9, r0
    lv_coord_t x_bounded = x_current + dx;
 8004eb4:	fa1f f888 	uxth.w	r8, r8
 8004eb8:	eba8 0109 	sub.w	r1, r8, r9
 8004ebc:	fa0f f881 	sxth.w	r8, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8004ec0:	2216      	movs	r2, #22
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f001 fa0f 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8004eca:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8004ecc:	2801      	cmp	r0, #1
 8004ece:	d030      	beq.n	8004f32 <lv_obj_scroll_by_bounded+0x9e>
        if(x_bounded > 0) x_bounded = 0;
 8004ed0:	f1b8 0f00 	cmp.w	r8, #0
 8004ed4:	dd18      	ble.n	8004f08 <lv_obj_scroll_by_bounded+0x74>
 8004ed6:	f04f 0800 	mov.w	r8, #0
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 8004eda:	4628      	mov	r0, r5
 8004edc:	f7ff fdc4 	bl	8004a68 <lv_obj_get_scroll_y>
 8004ee0:	b287      	uxth	r7, r0
    lv_coord_t y_bounded = y_current + dy;
 8004ee2:	b2a4      	uxth	r4, r4
 8004ee4:	1be4      	subs	r4, r4, r7
 8004ee6:	b224      	sxth	r4, r4
    if(y_bounded > 0) y_bounded = 0;
 8004ee8:	2c00      	cmp	r4, #0
 8004eea:	dd3b      	ble.n	8004f64 <lv_obj_scroll_by_bounded+0xd0>
 8004eec:	2400      	movs	r4, #0
    dx = x_bounded - x_current;
 8004eee:	eb09 0108 	add.w	r1, r9, r8
 8004ef2:	b209      	sxth	r1, r1
    dy = y_bounded - y_current;
 8004ef4:	193a      	adds	r2, r7, r4
 8004ef6:	b212      	sxth	r2, r2
    if(dx || dy) {
 8004ef8:	b901      	cbnz	r1, 8004efc <lv_obj_scroll_by_bounded+0x68>
 8004efa:	b11a      	cbz	r2, 8004f04 <lv_obj_scroll_by_bounded+0x70>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 8004efc:	4633      	mov	r3, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	f7ff ff38 	bl	8004d74 <lv_obj_scroll_by>
}
 8004f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(x_bounded < 0) {
 8004f08:	dae7      	bge.n	8004eda <lv_obj_scroll_by_bounded+0x46>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7ff fe16 	bl	8004b3c <lv_obj_get_scroll_left>
 8004f10:	b287      	uxth	r7, r0
 8004f12:	4628      	mov	r0, r5
 8004f14:	f7ff fe82 	bl	8004c1c <lv_obj_get_scroll_right>
 8004f18:	b283      	uxth	r3, r0
 8004f1a:	443b      	add	r3, r7
 8004f1c:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	db05      	blt.n	8004f2e <lv_obj_scroll_by_bounded+0x9a>
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8004f22:	425a      	negs	r2, r3
 8004f24:	4590      	cmp	r8, r2
 8004f26:	dad8      	bge.n	8004eda <lv_obj_scroll_by_bounded+0x46>
 8004f28:	fa0f f882 	sxth.w	r8, r2
 8004f2c:	e7d5      	b.n	8004eda <lv_obj_scroll_by_bounded+0x46>
            if(scroll_max < 0) scroll_max = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e7f7      	b.n	8004f22 <lv_obj_scroll_by_bounded+0x8e>
        if(x_bounded < 0) x_bounded = 0;
 8004f32:	f1b8 0f00 	cmp.w	r8, #0
 8004f36:	db12      	blt.n	8004f5e <lv_obj_scroll_by_bounded+0xca>
        if(x_bounded > 0) {
 8004f38:	ddcf      	ble.n	8004eda <lv_obj_scroll_by_bounded+0x46>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f7ff fdfe 	bl	8004b3c <lv_obj_get_scroll_left>
 8004f40:	b287      	uxth	r7, r0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7ff fe6a 	bl	8004c1c <lv_obj_get_scroll_right>
 8004f48:	b283      	uxth	r3, r0
 8004f4a:	443b      	add	r3, r7
 8004f4c:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	db03      	blt.n	8004f5a <lv_obj_scroll_by_bounded+0xc6>
            if(x_bounded > scroll_max) x_bounded = scroll_max;
 8004f52:	4543      	cmp	r3, r8
 8004f54:	dac1      	bge.n	8004eda <lv_obj_scroll_by_bounded+0x46>
 8004f56:	4698      	mov	r8, r3
 8004f58:	e7bf      	b.n	8004eda <lv_obj_scroll_by_bounded+0x46>
            if(scroll_max < 0) scroll_max = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e7f9      	b.n	8004f52 <lv_obj_scroll_by_bounded+0xbe>
        if(x_bounded < 0) x_bounded = 0;
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	e7ba      	b.n	8004eda <lv_obj_scroll_by_bounded+0x46>
    if(y_bounded < 0) {
 8004f64:	dac3      	bge.n	8004eee <lv_obj_scroll_by_bounded+0x5a>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8004f66:	4628      	mov	r0, r5
 8004f68:	f7ff fd86 	bl	8004a78 <lv_obj_get_scroll_top>
 8004f6c:	fa1f fa80 	uxth.w	sl, r0
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7ff fd89 	bl	8004a88 <lv_obj_get_scroll_bottom>
 8004f76:	b283      	uxth	r3, r0
 8004f78:	4453      	add	r3, sl
 8004f7a:	b21b      	sxth	r3, r3
        if(scroll_max < 0) scroll_max = 0;
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db04      	blt.n	8004f8a <lv_obj_scroll_by_bounded+0xf6>
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 8004f80:	425a      	negs	r2, r3
 8004f82:	4294      	cmp	r4, r2
 8004f84:	dab3      	bge.n	8004eee <lv_obj_scroll_by_bounded+0x5a>
 8004f86:	b214      	sxth	r4, r2
 8004f88:	e7b1      	b.n	8004eee <lv_obj_scroll_by_bounded+0x5a>
        if(scroll_max < 0) scroll_max = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e7f8      	b.n	8004f80 <lv_obj_scroll_by_bounded+0xec>
	...

08004f90 <lv_obj_scroll_to_x>:
{
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	4604      	mov	r4, r0
 8004f94:	460e      	mov	r6, r1
 8004f96:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_x_anim);
 8004f98:	4906      	ldr	r1, [pc, #24]	; (8004fb4 <lv_obj_scroll_to_x+0x24>)
 8004f9a:	f006 f8b9 	bl	800b110 <lv_anim_del>
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f7ff fd5a 	bl	8004a58 <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 8004fa4:	1b81      	subs	r1, r0, r6
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	2200      	movs	r2, #0
 8004faa:	b209      	sxth	r1, r1
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7ff ff71 	bl	8004e94 <lv_obj_scroll_by_bounded>
}
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	08004d59 	.word	0x08004d59

08004fb8 <lv_obj_scroll_to_y>:
{
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4604      	mov	r4, r0
 8004fbc:	460e      	mov	r6, r1
 8004fbe:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_y_anim);
 8004fc0:	4906      	ldr	r1, [pc, #24]	; (8004fdc <lv_obj_scroll_to_y+0x24>)
 8004fc2:	f006 f8a5 	bl	800b110 <lv_anim_del>
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7ff fd4e 	bl	8004a68 <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 8004fcc:	1b80      	subs	r0, r0, r6
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8004fce:	462b      	mov	r3, r5
 8004fd0:	b202      	sxth	r2, r0
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff ff5d 	bl	8004e94 <lv_obj_scroll_by_bounded>
}
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	08004d3f 	.word	0x08004d3f

08004fe0 <lv_obj_scroll_to>:
{
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	4616      	mov	r6, r2
 8004fe6:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f7ff ffd1 	bl	8004f90 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 8004fee:	4622      	mov	r2, r4
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f7ff ffe0 	bl	8004fb8 <lv_obj_scroll_to_y>
}
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ffc <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	b089      	sub	sp, #36	; 0x24
 8005002:	4682      	mov	sl, r0
 8005004:	460d      	mov	r5, r1
 8005006:	9103      	str	r1, [sp, #12]
 8005008:	4691      	mov	r9, r2
 800500a:	9302      	str	r3, [sp, #8]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800500c:	4608      	mov	r0, r1
 800500e:	f001 fd92 	bl	8006b36 <lv_obj_get_parent>
 8005012:	4604      	mov	r4, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8005014:	2110      	movs	r1, #16
 8005016:	f7fd fd33 	bl	8002a80 <lv_obj_has_flag>
 800501a:	2800      	cmp	r0, #0
 800501c:	f000 80e9 	beq.w	80051f2 <scroll_area_into_view+0x1f6>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 8005020:	4620      	mov	r0, r4
 8005022:	f7ff fd01 	bl	8004a28 <lv_obj_get_scroll_dir>
 8005026:	9001      	str	r0, [sp, #4]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8005028:	4620      	mov	r0, r4
 800502a:	f7ff fd0d 	bl	8004a48 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800502e:	9004      	str	r0, [sp, #16]
 8005030:	b110      	cbz	r0, 8005038 <scroll_area_into_view+0x3c>
 8005032:	f105 0b14 	add.w	fp, r5, #20
 8005036:	e000      	b.n	800503a <scroll_area_into_view+0x3e>
    else area_tmp = area;
 8005038:	46d3      	mov	fp, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800503a:	2232      	movs	r2, #50	; 0x32
 800503c:	2100      	movs	r1, #0
 800503e:	4620      	mov	r0, r4
 8005040:	f001 f952 	bl	80062e8 <lv_obj_get_style_prop>
 8005044:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005046:	2210      	movs	r2, #16
 8005048:	2100      	movs	r1, #0
 800504a:	4620      	mov	r0, r4
 800504c:	f001 f94c 	bl	80062e8 <lv_obj_get_style_prop>

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005050:	b287      	uxth	r7, r0
 8005052:	b2b6      	uxth	r6, r6
 8005054:	4437      	add	r7, r6
 8005056:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005058:	2211      	movs	r2, #17
 800505a:	2100      	movs	r1, #0
 800505c:	4620      	mov	r0, r4
 800505e:	f001 f943 	bl	80062e8 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8005062:	fa1f f880 	uxth.w	r8, r0
 8005066:	44b0      	add	r8, r6
 8005068:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800506c:	8ae5      	ldrh	r5, [r4, #22]
 800506e:	443d      	add	r5, r7
 8005070:	b2ad      	uxth	r5, r5
 8005072:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8005076:	1aed      	subs	r5, r5, r3
 8005078:	b2ad      	uxth	r5, r5
 800507a:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800507e:	1aed      	subs	r5, r5, r3
 8005080:	b22d      	sxth	r5, r5
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005082:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8005086:	8b61      	ldrh	r1, [r4, #26]
 8005088:	eba8 0101 	sub.w	r1, r8, r1
 800508c:	440a      	add	r2, r1
 800508e:	4413      	add	r3, r2
 8005090:	b29a      	uxth	r2, r3
 8005092:	9207      	str	r2, [sp, #28]
 8005094:	b21b      	sxth	r3, r3
 8005096:	9305      	str	r3, [sp, #20]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8005098:	4620      	mov	r0, r4
 800509a:	f7fe fc0f 	bl	80038bc <lv_obj_get_height>
 800509e:	b283      	uxth	r3, r0
 80050a0:	1bdb      	subs	r3, r3, r7
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	eba3 0308 	sub.w	r3, r3, r8
 80050a8:	b21a      	sxth	r2, r3
 80050aa:	9206      	str	r2, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	f2c0 80a3 	blt.w	80051f8 <scroll_area_into_view+0x1fc>
 80050b2:	9b05      	ldr	r3, [sp, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f2c0 809f 	blt.w	80051f8 <scroll_area_into_view+0x1fc>
 80050ba:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	f000 80c2 	beq.w	8005248 <scroll_area_into_view+0x24c>
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	f000 80cf 	beq.w	8005268 <scroll_area_into_view+0x26c>
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	f000 80af 	beq.w	800522e <scroll_area_into_view+0x232>
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff fcb1 	bl	8004a38 <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 80050d6:	4683      	mov	fp, r0
 80050d8:	b110      	cbz	r0, 80050e0 <scroll_area_into_view+0xe4>
 80050da:	9b03      	ldr	r3, [sp, #12]
 80050dc:	f103 0a14 	add.w	sl, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80050e0:	2212      	movs	r2, #18
 80050e2:	2100      	movs	r1, #0
 80050e4:	4620      	mov	r0, r4
 80050e6:	f001 f8ff 	bl	80062e8 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 80050ea:	fa1f f880 	uxth.w	r8, r0
 80050ee:	44b0      	add	r8, r6
 80050f0:	fa1f f888 	uxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80050f4:	2213      	movs	r2, #19
 80050f6:	2100      	movs	r1, #0
 80050f8:	4620      	mov	r0, r4
 80050fa:	f001 f8f5 	bl	80062e8 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 80050fe:	b280      	uxth	r0, r0
 8005100:	4406      	add	r6, r0
 8005102:	b2b6      	uxth	r6, r6
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8005104:	8aa7      	ldrh	r7, [r4, #20]
 8005106:	4447      	add	r7, r8
 8005108:	b2bf      	uxth	r7, r7
 800510a:	f8ba 3000 	ldrh.w	r3, [sl]
 800510e:	1aff      	subs	r7, r7, r3
 8005110:	b2bf      	uxth	r7, r7
 8005112:	f8b9 3000 	ldrh.w	r3, [r9]
 8005116:	1aff      	subs	r7, r7, r3
 8005118:	b23f      	sxth	r7, r7
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800511a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800511e:	8b21      	ldrh	r1, [r4, #24]
 8005120:	1a71      	subs	r1, r6, r1
 8005122:	440a      	add	r2, r1
 8005124:	4413      	add	r3, r2
 8005126:	b29a      	uxth	r2, r3
 8005128:	b21b      	sxth	r3, r3
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800512a:	2f00      	cmp	r7, #0
 800512c:	f2c0 80bb 	blt.w	80052a6 <scroll_area_into_view+0x2aa>
 8005130:	2b00      	cmp	r3, #0
 8005132:	f2c0 80b8 	blt.w	80052a6 <scroll_area_into_view+0x2aa>
 8005136:	2700      	movs	r7, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8005138:	4620      	mov	r0, r4
 800513a:	f7fe fbb7 	bl	80038ac <lv_obj_get_width>
 800513e:	b283      	uxth	r3, r0
 8005140:	eba3 0308 	sub.w	r3, r3, r8
 8005144:	b29b      	uxth	r3, r3
 8005146:	1b9b      	subs	r3, r3, r6
 8005148:	b21b      	sxth	r3, r3
    switch(snap_x) {
 800514a:	f1bb 0f02 	cmp.w	fp, #2
 800514e:	f000 80d2 	beq.w	80052f6 <scroll_area_into_view+0x2fa>
 8005152:	f1bb 0f03 	cmp.w	fp, #3
 8005156:	f000 80db 	beq.w	8005310 <scroll_area_into_view+0x314>
 800515a:	f1bb 0f01 	cmp.w	fp, #1
 800515e:	f000 80bb 	beq.w	80052d8 <scroll_area_into_view+0x2dc>
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 8005162:	497f      	ldr	r1, [pc, #508]	; (8005360 <scroll_area_into_view+0x364>)
 8005164:	4620      	mov	r0, r4
 8005166:	f005 ffd3 	bl	800b110 <lv_anim_del>
 800516a:	4606      	mov	r6, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800516c:	497d      	ldr	r1, [pc, #500]	; (8005364 <scroll_area_into_view+0x368>)
 800516e:	4620      	mov	r0, r4
 8005170:	f005 ffce 	bl	800b110 <lv_anim_del>
    if(y_del || x_del) {
 8005174:	b906      	cbnz	r6, 8005178 <scroll_area_into_view+0x17c>
 8005176:	b130      	cbz	r0, 8005186 <scroll_area_into_view+0x18a>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 8005178:	2200      	movs	r2, #0
 800517a:	210a      	movs	r1, #10
 800517c:	4620      	mov	r0, r4
 800517e:	f7fc fdc5 	bl	8001d0c <lv_event_send>
        if(res != LV_RES_OK) return;
 8005182:	2801      	cmp	r0, #1
 8005184:	d135      	bne.n	80051f2 <scroll_area_into_view+0x1f6>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	f013 0f01 	tst.w	r3, #1
 800518c:	d102      	bne.n	8005194 <scroll_area_into_view+0x198>
 800518e:	2f00      	cmp	r7, #0
 8005190:	f2c0 80dd 	blt.w	800534e <scroll_area_into_view+0x352>
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	f013 0f02 	tst.w	r3, #2
 800519a:	d102      	bne.n	80051a2 <scroll_area_into_view+0x1a6>
 800519c:	2f00      	cmp	r7, #0
 800519e:	dd00      	ble.n	80051a2 <scroll_area_into_view+0x1a6>
 80051a0:	2700      	movs	r7, #0
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 80051a2:	9b01      	ldr	r3, [sp, #4]
 80051a4:	f013 0f04 	tst.w	r3, #4
 80051a8:	d102      	bne.n	80051b0 <scroll_area_into_view+0x1b4>
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	f2c0 80d1 	blt.w	8005352 <scroll_area_into_view+0x356>
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 80051b0:	9b01      	ldr	r3, [sp, #4]
 80051b2:	f013 0f08 	tst.w	r3, #8
 80051b6:	d102      	bne.n	80051be <scroll_area_into_view+0x1c2>
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	dd00      	ble.n	80051be <scroll_area_into_view+0x1c2>
 80051bc:	2500      	movs	r5, #0

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 80051be:	f8b9 3000 	ldrh.w	r3, [r9]
 80051c2:	9a02      	ldr	r2, [sp, #8]
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	f000 80c6 	beq.w	8005356 <scroll_area_into_view+0x35a>
 80051ca:	b2ba      	uxth	r2, r7
 80051cc:	4413      	add	r3, r2
 80051ce:	f8a9 3000 	strh.w	r3, [r9]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 80051d2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80051d6:	9a02      	ldr	r2, [sp, #8]
 80051d8:	2a00      	cmp	r2, #0
 80051da:	f000 80be 	beq.w	800535a <scroll_area_into_view+0x35e>
 80051de:	b2aa      	uxth	r2, r5
 80051e0:	4413      	add	r3, r2
 80051e2:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	462a      	mov	r2, r5
 80051ea:	4639      	mov	r1, r7
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7ff fdc1 	bl	8004d74 <lv_obj_scroll_by>
}
 80051f2:	b009      	add	sp, #36	; 0x24
 80051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(top_diff > 0) {
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	dd08      	ble.n	800520e <scroll_area_into_view+0x212>
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7ff fc3b 	bl	8004a78 <lv_obj_get_scroll_top>
        if(st - y_scroll < 0) y_scroll = 0;
 8005202:	1b40      	subs	r0, r0, r5
 8005204:	2800      	cmp	r0, #0
 8005206:	f6bf af59 	bge.w	80050bc <scroll_area_into_view+0xc0>
 800520a:	2500      	movs	r5, #0
 800520c:	e756      	b.n	80050bc <scroll_area_into_view+0xc0>
    else if(bottom_diff > 0) {
 800520e:	9b05      	ldr	r3, [sp, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc01      	bgt.n	8005218 <scroll_area_into_view+0x21c>
    lv_coord_t y_scroll = 0;
 8005214:	2500      	movs	r5, #0
 8005216:	e751      	b.n	80050bc <scroll_area_into_view+0xc0>
        y_scroll = -bottom_diff;
 8005218:	9b07      	ldr	r3, [sp, #28]
 800521a:	425d      	negs	r5, r3
 800521c:	b22d      	sxth	r5, r5
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800521e:	4620      	mov	r0, r4
 8005220:	f7ff fc32 	bl	8004a88 <lv_obj_get_scroll_bottom>
        if(sb + y_scroll < 0) y_scroll = 0;
 8005224:	42e8      	cmn	r0, r5
 8005226:	f57f af49 	bpl.w	80050bc <scroll_area_into_view+0xc0>
 800522a:	2500      	movs	r5, #0
 800522c:	e746      	b.n	80050bc <scroll_area_into_view+0xc0>
            snap_goal = parent->coords.y1 + ptop;
 800522e:	8ae3      	ldrh	r3, [r4, #22]
 8005230:	443b      	add	r3, r7
 8005232:	b29b      	uxth	r3, r3
            act = area_tmp->y1 + y_scroll;
 8005234:	f8bb 7002 	ldrh.w	r7, [fp, #2]
 8005238:	b2ad      	uxth	r5, r5
 800523a:	442f      	add	r7, r5
 800523c:	b2bf      	uxth	r7, r7
            y_scroll += snap_goal - act;
 800523e:	1bdb      	subs	r3, r3, r7
 8005240:	b29b      	uxth	r3, r3
 8005242:	441d      	add	r5, r3
 8005244:	b22d      	sxth	r5, r5
            break;
 8005246:	e743      	b.n	80050d0 <scroll_area_into_view+0xd4>
            snap_goal = parent->coords.y2 - pbottom;
 8005248:	8b63      	ldrh	r3, [r4, #26]
 800524a:	eba3 0308 	sub.w	r3, r3, r8
 800524e:	b29b      	uxth	r3, r3
            act = area_tmp->y2 + y_scroll;
 8005250:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 8005254:	b2ad      	uxth	r5, r5
 8005256:	44a8      	add	r8, r5
 8005258:	fa1f f888 	uxth.w	r8, r8
            y_scroll += snap_goal - act;
 800525c:	eba3 0308 	sub.w	r3, r3, r8
 8005260:	b29b      	uxth	r3, r3
 8005262:	441d      	add	r5, r3
 8005264:	b22d      	sxth	r5, r5
            break;
 8005266:	e733      	b.n	80050d0 <scroll_area_into_view+0xd4>
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 8005268:	8ae3      	ldrh	r3, [r4, #22]
 800526a:	443b      	add	r3, r7
 800526c:	b29b      	uxth	r3, r3
 800526e:	9a06      	ldr	r2, [sp, #24]
 8005270:	eb02 77d2 	add.w	r7, r2, r2, lsr #31
 8005274:	eb03 0367 	add.w	r3, r3, r7, asr #1
 8005278:	b29b      	uxth	r3, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800527a:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 800527e:	f8bb 1002 	ldrh.w	r1, [fp, #2]
 8005282:	1a52      	subs	r2, r2, r1
 8005284:	b292      	uxth	r2, r2
 8005286:	3201      	adds	r2, #1
 8005288:	b210      	sxth	r0, r2
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800528a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800528e:	4402      	add	r2, r0
 8005290:	eb01 0262 	add.w	r2, r1, r2, asr #1
 8005294:	b292      	uxth	r2, r2
 8005296:	b2ad      	uxth	r5, r5
 8005298:	442a      	add	r2, r5
 800529a:	b292      	uxth	r2, r2
            y_scroll += snap_goal - act;
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	441d      	add	r5, r3
 80052a2:	b22d      	sxth	r5, r5
            break;
 80052a4:	e714      	b.n	80050d0 <scroll_area_into_view+0xd4>
    else if(left_diff > 0) {
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	dc03      	bgt.n	80052b2 <scroll_area_into_view+0x2b6>
    else if(right_diff > 0) {
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	dc0a      	bgt.n	80052c4 <scroll_area_into_view+0x2c8>
    lv_coord_t x_scroll = 0;
 80052ae:	2700      	movs	r7, #0
 80052b0:	e742      	b.n	8005138 <scroll_area_into_view+0x13c>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80052b2:	4620      	mov	r0, r4
 80052b4:	f7ff fc42 	bl	8004b3c <lv_obj_get_scroll_left>
        if(sl - x_scroll < 0) x_scroll = 0;
 80052b8:	1bc0      	subs	r0, r0, r7
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f6bf af3c 	bge.w	8005138 <scroll_area_into_view+0x13c>
 80052c0:	2700      	movs	r7, #0
 80052c2:	e739      	b.n	8005138 <scroll_area_into_view+0x13c>
        x_scroll = -right_diff;
 80052c4:	4252      	negs	r2, r2
 80052c6:	b217      	sxth	r7, r2
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80052c8:	4620      	mov	r0, r4
 80052ca:	f7ff fca7 	bl	8004c1c <lv_obj_get_scroll_right>
        if(sr + x_scroll < 0) x_scroll = 0;
 80052ce:	42f8      	cmn	r0, r7
 80052d0:	f57f af32 	bpl.w	8005138 <scroll_area_into_view+0x13c>
 80052d4:	2700      	movs	r7, #0
 80052d6:	e72f      	b.n	8005138 <scroll_area_into_view+0x13c>
            snap_goal = parent->coords.x1 + pleft;
 80052d8:	8aa3      	ldrh	r3, [r4, #20]
 80052da:	4443      	add	r3, r8
 80052dc:	b29b      	uxth	r3, r3
            act = area_tmp->x1 + x_scroll;
 80052de:	f8ba 8000 	ldrh.w	r8, [sl]
 80052e2:	b2bf      	uxth	r7, r7
 80052e4:	44b8      	add	r8, r7
 80052e6:	fa1f f888 	uxth.w	r8, r8
            x_scroll += snap_goal - act;
 80052ea:	eba3 0308 	sub.w	r3, r3, r8
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	441f      	add	r7, r3
 80052f2:	b23f      	sxth	r7, r7
            break;
 80052f4:	e735      	b.n	8005162 <scroll_area_into_view+0x166>
            snap_goal = parent->coords.x2 - pright;
 80052f6:	8b23      	ldrh	r3, [r4, #24]
 80052f8:	1b9b      	subs	r3, r3, r6
 80052fa:	b29b      	uxth	r3, r3
            act = area_tmp->x2 + x_scroll;
 80052fc:	f8ba 6004 	ldrh.w	r6, [sl, #4]
 8005300:	b2bf      	uxth	r7, r7
 8005302:	443e      	add	r6, r7
 8005304:	b2b6      	uxth	r6, r6
            x_scroll += snap_goal - act;
 8005306:	1b9b      	subs	r3, r3, r6
 8005308:	b29b      	uxth	r3, r3
 800530a:	441f      	add	r7, r3
 800530c:	b23f      	sxth	r7, r7
            break;
 800530e:	e728      	b.n	8005162 <scroll_area_into_view+0x166>
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 8005310:	8aa2      	ldrh	r2, [r4, #20]
 8005312:	4490      	add	r8, r2
 8005314:	fa1f f888 	uxth.w	r8, r8
 8005318:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800531c:	eb08 0363 	add.w	r3, r8, r3, asr #1
 8005320:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005322:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005326:	f8ba 1000 	ldrh.w	r1, [sl]
 800532a:	1a52      	subs	r2, r2, r1
 800532c:	b292      	uxth	r2, r2
 800532e:	3201      	adds	r2, #1
 8005330:	b210      	sxth	r0, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8005332:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005336:	4402      	add	r2, r0
 8005338:	eb01 0262 	add.w	r2, r1, r2, asr #1
 800533c:	b292      	uxth	r2, r2
 800533e:	b2bf      	uxth	r7, r7
 8005340:	443a      	add	r2, r7
 8005342:	b292      	uxth	r2, r2
            x_scroll += snap_goal - act;
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	441f      	add	r7, r3
 800534a:	b23f      	sxth	r7, r7
            break;
 800534c:	e709      	b.n	8005162 <scroll_area_into_view+0x166>
    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800534e:	2700      	movs	r7, #0
 8005350:	e720      	b.n	8005194 <scroll_area_into_view+0x198>
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 8005352:	2500      	movs	r5, #0
 8005354:	e72c      	b.n	80051b0 <scroll_area_into_view+0x1b4>
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8005356:	2200      	movs	r2, #0
 8005358:	e738      	b.n	80051cc <scroll_area_into_view+0x1d0>
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800535a:	2200      	movs	r2, #0
 800535c:	e740      	b.n	80051e0 <scroll_area_into_view+0x1e4>
 800535e:	bf00      	nop
 8005360:	08004d3f 	.word	0x08004d3f
 8005364:	08004d59 	.word	0x08004d59

08005368 <lv_obj_scroll_to_view_recursive>:
{
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	4605      	mov	r5, r0
 800536e:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 8005370:	f7ff fb18 	bl	80049a4 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8005374:	2300      	movs	r3, #0
 8005376:	f8ad 3004 	strh.w	r3, [sp, #4]
 800537a:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800537e:	4628      	mov	r0, r5
 8005380:	f001 fbd9 	bl	8006b36 <lv_obj_get_parent>
 8005384:	4604      	mov	r4, r0
    lv_obj_t * child = obj;
 8005386:	4629      	mov	r1, r5
    while(parent) {
 8005388:	e00a      	b.n	80053a0 <lv_obj_scroll_to_view_recursive+0x38>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800538a:	4633      	mov	r3, r6
 800538c:	aa01      	add	r2, sp, #4
 800538e:	f105 0014 	add.w	r0, r5, #20
 8005392:	f7ff fe33 	bl	8004ffc <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8005396:	4620      	mov	r0, r4
 8005398:	f001 fbcd 	bl	8006b36 <lv_obj_get_parent>
        child = parent;
 800539c:	4621      	mov	r1, r4
        parent = lv_obj_get_parent(parent);
 800539e:	4604      	mov	r4, r0
    while(parent) {
 80053a0:	2c00      	cmp	r4, #0
 80053a2:	d1f2      	bne.n	800538a <lv_obj_scroll_to_view_recursive+0x22>
}
 80053a4:	b002      	add	sp, #8
 80053a6:	bd70      	pop	{r4, r5, r6, pc}

080053a8 <lv_obj_get_scrollbar_area>:
{
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	b095      	sub	sp, #84	; 0x54
 80053ae:	4604      	mov	r4, r0
 80053b0:	460f      	mov	r7, r1
 80053b2:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 80053b4:	f04f 35ff 	mov.w	r5, #4294967295
 80053b8:	9500      	str	r5, [sp, #0]
 80053ba:	462b      	mov	r3, r5
 80053bc:	2200      	movs	r2, #0
 80053be:	4611      	mov	r1, r2
 80053c0:	4638      	mov	r0, r7
 80053c2:	f005 ff88 	bl	800b2d6 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 80053c6:	9500      	str	r5, [sp, #0]
 80053c8:	462b      	mov	r3, r5
 80053ca:	2200      	movs	r2, #0
 80053cc:	4611      	mov	r1, r2
 80053ce:	4630      	mov	r0, r6
 80053d0:	f005 ff81 	bl	800b2d6 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 80053d4:	2110      	movs	r1, #16
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7fd fb52 	bl	8002a80 <lv_obj_has_flag>
 80053dc:	9003      	str	r0, [sp, #12]
 80053de:	b120      	cbz	r0, 80053ea <lv_obj_get_scrollbar_area+0x42>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7ff fb19 	bl	8004a18 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 80053e6:	4681      	mov	r9, r0
 80053e8:	b910      	cbnz	r0, 80053f0 <lv_obj_get_scrollbar_area+0x48>
}
 80053ea:	b015      	add	sp, #84	; 0x54
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80053f0:	2000      	movs	r0, #0
 80053f2:	f005 fd43 	bl	800ae7c <lv_indev_get_next>
 80053f6:	4605      	mov	r5, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 80053f8:	f1b9 0f02 	cmp.w	r9, #2
 80053fc:	d10c      	bne.n	8005418 <lv_obj_get_scrollbar_area+0x70>
        while(indev) {
 80053fe:	b14d      	cbz	r5, 8005414 <lv_obj_get_scrollbar_area+0x6c>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8005400:	4628      	mov	r0, r5
 8005402:	f7fc fea6 	bl	8002152 <lv_indev_get_scroll_obj>
 8005406:	4284      	cmp	r4, r0
 8005408:	d004      	beq.n	8005414 <lv_obj_get_scrollbar_area+0x6c>
            indev = lv_indev_get_next(indev);
 800540a:	4628      	mov	r0, r5
 800540c:	f005 fd36 	bl	800ae7c <lv_indev_get_next>
 8005410:	4605      	mov	r5, r0
 8005412:	e7f4      	b.n	80053fe <lv_obj_get_scrollbar_area+0x56>
        if(indev == NULL)  return;
 8005414:	2d00      	cmp	r5, #0
 8005416:	d0e8      	beq.n	80053ea <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 8005418:	4620      	mov	r0, r4
 800541a:	f7ff fb2d 	bl	8004a78 <lv_obj_get_scroll_top>
 800541e:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8005420:	4620      	mov	r0, r4
 8005422:	f7ff fb31 	bl	8004a88 <lv_obj_get_scroll_bottom>
 8005426:	9004      	str	r0, [sp, #16]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff fb87 	bl	8004b3c <lv_obj_get_scroll_left>
 800542e:	9005      	str	r0, [sp, #20]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8005430:	4620      	mov	r0, r4
 8005432:	f7ff fbf3 	bl	8004c1c <lv_obj_get_scroll_right>
 8005436:	9006      	str	r0, [sp, #24]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8005438:	4620      	mov	r0, r4
 800543a:	f7ff faf5 	bl	8004a28 <lv_obj_get_scroll_dir>
 800543e:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
 8005440:	f010 0f0c 	tst.w	r0, #12
 8005444:	d021      	beq.n	800548a <lv_obj_get_scrollbar_area+0xe2>
 8005446:	f1b9 0f01 	cmp.w	r9, #1
 800544a:	f000 812a 	beq.w	80056a2 <lv_obj_get_scrollbar_area+0x2fa>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800544e:	f1b9 0f03 	cmp.w	r9, #3
 8005452:	d005      	beq.n	8005460 <lv_obj_get_scrollbar_area+0xb8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8005454:	f1b9 0f02 	cmp.w	r9, #2
 8005458:	d00e      	beq.n	8005478 <lv_obj_get_scrollbar_area+0xd0>
    bool ver_draw = false;
 800545a:	f04f 0b00 	mov.w	fp, #0
 800545e:	e016      	b.n	800548e <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8005460:	f1b8 0f00 	cmp.w	r8, #0
 8005464:	dd02      	ble.n	800546c <lv_obj_get_scrollbar_area+0xc4>
        ver_draw = true;
 8005466:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800546a:	e010      	b.n	800548e <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	ddf0      	ble.n	8005454 <lv_obj_get_scrollbar_area+0xac>
        ver_draw = true;
 8005472:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005476:	e00a      	b.n	800548e <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 8005478:	4628      	mov	r0, r5
 800547a:	f7fc fe59 	bl	8002130 <lv_indev_get_scroll_dir>
 800547e:	280c      	cmp	r0, #12
 8005480:	f000 8112 	beq.w	80056a8 <lv_obj_get_scrollbar_area+0x300>
    bool ver_draw = false;
 8005484:	f04f 0b00 	mov.w	fp, #0
 8005488:	e001      	b.n	800548e <lv_obj_get_scrollbar_area+0xe6>
 800548a:	f04f 0b00 	mov.w	fp, #0
    if((dir & LV_DIR_HOR) &&
 800548e:	f01a 0f03 	tst.w	sl, #3
 8005492:	d00a      	beq.n	80054aa <lv_obj_get_scrollbar_area+0x102>
 8005494:	f1b9 0f01 	cmp.w	r9, #1
 8005498:	d00c      	beq.n	80054b4 <lv_obj_get_scrollbar_area+0x10c>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800549a:	f1b9 0f03 	cmp.w	r9, #3
 800549e:	f000 8106 	beq.w	80056ae <lv_obj_get_scrollbar_area+0x306>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80054a2:	f1b9 0f02 	cmp.w	r9, #2
 80054a6:	f000 810b 	beq.w	80056c0 <lv_obj_get_scrollbar_area+0x318>
    if(!hor_draw && !ver_draw) return;
 80054aa:	f1bb 0f00 	cmp.w	fp, #0
 80054ae:	d09c      	beq.n	80053ea <lv_obj_get_scrollbar_area+0x42>
 80054b0:	2300      	movs	r3, #0
 80054b2:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80054b4:	2216      	movs	r2, #22
 80054b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 ff14 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80054c0:	b2c3      	uxtb	r3, r0
 80054c2:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80054c4:	2210      	movs	r2, #16
 80054c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 ff0c 	bl	80062e8 <lv_obj_get_style_prop>
 80054d0:	9012      	str	r0, [sp, #72]	; 0x48
    return (lv_coord_t)v.num;
 80054d2:	b203      	sxth	r3, r0
 80054d4:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80054d6:	2211      	movs	r2, #17
 80054d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 ff03 	bl	80062e8 <lv_obj_get_style_prop>
 80054e2:	900a      	str	r0, [sp, #40]	; 0x28
    return (lv_coord_t)v.num;
 80054e4:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80054e8:	2212      	movs	r2, #18
 80054ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 fefa 	bl	80062e8 <lv_obj_get_style_prop>
 80054f4:	9011      	str	r0, [sp, #68]	; 0x44
    return (lv_coord_t)v.num;
 80054f6:	b203      	sxth	r3, r0
 80054f8:	9310      	str	r3, [sp, #64]	; 0x40
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80054fa:	2213      	movs	r2, #19
 80054fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fef1 	bl	80062e8 <lv_obj_get_style_prop>
 8005506:	900d      	str	r0, [sp, #52]	; 0x34
    return (lv_coord_t)v.num;
 8005508:	b203      	sxth	r3, r0
 800550a:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800550c:	2201      	movs	r2, #1
 800550e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005512:	4620      	mov	r0, r4
 8005514:	f000 fee8 	bl	80062e8 <lv_obj_get_style_prop>
 8005518:	9009      	str	r0, [sp, #36]	; 0x24
    return (lv_coord_t)v.num;
 800551a:	b205      	sxth	r5, r0
    lv_coord_t obj_h = lv_obj_get_height(obj);
 800551c:	4620      	mov	r0, r4
 800551e:	f7fe f9cd 	bl	80038bc <lv_obj_get_height>
 8005522:	9007      	str	r0, [sp, #28]
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8005524:	4620      	mov	r0, r4
 8005526:	f7fe f9c1 	bl	80038ac <lv_obj_get_width>
 800552a:	9008      	str	r0, [sp, #32]
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800552c:	f1bb 0f00 	cmp.w	fp, #0
 8005530:	f000 80cd 	beq.w	80056ce <lv_obj_get_scrollbar_area+0x326>
 8005534:	950e      	str	r5, [sp, #56]	; 0x38
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	b903      	cbnz	r3, 800553c <lv_obj_get_scrollbar_area+0x194>
 800553a:	2500      	movs	r5, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800553c:	2221      	movs	r2, #33	; 0x21
 800553e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005542:	4620      	mov	r0, r4
 8005544:	f000 fed0 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8005548:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800554a:	2801      	cmp	r0, #1
 800554c:	f240 80c2 	bls.w	80056d4 <lv_obj_get_scrollbar_area+0x32c>
    lv_coord_t content_h = obj_h + st + sb;
 8005550:	f8bd 901c 	ldrh.w	r9, [sp, #28]
 8005554:	44c8      	add	r8, r9
 8005556:	fa1f f888 	uxth.w	r8, r8
 800555a:	9b04      	ldr	r3, [sp, #16]
 800555c:	4498      	add	r8, r3
 800555e:	fa1f f388 	uxth.w	r3, r8
 8005562:	9313      	str	r3, [sp, #76]	; 0x4c
 8005564:	fa0f f388 	sxth.w	r3, r8
    if(ver_draw && content_h) {
 8005568:	f1bb 0f00 	cmp.w	fp, #0
 800556c:	f000 80fd 	beq.w	800576a <lv_obj_get_scrollbar_area+0x3c2>
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80fa 	beq.w	800576a <lv_obj_get_scrollbar_area+0x3c2>
        ver_area->y1 = obj->coords.y1;
 8005576:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800557a:	8072      	strh	r2, [r6, #2]
        ver_area->y2 = obj->coords.y2;
 800557c:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8005580:	80f2      	strh	r2, [r6, #6]
        if(rtl) {
 8005582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005584:	2a01      	cmp	r2, #1
 8005586:	f000 80b0 	beq.w	80056ea <lv_obj_get_scrollbar_area+0x342>
            ver_area->x2 = obj->coords.x2 - right_space;
 800558a:	8b21      	ldrh	r1, [r4, #24]
 800558c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800558e:	1a89      	subs	r1, r1, r2
 8005590:	b28a      	uxth	r2, r1
 8005592:	80b1      	strh	r1, [r6, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8005594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005596:	1a52      	subs	r2, r2, r1
 8005598:	b292      	uxth	r2, r2
 800559a:	3201      	adds	r2, #1
 800559c:	8032      	strh	r2, [r6, #0]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800559e:	9a07      	ldr	r2, [sp, #28]
 80055a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055a2:	eba2 0801 	sub.w	r8, r2, r1
 80055a6:	eba8 080a 	sub.w	r8, r8, sl
 80055aa:	9507      	str	r5, [sp, #28]
 80055ac:	eba8 0805 	sub.w	r8, r8, r5
 80055b0:	fb08 f802 	mul.w	r8, r8, r2
 80055b4:	fb98 f8f3 	sdiv	r8, r8, r3
 80055b8:	fa0f fb88 	sxth.w	fp, r8
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 80055bc:	46d8      	mov	r8, fp
 80055be:	2000      	movs	r0, #0
 80055c0:	f005 fc44 	bl	800ae4c <lv_disp_get_dpi>
 80055c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055c8:	0040      	lsls	r0, r0, #1
 80055ca:	28ef      	cmp	r0, #239	; 0xef
 80055cc:	f300 8098 	bgt.w	8005700 <lv_obj_get_scrollbar_area+0x358>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4598      	cmp	r8, r3
 80055d4:	f340 80a2 	ble.w	800571c <lv_obj_get_scrollbar_area+0x374>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 80055d8:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 80055dc:	eba9 0300 	sub.w	r3, r9, r0
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 80055e6:	eba3 0308 	sub.w	r3, r3, r8
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	b2ad      	uxth	r5, r5
 80055ee:	1b5b      	subs	r3, r3, r5
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	fa1f fb8b 	uxth.w	fp, fp
 80055f6:	eba3 030b 	sub.w	r3, r3, fp
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	b21b      	sxth	r3, r3
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 80055fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005600:	eba1 0909 	sub.w	r9, r1, r9
 8005604:	fa0f f989 	sxth.w	r9, r9
        if(scroll_h <= 0) {
 8005608:	f1b9 0f00 	cmp.w	r9, #0
 800560c:	f340 80a2 	ble.w	8005754 <lv_obj_get_scrollbar_area+0x3ac>
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8005610:	9904      	ldr	r1, [sp, #16]
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	fb93 f3f9 	sdiv	r3, r3, r9
            sb_y = rem - sb_y;
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	b29b      	uxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800561e:	8ae2      	ldrh	r2, [r4, #22]
 8005620:	4413      	add	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	4403      	add	r3, r0
 8005626:	b29a      	uxth	r2, r3
 8005628:	b21b      	sxth	r3, r3
 800562a:	8073      	strh	r3, [r6, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800562c:	4493      	add	fp, r2
 800562e:	fa1f f28b 	uxth.w	r2, fp
 8005632:	3a01      	subs	r2, #1
 8005634:	80f2      	strh	r2, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 8005636:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 800563a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800563c:	440a      	add	r2, r1
 800563e:	4293      	cmp	r3, r2
 8005640:	f2c0 8136 	blt.w	80058b0 <lv_obj_get_scrollbar_area+0x508>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 8005644:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8005648:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800564c:	9b07      	ldr	r3, [sp, #28]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	eba3 030a 	sub.w	r3, r3, sl
 8005654:	4299      	cmp	r1, r3
 8005656:	f340 8088 	ble.w	800576a <lv_obj_get_scrollbar_area+0x3c2>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800565a:	b292      	uxth	r2, r2
 800565c:	1b55      	subs	r5, r2, r5
 800565e:	b2ad      	uxth	r5, r5
 8005660:	eba5 0508 	sub.w	r5, r5, r8
 8005664:	b22d      	sxth	r5, r5
 8005666:	80f5      	strh	r5, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 8005668:	2000      	movs	r0, #0
 800566a:	f005 fbef 	bl	800ae4c <lv_disp_get_dpi>
 800566e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005672:	0043      	lsls	r3, r0, #1
 8005674:	2bef      	cmp	r3, #239	; 0xef
 8005676:	f300 815b 	bgt.w	8005930 <lv_obj_get_scrollbar_area+0x588>
 800567a:	2301      	movs	r3, #1
 800567c:	1aeb      	subs	r3, r5, r3
 800567e:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8005682:	4293      	cmp	r3, r2
 8005684:	da71      	bge.n	800576a <lv_obj_get_scrollbar_area+0x3c2>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8005686:	88f5      	ldrh	r5, [r6, #6]
 8005688:	2000      	movs	r0, #0
 800568a:	f005 fbdf 	bl	800ae4c <lv_disp_get_dpi>
 800568e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005692:	0043      	lsls	r3, r0, #1
 8005694:	2bef      	cmp	r3, #239	; 0xef
 8005696:	f300 8159 	bgt.w	800594c <lv_obj_get_scrollbar_area+0x5a4>
 800569a:	2301      	movs	r3, #1
 800569c:	1aeb      	subs	r3, r5, r3
 800569e:	8073      	strh	r3, [r6, #2]
 80056a0:	e063      	b.n	800576a <lv_obj_get_scrollbar_area+0x3c2>
        ver_draw = true;
 80056a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80056a6:	e6f2      	b.n	800548e <lv_obj_get_scrollbar_area+0xe6>
 80056a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80056ac:	e6ef      	b.n	800548e <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80056ae:	9b05      	ldr	r3, [sp, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f73f aeff 	bgt.w	80054b4 <lv_obj_get_scrollbar_area+0x10c>
 80056b6:	9b06      	ldr	r3, [sp, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f73f aefb 	bgt.w	80054b4 <lv_obj_get_scrollbar_area+0x10c>
 80056be:	e6f0      	b.n	80054a2 <lv_obj_get_scrollbar_area+0xfa>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 80056c0:	4628      	mov	r0, r5
 80056c2:	f7fc fd35 	bl	8002130 <lv_indev_get_scroll_dir>
 80056c6:	2803      	cmp	r0, #3
 80056c8:	f47f aeef 	bne.w	80054aa <lv_obj_get_scrollbar_area+0x102>
 80056cc:	e6f2      	b.n	80054b4 <lv_obj_get_scrollbar_area+0x10c>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	930e      	str	r3, [sp, #56]	; 0x38
 80056d2:	e730      	b.n	8005536 <lv_obj_get_scrollbar_area+0x18e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80056d4:	2231      	movs	r2, #49	; 0x31
 80056d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 fe04 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80056e0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 80056e2:	2801      	cmp	r0, #1
 80056e4:	f63f af34 	bhi.w	8005550 <lv_obj_get_scrollbar_area+0x1a8>
 80056e8:	e67f      	b.n	80053ea <lv_obj_get_scrollbar_area+0x42>
            ver_area->x1 = obj->coords.x1 + left_space;
 80056ea:	8aa1      	ldrh	r1, [r4, #20]
 80056ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80056ee:	4411      	add	r1, r2
 80056f0:	b28a      	uxth	r2, r1
 80056f2:	8031      	strh	r1, [r6, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 80056f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056f6:	440a      	add	r2, r1
 80056f8:	b292      	uxth	r2, r2
 80056fa:	3a01      	subs	r2, #1
 80056fc:	80b2      	strh	r2, [r6, #4]
 80056fe:	e74e      	b.n	800559e <lv_obj_get_scrollbar_area+0x1f6>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8005700:	2000      	movs	r0, #0
 8005702:	f005 fba3 	bl	800ae4c <lv_disp_get_dpi>
 8005706:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800570a:	0043      	lsls	r3, r0, #1
 800570c:	3350      	adds	r3, #80	; 0x50
 800570e:	4ab7      	ldr	r2, [pc, #732]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 8005710:	fb82 1203 	smull	r1, r2, r2, r3
 8005714:	17db      	asrs	r3, r3, #31
 8005716:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800571a:	e75a      	b.n	80055d2 <lv_obj_get_scrollbar_area+0x22a>
 800571c:	2000      	movs	r0, #0
 800571e:	f005 fb95 	bl	800ae4c <lv_disp_get_dpi>
 8005722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005726:	0043      	lsls	r3, r0, #1
 8005728:	2bef      	cmp	r3, #239	; 0xef
 800572a:	dc02      	bgt.n	8005732 <lv_obj_get_scrollbar_area+0x38a>
 800572c:	f04f 0b01 	mov.w	fp, #1
 8005730:	e752      	b.n	80055d8 <lv_obj_get_scrollbar_area+0x230>
 8005732:	2000      	movs	r0, #0
 8005734:	f005 fb8a 	bl	800ae4c <lv_disp_get_dpi>
 8005738:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800573c:	0043      	lsls	r3, r0, #1
 800573e:	3350      	adds	r3, #80	; 0x50
 8005740:	4aaa      	ldr	r2, [pc, #680]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 8005742:	fb82 1203 	smull	r1, r2, r2, r3
 8005746:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800574a:	ebcb 1ba2 	rsb	fp, fp, r2, asr #6
 800574e:	fa0f fb8b 	sxth.w	fp, fp
 8005752:	e741      	b.n	80055d8 <lv_obj_get_scrollbar_area+0x230>
            ver_area->y1 = obj->coords.y1 + top_space;
 8005754:	8ae3      	ldrh	r3, [r4, #22]
 8005756:	4418      	add	r0, r3
 8005758:	8070      	strh	r0, [r6, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800575a:	8b63      	ldrh	r3, [r4, #26]
 800575c:	eba3 0308 	sub.w	r3, r3, r8
 8005760:	b29b      	uxth	r3, r3
 8005762:	1b5b      	subs	r3, r3, r5
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	80f3      	strh	r3, [r6, #6]
    lv_coord_t content_w = obj_w + sl + sr;
 800576a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 800576e:	9d05      	ldr	r5, [sp, #20]
 8005770:	4445      	add	r5, r8
 8005772:	b2ad      	uxth	r5, r5
 8005774:	9b06      	ldr	r3, [sp, #24]
 8005776:	441d      	add	r5, r3
 8005778:	fa1f fa85 	uxth.w	sl, r5
 800577c:	b22d      	sxth	r5, r5
    if(hor_draw && content_w) {
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f43f ae32 	beq.w	80053ea <lv_obj_get_scrollbar_area+0x42>
 8005786:	2d00      	cmp	r5, #0
 8005788:	f43f ae2f 	beq.w	80053ea <lv_obj_get_scrollbar_area+0x42>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800578c:	8b60      	ldrh	r0, [r4, #26]
 800578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005790:	1ac0      	subs	r0, r0, r3
 8005792:	b283      	uxth	r3, r0
 8005794:	80f8      	strh	r0, [r7, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8005796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	3301      	adds	r3, #1
 800579e:	807b      	strh	r3, [r7, #2]
        hor_area->x1 = obj->coords.x1;
 80057a0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80057a4:	803b      	strh	r3, [r7, #0]
        hor_area->x2 = obj->coords.x2;
 80057a6:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 80057aa:	80bb      	strh	r3, [r7, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 80057ac:	9b08      	ldr	r3, [sp, #32]
 80057ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057b0:	1a98      	subs	r0, r3, r2
 80057b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057b4:	1a80      	subs	r0, r0, r2
 80057b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057b8:	4693      	mov	fp, r2
 80057ba:	1a80      	subs	r0, r0, r2
 80057bc:	fb03 f000 	mul.w	r0, r3, r0
 80057c0:	fb90 f5f5 	sdiv	r5, r0, r5
 80057c4:	b22d      	sxth	r5, r5
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 80057c6:	462e      	mov	r6, r5
 80057c8:	2000      	movs	r0, #0
 80057ca:	f005 fb3f 	bl	800ae4c <lv_disp_get_dpi>
 80057ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057d2:	0040      	lsls	r0, r0, #1
 80057d4:	28ef      	cmp	r0, #239	; 0xef
 80057d6:	f300 80c8 	bgt.w	800596a <lv_obj_get_scrollbar_area+0x5c2>
 80057da:	2301      	movs	r3, #1
 80057dc:	429e      	cmp	r6, r3
 80057de:	f340 80d2 	ble.w	8005986 <lv_obj_get_scrollbar_area+0x5de>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 80057e2:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 80057e6:	eba8 0300 	sub.w	r3, r8, r0
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 80057f0:	1b9b      	subs	r3, r3, r6
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 80057f8:	eba3 0309 	sub.w	r3, r3, r9
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	b2ad      	uxth	r5, r5
 8005800:	1b5b      	subs	r3, r3, r5
 8005802:	b29a      	uxth	r2, r3
 8005804:	b21b      	sxth	r3, r3
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 8005806:	ebaa 0808 	sub.w	r8, sl, r8
 800580a:	fa0f f888 	sxth.w	r8, r8
        if(scroll_w <= 0) {
 800580e:	f1b8 0f00 	cmp.w	r8, #0
 8005812:	f340 80d1 	ble.w	80059b8 <lv_obj_get_scrollbar_area+0x610>
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 8005816:	9906      	ldr	r1, [sp, #24]
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	fb93 f3f8 	sdiv	r3, r3, r8
            sb_x = rem - sb_x;
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	b29b      	uxth	r3, r3
            if(rtl) {
 8005824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005826:	2a01      	cmp	r2, #1
 8005828:	f000 80e2 	beq.w	80059f0 <lv_obj_get_scrollbar_area+0x648>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800582c:	8aa2      	ldrh	r2, [r4, #20]
 800582e:	4413      	add	r3, r2
 8005830:	b29a      	uxth	r2, r3
 8005832:	4402      	add	r2, r0
 8005834:	b293      	uxth	r3, r2
 8005836:	b212      	sxth	r2, r2
 8005838:	803a      	strh	r2, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800583a:	442b      	add	r3, r5
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	80bb      	strh	r3, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 8005842:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8005846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005848:	440b      	add	r3, r1
 800584a:	429a      	cmp	r2, r3
 800584c:	f2c0 815c 	blt.w	8005b08 <lv_obj_get_scrollbar_area+0x760>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 8005850:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005854:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8005858:	eba2 030b 	sub.w	r3, r2, fp
 800585c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800585e:	1a1b      	subs	r3, r3, r0
 8005860:	4299      	cmp	r1, r3
 8005862:	f77f adc2 	ble.w	80053ea <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 8005866:	b294      	uxth	r4, r2
 8005868:	eba4 0409 	sub.w	r4, r4, r9
 800586c:	b2a4      	uxth	r4, r4
 800586e:	1ba4      	subs	r4, r4, r6
 8005870:	b224      	sxth	r4, r4
 8005872:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8005874:	2000      	movs	r0, #0
 8005876:	f005 fae9 	bl	800ae4c <lv_disp_get_dpi>
 800587a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800587e:	0043      	lsls	r3, r0, #1
 8005880:	2bef      	cmp	r3, #239	; 0xef
 8005882:	f300 817b 	bgt.w	8005b7c <lv_obj_get_scrollbar_area+0x7d4>
 8005886:	2301      	movs	r3, #1
 8005888:	1ae3      	subs	r3, r4, r3
 800588a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800588e:	4293      	cmp	r3, r2
 8005890:	f6bf adab 	bge.w	80053ea <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8005894:	88bc      	ldrh	r4, [r7, #4]
 8005896:	2000      	movs	r0, #0
 8005898:	f005 fad8 	bl	800ae4c <lv_disp_get_dpi>
 800589c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80058a0:	0043      	lsls	r3, r0, #1
 80058a2:	2bef      	cmp	r3, #239	; 0xef
 80058a4:	f300 8178 	bgt.w	8005b98 <lv_obj_get_scrollbar_area+0x7f0>
 80058a8:	2301      	movs	r3, #1
 80058aa:	1ae3      	subs	r3, r4, r3
 80058ac:	803b      	strh	r3, [r7, #0]
 80058ae:	e59c      	b.n	80053ea <lv_obj_get_scrollbar_area+0x42>
                ver_area->y1 = obj->coords.y1 + top_space;
 80058b0:	b289      	uxth	r1, r1
 80058b2:	4408      	add	r0, r1
 80058b4:	fa0f f980 	sxth.w	r9, r0
 80058b8:	f8a6 9002 	strh.w	r9, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 80058bc:	2000      	movs	r0, #0
 80058be:	f005 fac5 	bl	800ae4c <lv_disp_get_dpi>
 80058c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80058c6:	0043      	lsls	r3, r0, #1
 80058c8:	2bef      	cmp	r3, #239	; 0xef
 80058ca:	dc14      	bgt.n	80058f6 <lv_obj_get_scrollbar_area+0x54e>
 80058cc:	2301      	movs	r3, #1
 80058ce:	444b      	add	r3, r9
 80058d0:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	f77f aeb5 	ble.w	8005644 <lv_obj_get_scrollbar_area+0x29c>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 80058da:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 80058de:	2000      	movs	r0, #0
 80058e0:	f005 fab4 	bl	800ae4c <lv_disp_get_dpi>
 80058e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80058e8:	0043      	lsls	r3, r0, #1
 80058ea:	2bef      	cmp	r3, #239	; 0xef
 80058ec:	dc11      	bgt.n	8005912 <lv_obj_get_scrollbar_area+0x56a>
 80058ee:	2301      	movs	r3, #1
 80058f0:	444b      	add	r3, r9
 80058f2:	80f3      	strh	r3, [r6, #6]
 80058f4:	e6a6      	b.n	8005644 <lv_obj_get_scrollbar_area+0x29c>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 80058f6:	2000      	movs	r0, #0
 80058f8:	f005 faa8 	bl	800ae4c <lv_disp_get_dpi>
 80058fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005900:	0043      	lsls	r3, r0, #1
 8005902:	3350      	adds	r3, #80	; 0x50
 8005904:	4a39      	ldr	r2, [pc, #228]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 8005906:	fb82 1203 	smull	r1, r2, r2, r3
 800590a:	17db      	asrs	r3, r3, #31
 800590c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005910:	e7dd      	b.n	80058ce <lv_obj_get_scrollbar_area+0x526>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8005912:	2000      	movs	r0, #0
 8005914:	f005 fa9a 	bl	800ae4c <lv_disp_get_dpi>
 8005918:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800591c:	0043      	lsls	r3, r0, #1
 800591e:	3350      	adds	r3, #80	; 0x50
 8005920:	4a32      	ldr	r2, [pc, #200]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 8005922:	fb82 1203 	smull	r1, r2, r2, r3
 8005926:	17db      	asrs	r3, r3, #31
 8005928:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800592c:	b29b      	uxth	r3, r3
 800592e:	e7df      	b.n	80058f0 <lv_obj_get_scrollbar_area+0x548>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 8005930:	2000      	movs	r0, #0
 8005932:	f005 fa8b 	bl	800ae4c <lv_disp_get_dpi>
 8005936:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800593a:	0043      	lsls	r3, r0, #1
 800593c:	3350      	adds	r3, #80	; 0x50
 800593e:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 8005940:	fb82 1203 	smull	r1, r2, r2, r3
 8005944:	17db      	asrs	r3, r3, #31
 8005946:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800594a:	e697      	b.n	800567c <lv_obj_get_scrollbar_area+0x2d4>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800594c:	2000      	movs	r0, #0
 800594e:	f005 fa7d 	bl	800ae4c <lv_disp_get_dpi>
 8005952:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005956:	0043      	lsls	r3, r0, #1
 8005958:	3350      	adds	r3, #80	; 0x50
 800595a:	4a24      	ldr	r2, [pc, #144]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 800595c:	fb82 1203 	smull	r1, r2, r2, r3
 8005960:	17db      	asrs	r3, r3, #31
 8005962:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005966:	b29b      	uxth	r3, r3
 8005968:	e698      	b.n	800569c <lv_obj_get_scrollbar_area+0x2f4>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800596a:	2000      	movs	r0, #0
 800596c:	f005 fa6e 	bl	800ae4c <lv_disp_get_dpi>
 8005970:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005974:	0043      	lsls	r3, r0, #1
 8005976:	3350      	adds	r3, #80	; 0x50
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 800597a:	fb82 1203 	smull	r1, r2, r2, r3
 800597e:	17db      	asrs	r3, r3, #31
 8005980:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005984:	e72a      	b.n	80057dc <lv_obj_get_scrollbar_area+0x434>
 8005986:	2000      	movs	r0, #0
 8005988:	f005 fa60 	bl	800ae4c <lv_disp_get_dpi>
 800598c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005990:	0043      	lsls	r3, r0, #1
 8005992:	2bef      	cmp	r3, #239	; 0xef
 8005994:	dc01      	bgt.n	800599a <lv_obj_get_scrollbar_area+0x5f2>
 8005996:	2501      	movs	r5, #1
 8005998:	e723      	b.n	80057e2 <lv_obj_get_scrollbar_area+0x43a>
 800599a:	2000      	movs	r0, #0
 800599c:	f005 fa56 	bl	800ae4c <lv_disp_get_dpi>
 80059a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059a4:	0043      	lsls	r3, r0, #1
 80059a6:	3350      	adds	r3, #80	; 0x50
 80059a8:	4a10      	ldr	r2, [pc, #64]	; (80059ec <lv_obj_get_scrollbar_area+0x644>)
 80059aa:	fb82 1203 	smull	r1, r2, r2, r3
 80059ae:	17dd      	asrs	r5, r3, #31
 80059b0:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
 80059b4:	b22d      	sxth	r5, r5
 80059b6:	e714      	b.n	80057e2 <lv_obj_get_scrollbar_area+0x43a>
            if(rtl) {
 80059b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d00b      	beq.n	80059d6 <lv_obj_get_scrollbar_area+0x62e>
                hor_area->x1 = obj->coords.x1 + left_space;
 80059be:	8aa3      	ldrh	r3, [r4, #20]
 80059c0:	4418      	add	r0, r3
 80059c2:	8038      	strh	r0, [r7, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 80059c4:	8b23      	ldrh	r3, [r4, #24]
 80059c6:	1b9b      	subs	r3, r3, r6
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	eba3 0309 	sub.w	r3, r3, r9
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	80bb      	strh	r3, [r7, #4]
 80059d4:	e509      	b.n	80053ea <lv_obj_get_scrollbar_area+0x42>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 80059d6:	8aa3      	ldrh	r3, [r4, #20]
 80059d8:	4403      	add	r3, r0
 80059da:	b29b      	uxth	r3, r3
 80059dc:	444b      	add	r3, r9
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	803b      	strh	r3, [r7, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 80059e4:	8b23      	ldrh	r3, [r4, #24]
 80059e6:	1b9e      	subs	r6, r3, r6
 80059e8:	80be      	strh	r6, [r7, #4]
 80059ea:	e4fe      	b.n	80053ea <lv_obj_get_scrollbar_area+0x42>
 80059ec:	66666667 	.word	0x66666667
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 80059f0:	8aa2      	ldrh	r2, [r4, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4403      	add	r3, r0
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	444b      	add	r3, r9
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	b21b      	sxth	r3, r3
 8005a00:	803b      	strh	r3, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8005a02:	442a      	add	r2, r5
 8005a04:	b292      	uxth	r2, r2
 8005a06:	3a01      	subs	r2, #1
 8005a08:	80ba      	strh	r2, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 8005a0a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8005a0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005a10:	4411      	add	r1, r2
 8005a12:	448b      	add	fp, r1
 8005a14:	455b      	cmp	r3, fp
 8005a16:	db28      	blt.n	8005a6a <lv_obj_get_scrollbar_area+0x6c2>
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 8005a18:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a1c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8005a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a22:	1a9a      	subs	r2, r3, r2
 8005a24:	4291      	cmp	r1, r2
 8005a26:	f77f ace0 	ble.w	80053ea <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - right_space;
 8005a2a:	b29c      	uxth	r4, r3
 8005a2c:	1ba4      	subs	r4, r4, r6
 8005a2e:	b224      	sxth	r4, r4
 8005a30:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8005a32:	2000      	movs	r0, #0
 8005a34:	f005 fa0a 	bl	800ae4c <lv_disp_get_dpi>
 8005a38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a3c:	0043      	lsls	r3, r0, #1
 8005a3e:	2bef      	cmp	r3, #239	; 0xef
 8005a40:	dc4b      	bgt.n	8005ada <lv_obj_get_scrollbar_area+0x732>
 8005a42:	2301      	movs	r3, #1
 8005a44:	1ae3      	subs	r3, r4, r3
 8005a46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	f6bf accd 	bge.w	80053ea <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8005a50:	88bc      	ldrh	r4, [r7, #4]
 8005a52:	2000      	movs	r0, #0
 8005a54:	f005 f9fa 	bl	800ae4c <lv_disp_get_dpi>
 8005a58:	230a      	movs	r3, #10
 8005a5a:	fb00 f303 	mul.w	r3, r0, r3
 8005a5e:	2bef      	cmp	r3, #239	; 0xef
 8005a60:	dc46      	bgt.n	8005af0 <lv_obj_get_scrollbar_area+0x748>
 8005a62:	2301      	movs	r3, #1
 8005a64:	1ae3      	subs	r3, r4, r3
 8005a66:	803b      	strh	r3, [r7, #0]
 8005a68:	e4bf      	b.n	80053ea <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 8005a6a:	b295      	uxth	r5, r2
 8005a6c:	4405      	add	r5, r0
 8005a6e:	b2ad      	uxth	r5, r5
 8005a70:	444d      	add	r5, r9
 8005a72:	b22d      	sxth	r5, r5
 8005a74:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8005a76:	2000      	movs	r0, #0
 8005a78:	f005 f9e8 	bl	800ae4c <lv_disp_get_dpi>
 8005a7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a80:	0043      	lsls	r3, r0, #1
 8005a82:	2bef      	cmp	r3, #239	; 0xef
 8005a84:	dc12      	bgt.n	8005aac <lv_obj_get_scrollbar_area+0x704>
 8005a86:	2301      	movs	r3, #1
 8005a88:	442b      	add	r3, r5
 8005a8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	ddc2      	ble.n	8005a18 <lv_obj_get_scrollbar_area+0x670>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8005a92:	883d      	ldrh	r5, [r7, #0]
 8005a94:	2000      	movs	r0, #0
 8005a96:	f005 f9d9 	bl	800ae4c <lv_disp_get_dpi>
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	fb00 f303 	mul.w	r3, r0, r3
 8005aa0:	2bef      	cmp	r3, #239	; 0xef
 8005aa2:	dc0e      	bgt.n	8005ac2 <lv_obj_get_scrollbar_area+0x71a>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	442b      	add	r3, r5
 8005aa8:	80bb      	strh	r3, [r7, #4]
 8005aaa:	e7b5      	b.n	8005a18 <lv_obj_get_scrollbar_area+0x670>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8005aac:	2000      	movs	r0, #0
 8005aae:	f005 f9cd 	bl	800ae4c <lv_disp_get_dpi>
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	fb02 f300 	mul.w	r3, r2, r0
 8005ab8:	3350      	adds	r3, #80	; 0x50
 8005aba:	22a0      	movs	r2, #160	; 0xa0
 8005abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac0:	e7e2      	b.n	8005a88 <lv_obj_get_scrollbar_area+0x6e0>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f005 f9c2 	bl	800ae4c <lv_disp_get_dpi>
 8005ac8:	220a      	movs	r2, #10
 8005aca:	fb02 f300 	mul.w	r3, r2, r0
 8005ace:	3350      	adds	r3, #80	; 0x50
 8005ad0:	22a0      	movs	r2, #160	; 0xa0
 8005ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	e7e5      	b.n	8005aa6 <lv_obj_get_scrollbar_area+0x6fe>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8005ada:	2000      	movs	r0, #0
 8005adc:	f005 f9b6 	bl	800ae4c <lv_disp_get_dpi>
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	fb02 f300 	mul.w	r3, r2, r0
 8005ae6:	3350      	adds	r3, #80	; 0x50
 8005ae8:	22a0      	movs	r2, #160	; 0xa0
 8005aea:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aee:	e7a9      	b.n	8005a44 <lv_obj_get_scrollbar_area+0x69c>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8005af0:	2000      	movs	r0, #0
 8005af2:	f005 f9ab 	bl	800ae4c <lv_disp_get_dpi>
 8005af6:	220a      	movs	r2, #10
 8005af8:	fb02 f300 	mul.w	r3, r2, r0
 8005afc:	3350      	adds	r3, #80	; 0x50
 8005afe:	22a0      	movs	r2, #160	; 0xa0
 8005b00:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	e7ad      	b.n	8005a64 <lv_obj_get_scrollbar_area+0x6bc>
                    hor_area->x1 = obj->coords.x1 + left_space;
 8005b08:	b289      	uxth	r1, r1
 8005b0a:	4408      	add	r0, r1
 8005b0c:	b205      	sxth	r5, r0
 8005b0e:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8005b10:	2000      	movs	r0, #0
 8005b12:	f005 f99b 	bl	800ae4c <lv_disp_get_dpi>
 8005b16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b1a:	0043      	lsls	r3, r0, #1
 8005b1c:	2bef      	cmp	r3, #239	; 0xef
 8005b1e:	dc13      	bgt.n	8005b48 <lv_obj_get_scrollbar_area+0x7a0>
 8005b20:	2301      	movs	r3, #1
 8005b22:	442b      	add	r3, r5
 8005b24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	f77f ae91 	ble.w	8005850 <lv_obj_get_scrollbar_area+0x4a8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8005b2e:	883d      	ldrh	r5, [r7, #0]
 8005b30:	2000      	movs	r0, #0
 8005b32:	f005 f98b 	bl	800ae4c <lv_disp_get_dpi>
 8005b36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b3a:	0043      	lsls	r3, r0, #1
 8005b3c:	2bef      	cmp	r3, #239	; 0xef
 8005b3e:	dc11      	bgt.n	8005b64 <lv_obj_get_scrollbar_area+0x7bc>
 8005b40:	2301      	movs	r3, #1
 8005b42:	442b      	add	r3, r5
 8005b44:	80bb      	strh	r3, [r7, #4]
 8005b46:	e683      	b.n	8005850 <lv_obj_get_scrollbar_area+0x4a8>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f005 f97f 	bl	800ae4c <lv_disp_get_dpi>
 8005b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b52:	0043      	lsls	r3, r0, #1
 8005b54:	3350      	adds	r3, #80	; 0x50
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <lv_obj_get_scrollbar_area+0x808>)
 8005b58:	fb82 1203 	smull	r1, r2, r2, r3
 8005b5c:	17db      	asrs	r3, r3, #31
 8005b5e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005b62:	e7de      	b.n	8005b22 <lv_obj_get_scrollbar_area+0x77a>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8005b64:	2000      	movs	r0, #0
 8005b66:	f005 f971 	bl	800ae4c <lv_disp_get_dpi>
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	fb02 f300 	mul.w	r3, r2, r0
 8005b70:	3350      	adds	r3, #80	; 0x50
 8005b72:	22a0      	movs	r2, #160	; 0xa0
 8005b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	e7e2      	b.n	8005b42 <lv_obj_get_scrollbar_area+0x79a>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f005 f965 	bl	800ae4c <lv_disp_get_dpi>
 8005b82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b86:	0043      	lsls	r3, r0, #1
 8005b88:	3350      	adds	r3, #80	; 0x50
 8005b8a:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <lv_obj_get_scrollbar_area+0x808>)
 8005b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8005b90:	17db      	asrs	r3, r3, #31
 8005b92:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005b96:	e677      	b.n	8005888 <lv_obj_get_scrollbar_area+0x4e0>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f005 f957 	bl	800ae4c <lv_disp_get_dpi>
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	fb02 f300 	mul.w	r3, r2, r0
 8005ba4:	3350      	adds	r3, #80	; 0x50
 8005ba6:	22a0      	movs	r2, #160	; 0xa0
 8005ba8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	e67c      	b.n	80058aa <lv_obj_get_scrollbar_area+0x502>
 8005bb0:	66666667 	.word	0x66666667

08005bb4 <lv_obj_scrollbar_invalidate>:
{
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005bba:	466a      	mov	r2, sp
 8005bbc:	a902      	add	r1, sp, #8
 8005bbe:	f7ff fbf3 	bl	80053a8 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8005bc2:	a802      	add	r0, sp, #8
 8005bc4:	f005 fb9a 	bl	800b2fc <lv_area_get_size>
 8005bc8:	b918      	cbnz	r0, 8005bd2 <lv_obj_scrollbar_invalidate+0x1e>
 8005bca:	4668      	mov	r0, sp
 8005bcc:	f005 fb96 	bl	800b2fc <lv_area_get_size>
 8005bd0:	b138      	cbz	r0, 8005be2 <lv_obj_scrollbar_invalidate+0x2e>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8005bd2:	a802      	add	r0, sp, #8
 8005bd4:	f005 fb92 	bl	800b2fc <lv_area_get_size>
 8005bd8:	b928      	cbnz	r0, 8005be6 <lv_obj_scrollbar_invalidate+0x32>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8005bda:	4668      	mov	r0, sp
 8005bdc:	f005 fb8e 	bl	800b2fc <lv_area_get_size>
 8005be0:	b930      	cbnz	r0, 8005bf0 <lv_obj_scrollbar_invalidate+0x3c>
}
 8005be2:	b004      	add	sp, #16
 8005be4:	bd10      	pop	{r4, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8005be6:	a902      	add	r1, sp, #8
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7fe fa18 	bl	800401e <lv_obj_invalidate_area>
 8005bee:	e7f4      	b.n	8005bda <lv_obj_scrollbar_invalidate+0x26>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8005bf0:	4669      	mov	r1, sp
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f7fe fa13 	bl	800401e <lv_obj_invalidate_area>
 8005bf8:	e7f3      	b.n	8005be2 <lv_obj_scrollbar_invalidate+0x2e>

08005bfa <lv_obj_readjust_scroll>:
{
 8005bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	460d      	mov	r5, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 8005c00:	f7fe ff22 	bl	8004a48 <lv_obj_get_scroll_snap_y>
 8005c04:	b120      	cbz	r0, 8005c10 <lv_obj_readjust_scroll+0x16>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7fe ff16 	bl	8004a38 <lv_obj_get_scroll_snap_x>
 8005c0c:	b1b0      	cbz	r0, 8005c3c <lv_obj_readjust_scroll+0x42>
}
 8005c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7fe ff31 	bl	8004a78 <lv_obj_get_scroll_top>
 8005c16:	4606      	mov	r6, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7fe ff35 	bl	8004a88 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 8005c1e:	1e03      	subs	r3, r0, #0
 8005c20:	daf1      	bge.n	8005c06 <lv_obj_readjust_scroll+0xc>
 8005c22:	2e00      	cmp	r6, #0
 8005c24:	ddef      	ble.n	8005c06 <lv_obj_readjust_scroll+0xc>
            sb = LV_MIN(st, -sb);
 8005c26:	425a      	negs	r2, r3
 8005c28:	42b2      	cmp	r2, r6
 8005c2a:	bfa8      	it	ge
 8005c2c:	4632      	movge	r2, r6
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 8005c2e:	462b      	mov	r3, r5
 8005c30:	b212      	sxth	r2, r2
 8005c32:	2100      	movs	r1, #0
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7ff f89d 	bl	8004d74 <lv_obj_scroll_by>
 8005c3a:	e7e4      	b.n	8005c06 <lv_obj_readjust_scroll+0xc>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7fe ff7d 	bl	8004b3c <lv_obj_get_scroll_left>
 8005c42:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8005c44:	4620      	mov	r0, r4
 8005c46:	f7fe ffe9 	bl	8004c1c <lv_obj_get_scroll_right>
 8005c4a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005c4c:	2216      	movs	r2, #22
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fb49 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005c56:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005c58:	2801      	cmp	r0, #1
 8005c5a:	d00e      	beq.n	8005c7a <lv_obj_readjust_scroll+0x80>
            if(sr < 0 && sl > 0) {
 8005c5c:	2e00      	cmp	r6, #0
 8005c5e:	dad6      	bge.n	8005c0e <lv_obj_readjust_scroll+0x14>
 8005c60:	2f00      	cmp	r7, #0
 8005c62:	ddd4      	ble.n	8005c0e <lv_obj_readjust_scroll+0x14>
                sr = LV_MIN(sl, -sr);
 8005c64:	4271      	negs	r1, r6
 8005c66:	42b9      	cmp	r1, r7
 8005c68:	bfa8      	it	ge
 8005c6a:	4639      	movge	r1, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	2200      	movs	r2, #0
 8005c70:	b209      	sxth	r1, r1
 8005c72:	4620      	mov	r0, r4
 8005c74:	f7ff f87e 	bl	8004d74 <lv_obj_scroll_by>
 8005c78:	e7c9      	b.n	8005c0e <lv_obj_readjust_scroll+0x14>
            if(sl < 0 && sr > 0) {
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	dac7      	bge.n	8005c0e <lv_obj_readjust_scroll+0x14>
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	ddc5      	ble.n	8005c0e <lv_obj_readjust_scroll+0x14>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 8005c82:	462b      	mov	r3, r5
 8005c84:	2200      	movs	r2, #0
 8005c86:	4639      	mov	r1, r7
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7ff f873 	bl	8004d74 <lv_obj_scroll_by>
}
 8005c8e:	e7be      	b.n	8005c0e <lv_obj_readjust_scroll+0x14>

08005c90 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4606      	mov	r6, r0
 8005c96:	4689      	mov	r9, r1
 8005c98:	4692      	mov	sl, r2
 8005c9a:	4698      	mov	r8, r3
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8005c9c:	4827      	ldr	r0, [pc, #156]	; (8005d3c <trans_del+0xac>)
 8005c9e:	f006 f877 	bl	800bd90 <_lv_ll_get_tail>
 8005ca2:	4604      	mov	r4, r0
    bool removed = false;
 8005ca4:	2700      	movs	r7, #0
    while(tr != NULL) {
 8005ca6:	e007      	b.n	8005cb8 <trans_del+0x28>
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8005ca8:	88a3      	ldrh	r3, [r4, #4]
 8005caa:	4553      	cmp	r3, sl
 8005cac:	d032      	beq.n	8005d14 <trans_del+0x84>
 8005cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cb2:	459a      	cmp	sl, r3
 8005cb4:	d030      	beq.n	8005d18 <trans_del+0x88>

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
            lv_mem_free(tr);
            removed = true;
 8005cb6:	462c      	mov	r4, r5
    while(tr != NULL) {
 8005cb8:	2c00      	cmp	r4, #0
 8005cba:	d03c      	beq.n	8005d36 <trans_del+0xa6>
        if(tr == tr_limit) break;
 8005cbc:	4544      	cmp	r4, r8
 8005cbe:	d03a      	beq.n	8005d36 <trans_del+0xa6>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	481e      	ldr	r0, [pc, #120]	; (8005d3c <trans_del+0xac>)
 8005cc4:	f006 f86c 	bl	800bda0 <_lv_ll_get_prev>
 8005cc8:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	42b0      	cmp	r0, r6
 8005cce:	d1f2      	bne.n	8005cb6 <trans_del+0x26>
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	454b      	cmp	r3, r9
 8005cd4:	d0e8      	beq.n	8005ca8 <trans_del+0x18>
 8005cd6:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
 8005cda:	d1ec      	bne.n	8005cb6 <trans_del+0x26>
 8005cdc:	e7e4      	b.n	8005ca8 <trans_del+0x18>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 8005cde:	88a1      	ldrh	r1, [r4, #4]
 8005ce0:	5810      	ldr	r0, [r2, r0]
 8005ce2:	f006 fb91 	bl	800c408 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 8005ce6:	3701      	adds	r7, #1
 8005ce8:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8005cea:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8005cee:	42bb      	cmp	r3, r7
 8005cf0:	d914      	bls.n	8005d1c <trans_del+0x8c>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8005cf2:	68f2      	ldr	r2, [r6, #12]
 8005cf4:	00f8      	lsls	r0, r7, #3
 8005cf6:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
 8005cfa:	79d9      	ldrb	r1, [r3, #7]
 8005cfc:	f011 0f02 	tst.w	r1, #2
 8005d00:	d0f1      	beq.n	8005ce6 <trans_del+0x56>
 8005d02:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
 8005d06:	d0ea      	beq.n	8005cde <trans_del+0x4e>
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005d0e:	454b      	cmp	r3, r9
 8005d10:	d1e9      	bne.n	8005ce6 <trans_del+0x56>
 8005d12:	e7e4      	b.n	8005cde <trans_del+0x4e>
 8005d14:	2700      	movs	r7, #0
 8005d16:	e7e7      	b.n	8005ce8 <trans_del+0x58>
 8005d18:	2700      	movs	r7, #0
 8005d1a:	e7e5      	b.n	8005ce8 <trans_del+0x58>
            lv_anim_del(tr, NULL);
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f005 f9f6 	bl	800b110 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8005d24:	4621      	mov	r1, r4
 8005d26:	4805      	ldr	r0, [pc, #20]	; (8005d3c <trans_del+0xac>)
 8005d28:	f006 f870 	bl	800be0c <_lv_ll_remove>
            lv_mem_free(tr);
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f006 f989 	bl	800c044 <lv_mem_free>
            removed = true;
 8005d32:	2701      	movs	r7, #1
 8005d34:	e7bf      	b.n	8005cb6 <trans_del+0x26>

        }
        tr = tr_prev;
    }
    return removed;
}
 8005d36:	4638      	mov	r0, r7
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	20000bfc 	.word	0x20000bfc

08005d40 <refresh_children_style>:
{
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	4607      	mov	r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005d44:	f000 ff37 	bl	8006bb6 <lv_obj_get_child_cnt>
 8005d48:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	e012      	b.n	8005d74 <refresh_children_style+0x34>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        lv_obj_invalidate(child);
 8005d56:	4620      	mov	r0, r4
 8005d58:	f7fe f989 	bl	800406e <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	212a      	movs	r1, #42	; 0x2a
 8005d60:	4620      	mov	r0, r4
 8005d62:	f7fb ffd3 	bl	8001d0c <lv_event_send>
        lv_obj_invalidate(child);
 8005d66:	4620      	mov	r0, r4
 8005d68:	f7fe f981 	bl	800406e <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7ff ffe7 	bl	8005d40 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 8005d72:	3501      	adds	r5, #1
 8005d74:	42b5      	cmp	r5, r6
 8005d76:	d3ea      	bcc.n	8005d4e <refresh_children_style+0xe>
}
 8005d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d7a <get_local_style>:
{
 8005d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8005d82:	2200      	movs	r2, #0
 8005d84:	e000      	b.n	8005d88 <get_local_style+0xe>
 8005d86:	3201      	adds	r2, #1
 8005d88:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8005d8a:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d90d      	bls.n	8005dae <get_local_style+0x34>
        if(obj->styles[i].is_local &&
 8005d92:	68e3      	ldr	r3, [r4, #12]
 8005d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d98:	79d9      	ldrb	r1, [r3, #7]
 8005d9a:	f011 0f01 	tst.w	r1, #1
 8005d9e:	d0f2      	beq.n	8005d86 <get_local_style+0xc>
           obj->styles[i].selector == selector) {
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 8005da6:	42a9      	cmp	r1, r5
 8005da8:	d1ed      	bne.n	8005d86 <get_local_style+0xc>
            return obj->styles[i].style;
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	e046      	b.n	8005e3c <get_local_style+0xc2>
    obj->style_cnt++;
 8005dae:	3301      	adds	r3, #1
 8005db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db4:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8005db6:	f363 1209 	bfi	r2, r3, #4, #6
 8005dba:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8005dbc:	00d9      	lsls	r1, r3, #3
 8005dbe:	68e0      	ldr	r0, [r4, #12]
 8005dc0:	f006 f95e 	bl	800c080 <lv_mem_realloc>
 8005dc4:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->styles);
 8005dc6:	b1b0      	cbz	r0, 8005df6 <get_local_style+0x7c>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005dc8:	8c66      	ldrh	r6, [r4, #34]	; 0x22
 8005dca:	f3c6 1605 	ubfx	r6, r6, #4, #6
 8005dce:	3e01      	subs	r6, #1
 8005dd0:	b196      	cbz	r6, 8005df8 <get_local_style+0x7e>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 8005dd2:	68e2      	ldr	r2, [r4, #12]
 8005dd4:	f106 5300 	add.w	r3, r6, #536870912	; 0x20000000
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005dde:	79d9      	ldrb	r1, [r3, #7]
 8005de0:	f011 0f03 	tst.w	r1, #3
 8005de4:	d108      	bne.n	8005df8 <get_local_style+0x7e>
        obj->styles[i] = obj->styles[i - 1];
 8005de6:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8005dea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005dee:	e882 0003 	stmia.w	r2, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005df2:	3e01      	subs	r6, #1
 8005df4:	e7ec      	b.n	8005dd0 <get_local_style+0x56>
    LV_ASSERT_MALLOC(obj->styles);
 8005df6:	e7fe      	b.n	8005df6 <get_local_style+0x7c>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8005df8:	68e0      	ldr	r0, [r4, #12]
 8005dfa:	00f7      	lsls	r7, r6, #3
 8005dfc:	2108      	movs	r1, #8
 8005dfe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8005e02:	f006 fa7e 	bl	800c302 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 8005e06:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005e0a:	2008      	movs	r0, #8
 8005e0c:	f006 f8fc 	bl	800c008 <lv_mem_alloc>
 8005e10:	f848 0036 	str.w	r0, [r8, r6, lsl #3]
    lv_style_init(obj->styles[i].style);
 8005e14:	68e3      	ldr	r3, [r4, #12]
 8005e16:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
 8005e1a:	f006 fa9f 	bl	800c35c <lv_style_init>
    obj->styles[i].is_local = 1;
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	443b      	add	r3, r7
 8005e22:	79da      	ldrb	r2, [r3, #7]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 8005e2a:	68e3      	ldr	r3, [r4, #12]
 8005e2c:	443b      	add	r3, r7
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	f365 0217 	bfi	r2, r5, #0, #24
 8005e34:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
}
 8005e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e40 <get_trans_style>:
{
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8005e46:	2000      	movs	r0, #0
 8005e48:	e000      	b.n	8005e4c <get_trans_style+0xc>
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8005e4e:	f3c2 1205 	ubfx	r2, r2, #4, #6
 8005e52:	4282      	cmp	r2, r0
 8005e54:	d90b      	bls.n	8005e6e <get_trans_style+0x2e>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8005e56:	68e3      	ldr	r3, [r4, #12]
 8005e58:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005e5c:	79d9      	ldrb	r1, [r3, #7]
 8005e5e:	f011 0f02 	tst.w	r1, #2
 8005e62:	d0f2      	beq.n	8005e4a <get_trans_style+0xa>
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005e6a:	42ab      	cmp	r3, r5
 8005e6c:	d1ed      	bne.n	8005e4a <get_trans_style+0xa>
    if(i != obj->style_cnt) return &obj->styles[i];
 8005e6e:	4282      	cmp	r2, r0
 8005e70:	d003      	beq.n	8005e7a <get_trans_style+0x3a>
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
    obj->style_cnt++;
 8005e7a:	3201      	adds	r2, #1
 8005e7c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005e80:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8005e82:	f362 1309 	bfi	r3, r2, #4, #6
 8005e86:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8005e88:	00d1      	lsls	r1, r2, #3
 8005e8a:	68e0      	ldr	r0, [r4, #12]
 8005e8c:	f006 f8f8 	bl	800c080 <lv_mem_realloc>
 8005e90:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005e92:	8c66      	ldrh	r6, [r4, #34]	; 0x22
 8005e94:	f3c6 1605 	ubfx	r6, r6, #4, #6
 8005e98:	3e01      	subs	r6, #1
 8005e9a:	e00c      	b.n	8005eb6 <get_trans_style+0x76>
        obj->styles[i] = obj->styles[i - 1];
 8005e9c:	68e2      	ldr	r2, [r4, #12]
 8005e9e:	f106 5300 	add.w	r3, r6, #536870912	; 0x20000000
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ea8:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8005eac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005eb0:	e882 0003 	stmia.w	r2, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005eb4:	3e01      	subs	r6, #1
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	d1f0      	bne.n	8005e9c <get_trans_style+0x5c>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 8005eba:	2108      	movs	r1, #8
 8005ebc:	68e0      	ldr	r0, [r4, #12]
 8005ebe:	f006 fa20 	bl	800c302 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8005ec2:	68e6      	ldr	r6, [r4, #12]
 8005ec4:	2008      	movs	r0, #8
 8005ec6:	f006 f89f 	bl	800c008 <lv_mem_alloc>
 8005eca:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 8005ecc:	68e3      	ldr	r3, [r4, #12]
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	f006 fa44 	bl	800c35c <lv_style_init>
    obj->styles[0].is_trans = 1;
 8005ed4:	68e2      	ldr	r2, [r4, #12]
 8005ed6:	79d3      	ldrb	r3, [r2, #7]
 8005ed8:	f043 0302 	orr.w	r3, r3, #2
 8005edc:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 8005ede:	68e3      	ldr	r3, [r4, #12]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	f365 0217 	bfi	r2, r5, #0, #24
 8005ee6:	605a      	str	r2, [r3, #4]
    return &obj->styles[0];
 8005ee8:	68e0      	ldr	r0, [r4, #12]
 8005eea:	e7c5      	b.n	8005e78 <get_trans_style+0x38>

08005eec <_lv_obj_style_init>:
{
 8005eec:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8005eee:	2114      	movs	r1, #20
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <_lv_obj_style_init+0xc>)
 8005ef2:	f005 ff03 	bl	800bcfc <_lv_ll_init>
}
 8005ef6:	bd08      	pop	{r3, pc}
 8005ef8:	20000bfc 	.word	0x20000bfc

08005efc <lv_obj_enable_style_refresh>:
    style_refr = en;
 8005efc:	4b01      	ldr	r3, [pc, #4]	; (8005f04 <lv_obj_enable_style_refresh+0x8>)
 8005efe:	7018      	strb	r0, [r3, #0]
}
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000024 	.word	0x20000024

08005f08 <lv_obj_get_local_style_prop>:
{
 8005f08:	b510      	push	{r4, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8005f0a:	f04f 0e00 	mov.w	lr, #0
 8005f0e:	e001      	b.n	8005f14 <lv_obj_get_local_style_prop+0xc>
 8005f10:	f10e 0e01 	add.w	lr, lr, #1
 8005f14:	f8b0 c022 	ldrh.w	ip, [r0, #34]	; 0x22
 8005f18:	f3cc 1c05 	ubfx	ip, ip, #4, #6
 8005f1c:	45f4      	cmp	ip, lr
 8005f1e:	d912      	bls.n	8005f46 <lv_obj_get_local_style_prop+0x3e>
        if(obj->styles[i].is_local &&
 8005f20:	68c4      	ldr	r4, [r0, #12]
 8005f22:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 8005f26:	f89c 4007 	ldrb.w	r4, [ip, #7]
 8005f2a:	f014 0f01 	tst.w	r4, #1
 8005f2e:	d0ef      	beq.n	8005f10 <lv_obj_get_local_style_prop+0x8>
           obj->styles[i].selector == selector) {
 8005f30:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005f34:	f3c4 0417 	ubfx	r4, r4, #0, #24
        if(obj->styles[i].is_local &&
 8005f38:	429c      	cmp	r4, r3
 8005f3a:	d1e9      	bne.n	8005f10 <lv_obj_get_local_style_prop+0x8>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8005f3c:	f8dc 0000 	ldr.w	r0, [ip]
 8005f40:	f006 fb22 	bl	800c588 <lv_style_get_prop>
 8005f44:	e000      	b.n	8005f48 <lv_obj_get_local_style_prop+0x40>
    return LV_STYLE_RES_NOT_FOUND;
 8005f46:	2000      	movs	r0, #0
}
 8005f48:	bd10      	pop	{r4, pc}

08005f4a <lv_obj_style_get_selector_state>:
}
 8005f4a:	b280      	uxth	r0, r0
 8005f4c:	4770      	bx	lr

08005f4e <_lv_obj_style_state_compare>:
{
 8005f4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	4606      	mov	r6, r0
 8005f56:	4688      	mov	r8, r1
 8005f58:	4617      	mov	r7, r2
    for(i = 0; i < obj->style_cnt; i++) {
 8005f5a:	2500      	movs	r5, #0
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 8005f5c:	46a9      	mov	r9, r5
    for(i = 0; i < obj->style_cnt; i++) {
 8005f5e:	e010      	b.n	8005f82 <_lv_obj_style_state_compare+0x34>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 8005f60:	f04f 0903 	mov.w	r9, #3
}
 8005f64:	4648      	mov	r0, r9
 8005f66:	b002      	add	sp, #8
 8005f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005f6c:	aa01      	add	r2, sp, #4
 8005f6e:	216a      	movs	r1, #106	; 0x6a
 8005f70:	4620      	mov	r0, r4
 8005f72:	f006 fb09 	bl	800c588 <lv_style_get_prop>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f000 80b4 	beq.w	80060e4 <_lv_obj_style_state_compare+0x196>
 8005f7c:	f04f 0902 	mov.w	r9, #2
    for(i = 0; i < obj->style_cnt; i++) {
 8005f80:	3501      	adds	r5, #1
 8005f82:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8005f84:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8005f88:	42ab      	cmp	r3, r5
 8005f8a:	d9eb      	bls.n	8005f64 <_lv_obj_style_state_compare+0x16>
        if(obj->styles[i].is_trans) continue;
 8005f8c:	68f4      	ldr	r4, [r6, #12]
 8005f8e:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 8005f92:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8005f96:	79da      	ldrb	r2, [r3, #7]
 8005f98:	f012 0f02 	tst.w	r2, #2
 8005f9c:	d1f0      	bne.n	8005f80 <_lv_obj_style_state_compare+0x32>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8005f9e:	6858      	ldr	r0, [r3, #4]
 8005fa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005fa4:	f7ff ffd1 	bl	8005f4a <lv_obj_style_get_selector_state>
        bool valid1 = state_act & (~state1) ? false : true;
 8005fa8:	ea30 0308 	bics.w	r3, r0, r8
 8005fac:	bf0c      	ite	eq
 8005fae:	2201      	moveq	r2, #1
 8005fb0:	2200      	movne	r2, #0
        bool valid2 = state_act & (~state2) ? false : true;
 8005fb2:	ea30 0307 	bics.w	r3, r0, r7
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
        if(valid1 != valid2) {
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d0df      	beq.n	8005f80 <_lv_obj_style_state_compare+0x32>
            lv_style_t * style = obj->styles[i].style;
 8005fc0:	f854 400a 	ldr.w	r4, [r4, sl]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 8005fc4:	aa01      	add	r2, sp, #4
 8005fc6:	2110      	movs	r1, #16
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f006 fadd 	bl	800c588 <lv_style_get_prop>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d1c6      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 8005fd2:	aa01      	add	r2, sp, #4
 8005fd4:	2111      	movs	r1, #17
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f006 fad6 	bl	800c588 <lv_style_get_prop>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d1bf      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 8005fe0:	aa01      	add	r2, sp, #4
 8005fe2:	2112      	movs	r1, #18
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f006 facf 	bl	800c588 <lv_style_get_prop>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d1b8      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 8005fee:	aa01      	add	r2, sp, #4
 8005ff0:	2113      	movs	r1, #19
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f006 fac8 	bl	800c588 <lv_style_get_prop>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d1b1      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 8005ffc:	aa01      	add	r2, sp, #4
 8005ffe:	2115      	movs	r1, #21
 8006000:	4620      	mov	r0, r4
 8006002:	f006 fac1 	bl	800c588 <lv_style_get_prop>
 8006006:	2800      	cmp	r0, #0
 8006008:	d1aa      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800600a:	aa01      	add	r2, sp, #4
 800600c:	2114      	movs	r1, #20
 800600e:	4620      	mov	r0, r4
 8006010:	f006 faba 	bl	800c588 <lv_style_get_prop>
 8006014:	2800      	cmp	r0, #0
 8006016:	d1a3      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 8006018:	aa01      	add	r2, sp, #4
 800601a:	210a      	movs	r1, #10
 800601c:	4620      	mov	r0, r4
 800601e:	f006 fab3 	bl	800c588 <lv_style_get_prop>
 8006022:	2800      	cmp	r0, #0
 8006024:	d19c      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 8006026:	aa01      	add	r2, sp, #4
 8006028:	216b      	movs	r1, #107	; 0x6b
 800602a:	4620      	mov	r0, r4
 800602c:	f006 faac 	bl	800c588 <lv_style_get_prop>
 8006030:	2800      	cmp	r0, #0
 8006032:	d195      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 8006034:	aa01      	add	r2, sp, #4
 8006036:	216c      	movs	r1, #108	; 0x6c
 8006038:	4620      	mov	r0, r4
 800603a:	f006 faa5 	bl	800c588 <lv_style_get_prop>
 800603e:	2800      	cmp	r0, #0
 8006040:	d18e      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 8006042:	aa01      	add	r2, sp, #4
 8006044:	2101      	movs	r1, #1
 8006046:	4620      	mov	r0, r4
 8006048:	f006 fa9e 	bl	800c588 <lv_style_get_prop>
 800604c:	2800      	cmp	r0, #0
 800604e:	d187      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 8006050:	aa01      	add	r2, sp, #4
 8006052:	2104      	movs	r1, #4
 8006054:	4620      	mov	r0, r4
 8006056:	f006 fa97 	bl	800c588 <lv_style_get_prop>
 800605a:	2800      	cmp	r0, #0
 800605c:	d180      	bne.n	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800605e:	aa01      	add	r2, sp, #4
 8006060:	2102      	movs	r1, #2
 8006062:	4620      	mov	r0, r4
 8006064:	f006 fa90 	bl	800c588 <lv_style_get_prop>
 8006068:	2800      	cmp	r0, #0
 800606a:	f47f af79 	bne.w	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800606e:	aa01      	add	r2, sp, #4
 8006070:	2103      	movs	r1, #3
 8006072:	4620      	mov	r0, r4
 8006074:	f006 fa88 	bl	800c588 <lv_style_get_prop>
 8006078:	2800      	cmp	r0, #0
 800607a:	f47f af71 	bne.w	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800607e:	aa01      	add	r2, sp, #4
 8006080:	2105      	movs	r1, #5
 8006082:	4620      	mov	r0, r4
 8006084:	f006 fa80 	bl	800c588 <lv_style_get_prop>
 8006088:	2800      	cmp	r0, #0
 800608a:	f47f af69 	bne.w	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800608e:	aa01      	add	r2, sp, #4
 8006090:	2106      	movs	r1, #6
 8006092:	4620      	mov	r0, r4
 8006094:	f006 fa78 	bl	800c588 <lv_style_get_prop>
 8006098:	2800      	cmp	r0, #0
 800609a:	f47f af61 	bne.w	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800609e:	aa01      	add	r2, sp, #4
 80060a0:	2132      	movs	r1, #50	; 0x32
 80060a2:	4620      	mov	r0, r4
 80060a4:	f006 fa70 	bl	800c588 <lv_style_get_prop>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	f47f af59 	bne.w	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 80060ae:	aa01      	add	r2, sp, #4
 80060b0:	216e      	movs	r1, #110	; 0x6e
 80060b2:	4620      	mov	r0, r4
 80060b4:	f006 fa68 	bl	800c588 <lv_style_get_prop>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	f47f af51 	bne.w	8005f60 <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 80060be:	aa01      	add	r2, sp, #4
 80060c0:	216d      	movs	r1, #109	; 0x6d
 80060c2:	4620      	mov	r0, r4
 80060c4:	f006 fa60 	bl	800c588 <lv_style_get_prop>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f47f af49 	bne.w	8005f60 <_lv_obj_style_state_compare+0x12>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80060ce:	aa01      	add	r2, sp, #4
 80060d0:	2169      	movs	r1, #105	; 0x69
 80060d2:	4620      	mov	r0, r4
 80060d4:	f006 fa58 	bl	800c588 <lv_style_get_prop>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f43f af47 	beq.w	8005f6c <_lv_obj_style_state_compare+0x1e>
 80060de:	f04f 0902 	mov.w	r9, #2
 80060e2:	e74d      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80060e4:	aa01      	add	r2, sp, #4
 80060e6:	216e      	movs	r1, #110	; 0x6e
 80060e8:	4620      	mov	r0, r4
 80060ea:	f006 fa4d 	bl	800c588 <lv_style_get_prop>
 80060ee:	b110      	cbz	r0, 80060f6 <_lv_obj_style_state_compare+0x1a8>
 80060f0:	f04f 0902 	mov.w	r9, #2
 80060f4:	e744      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80060f6:	aa01      	add	r2, sp, #4
 80060f8:	216d      	movs	r1, #109	; 0x6d
 80060fa:	4620      	mov	r0, r4
 80060fc:	f006 fa44 	bl	800c588 <lv_style_get_prop>
 8006100:	b110      	cbz	r0, 8006108 <_lv_obj_style_state_compare+0x1ba>
 8006102:	f04f 0902 	mov.w	r9, #2
 8006106:	e73b      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8006108:	aa01      	add	r2, sp, #4
 800610a:	2137      	movs	r1, #55	; 0x37
 800610c:	4620      	mov	r0, r4
 800610e:	f006 fa3b 	bl	800c588 <lv_style_get_prop>
 8006112:	b110      	cbz	r0, 800611a <_lv_obj_style_state_compare+0x1cc>
 8006114:	f04f 0902 	mov.w	r9, #2
 8006118:	e732      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800611a:	aa01      	add	r2, sp, #4
 800611c:	2138      	movs	r1, #56	; 0x38
 800611e:	4620      	mov	r0, r4
 8006120:	f006 fa32 	bl	800c588 <lv_style_get_prop>
 8006124:	b110      	cbz	r0, 800612c <_lv_obj_style_state_compare+0x1de>
 8006126:	f04f 0902 	mov.w	r9, #2
 800612a:	e729      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800612c:	aa01      	add	r2, sp, #4
 800612e:	2135      	movs	r1, #53	; 0x35
 8006130:	4620      	mov	r0, r4
 8006132:	f006 fa29 	bl	800c588 <lv_style_get_prop>
 8006136:	b110      	cbz	r0, 800613e <_lv_obj_style_state_compare+0x1f0>
 8006138:	f04f 0902 	mov.w	r9, #2
 800613c:	e720      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800613e:	aa01      	add	r2, sp, #4
 8006140:	2140      	movs	r1, #64	; 0x40
 8006142:	4620      	mov	r0, r4
 8006144:	f006 fa20 	bl	800c588 <lv_style_get_prop>
 8006148:	b110      	cbz	r0, 8006150 <_lv_obj_style_state_compare+0x202>
 800614a:	f04f 0902 	mov.w	r9, #2
 800614e:	e717      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8006150:	aa01      	add	r2, sp, #4
 8006152:	2145      	movs	r1, #69	; 0x45
 8006154:	4620      	mov	r0, r4
 8006156:	f006 fa17 	bl	800c588 <lv_style_get_prop>
 800615a:	b110      	cbz	r0, 8006162 <_lv_obj_style_state_compare+0x214>
 800615c:	f04f 0902 	mov.w	r9, #2
 8006160:	e70e      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8006162:	aa01      	add	r2, sp, #4
 8006164:	2141      	movs	r1, #65	; 0x41
 8006166:	4620      	mov	r0, r4
 8006168:	f006 fa0e 	bl	800c588 <lv_style_get_prop>
 800616c:	b110      	cbz	r0, 8006174 <_lv_obj_style_state_compare+0x226>
 800616e:	f04f 0902 	mov.w	r9, #2
 8006172:	e705      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8006174:	aa01      	add	r2, sp, #4
 8006176:	2142      	movs	r1, #66	; 0x42
 8006178:	4620      	mov	r0, r4
 800617a:	f006 fa05 	bl	800c588 <lv_style_get_prop>
 800617e:	b110      	cbz	r0, 8006186 <_lv_obj_style_state_compare+0x238>
 8006180:	f04f 0902 	mov.w	r9, #2
 8006184:	e6fc      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8006186:	aa01      	add	r2, sp, #4
 8006188:	2143      	movs	r1, #67	; 0x43
 800618a:	4620      	mov	r0, r4
 800618c:	f006 f9fc 	bl	800c588 <lv_style_get_prop>
 8006190:	b110      	cbz	r0, 8006198 <_lv_obj_style_state_compare+0x24a>
 8006192:	f04f 0902 	mov.w	r9, #2
 8006196:	e6f3      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8006198:	aa01      	add	r2, sp, #4
 800619a:	2149      	movs	r1, #73	; 0x49
 800619c:	4620      	mov	r0, r4
 800619e:	f006 f9f3 	bl	800c588 <lv_style_get_prop>
 80061a2:	b930      	cbnz	r0, 80061b2 <_lv_obj_style_state_compare+0x264>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 80061a4:	f1b9 0f00 	cmp.w	r9, #0
 80061a8:	f47f aeea 	bne.w	8005f80 <_lv_obj_style_state_compare+0x32>
 80061ac:	f04f 0901 	mov.w	r9, #1
 80061b0:	e6e6      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80061b2:	f04f 0902 	mov.w	r9, #2
 80061b6:	e6e3      	b.n	8005f80 <_lv_obj_style_state_compare+0x32>

080061b8 <lv_obj_style_get_selector_part>:
}
 80061b8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80061bc:	4770      	bx	lr

080061be <get_prop_core>:
{
 80061be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c2:	b087      	sub	sp, #28
 80061c4:	4605      	mov	r5, r0
 80061c6:	468a      	mov	sl, r1
 80061c8:	9201      	str	r2, [sp, #4]
 80061ca:	9302      	str	r3, [sp, #8]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80061cc:	4610      	mov	r0, r2
 80061ce:	f006 fa4a 	bl	800c666 <_lv_style_get_prop_group>
 80061d2:	f04f 0901 	mov.w	r9, #1
 80061d6:	fa09 f900 	lsl.w	r9, r9, r0
 80061da:	fa5f f989 	uxtb.w	r9, r9
    lv_state_t state = obj->state;
 80061de:	8c2b      	ldrh	r3, [r5, #32]
 80061e0:	9303      	str	r3, [sp, #12]
    lv_state_t state_inv = ~state;
 80061e2:	ea6f 0b03 	mvn.w	fp, r3
 80061e6:	fa1f fb8b 	uxth.w	fp, fp
    bool skip_trans = obj->skip_trans;
 80061ea:	f895 8022 	ldrb.w	r8, [r5, #34]	; 0x22
 80061ee:	f3c8 08c0 	ubfx	r8, r8, #3, #1
    for(i = 0; i < obj->style_cnt; i++) {
 80061f2:	2400      	movs	r4, #0
 80061f4:	e004      	b.n	8006200 <get_prop_core+0x42>
            *v = value_tmp;
 80061f6:	9b05      	ldr	r3, [sp, #20]
 80061f8:	9a02      	ldr	r2, [sp, #8]
 80061fa:	6013      	str	r3, [r2, #0]
            return LV_STYLE_RES_FOUND;
 80061fc:	e06f      	b.n	80062de <get_prop_core+0x120>
    for(i = 0; i < obj->style_cnt; i++) {
 80061fe:	3401      	adds	r4, #1
 8006200:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8006202:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8006206:	42a3      	cmp	r3, r4
 8006208:	d91f      	bls.n	800624a <get_prop_core+0x8c>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800620a:	68ee      	ldr	r6, [r5, #12]
 800620c:	00e7      	lsls	r7, r4, #3
 800620e:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        if(obj_style->is_trans == false) break;
 8006212:	79da      	ldrb	r2, [r3, #7]
 8006214:	f012 0f02 	tst.w	r2, #2
 8006218:	d055      	beq.n	80062c6 <get_prop_core+0x108>
        if(skip_trans) continue;
 800621a:	f1b8 0f00 	cmp.w	r8, #0
 800621e:	d1ee      	bne.n	80061fe <get_prop_core+0x40>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006220:	6858      	ldr	r0, [r3, #4]
 8006222:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006226:	f7ff ffc7 	bl	80061b8 <lv_obj_style_get_selector_part>
        if(part_act != part) continue;
 800622a:	4550      	cmp	r0, sl
 800622c:	d1e7      	bne.n	80061fe <get_prop_core+0x40>
        if((obj_style->style->has_group & group) == 0) continue;
 800622e:	59f0      	ldr	r0, [r6, r7]
 8006230:	7983      	ldrb	r3, [r0, #6]
 8006232:	ea13 0f09 	tst.w	r3, r9
 8006236:	d0e2      	beq.n	80061fe <get_prop_core+0x40>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8006238:	aa05      	add	r2, sp, #20
 800623a:	9901      	ldr	r1, [sp, #4]
 800623c:	f006 f9a4 	bl	800c588 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 8006240:	2801      	cmp	r0, #1
 8006242:	d0d8      	beq.n	80061f6 <get_prop_core+0x38>
        else if(found == LV_STYLE_RES_INHERIT) {
 8006244:	2802      	cmp	r0, #2
 8006246:	d1da      	bne.n	80061fe <get_prop_core+0x40>
 8006248:	e049      	b.n	80062de <get_prop_core+0x120>
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	46a8      	mov	r8, r5
 8006252:	e007      	b.n	8006264 <get_prop_core+0xa6>
            if(state_act == state) {
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	42b3      	cmp	r3, r6
 8006258:	d031      	beq.n	80062be <get_prop_core+0x100>
                *v = value_tmp;
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	9a02      	ldr	r2, [sp, #8]
 800625e:	6013      	str	r3, [r2, #0]
                weight = state_act;
 8006260:	9600      	str	r6, [sp, #0]
    for(; i < obj->style_cnt; i++) {
 8006262:	3401      	adds	r4, #1
 8006264:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8006268:	f3c3 1305 	ubfx	r3, r3, #4, #6
 800626c:	42a3      	cmp	r3, r4
 800626e:	d92f      	bls.n	80062d0 <get_prop_core+0x112>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 8006270:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006274:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 8006278:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
 800627c:	79ab      	ldrb	r3, [r5, #6]
 800627e:	ea13 0f09 	tst.w	r3, r9
 8006282:	d0ee      	beq.n	8006262 <get_prop_core+0xa4>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006284:	6856      	ldr	r6, [r2, #4]
 8006286:	f3c6 0617 	ubfx	r6, r6, #0, #24
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ff94 	bl	80061b8 <lv_obj_style_get_selector_part>
 8006290:	4607      	mov	r7, r0
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff fe59 	bl	8005f4a <lv_obj_style_get_selector_state>
 8006298:	4606      	mov	r6, r0
        if(part_act != part) continue;
 800629a:	45ba      	cmp	sl, r7
 800629c:	d1e1      	bne.n	8006262 <get_prop_core+0xa4>
        if((state_act & state_inv)) continue;
 800629e:	ea1b 0f00 	tst.w	fp, r0
 80062a2:	d1de      	bne.n	8006262 <get_prop_core+0xa4>
        if(state_act <= weight) continue;
 80062a4:	9b00      	ldr	r3, [sp, #0]
 80062a6:	4298      	cmp	r0, r3
 80062a8:	dddb      	ble.n	8006262 <get_prop_core+0xa4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 80062aa:	aa05      	add	r2, sp, #20
 80062ac:	9901      	ldr	r1, [sp, #4]
 80062ae:	4628      	mov	r0, r5
 80062b0:	f006 f96a 	bl	800c588 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 80062b4:	2801      	cmp	r0, #1
 80062b6:	d0cd      	beq.n	8006254 <get_prop_core+0x96>
        else if(found == LV_STYLE_RES_INHERIT) {
 80062b8:	2802      	cmp	r0, #2
 80062ba:	d1d2      	bne.n	8006262 <get_prop_core+0xa4>
 80062bc:	e00f      	b.n	80062de <get_prop_core+0x120>
                *v = value_tmp;
 80062be:	9b05      	ldr	r3, [sp, #20]
 80062c0:	9a02      	ldr	r2, [sp, #8]
 80062c2:	6013      	str	r3, [r2, #0]
                return LV_STYLE_RES_FOUND;
 80062c4:	e00b      	b.n	80062de <get_prop_core+0x120>
 80062c6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	46a8      	mov	r8, r5
 80062ce:	e7c9      	b.n	8006264 <get_prop_core+0xa6>
    if(weight >= 0) {
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	db06      	blt.n	80062e4 <get_prop_core+0x126>
        *v = value_tmp;
 80062d6:	9b05      	ldr	r3, [sp, #20]
 80062d8:	9a02      	ldr	r2, [sp, #8]
 80062da:	6013      	str	r3, [r2, #0]
        return LV_STYLE_RES_FOUND;
 80062dc:	2001      	movs	r0, #1
}
 80062de:	b007      	add	sp, #28
 80062e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else return LV_STYLE_RES_NOT_FOUND;
 80062e4:	2000      	movs	r0, #0
 80062e6:	e7fa      	b.n	80062de <get_prop_core+0x120>

080062e8 <lv_obj_get_style_prop>:
{
 80062e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	4605      	mov	r5, r0
 80062f0:	460e      	mov	r6, r1
 80062f2:	4617      	mov	r7, r2
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 80062f4:	4610      	mov	r0, r2
 80062f6:	f006 fa59 	bl	800c7ac <_lv_style_prop_lookup_flags>
 80062fa:	f000 0801 	and.w	r8, r0, #1
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 80062fe:	2400      	movs	r4, #0
    while(obj) {
 8006300:	e003      	b.n	800630a <lv_obj_get_style_prop+0x22>
        obj = lv_obj_get_parent(obj);
 8006302:	4628      	mov	r0, r5
 8006304:	f000 fc17 	bl	8006b36 <lv_obj_get_parent>
 8006308:	4605      	mov	r5, r0
    while(obj) {
 800630a:	b18d      	cbz	r5, 8006330 <lv_obj_get_style_prop+0x48>
        found = get_prop_core(obj, part, prop, &value_act);
 800630c:	ab01      	add	r3, sp, #4
 800630e:	463a      	mov	r2, r7
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	f7ff ff53 	bl	80061be <get_prop_core>
 8006318:	4604      	mov	r4, r0
        if(found == LV_STYLE_RES_FOUND) break;
 800631a:	2801      	cmp	r0, #1
 800631c:	d008      	beq.n	8006330 <lv_obj_get_style_prop+0x48>
        if(!inheritable) break;
 800631e:	f1b8 0f00 	cmp.w	r8, #0
 8006322:	d005      	beq.n	8006330 <lv_obj_get_style_prop+0x48>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 8006324:	2802      	cmp	r0, #2
 8006326:	d0ec      	beq.n	8006302 <lv_obj_get_style_prop+0x1a>
 8006328:	2e00      	cmp	r6, #0
 800632a:	d0ea      	beq.n	8006302 <lv_obj_get_style_prop+0x1a>
            part = LV_PART_MAIN;
 800632c:	2600      	movs	r6, #0
 800632e:	e7ec      	b.n	800630a <lv_obj_get_style_prop+0x22>
    if(found != LV_STYLE_RES_FOUND) {
 8006330:	2c01      	cmp	r4, #1
 8006332:	d008      	beq.n	8006346 <lv_obj_get_style_prop+0x5e>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8006334:	b91e      	cbnz	r6, 800633e <lv_obj_get_style_prop+0x56>
 8006336:	2f01      	cmp	r7, #1
 8006338:	d009      	beq.n	800634e <lv_obj_get_style_prop+0x66>
 800633a:	2f04      	cmp	r7, #4
 800633c:	d007      	beq.n	800634e <lv_obj_get_style_prop+0x66>
            value_act = lv_style_prop_get_default(prop);
 800633e:	4638      	mov	r0, r7
 8006340:	f006 f8ca 	bl	800c4d8 <lv_style_prop_get_default>
 8006344:	9001      	str	r0, [sp, #4]
}
 8006346:	9801      	ldr	r0, [sp, #4]
 8006348:	b002      	add	sp, #8
 800634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            const lv_obj_class_t * cls = obj->class_p;
 800634e:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 8006350:	e003      	b.n	800635a <lv_obj_get_style_prop+0x72>
                    if(cls->width_def != 0) break;
 8006352:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8006356:	b93a      	cbnz	r2, 8006368 <lv_obj_get_style_prop+0x80>
                cls = cls->base_class;
 8006358:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 800635a:	b12b      	cbz	r3, 8006368 <lv_obj_get_style_prop+0x80>
                if(prop == LV_STYLE_WIDTH) {
 800635c:	2f01      	cmp	r7, #1
 800635e:	d0f8      	beq.n	8006352 <lv_obj_get_style_prop+0x6a>
                    if(cls->height_def != 0) break;
 8006360:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8006364:	2a00      	cmp	r2, #0
 8006366:	d0f7      	beq.n	8006358 <lv_obj_get_style_prop+0x70>
            if(cls) {
 8006368:	b143      	cbz	r3, 800637c <lv_obj_get_style_prop+0x94>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800636a:	2f01      	cmp	r7, #1
 800636c:	d003      	beq.n	8006376 <lv_obj_get_style_prop+0x8e>
 800636e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	e7e7      	b.n	8006346 <lv_obj_get_style_prop+0x5e>
 8006376:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800637a:	e7fa      	b.n	8006372 <lv_obj_get_style_prop+0x8a>
                value_act.num = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	e7e1      	b.n	8006346 <lv_obj_get_style_prop+0x5e>

08006382 <calculate_layer_type>:
        }
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 8006382:	b510      	push	{r4, lr}
 8006384:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8006386:	226e      	movs	r2, #110	; 0x6e
 8006388:	2100      	movs	r1, #0
 800638a:	f7ff ffad 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800638e:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 8006390:	b9f0      	cbnz	r0, 80063d0 <calculate_layer_type+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8006392:	226d      	movs	r2, #109	; 0x6d
 8006394:	2100      	movs	r1, #0
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff ffa6 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800639c:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800639e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80063a2:	d001      	beq.n	80063a8 <calculate_layer_type+0x26>
 80063a4:	2002      	movs	r0, #2
 80063a6:	e014      	b.n	80063d2 <calculate_layer_type+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA_LAYERED);
 80063a8:	2261      	movs	r2, #97	; 0x61
 80063aa:	2100      	movs	r1, #0
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7ff ff9b 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80063b2:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_opa_layered(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 80063b4:	28ff      	cmp	r0, #255	; 0xff
 80063b6:	d001      	beq.n	80063bc <calculate_layer_type+0x3a>
 80063b8:	2001      	movs	r0, #1
 80063ba:	e00a      	b.n	80063d2 <calculate_layer_type+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80063bc:	2268      	movs	r2, #104	; 0x68
 80063be:	2100      	movs	r1, #0
 80063c0:	4620      	mov	r0, r4
 80063c2:	f7ff ff91 	bl	80062e8 <lv_obj_get_style_prop>
#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 80063c6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80063ca:	d002      	beq.n	80063d2 <calculate_layer_type+0x50>
 80063cc:	2001      	movs	r0, #1
 80063ce:	e000      	b.n	80063d2 <calculate_layer_type+0x50>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 80063d0:	2002      	movs	r0, #2
#endif
    return LV_LAYER_TYPE_NONE;
}
 80063d2:	bd10      	pop	{r4, pc}

080063d4 <_lv_obj_style_create_transition>:
{
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	b093      	sub	sp, #76	; 0x4c
 80063da:	4604      	mov	r4, r0
 80063dc:	460f      	mov	r7, r1
 80063de:	4692      	mov	sl, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    obj->skip_trans = 1;
 80063e4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80063e8:	f043 0308 	orr.w	r3, r3, #8
 80063ec:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    obj->state = prev_state;
 80063f0:	8402      	strh	r2, [r0, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80063f2:	8932      	ldrh	r2, [r6, #8]
 80063f4:	f7ff ff78 	bl	80062e8 <lv_obj_get_style_prop>
 80063f8:	4605      	mov	r5, r0
    obj->state = new_state;
 80063fa:	f8a4 9020 	strh.w	r9, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80063fe:	8932      	ldrh	r2, [r6, #8]
 8006400:	4639      	mov	r1, r7
 8006402:	4620      	mov	r0, r4
 8006404:	f7ff ff70 	bl	80062e8 <lv_obj_get_style_prop>
 8006408:	4680      	mov	r8, r0
    obj->skip_trans = 0;
 800640a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800640e:	f36f 03c3 	bfc	r3, #3, #1
 8006412:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8006416:	4683      	mov	fp, r0
 8006418:	4285      	cmp	r5, r0
 800641a:	d047      	beq.n	80064ac <_lv_obj_style_create_transition+0xd8>
    obj->state = prev_state;
 800641c:	f8a4 a020 	strh.w	sl, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8006420:	8932      	ldrh	r2, [r6, #8]
 8006422:	4639      	mov	r1, r7
 8006424:	4620      	mov	r0, r4
 8006426:	f7ff ff5f 	bl	80062e8 <lv_obj_get_style_prop>
 800642a:	4605      	mov	r5, r0
    obj->state = new_state;
 800642c:	f8a4 9020 	strh.w	r9, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 8006430:	4639      	mov	r1, r7
 8006432:	4620      	mov	r0, r4
 8006434:	f7ff fd04 	bl	8005e40 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 8006438:	462a      	mov	r2, r5
 800643a:	8931      	ldrh	r1, [r6, #8]
 800643c:	6800      	ldr	r0, [r0, #0]
 800643e:	f006 f9ad 	bl	800c79c <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 8006442:	8933      	ldrh	r3, [r6, #8]
 8006444:	2b0b      	cmp	r3, #11
 8006446:	d033      	beq.n	80064b0 <_lv_obj_style_create_transition+0xdc>
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006448:	4830      	ldr	r0, [pc, #192]	; (800650c <_lv_obj_style_create_transition+0x138>)
 800644a:	f005 fc5f 	bl	800bd0c <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 800644e:	4681      	mov	r9, r0
 8006450:	2800      	cmp	r0, #0
 8006452:	d059      	beq.n	8006508 <_lv_obj_style_create_transition+0x134>
    tr->start_value = v1;
 8006454:	60c5      	str	r5, [r0, #12]
    tr->end_value = v2;
 8006456:	f8c0 8010 	str.w	r8, [r0, #16]
    tr->obj = obj;
 800645a:	6004      	str	r4, [r0, #0]
    tr->prop = tr_dsc->prop;
 800645c:	8933      	ldrh	r3, [r6, #8]
 800645e:	8083      	strh	r3, [r0, #4]
    tr->selector = part;
 8006460:	6087      	str	r7, [r0, #8]
    lv_anim_init(&a);
 8006462:	a801      	add	r0, sp, #4
 8006464:	f004 fe3a 	bl	800b0dc <lv_anim_init>
    a->var = var;
 8006468:	f8cd 9004 	str.w	r9, [sp, #4]
    a->exec_cb = exec_cb;
 800646c:	4b28      	ldr	r3, [pc, #160]	; (8006510 <_lv_obj_style_create_transition+0x13c>)
 800646e:	9302      	str	r3, [sp, #8]
    a->start_cb = start_cb;
 8006470:	4b28      	ldr	r3, [pc, #160]	; (8006514 <_lv_obj_style_create_transition+0x140>)
 8006472:	9303      	str	r3, [sp, #12]
    a->ready_cb = ready_cb;
 8006474:	4b28      	ldr	r3, [pc, #160]	; (8006518 <_lv_obj_style_create_transition+0x144>)
 8006476:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 8006478:	2300      	movs	r3, #0
 800647a:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 800647c:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	920b      	str	r2, [sp, #44]	; 0x2c
    lv_anim_set_time(&a, tr_dsc->time);
 8006482:	8832      	ldrh	r2, [r6, #0]
    a->time = duration;
 8006484:	920c      	str	r2, [sp, #48]	; 0x30
    lv_anim_set_delay(&a, tr_dsc->delay);
 8006486:	8872      	ldrh	r2, [r6, #2]
    a->act_time = -(int32_t)(delay);
 8006488:	4252      	negs	r2, r2
 800648a:	920d      	str	r2, [sp, #52]	; 0x34
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 800648c:	68f2      	ldr	r2, [r6, #12]
    a->path_cb = path_cb;
 800648e:	9208      	str	r2, [sp, #32]
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 8006490:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8006494:	f363 0200 	bfi	r2, r3, #0, #1
 8006498:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    a.user_data = tr_dsc->user_data;
 800649c:	6933      	ldr	r3, [r6, #16]
 800649e:	9307      	str	r3, [sp, #28]
    lv_anim_start(&a);
 80064a0:	a801      	add	r0, sp, #4
 80064a2:	f004 fe67 	bl	800b174 <lv_anim_start>
}
 80064a6:	b013      	add	sp, #76	; 0x4c
 80064a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 80064ac:	d1b6      	bne.n	800641c <_lv_obj_style_create_transition+0x48>
 80064ae:	e7fa      	b.n	80064a6 <_lv_obj_style_create_transition+0xd2>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 80064b0:	46aa      	mov	sl, r5
 80064b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80064b6:	429d      	cmp	r5, r3
 80064b8:	d001      	beq.n	80064be <_lv_obj_style_create_transition+0xea>
 80064ba:	459b      	cmp	fp, r3
 80064bc:	d1c4      	bne.n	8006448 <_lv_obj_style_create_transition+0x74>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 80064be:	4620      	mov	r0, r4
 80064c0:	f7fd f9f4 	bl	80038ac <lv_obj_get_width>
 80064c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80064c8:	f340 094f 	sbfx	r9, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7fd f9f5 	bl	80038bc <lv_obj_get_height>
 80064d2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80064d6:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80064da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80064de:	4592      	cmp	sl, r2
 80064e0:	d009      	beq.n	80064f6 <_lv_obj_style_create_transition+0x122>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80064e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80064e6:	4593      	cmp	fp, r2
 80064e8:	d1ae      	bne.n	8006448 <_lv_obj_style_create_transition+0x74>
 80064ea:	4599      	cmp	r9, r3
 80064ec:	da0a      	bge.n	8006504 <_lv_obj_style_create_transition+0x130>
 80064ee:	f109 0301 	add.w	r3, r9, #1
 80064f2:	4698      	mov	r8, r3
 80064f4:	e7a8      	b.n	8006448 <_lv_obj_style_create_transition+0x74>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80064f6:	4599      	cmp	r9, r3
 80064f8:	da02      	bge.n	8006500 <_lv_obj_style_create_transition+0x12c>
 80064fa:	f109 0501 	add.w	r5, r9, #1
 80064fe:	e7f0      	b.n	80064e2 <_lv_obj_style_create_transition+0x10e>
 8006500:	1c5d      	adds	r5, r3, #1
 8006502:	e7ee      	b.n	80064e2 <_lv_obj_style_create_transition+0x10e>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8006504:	3301      	adds	r3, #1
 8006506:	e7f4      	b.n	80064f2 <_lv_obj_style_create_transition+0x11e>
    LV_ASSERT_MALLOC(tr);
 8006508:	e7fe      	b.n	8006508 <_lv_obj_style_create_transition+0x134>
 800650a:	bf00      	nop
 800650c:	20000bfc 	.word	0x20000bfc
 8006510:	080066a5 	.word	0x080066a5
 8006514:	08006a0d 	.word	0x08006a0d
 8006518:	08006961 	.word	0x08006961

0800651c <_lv_obj_style_apply_color_filter>:
{
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	4614      	mov	r4, r2
    if(obj == NULL) return v;
 8006520:	b1c0      	cbz	r0, 8006554 <_lv_obj_style_apply_color_filter+0x38>
 8006522:	460d      	mov	r5, r1
 8006524:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 8006526:	2262      	movs	r2, #98	; 0x62
 8006528:	f7ff fede 	bl	80062e8 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 800652c:	4607      	mov	r7, r0
 800652e:	b178      	cbz	r0, 8006550 <_lv_obj_style_apply_color_filter+0x34>
 8006530:	6803      	ldr	r3, [r0, #0]
 8006532:	b16b      	cbz	r3, 8006550 <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 8006534:	2263      	movs	r2, #99	; 0x63
 8006536:	4629      	mov	r1, r5
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff fed5 	bl	80062e8 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800653e:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8006542:	d005      	beq.n	8006550 <_lv_obj_style_apply_color_filter+0x34>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	4621      	mov	r1, r4
 8006548:	4638      	mov	r0, r7
 800654a:	4798      	blx	r3
 800654c:	f360 040f 	bfi	r4, r0, #0, #16
    return v;
 8006550:	4620      	mov	r0, r4
}
 8006552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj == NULL) return v;
 8006554:	4610      	mov	r0, r2
 8006556:	e7fc      	b.n	8006552 <_lv_obj_style_apply_color_filter+0x36>

08006558 <lv_obj_refresh_style>:
    if(!style_refr) return;
 8006558:	4b48      	ldr	r3, [pc, #288]	; (800667c <lv_obj_refresh_style+0x124>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b903      	cbnz	r3, 8006560 <lv_obj_refresh_style+0x8>
 800655e:	4770      	bx	lr
{
 8006560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	4605      	mov	r5, r0
 8006566:	460e      	mov	r6, r1
 8006568:	4614      	mov	r4, r2
    lv_obj_invalidate(obj);
 800656a:	f7fd fd80 	bl	800406e <lv_obj_invalidate>
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800656e:	4630      	mov	r0, r6
 8006570:	f7ff fe22 	bl	80061b8 <lv_obj_style_get_selector_part>
 8006574:	4606      	mov	r6, r0
 8006576:	4620      	mov	r0, r4
 8006578:	f006 f918 	bl	800c7ac <_lv_style_prop_lookup_flags>
 800657c:	f000 0704 	and.w	r7, r0, #4
 8006580:	4620      	mov	r0, r4
 8006582:	f006 f913 	bl	800c7ac <_lv_style_prop_lookup_flags>
 8006586:	f000 0802 	and.w	r8, r0, #2
 800658a:	4620      	mov	r0, r4
 800658c:	f006 f90e 	bl	800c7ac <_lv_style_prop_lookup_flags>
 8006590:	f000 0901 	and.w	r9, r0, #1
 8006594:	4620      	mov	r0, r4
 8006596:	f006 f909 	bl	800c7ac <_lv_style_prop_lookup_flags>
 800659a:	f000 0a10 	and.w	sl, r0, #16
    if(is_layout_refr) {
 800659e:	b15f      	cbz	r7, 80065b8 <lv_obj_refresh_style+0x60>
        if(part == LV_PART_ANY ||
 80065a0:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 80065a4:	d000      	beq.n	80065a8 <lv_obj_refresh_style+0x50>
 80065a6:	bbd6      	cbnz	r6, 800661e <lv_obj_refresh_style+0xc6>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 80065a8:	2200      	movs	r2, #0
 80065aa:	212a      	movs	r1, #42	; 0x2a
 80065ac:	4628      	mov	r0, r5
 80065ae:	f7fb fbad 	bl	8001d0c <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 80065b2:	4628      	mov	r0, r5
 80065b4:	f7fd f928 	bl	8003808 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 80065b8:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 80065bc:	d000      	beq.n	80065c0 <lv_obj_refresh_style+0x68>
 80065be:	b956      	cbnz	r6, 80065d6 <lv_obj_refresh_style+0x7e>
 80065c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065c4:	429c      	cmp	r4, r3
 80065c6:	d000      	beq.n	80065ca <lv_obj_refresh_style+0x72>
 80065c8:	b12f      	cbz	r7, 80065d6 <lv_obj_refresh_style+0x7e>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 fab3 	bl	8006b36 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 80065d0:	b108      	cbz	r0, 80065d6 <lv_obj_refresh_style+0x7e>
 80065d2:	f7fd f919 	bl	8003808 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 80065d6:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 80065da:	d000      	beq.n	80065de <lv_obj_refresh_style+0x86>
 80065dc:	b916      	cbnz	r6, 80065e4 <lv_obj_refresh_style+0x8c>
 80065de:	f1ba 0f00 	cmp.w	sl, #0
 80065e2:	d131      	bne.n	8006648 <lv_obj_refresh_style+0xf0>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 80065e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065e8:	429c      	cmp	r4, r3
 80065ea:	d002      	beq.n	80065f2 <lv_obj_refresh_style+0x9a>
 80065ec:	f1b8 0f00 	cmp.w	r8, #0
 80065f0:	d002      	beq.n	80065f8 <lv_obj_refresh_style+0xa0>
        lv_obj_refresh_ext_draw_size(obj);
 80065f2:	4628      	mov	r0, r5
 80065f4:	f7fc ffd8 	bl	80035a8 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7fd fd38 	bl	800406e <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 80065fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006602:	429c      	cmp	r4, r3
 8006604:	d006      	beq.n	8006614 <lv_obj_refresh_style+0xbc>
 8006606:	f1b9 0f00 	cmp.w	r9, #0
 800660a:	d006      	beq.n	800661a <lv_obj_refresh_style+0xc2>
 800660c:	f1b8 0f00 	cmp.w	r8, #0
 8006610:	d100      	bne.n	8006614 <lv_obj_refresh_style+0xbc>
 8006612:	b117      	cbz	r7, 800661a <lv_obj_refresh_style+0xc2>
        if(part != LV_PART_SCROLLBAR) {
 8006614:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8006618:	d12c      	bne.n	8006674 <lv_obj_refresh_style+0x11c>
}
 800661a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800661e:	2204      	movs	r2, #4
 8006620:	2100      	movs	r1, #0
 8006622:	4628      	mov	r0, r5
 8006624:	f7ff fe60 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006628:	b200      	sxth	r0, r0
           part == LV_PART_MAIN ||
 800662a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800662e:	4298      	cmp	r0, r3
 8006630:	d0ba      	beq.n	80065a8 <lv_obj_refresh_style+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006632:	2201      	movs	r2, #1
 8006634:	2100      	movs	r1, #0
 8006636:	4628      	mov	r0, r5
 8006638:	f7ff fe56 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800663c:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800663e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8006642:	4298      	cmp	r0, r3
 8006644:	d1b8      	bne.n	80065b8 <lv_obj_refresh_style+0x60>
 8006646:	e7af      	b.n	80065a8 <lv_obj_refresh_style+0x50>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff fe9a 	bl	8006382 <calculate_layer_type>
 800664e:	4682      	mov	sl, r0
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 8006650:	68ab      	ldr	r3, [r5, #8]
 8006652:	b123      	cbz	r3, 800665e <lv_obj_refresh_style+0x106>
 8006654:	7e9a      	ldrb	r2, [r3, #26]
 8006656:	f360 1287 	bfi	r2, r0, #6, #2
 800665a:	769a      	strb	r2, [r3, #26]
 800665c:	e7c2      	b.n	80065e4 <lv_obj_refresh_style+0x8c>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800665e:	2800      	cmp	r0, #0
 8006660:	d0c0      	beq.n	80065e4 <lv_obj_refresh_style+0x8c>
            lv_obj_allocate_spec_attr(obj);
 8006662:	4628      	mov	r0, r5
 8006664:	f7fc fc3e 	bl	8002ee4 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 8006668:	68ab      	ldr	r3, [r5, #8]
 800666a:	7e9a      	ldrb	r2, [r3, #26]
 800666c:	f36a 1287 	bfi	r2, sl, #6, #2
 8006670:	769a      	strb	r2, [r3, #26]
 8006672:	e7b7      	b.n	80065e4 <lv_obj_refresh_style+0x8c>
            refresh_children_style(obj);
 8006674:	4628      	mov	r0, r5
 8006676:	f7ff fb63 	bl	8005d40 <refresh_children_style>
 800667a:	e7ce      	b.n	800661a <lv_obj_refresh_style+0xc2>
 800667c:	20000024 	.word	0x20000024

08006680 <lv_obj_set_local_style_prop>:
{
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	4606      	mov	r6, r0
 8006684:	460d      	mov	r5, r1
 8006686:	4617      	mov	r7, r2
 8006688:	461c      	mov	r4, r3
    lv_style_t * style = get_local_style(obj, selector);
 800668a:	4619      	mov	r1, r3
 800668c:	f7ff fb75 	bl	8005d7a <get_local_style>
    lv_style_set_prop(style, prop, value);
 8006690:	463a      	mov	r2, r7
 8006692:	4629      	mov	r1, r5
 8006694:	f006 f882 	bl	800c79c <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 8006698:	462a      	mov	r2, r5
 800669a:	4621      	mov	r1, r4
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff ff5b 	bl	8006558 <lv_obj_refresh_style>
}
 80066a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066a4 <trans_anim_cb>:
{
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	4604      	mov	r4, r0
 80066ac:	460f      	mov	r7, r1
    lv_obj_t * obj = tr->obj;
 80066ae:	6805      	ldr	r5, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 80066b0:	2200      	movs	r2, #0
 80066b2:	e000      	b.n	80066b6 <trans_anim_cb+0x12>
 80066b4:	3201      	adds	r2, #1
 80066b6:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80066b8:	f3c3 1305 	ubfx	r3, r3, #4, #6
 80066bc:	4293      	cmp	r3, r2
 80066be:	f240 80a7 	bls.w	8006810 <trans_anim_cb+0x16c>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 80066c2:	68eb      	ldr	r3, [r5, #12]
 80066c4:	00d6      	lsls	r6, r2, #3
 80066c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066ca:	79d8      	ldrb	r0, [r3, #7]
 80066cc:	f010 0f02 	tst.w	r0, #2
 80066d0:	d0f0      	beq.n	80066b4 <trans_anim_cb+0x10>
 80066d2:	6858      	ldr	r0, [r3, #4]
 80066d4:	f3c0 0017 	ubfx	r0, r0, #0, #24
 80066d8:	68a1      	ldr	r1, [r4, #8]
 80066da:	4288      	cmp	r0, r1
 80066dc:	d1ea      	bne.n	80066b4 <trans_anim_cb+0x10>
        switch(tr->prop) {
 80066de:	88a1      	ldrh	r1, [r4, #4]
 80066e0:	f1a1 0220 	sub.w	r2, r1, #32
 80066e4:	2a48      	cmp	r2, #72	; 0x48
 80066e6:	d875      	bhi.n	80067d4 <trans_anim_cb+0x130>
 80066e8:	e8df f002 	tbb	[pc, r2]
 80066ec:	744a744a 	.word	0x744a744a
 80066f0:	74747474 	.word	0x74747474
 80066f4:	74747474 	.word	0x74747474
 80066f8:	74747474 	.word	0x74747474
 80066fc:	2574744a 	.word	0x2574744a
 8006700:	744a7425 	.word	0x744a7425
 8006704:	74747474 	.word	0x74747474
 8006708:	74747474 	.word	0x74747474
 800670c:	74747474 	.word	0x74747474
 8006710:	4a74744a 	.word	0x4a74744a
 8006714:	74747474 	.word	0x74747474
 8006718:	74747474 	.word	0x74747474
 800671c:	74747474 	.word	0x74747474
 8006720:	36744a74 	.word	0x36744a74
 8006724:	74747474 	.word	0x74747474
 8006728:	74747474 	.word	0x74747474
 800672c:	743c7474 	.word	0x743c7474
 8006730:	36747474 	.word	0x36747474
 8006734:	25          	.byte	0x25
 8006735:	00          	.byte	0x00
                if(v < 255) value_final.num = tr->start_value.num;
 8006736:	2ffe      	cmp	r7, #254	; 0xfe
 8006738:	dc0c      	bgt.n	8006754 <trans_anim_cb+0xb0>
 800673a:	68e7      	ldr	r7, [r4, #12]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800673c:	aa01      	add	r2, sp, #4
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	f005 ff22 	bl	800c588 <lv_style_get_prop>
 8006744:	2800      	cmp	r0, #0
 8006746:	d058      	beq.n	80067fa <trans_anim_cb+0x156>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 8006748:	9b01      	ldr	r3, [sp, #4]
 800674a:	429f      	cmp	r7, r3
 800674c:	d051      	beq.n	80067f2 <trans_anim_cb+0x14e>
        bool refr = true;
 800674e:	f04f 0801 	mov.w	r8, #1
 8006752:	e054      	b.n	80067fe <trans_anim_cb+0x15a>
                else value_final.num = tr->end_value.num;
 8006754:	6927      	ldr	r7, [r4, #16]
 8006756:	e7f1      	b.n	800673c <trans_anim_cb+0x98>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 8006758:	2ffe      	cmp	r7, #254	; 0xfe
 800675a:	dc01      	bgt.n	8006760 <trans_anim_cb+0xbc>
 800675c:	68e7      	ldr	r7, [r4, #12]
 800675e:	e7ed      	b.n	800673c <trans_anim_cb+0x98>
                else value_final.ptr = tr->end_value.ptr;
 8006760:	6927      	ldr	r7, [r4, #16]
 8006762:	e7eb      	b.n	800673c <trans_anim_cb+0x98>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 8006764:	68e2      	ldr	r2, [r4, #12]
 8006766:	b12a      	cbz	r2, 8006774 <trans_anim_cb+0xd0>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 8006768:	6920      	ldr	r0, [r4, #16]
 800676a:	b128      	cbz	r0, 8006778 <trans_anim_cb+0xd4>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800676c:	2f7f      	cmp	r7, #127	; 0x7f
 800676e:	dc05      	bgt.n	800677c <trans_anim_cb+0xd8>
 8006770:	4617      	mov	r7, r2
 8006772:	e7e3      	b.n	800673c <trans_anim_cb+0x98>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 8006774:	6927      	ldr	r7, [r4, #16]
 8006776:	e7e1      	b.n	800673c <trans_anim_cb+0x98>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 8006778:	4617      	mov	r7, r2
 800677a:	e7df      	b.n	800673c <trans_anim_cb+0x98>
                else value_final.ptr = tr->end_value.ptr;
 800677c:	4607      	mov	r7, r0
 800677e:	e7dd      	b.n	800673c <trans_anim_cb+0x98>
                if(v <= 0) value_final.color = tr->start_value.color;
 8006780:	2f00      	cmp	r7, #0
 8006782:	dd06      	ble.n	8006792 <trans_anim_cb+0xee>
                else if(v >= 255) value_final.color = tr->end_value.color;
 8006784:	2ffe      	cmp	r7, #254	; 0xfe
 8006786:	dd09      	ble.n	800679c <trans_anim_cb+0xf8>
 8006788:	8a22      	ldrh	r2, [r4, #16]
 800678a:	2700      	movs	r7, #0
 800678c:	f362 070f 	bfi	r7, r2, #0, #16
 8006790:	e7d4      	b.n	800673c <trans_anim_cb+0x98>
                if(v <= 0) value_final.color = tr->start_value.color;
 8006792:	89a2      	ldrh	r2, [r4, #12]
 8006794:	2700      	movs	r7, #0
 8006796:	f362 070f 	bfi	r7, r2, #0, #16
 800679a:	e7cf      	b.n	800673c <trans_anim_cb+0x98>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 800679c:	fa5f fc87 	uxtb.w	ip, r7
#if LV_COLOR_16_SWAP == 1
    c1.full = c1.full << 8 | c1.full >> 8;
    c2.full = c2.full << 8 | c2.full >> 8;
#endif
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80067a0:	f10c 0c04 	add.w	ip, ip, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80067a4:	89a2      	ldrh	r2, [r4, #12]
 80067a6:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80067aa:	4f1f      	ldr	r7, [pc, #124]	; (8006828 <trans_anim_cb+0x184>)
 80067ac:	403a      	ands	r2, r7
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80067ae:	8a20      	ldrh	r0, [r4, #16]
 80067b0:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 80067b4:	4038      	ands	r0, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80067b6:	1a80      	subs	r0, r0, r2
 80067b8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80067bc:	fb00 f00c 	mul.w	r0, r0, ip
 80067c0:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 80067c4:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 80067c6:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 80067ca:	b292      	uxth	r2, r2
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 80067cc:	2700      	movs	r7, #0
 80067ce:	f362 070f 	bfi	r7, r2, #0, #16
 80067d2:	e7b3      	b.n	800673c <trans_anim_cb+0x98>
                if(v == 0) value_final.num = tr->start_value.num;
 80067d4:	b90f      	cbnz	r7, 80067da <trans_anim_cb+0x136>
 80067d6:	68e7      	ldr	r7, [r4, #12]
 80067d8:	e7b0      	b.n	800673c <trans_anim_cb+0x98>
                else if(v == 255) value_final.num = tr->end_value.num;
 80067da:	2fff      	cmp	r7, #255	; 0xff
 80067dc:	d007      	beq.n	80067ee <trans_anim_cb+0x14a>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 80067de:	68e0      	ldr	r0, [r4, #12]
 80067e0:	6922      	ldr	r2, [r4, #16]
 80067e2:	1a12      	subs	r2, r2, r0
 80067e4:	fb02 f707 	mul.w	r7, r2, r7
 80067e8:	eb00 2727 	add.w	r7, r0, r7, asr #8
 80067ec:	e7a6      	b.n	800673c <trans_anim_cb+0x98>
                else if(v == 255) value_final.num = tr->end_value.num;
 80067ee:	6927      	ldr	r7, [r4, #16]
 80067f0:	e7a4      	b.n	800673c <trans_anim_cb+0x98>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 80067f2:	d010      	beq.n	8006816 <trans_anim_cb+0x172>
        bool refr = true;
 80067f4:	f04f 0801 	mov.w	r8, #1
 80067f8:	e001      	b.n	80067fe <trans_anim_cb+0x15a>
 80067fa:	f04f 0801 	mov.w	r8, #1
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 80067fe:	68eb      	ldr	r3, [r5, #12]
 8006800:	463a      	mov	r2, r7
 8006802:	88a1      	ldrh	r1, [r4, #4]
 8006804:	5998      	ldr	r0, [r3, r6]
 8006806:	f005 ffc9 	bl	800c79c <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800680a:	f1b8 0f00 	cmp.w	r8, #0
 800680e:	d105      	bne.n	800681c <trans_anim_cb+0x178>
}
 8006810:	b002      	add	sp, #8
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                refr = false;
 8006816:	f04f 0800 	mov.w	r8, #0
 800681a:	e7f0      	b.n	80067fe <trans_anim_cb+0x15a>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800681c:	88a2      	ldrh	r2, [r4, #4]
 800681e:	68a1      	ldr	r1, [r4, #8]
 8006820:	6820      	ldr	r0, [r4, #0]
 8006822:	f7ff fe99 	bl	8006558 <lv_obj_refresh_style>
        break;
 8006826:	e7f3      	b.n	8006810 <trans_anim_cb+0x16c>
 8006828:	07e0f81f 	.word	0x07e0f81f

0800682c <lv_obj_remove_style>:
{
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	b085      	sub	sp, #20
 8006832:	4604      	mov	r4, r0
 8006834:	460e      	mov	r6, r1
 8006836:	9101      	str	r1, [sp, #4]
 8006838:	4615      	mov	r5, r2
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 800683a:	4610      	mov	r0, r2
 800683c:	f7ff fb85 	bl	8005f4a <lv_obj_style_get_selector_state>
 8006840:	4681      	mov	r9, r0
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 8006842:	4628      	mov	r0, r5
 8006844:	f7ff fcb8 	bl	80061b8 <lv_obj_style_get_selector_part>
 8006848:	4683      	mov	fp, r0
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800684a:	b146      	cbz	r6, 800685e <lv_obj_remove_style+0x32>
 800684c:	79f3      	ldrb	r3, [r6, #7]
 800684e:	b153      	cbz	r3, 8006866 <lv_obj_remove_style+0x3a>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8006850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006854:	9303      	str	r3, [sp, #12]
    bool deleted = false;
 8006856:	2300      	movs	r3, #0
 8006858:	9302      	str	r3, [sp, #8]
    uint32_t i = 0;
 800685a:	461d      	mov	r5, r3
    while(i <  obj->style_cnt) {
 800685c:	e00d      	b.n	800687a <lv_obj_remove_style+0x4e>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800685e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006862:	9303      	str	r3, [sp, #12]
 8006864:	e7f7      	b.n	8006856 <lv_obj_remove_style+0x2a>
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 8006866:	2300      	movs	r3, #0
 8006868:	9303      	str	r3, [sp, #12]
 800686a:	e7f4      	b.n	8006856 <lv_obj_remove_style+0x2a>
           (part != LV_PART_ANY && part_act != part) ||
 800686c:	9a01      	ldr	r2, [sp, #4]
 800686e:	b332      	cbz	r2, 80068be <lv_obj_remove_style+0x92>
           (style != NULL && style != obj->styles[i].style)) {
 8006870:	f857 300a 	ldr.w	r3, [r7, sl]
 8006874:	4293      	cmp	r3, r2
 8006876:	d022      	beq.n	80068be <lv_obj_remove_style+0x92>
            i++;
 8006878:	3501      	adds	r5, #1
    while(i <  obj->style_cnt) {
 800687a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800687c:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8006880:	42ab      	cmp	r3, r5
 8006882:	d95f      	bls.n	8006944 <lv_obj_remove_style+0x118>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006884:	68e7      	ldr	r7, [r4, #12]
 8006886:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 800688a:	eb07 08c5 	add.w	r8, r7, r5, lsl #3
 800688e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8006892:	f3c6 0617 	ubfx	r6, r6, #0, #24
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff fb57 	bl	8005f4a <lv_obj_style_get_selector_state>
 800689c:	9000      	str	r0, [sp, #0]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800689e:	4630      	mov	r0, r6
 80068a0:	f7ff fc8a 	bl	80061b8 <lv_obj_style_get_selector_part>
        if((state != LV_STATE_ANY && state_act != state) ||
 80068a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068a8:	4599      	cmp	r9, r3
 80068aa:	d002      	beq.n	80068b2 <lv_obj_remove_style+0x86>
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	4599      	cmp	r9, r3
 80068b0:	d1e2      	bne.n	8006878 <lv_obj_remove_style+0x4c>
 80068b2:	f5bb 2f70 	cmp.w	fp, #983040	; 0xf0000
 80068b6:	d0d9      	beq.n	800686c <lv_obj_remove_style+0x40>
           (part != LV_PART_ANY && part_act != part) ||
 80068b8:	4583      	cmp	fp, r0
 80068ba:	d0d7      	beq.n	800686c <lv_obj_remove_style+0x40>
 80068bc:	e7dc      	b.n	8006878 <lv_obj_remove_style+0x4c>
        if(obj->styles[i].is_trans) {
 80068be:	f898 3007 	ldrb.w	r3, [r8, #7]
 80068c2:	f013 0f02 	tst.w	r3, #2
 80068c6:	d108      	bne.n	80068da <lv_obj_remove_style+0xae>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 80068c8:	68e3      	ldr	r3, [r4, #12]
 80068ca:	eb03 020a 	add.w	r2, r3, sl
 80068ce:	79d2      	ldrb	r2, [r2, #7]
 80068d0:	f012 0f03 	tst.w	r2, #3
 80068d4:	d109      	bne.n	80068ea <lv_obj_remove_style+0xbe>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 80068d6:	462a      	mov	r2, r5
 80068d8:	e01f      	b.n	800691a <lv_obj_remove_style+0xee>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 80068da:	2300      	movs	r3, #0
 80068dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068e0:	4659      	mov	r1, fp
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff f9d4 	bl	8005c90 <trans_del>
 80068e8:	e7ee      	b.n	80068c8 <lv_obj_remove_style+0x9c>
            lv_style_reset(obj->styles[i].style);
 80068ea:	f853 000a 	ldr.w	r0, [r3, sl]
 80068ee:	f005 fd3a 	bl	800c366 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 80068f2:	68e3      	ldr	r3, [r4, #12]
 80068f4:	f853 000a 	ldr.w	r0, [r3, sl]
 80068f8:	f005 fba4 	bl	800c044 <lv_mem_free>
            obj->styles[i].style = NULL;
 80068fc:	68e3      	ldr	r3, [r4, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f843 200a 	str.w	r2, [r3, sl]
 8006904:	e7e7      	b.n	80068d6 <lv_obj_remove_style+0xaa>
            obj->styles[j] = obj->styles[j + 1];
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	1c56      	adds	r6, r2, #1
 800690a:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800690e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006912:	c903      	ldmia	r1, {r0, r1}
 8006914:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 8006918:	4632      	mov	r2, r6
 800691a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800691c:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8006920:	1e4b      	subs	r3, r1, #1
 8006922:	4293      	cmp	r3, r2
 8006924:	d8ef      	bhi.n	8006906 <lv_obj_remove_style+0xda>
        obj->style_cnt--;
 8006926:	313f      	adds	r1, #63	; 0x3f
 8006928:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800692c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800692e:	f361 1309 	bfi	r3, r1, #4, #6
 8006932:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006934:	00c9      	lsls	r1, r1, #3
 8006936:	68e0      	ldr	r0, [r4, #12]
 8006938:	f005 fba2 	bl	800c080 <lv_mem_realloc>
 800693c:	60e0      	str	r0, [r4, #12]
        deleted = true;
 800693e:	2301      	movs	r3, #1
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	e79a      	b.n	800687a <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 8006944:	9b02      	ldr	r3, [sp, #8]
 8006946:	b10b      	cbz	r3, 800694c <lv_obj_remove_style+0x120>
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	b913      	cbnz	r3, 8006952 <lv_obj_remove_style+0x126>
}
 800694c:	b005      	add	sp, #20
 800694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refresh_style(obj, part, prop);
 8006952:	461a      	mov	r2, r3
 8006954:	4659      	mov	r1, fp
 8006956:	4620      	mov	r0, r4
 8006958:	f7ff fdfe 	bl	8006558 <lv_obj_refresh_style>
}
 800695c:	e7f6      	b.n	800694c <lv_obj_remove_style+0x120>
	...

08006960 <trans_anim_ready_cb>:
{
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 8006964:	6804      	ldr	r4, [r0, #0]
    lv_obj_t * obj = tr->obj;
 8006966:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 8006968:	88a6      	ldrh	r6, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800696a:	4827      	ldr	r0, [pc, #156]	; (8006a08 <trans_anim_ready_cb+0xa8>)
 800696c:	f005 fa0c 	bl	800bd88 <_lv_ll_get_head>
 8006970:	4601      	mov	r1, r0
 8006972:	e003      	b.n	800697c <trans_anim_ready_cb+0x1c>
 8006974:	4824      	ldr	r0, [pc, #144]	; (8006a08 <trans_anim_ready_cb+0xa8>)
 8006976:	f005 fa0f 	bl	800bd98 <_lv_ll_get_next>
 800697a:	4601      	mov	r1, r0
 800697c:	b179      	cbz	r1, 800699e <trans_anim_ready_cb+0x3e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800697e:	42a1      	cmp	r1, r4
 8006980:	d0f8      	beq.n	8006974 <trans_anim_ready_cb+0x14>
 8006982:	680a      	ldr	r2, [r1, #0]
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d1f4      	bne.n	8006974 <trans_anim_ready_cb+0x14>
 800698a:	688a      	ldr	r2, [r1, #8]
 800698c:	68a3      	ldr	r3, [r4, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d1f0      	bne.n	8006974 <trans_anim_ready_cb+0x14>
 8006992:	888a      	ldrh	r2, [r1, #4]
 8006994:	88a3      	ldrh	r3, [r4, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d1ec      	bne.n	8006974 <trans_anim_ready_cb+0x14>
            running = true;
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <trans_anim_ready_cb+0x40>
    bool running = false;
 800699e:	2300      	movs	r3, #0
    if(!running) {
 80069a0:	b113      	cbz	r3, 80069a8 <trans_anim_ready_cb+0x48>
}
 80069a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(i = 0; i < obj->style_cnt; i++) {
 80069a6:	3301      	adds	r3, #1
 80069a8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 80069aa:	f3c2 1205 	ubfx	r2, r2, #4, #6
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d9f7      	bls.n	80069a2 <trans_anim_ready_cb+0x42>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 80069b2:	68ea      	ldr	r2, [r5, #12]
 80069b4:	00df      	lsls	r7, r3, #3
 80069b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80069ba:	79d1      	ldrb	r1, [r2, #7]
 80069bc:	f011 0f02 	tst.w	r1, #2
 80069c0:	d0f1      	beq.n	80069a6 <trans_anim_ready_cb+0x46>
 80069c2:	6852      	ldr	r2, [r2, #4]
 80069c4:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80069c8:	68a1      	ldr	r1, [r4, #8]
 80069ca:	428a      	cmp	r2, r1
 80069cc:	d1eb      	bne.n	80069a6 <trans_anim_ready_cb+0x46>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80069ce:	4621      	mov	r1, r4
 80069d0:	480d      	ldr	r0, [pc, #52]	; (8006a08 <trans_anim_ready_cb+0xa8>)
 80069d2:	f005 fa1b 	bl	800be0c <_lv_ll_remove>
                lv_mem_free(tr);
 80069d6:	4620      	mov	r0, r4
 80069d8:	f005 fb34 	bl	800c044 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 80069dc:	68ec      	ldr	r4, [r5, #12]
 80069de:	eb04 0807 	add.w	r8, r4, r7
                lv_style_remove_prop(obj_style->style, prop);
 80069e2:	4631      	mov	r1, r6
 80069e4:	59e0      	ldr	r0, [r4, r7]
 80069e6:	f005 fd0f 	bl	800c408 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 80069ea:	68eb      	ldr	r3, [r5, #12]
 80069ec:	59d8      	ldr	r0, [r3, r7]
 80069ee:	f005 fe35 	bl	800c65c <lv_style_is_empty>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d0d5      	beq.n	80069a2 <trans_anim_ready_cb+0x42>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 80069f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80069fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80069fe:	59e1      	ldr	r1, [r4, r7]
 8006a00:	4628      	mov	r0, r5
 8006a02:	f7ff ff13 	bl	800682c <lv_obj_remove_style>
 8006a06:	e7cc      	b.n	80069a2 <trans_anim_ready_cb+0x42>
 8006a08:	20000bfc 	.word	0x20000bfc

08006a0c <trans_anim_start_cb>:
{
 8006a0c:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
 8006a0e:	6804      	ldr	r4, [r0, #0]
    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 8006a10:	68a0      	ldr	r0, [r4, #8]
 8006a12:	f7ff fbd1 	bl	80061b8 <lv_obj_style_get_selector_part>
 8006a16:	4605      	mov	r5, r0
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 8006a18:	88a2      	ldrh	r2, [r4, #4]
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	f7ff fc63 	bl	80062e8 <lv_obj_get_style_prop>
 8006a22:	60e0      	str	r0, [r4, #12]
    lv_style_prop_t prop_tmp = tr->prop;
 8006a24:	88a6      	ldrh	r6, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 8006a26:	2300      	movs	r3, #0
 8006a28:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	4629      	mov	r1, r5
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	f7ff f92d 	bl	8005c90 <trans_del>
    tr->prop = prop_tmp;
 8006a36:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 8006a38:	68a1      	ldr	r1, [r4, #8]
 8006a3a:	6820      	ldr	r0, [r4, #0]
 8006a3c:	f7ff fa00 	bl	8005e40 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 8006a40:	68e2      	ldr	r2, [r4, #12]
 8006a42:	88a1      	ldrh	r1, [r4, #4]
 8006a44:	6800      	ldr	r0, [r0, #0]
 8006a46:	f005 fea9 	bl	800c79c <lv_style_set_prop>
}
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}

08006a4c <lv_obj_calculate_style_text_align>:
{
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4605      	mov	r5, r0
 8006a50:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8006a52:	225b      	movs	r2, #91	; 0x5b
 8006a54:	f7ff fc48 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_text_align_t)v.num;
 8006a58:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006a5a:	2216      	movs	r2, #22
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f7ff fc42 	bl	80062e8 <lv_obj_get_style_prop>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8006a64:	b904      	cbnz	r4, 8006a68 <lv_obj_calculate_style_text_align+0x1c>
 8006a66:	2401      	movs	r4, #1
}
 8006a68:	4620      	mov	r0, r4
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}

08006a6c <lv_obj_get_style_opa_recursive>:
{
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4604      	mov	r4, r0
 8006a70:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8006a72:	2260      	movs	r2, #96	; 0x60
 8006a74:	f7ff fc38 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006a78:	b2c3      	uxtb	r3, r0
    if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d92a      	bls.n	8006ad4 <lv_obj_get_style_opa_recursive+0x68>
    if(opa_obj < LV_OPA_MAX) {
 8006a7e:	2bfc      	cmp	r3, #252	; 0xfc
 8006a80:	d806      	bhi.n	8006a90 <lv_obj_get_style_opa_recursive+0x24>
        opa_final = ((uint32_t)opa_final * opa_obj) >> 8;
 8006a82:	ebc3 2003 	rsb	r0, r3, r3, lsl #8
 8006a86:	f3c0 2507 	ubfx	r5, r0, #8, #8
    if(part != LV_PART_MAIN) {
 8006a8a:	b11e      	cbz	r6, 8006a94 <lv_obj_get_style_opa_recursive+0x28>
        part = LV_PART_MAIN;
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	e00a      	b.n	8006aa6 <lv_obj_get_style_opa_recursive+0x3a>
    lv_opa_t opa_final = LV_OPA_COVER;
 8006a90:	25ff      	movs	r5, #255	; 0xff
 8006a92:	e7fa      	b.n	8006a8a <lv_obj_get_style_opa_recursive+0x1e>
        obj = lv_obj_get_parent(obj);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 f84e 	bl	8006b36 <lv_obj_get_parent>
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	e003      	b.n	8006aa6 <lv_obj_get_style_opa_recursive+0x3a>
        obj = lv_obj_get_parent(obj);
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f849 	bl	8006b36 <lv_obj_get_parent>
 8006aa4:	4604      	mov	r4, r0
    while(obj) {
 8006aa6:	b17c      	cbz	r4, 8006ac8 <lv_obj_get_style_opa_recursive+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8006aa8:	2260      	movs	r2, #96	; 0x60
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4620      	mov	r0, r4
 8006aae:	f7ff fc1b 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006ab2:	b2c3      	uxtb	r3, r0
        if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d910      	bls.n	8006ada <lv_obj_get_style_opa_recursive+0x6e>
        if(opa_obj < LV_OPA_MAX) {
 8006ab8:	2bfc      	cmp	r3, #252	; 0xfc
 8006aba:	d8f0      	bhi.n	8006a9e <lv_obj_get_style_opa_recursive+0x32>
            opa_final = ((uint32_t)opa_final * opa_obj) >> 8;
 8006abc:	4618      	mov	r0, r3
 8006abe:	fb05 f000 	mul.w	r0, r5, r0
 8006ac2:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8006ac6:	e7ea      	b.n	8006a9e <lv_obj_get_style_opa_recursive+0x32>
    if(opa_final <= LV_OPA_MIN) return LV_OPA_TRANSP;
 8006ac8:	2d02      	cmp	r5, #2
 8006aca:	d908      	bls.n	8006ade <lv_obj_get_style_opa_recursive+0x72>
    if(opa_final >= LV_OPA_MAX) return LV_OPA_COVER;
 8006acc:	2dfc      	cmp	r5, #252	; 0xfc
 8006ace:	d902      	bls.n	8006ad6 <lv_obj_get_style_opa_recursive+0x6a>
 8006ad0:	25ff      	movs	r5, #255	; 0xff
 8006ad2:	e000      	b.n	8006ad6 <lv_obj_get_style_opa_recursive+0x6a>
    if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 8006ad4:	2500      	movs	r5, #0
}
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
        if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 8006ada:	2500      	movs	r5, #0
 8006adc:	e7fb      	b.n	8006ad6 <lv_obj_get_style_opa_recursive+0x6a>
    if(opa_final <= LV_OPA_MIN) return LV_OPA_TRANSP;
 8006ade:	2500      	movs	r5, #0
 8006ae0:	e7f9      	b.n	8006ad6 <lv_obj_get_style_opa_recursive+0x6a>

08006ae2 <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8006ae2:	b508      	push	{r3, lr}
 8006ae4:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 8006ae6:	460a      	mov	r2, r1
 8006ae8:	2101      	movs	r1, #1
 8006aea:	f7ff fdc9 	bl	8006680 <lv_obj_set_local_style_prop>
}
 8006aee:	bd08      	pop	{r3, pc}

08006af0 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8006af0:	b508      	push	{r3, lr}
 8006af2:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 8006af4:	460a      	mov	r2, r1
 8006af6:	2107      	movs	r1, #7
 8006af8:	f7ff fdc2 	bl	8006680 <lv_obj_set_local_style_prop>
}
 8006afc:	bd08      	pop	{r3, pc}

08006afe <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8006afe:	b508      	push	{r3, lr}
 8006b00:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 8006b02:	460a      	mov	r2, r1
 8006b04:	2108      	movs	r1, #8
 8006b06:	f7ff fdbb 	bl	8006680 <lv_obj_set_local_style_prop>
}
 8006b0a:	bd08      	pop	{r3, pc}

08006b0c <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 8006b0c:	b508      	push	{r3, lr}
 8006b0e:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 8006b10:	460a      	mov	r2, r1
 8006b12:	2109      	movs	r1, #9
 8006b14:	f7ff fdb4 	bl	8006680 <lv_obj_set_local_style_prop>
}
 8006b18:	bd08      	pop	{r3, pc}

08006b1a <lv_obj_set_style_bg_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_COLUMN, v, selector);
}

void lv_obj_set_style_bg_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 8006b1a:	b508      	push	{r3, lr}
 8006b1c:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_COLOR, v, selector);
 8006b1e:	b28a      	uxth	r2, r1
 8006b20:	2120      	movs	r1, #32
 8006b22:	f7ff fdad 	bl	8006680 <lv_obj_set_local_style_prop>
}
 8006b26:	bd08      	pop	{r3, pc}

08006b28 <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 8006b28:	b508      	push	{r3, lr}
 8006b2a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	215b      	movs	r1, #91	; 0x5b
 8006b30:	f7ff fda6 	bl	8006680 <lv_obj_set_local_style_prop>
}
 8006b34:	bd08      	pop	{r3, pc}

08006b36 <lv_obj_get_parent>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 8006b36:	b108      	cbz	r0, 8006b3c <lv_obj_get_parent+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 8006b38:	6840      	ldr	r0, [r0, #4]
 8006b3a:	4770      	bx	lr
}
 8006b3c:	4770      	bx	lr

08006b3e <lv_obj_get_screen>:
{
 8006b3e:	b510      	push	{r4, lr}
        par = lv_obj_get_parent(act_par);
 8006b40:	4604      	mov	r4, r0
 8006b42:	f7ff fff8 	bl	8006b36 <lv_obj_get_parent>
    } while(par != NULL);
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d1fa      	bne.n	8006b40 <lv_obj_get_screen+0x2>
}
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	bd10      	pop	{r4, pc}
	...

08006b50 <lv_obj_get_disp>:
{
 8006b50:	b510      	push	{r4, lr}
 8006b52:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8006b54:	6843      	ldr	r3, [r0, #4]
 8006b56:	b113      	cbz	r3, 8006b5e <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 8006b58:	f7ff fff1 	bl	8006b3e <lv_obj_get_screen>
 8006b5c:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8006b5e:	480a      	ldr	r0, [pc, #40]	; (8006b88 <lv_obj_get_disp+0x38>)
 8006b60:	f005 f912 	bl	800bd88 <_lv_ll_get_head>
 8006b64:	b150      	cbz	r0, 8006b7c <lv_obj_get_disp+0x2c>
        for(i = 0; i < d->screen_cnt; i++) {
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <lv_obj_get_disp+0x1c>
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d905      	bls.n	8006b7e <lv_obj_get_disp+0x2e>
            if(d->screens[i] == scr) return d;
 8006b72:	68c2      	ldr	r2, [r0, #12]
 8006b74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b78:	42a2      	cmp	r2, r4
 8006b7a:	d1f6      	bne.n	8006b6a <lv_obj_get_disp+0x1a>
}
 8006b7c:	bd10      	pop	{r4, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8006b7e:	4601      	mov	r1, r0
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <lv_obj_get_disp+0x38>)
 8006b82:	f005 f909 	bl	800bd98 <_lv_ll_get_next>
 8006b86:	e7ed      	b.n	8006b64 <lv_obj_get_disp+0x14>
 8006b88:	20000bb4 	.word	0x20000bb4

08006b8c <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8006b8c:	6880      	ldr	r0, [r0, #8]
 8006b8e:	b188      	cbz	r0, 8006bb4 <lv_obj_get_child+0x28>

    uint32_t idu;
    if(id < 0) {
 8006b90:	2900      	cmp	r1, #0
 8006b92:	db07      	blt.n	8006ba4 <lv_obj_get_child+0x18>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
        idu = (uint32_t) id;
    }
    else {
        idu = id;
 8006b94:	460b      	mov	r3, r1
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8006b96:	6842      	ldr	r2, [r0, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d90a      	bls.n	8006bb2 <lv_obj_get_child+0x26>
    else return obj->spec_attr->children[id];
 8006b9c:	6803      	ldr	r3, [r0, #0]
 8006b9e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006ba2:	4770      	bx	lr
        id = obj->spec_attr->child_cnt + id;
 8006ba4:	6843      	ldr	r3, [r0, #4]
 8006ba6:	4419      	add	r1, r3
 8006ba8:	460b      	mov	r3, r1
        if(id < 0) return NULL;
 8006baa:	2900      	cmp	r1, #0
 8006bac:	daf3      	bge.n	8006b96 <lv_obj_get_child+0xa>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	4770      	bx	lr
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8006bb2:	2000      	movs	r0, #0
}
 8006bb4:	4770      	bx	lr

08006bb6 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8006bb6:	6883      	ldr	r3, [r0, #8]
 8006bb8:	b10b      	cbz	r3, 8006bbe <lv_obj_get_child_cnt+0x8>
    return obj->spec_attr->child_cnt;
 8006bba:	6858      	ldr	r0, [r3, #4]
 8006bbc:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8006bbe:	2000      	movs	r0, #0
}
 8006bc0:	4770      	bx	lr
	...

08006bc4 <get_max_row>:
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
    }
}

static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	b082      	sub	sp, #8
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 8006bc8:	6803      	ldr	r3, [r0, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	fbb3 f1f1 	udiv	r1, r3, r1

    if(max_row > area_h) max_row = area_h;
 8006bd2:	4615      	mov	r5, r2
 8006bd4:	428a      	cmp	r2, r1
 8006bd6:	db00      	blt.n	8006bda <get_max_row+0x16>
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 8006bd8:	460d      	mov	r5, r1

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 8006bda:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <get_max_row+0x74>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	b31b      	cbz	r3, 8006c2c <get_max_row+0x68>
        lv_area_t tmp;
        tmp.x1 = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	f8ad 3000 	strh.w	r3, [sp]
        tmp.x2 = 0;
 8006bea:	f8ad 3004 	strh.w	r3, [sp, #4]
        tmp.y1 = 0;
 8006bee:	f8ad 3002 	strh.w	r3, [sp, #2]

        lv_coord_t h_tmp = max_row;
 8006bf2:	b22c      	sxth	r4, r5
        do {
            tmp.y2 = h_tmp - 1;
 8006bf4:	4626      	mov	r6, r4
 8006bf6:	3c01      	subs	r4, #1
 8006bf8:	b224      	sxth	r4, r4
 8006bfa:	f8ad 4006 	strh.w	r4, [sp, #6]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <get_max_row+0x74>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	6983      	ldr	r3, [r0, #24]
 8006c06:	4669      	mov	r1, sp
 8006c08:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006c0a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006c0e:	b293      	uxth	r3, r2
 8006c10:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8006c14:	1a5b      	subs	r3, r3, r1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3301      	adds	r3, #1
 8006c1a:	b21b      	sxth	r3, r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dd02      	ble.n	8006c26 <get_max_row+0x62>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
        } while(h_tmp > 0);
 8006c20:	2c00      	cmp	r4, #0
 8006c22:	dce7      	bgt.n	8006bf4 <get_max_row+0x30>
            h_tmp--;
 8006c24:	4626      	mov	r6, r4

        if(h_tmp <= 0) {
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	dd03      	ble.n	8006c32 <get_max_row+0x6e>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
        }
        else {
            max_row = tmp.y2 + 1;
 8006c2a:	1c55      	adds	r5, r2, #1
        }
    }

    return max_row;
 8006c2c:	4628      	mov	r0, r5
}
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 8006c32:	2000      	movs	r0, #0
 8006c34:	e7fb      	b.n	8006c2e <get_max_row+0x6a>
 8006c36:	bf00      	nop
 8006c38:	20000b58 	.word	0x20000b58

08006c3c <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 8006c3c:	b510      	push	{r4, lr}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006c3e:	888b      	ldrh	r3, [r1, #4]
 8006c40:	f8b1 c000 	ldrh.w	ip, [r1]
 8006c44:	eba3 030c 	sub.w	r3, r3, ip
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006c4e:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8006c52:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8006c56:	ebac 0c0e 	sub.w	ip, ip, lr
 8006c5a:	fa1f fc8c 	uxth.w	ip, ip
 8006c5e:	f10c 0c01 	add.w	ip, ip, #1
 8006c62:	fa0f fc8c 	sxth.w	ip, ip
    lv_coord_t area_w = lv_area_get_width(area);
    lv_coord_t area_h = lv_area_get_height(area);
    uint32_t total = area_w * area_h;
 8006c66:	fb0c f303 	mul.w	r3, ip, r3
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	f04f 0c00 	mov.w	ip, #0
    while(i > j) {
 8006c70:	e00a      	b.n	8006c88 <draw_buf_rotate_180+0x4c>
        tmp = color_p[i];
 8006c72:	f832 e013 	ldrh.w	lr, [r2, r3, lsl #1]
        color_p[i] = color_p[j];
 8006c76:	f832 401c 	ldrh.w	r4, [r2, ip, lsl #1]
 8006c7a:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
        color_p[j] = tmp;
 8006c7e:	f822 e01c 	strh.w	lr, [r2, ip, lsl #1]
        i--;
 8006c82:	3b01      	subs	r3, #1
        j++;
 8006c84:	f10c 0c01 	add.w	ip, ip, #1
    while(i > j) {
 8006c88:	4563      	cmp	r3, ip
 8006c8a:	d8f2      	bhi.n	8006c72 <draw_buf_rotate_180+0x36>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 8006c8c:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
    area->y2 = drv->ver_res - area->y1 - 1;
 8006c90:	8842      	ldrh	r2, [r0, #2]
 8006c92:	884b      	ldrh	r3, [r1, #2]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	b292      	uxth	r2, r2
 8006c98:	3a01      	subs	r2, #1
 8006c9a:	80ca      	strh	r2, [r1, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 8006c9c:	8843      	ldrh	r3, [r0, #2]
 8006c9e:	eba3 030c 	sub.w	r3, r3, ip
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	804b      	strh	r3, [r1, #2]
    tmp_coord = area->x2;
 8006ca8:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
    area->x2 = drv->hor_res - area->x1 - 1;
 8006cac:	8802      	ldrh	r2, [r0, #0]
 8006cae:	880b      	ldrh	r3, [r1, #0]
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	b292      	uxth	r2, r2
 8006cb4:	3a01      	subs	r2, #1
 8006cb6:	808a      	strh	r2, [r1, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 8006cb8:	8803      	ldrh	r3, [r0, #0]
 8006cba:	eba3 030c 	sub.w	r3, r3, ip
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	800b      	strh	r3, [r1, #0]
}
 8006cc4:	bd10      	pop	{r4, pc}

08006cc6 <draw_buf_rotate_90>:

static void LV_ATTRIBUTE_FAST_MEM draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 8006cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cca:	4604      	mov	r4, r0
 8006ccc:	4608      	mov	r0, r1
 8006cce:	4611      	mov	r1, r2
 8006cd0:	9d06      	ldr	r5, [sp, #24]

    uint32_t invert = (area_w * area_h) - 1;
 8006cd2:	fb02 f800 	mul.w	r8, r2, r0
 8006cd6:	f108 38ff 	add.w	r8, r8, #4294967295
    uint32_t initial_i = ((area_w - 1) * area_h);
 8006cda:	1e47      	subs	r7, r0, #1
 8006cdc:	fb02 f707 	mul.w	r7, r2, r7
    for(lv_coord_t y = 0; y < area_h; y++) {
 8006ce0:	2600      	movs	r6, #0
 8006ce2:	e011      	b.n	8006d08 <draw_buf_rotate_90+0x42>
        for(lv_coord_t x = 0; x < area_w; x++) {
            rot_buf[i] = *(orig_color_p++);
            if(invert_i)
                i += area_h;
            else
                i -= area_h;
 8006ce4:	ebae 0e01 	sub.w	lr, lr, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 8006ce8:	f10c 0c01 	add.w	ip, ip, #1
 8006cec:	fa0f fc8c 	sxth.w	ip, ip
 8006cf0:	4584      	cmp	ip, r0
 8006cf2:	da07      	bge.n	8006d04 <draw_buf_rotate_90+0x3e>
            rot_buf[i] = *(orig_color_p++);
 8006cf4:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006cf8:	f825 201e 	strh.w	r2, [r5, lr, lsl #1]
            if(invert_i)
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d0f1      	beq.n	8006ce4 <draw_buf_rotate_90+0x1e>
                i += area_h;
 8006d00:	448e      	add	lr, r1
 8006d02:	e7f1      	b.n	8006ce8 <draw_buf_rotate_90+0x22>
    for(lv_coord_t y = 0; y < area_h; y++) {
 8006d04:	3601      	adds	r6, #1
 8006d06:	b236      	sxth	r6, r6
 8006d08:	428e      	cmp	r6, r1
 8006d0a:	da07      	bge.n	8006d1c <draw_buf_rotate_90+0x56>
        uint32_t i = initial_i + y;
 8006d0c:	eb06 0e07 	add.w	lr, r6, r7
        if(invert_i)
 8006d10:	b10c      	cbz	r4, 8006d16 <draw_buf_rotate_90+0x50>
            i = invert - i;
 8006d12:	eba8 0e0e 	sub.w	lr, r8, lr
{
 8006d16:	f04f 0c00 	mov.w	ip, #0
 8006d1a:	e7e9      	b.n	8006cf0 <draw_buf_rotate_90+0x2a>
        }
    }
}
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d20 <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006d24:	2400      	movs	r4, #0
 8006d26:	e04c      	b.n	8006dc2 <draw_buf_rotate_90_sqr+0xa2>
                    &color_p[j * w + inv_i]
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 8006d28:	fb01 5604 	mla	r6, r1, r4, r5
                    &color_p[j * w + inv_i],
 8006d2c:	fb01 c505 	mla	r5, r1, r5, ip
                    &color_p[inv_i * w + inv_j],
 8006d30:	fb01 3c0c 	mla	ip, r1, ip, r3
                    &color_p[inv_j * w + i]
 8006d34:	fb01 4303 	mla	r3, r1, r3, r4
    tmp = *a;
 8006d38:	f832 7016 	ldrh.w	r7, [r2, r6, lsl #1]
    *a = *b;
 8006d3c:	f832 8015 	ldrh.w	r8, [r2, r5, lsl #1]
 8006d40:	f822 8016 	strh.w	r8, [r2, r6, lsl #1]
    *b = *c;
 8006d44:	f832 601c 	ldrh.w	r6, [r2, ip, lsl #1]
 8006d48:	f822 6015 	strh.w	r6, [r2, r5, lsl #1]
    *c = *d;
 8006d4c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8006d50:	f822 501c 	strh.w	r5, [r2, ip, lsl #1]
    *d = tmp;
 8006d54:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006d58:	f10e 0e01 	add.w	lr, lr, #1
 8006d5c:	fa0f fe8e 	sxth.w	lr, lr
 8006d60:	4675      	mov	r5, lr
 8006d62:	1c4b      	adds	r3, r1, #1
 8006d64:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006d68:	ebbe 0f63 	cmp.w	lr, r3, asr #1
 8006d6c:	da27      	bge.n	8006dbe <draw_buf_rotate_90_sqr+0x9e>
            lv_coord_t inv_i = (w - 1) - i;
 8006d6e:	b28b      	uxth	r3, r1
 8006d70:	eba3 0c04 	sub.w	ip, r3, r4
 8006d74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006d78:	fa0f fc8c 	sxth.w	ip, ip
            lv_coord_t inv_j = (w - 1) - j;
 8006d7c:	fa1f fe8e 	uxth.w	lr, lr
 8006d80:	eba3 030e 	sub.w	r3, r3, lr
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b21b      	sxth	r3, r3
            if(is_270) {
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d0cd      	beq.n	8006d28 <draw_buf_rotate_90_sqr+0x8>
                    &color_p[i * w + j],
 8006d8c:	fb01 5704 	mla	r7, r1, r4, r5
                    &color_p[inv_j * w + i],
 8006d90:	fb01 4603 	mla	r6, r1, r3, r4
                    &color_p[inv_i * w + inv_j],
 8006d94:	fb01 330c 	mla	r3, r1, ip, r3
                    &color_p[j * w + inv_i]
 8006d98:	fb01 c505 	mla	r5, r1, r5, ip
    tmp = *a;
 8006d9c:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
    *a = *b;
 8006da0:	f832 8016 	ldrh.w	r8, [r2, r6, lsl #1]
 8006da4:	f822 8017 	strh.w	r8, [r2, r7, lsl #1]
    *b = *c;
 8006da8:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8006dac:	f822 7016 	strh.w	r7, [r2, r6, lsl #1]
    *c = *d;
 8006db0:	f832 6015 	ldrh.w	r6, [r2, r5, lsl #1]
 8006db4:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
    *d = tmp;
 8006db8:	f822 c015 	strh.w	ip, [r2, r5, lsl #1]
}
 8006dbc:	e7cc      	b.n	8006d58 <draw_buf_rotate_90_sqr+0x38>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006dbe:	3401      	adds	r4, #1
 8006dc0:	b224      	sxth	r4, r4
 8006dc2:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
 8006dc6:	ebb4 0f63 	cmp.w	r4, r3, asr #1
 8006dca:	da02      	bge.n	8006dd2 <draw_buf_rotate_90_sqr+0xb2>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006dcc:	f04f 0e00 	mov.w	lr, #0
 8006dd0:	e7c6      	b.n	8006d60 <draw_buf_rotate_90_sqr+0x40>
                );
            }

        }
    }
}
 8006dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006dd6 <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	b082      	sub	sp, #8
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 8006dda:	880c      	ldrh	r4, [r1, #0]
 8006ddc:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8006de0:	4474      	add	r4, lr
    lv_area_t offset_area = {
 8006de2:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 8006de6:	884c      	ldrh	r4, [r1, #2]
 8006de8:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 8006dec:	4464      	add	r4, ip
    lv_area_t offset_area = {
 8006dee:	f8ad 4002 	strh.w	r4, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 8006df2:	888c      	ldrh	r4, [r1, #4]
 8006df4:	44a6      	add	lr, r4
    lv_area_t offset_area = {
 8006df6:	f8ad e004 	strh.w	lr, [sp, #4]
        .y2 = area->y2 + drv->offset_y
 8006dfa:	88c9      	ldrh	r1, [r1, #6]
 8006dfc:	448c      	add	ip, r1
    lv_area_t offset_area = {
 8006dfe:	f8ad c006 	strh.w	ip, [sp, #6]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 8006e02:	6943      	ldr	r3, [r0, #20]
 8006e04:	4669      	mov	r1, sp
 8006e06:	4798      	blx	r3
}
 8006e08:	b002      	add	sp, #8
 8006e0a:	bd10      	pop	{r4, pc}

08006e0c <lv_refr_get_top_obj>:
{
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	4606      	mov	r6, r0
 8006e12:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 8006e14:	2200      	movs	r2, #0
 8006e16:	3114      	adds	r1, #20
 8006e18:	f004 fbd0 	bl	800b5bc <_lv_area_is_in>
 8006e1c:	b368      	cbz	r0, 8006e7a <lv_refr_get_top_obj+0x6e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 8006e1e:	2101      	movs	r1, #1
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7fb fe2d 	bl	8002a80 <lv_obj_has_flag>
 8006e26:	bb60      	cbnz	r0, 8006e82 <lv_refr_get_top_obj+0x76>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7fc fbef 	bl	800360c <_lv_obj_get_layer_type>
 8006e2e:	bb50      	cbnz	r0, 8006e86 <lv_refr_get_top_obj+0x7a>
    info.res = LV_COVER_RES_COVER;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f88d 3000 	strb.w	r3, [sp]
    info.area = area_p;
 8006e36:	9601      	str	r6, [sp, #4]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006e38:	466a      	mov	r2, sp
 8006e3a:	2112      	movs	r1, #18
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f7fa ff65 	bl	8001d0c <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 8006e42:	f89d 3000 	ldrb.w	r3, [sp]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d01f      	beq.n	8006e8a <lv_refr_get_top_obj+0x7e>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f7ff feb3 	bl	8006bb6 <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 8006e50:	1e45      	subs	r5, r0, #1
    lv_obj_t * found_p = NULL;
 8006e52:	2300      	movs	r3, #0
    for(i = child_cnt - 1; i >= 0; i--) {
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	db0a      	blt.n	8006e6e <lv_refr_get_top_obj+0x62>
        lv_obj_t * child = obj->spec_attr->children[i];
 8006e58:	68a3      	ldr	r3, [r4, #8]
 8006e5a:	681b      	ldr	r3, [r3, #0]
        found_p = lv_refr_get_top_obj(area_p, child);
 8006e5c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff ffd3 	bl	8006e0c <lv_refr_get_top_obj>
        if(found_p != NULL) {
 8006e66:	4603      	mov	r3, r0
 8006e68:	b908      	cbnz	r0, 8006e6e <lv_refr_get_top_obj+0x62>
    for(i = child_cnt - 1; i >= 0; i--) {
 8006e6a:	3d01      	subs	r5, #1
 8006e6c:	e7f2      	b.n	8006e54 <lv_refr_get_top_obj+0x48>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 8006e6e:	b92b      	cbnz	r3, 8006e7c <lv_refr_get_top_obj+0x70>
 8006e70:	f89d 2000 	ldrb.w	r2, [sp]
 8006e74:	b912      	cbnz	r2, 8006e7c <lv_refr_get_top_obj+0x70>
        found_p = obj;
 8006e76:	4623      	mov	r3, r4
 8006e78:	e000      	b.n	8006e7c <lv_refr_get_top_obj+0x70>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	e7fa      	b.n	8006e7c <lv_refr_get_top_obj+0x70>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e7f8      	b.n	8006e7c <lv_refr_get_top_obj+0x70>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e7f6      	b.n	8006e7c <lv_refr_get_top_obj+0x70>

08006e8e <layer_get_area>:
{
 8006e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	4680      	mov	r8, r0
 8006e96:	460e      	mov	r6, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	461f      	mov	r7, r3
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	f7fc fb7c 	bl	800359a <_lv_obj_get_ext_draw_size>
 8006ea2:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 8006ea4:	a906      	add	r1, sp, #24
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7fc fcf3 	bl	8003892 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 8006eac:	462a      	mov	r2, r5
 8006eae:	4629      	mov	r1, r5
 8006eb0:	a806      	add	r0, sp, #24
 8006eb2:	f004 fa31 	bl	800b318 <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 8006eb6:	2c02      	cmp	r4, #2
 8006eb8:	d005      	beq.n	8006ec6 <layer_get_area+0x38>
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 8006eba:	2c01      	cmp	r4, #1
 8006ebc:	d031      	beq.n	8006f22 <layer_get_area+0x94>
        return LV_RES_INV;
 8006ebe:	2000      	movs	r0, #0
}
 8006ec0:	b008      	add	sp, #32
 8006ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_area_t tranf_coords = obj_coords_ext;
 8006ec6:	ac02      	add	r4, sp, #8
 8006ec8:	ab08      	add	r3, sp, #32
 8006eca:	e913 0003 	ldmdb	r3, {r0, r1}
 8006ece:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7fc ff9e 	bl	8003e1a <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 8006ede:	4622      	mov	r2, r4
 8006ee0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006ee4:	4668      	mov	r0, sp
 8006ee6:	f004 fa35 	bl	800b354 <_lv_area_intersect>
 8006eea:	b908      	cbnz	r0, 8006ef0 <layer_get_area+0x62>
            return LV_RES_INV;
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7e7      	b.n	8006ec0 <layer_get_area+0x32>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 8006ef0:	ac04      	add	r4, sp, #16
 8006ef2:	466b      	mov	r3, sp
 8006ef4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ef8:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 8006efc:	2301      	movs	r3, #1
 8006efe:	2200      	movs	r2, #0
 8006f00:	4621      	mov	r1, r4
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7fc ff89 	bl	8003e1a <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 8006f08:	aa06      	add	r2, sp, #24
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f004 fa21 	bl	800b354 <_lv_area_intersect>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d0ea      	beq.n	8006eec <layer_get_area+0x5e>
        *layer_area_out = inverse_clip_coords_for_obj;
 8006f16:	4623      	mov	r3, r4
 8006f18:	cb03      	ldmia	r3!, {r0, r1}
 8006f1a:	6038      	str	r0, [r7, #0]
 8006f1c:	6079      	str	r1, [r7, #4]
    return LV_RES_OK;
 8006f1e:	2001      	movs	r0, #1
 8006f20:	e7ce      	b.n	8006ec0 <layer_get_area+0x32>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 8006f22:	aa06      	add	r2, sp, #24
 8006f24:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006f28:	a804      	add	r0, sp, #16
 8006f2a:	f004 fa13 	bl	800b354 <_lv_area_intersect>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d0c6      	beq.n	8006ec0 <layer_get_area+0x32>
        *layer_area_out = clip_coords_for_obj;
 8006f32:	ab04      	add	r3, sp, #16
 8006f34:	cb03      	ldmia	r3!, {r0, r1}
 8006f36:	6038      	str	r0, [r7, #0]
 8006f38:	6079      	str	r1, [r7, #4]
    return LV_RES_OK;
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	e7c0      	b.n	8006ec0 <layer_get_area+0x32>

08006f3e <layer_alpha_test>:
{
 8006f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f40:	b083      	sub	sp, #12
 8006f42:	460d      	mov	r5, r1
 8006f44:	4614      	mov	r4, r2
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8006f46:	f013 0f01 	tst.w	r3, #1
 8006f4a:	d10d      	bne.n	8006f68 <layer_alpha_test+0x2a>
        has_alpha = false;
 8006f4c:	2200      	movs	r2, #0
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8006f56:	4299      	cmp	r1, r3
 8006f58:	dd00      	ble.n	8006f5c <layer_alpha_test+0x1e>
 8006f5a:	81e3      	strh	r3, [r4, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f001 fd12 	bl	8008988 <lv_draw_layer_adjust>
}
 8006f64:	b003      	add	sp, #12
 8006f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f68:	4606      	mov	r6, r0
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 8006f6a:	f102 0708 	add.w	r7, r2, #8
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f100 0114 	add.w	r1, r0, #20
 8006f74:	4638      	mov	r0, r7
 8006f76:	f004 fb21 	bl	800b5bc <_lv_area_is_in>
 8006f7a:	b938      	cbnz	r0, 8006f8c <layer_alpha_test+0x4e>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 8006f7c:	8963      	ldrh	r3, [r4, #10]
 8006f7e:	8a22      	ldrh	r2, [r4, #16]
 8006f80:	4413      	add	r3, r2
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	81e3      	strh	r3, [r4, #14]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	e7e0      	b.n	8006f4e <layer_alpha_test+0x10>
            info.res = LV_COVER_RES_COVER;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f88d 3000 	strb.w	r3, [sp]
            info.area = &layer_ctx->area_act;
 8006f92:	9701      	str	r7, [sp, #4]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006f94:	466a      	mov	r2, sp
 8006f96:	2112      	movs	r1, #18
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7fa feb7 	bl	8001d0c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 8006f9e:	f89d 3000 	ldrb.w	r3, [sp]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1ea      	bne.n	8006f7c <layer_alpha_test+0x3e>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	e7d1      	b.n	8006f4e <layer_alpha_test+0x10>
	...

08006fac <lv_refr_join_area>:
{
 8006fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fb0:	b083      	sub	sp, #12
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	e051      	b.n	800705a <lv_refr_join_area+0xae>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8006fb6:	3401      	adds	r4, #1
 8006fb8:	4b30      	ldr	r3, [pc, #192]	; (800707c <lv_refr_join_area+0xd0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8006fc0:	42a2      	cmp	r2, r4
 8006fc2:	d949      	bls.n	8007058 <lv_refr_join_area+0xac>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8006fc4:	191a      	adds	r2, r3, r4
 8006fc6:	f892 2130 	ldrb.w	r2, [r2, #304]	; 0x130
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	d1f3      	bne.n	8006fb6 <lv_refr_join_area+0xa>
 8006fce:	42ac      	cmp	r4, r5
 8006fd0:	d0f1      	beq.n	8006fb6 <lv_refr_join_area+0xa>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8006fd2:	1da8      	adds	r0, r5, #6
 8006fd4:	1da1      	adds	r1, r4, #6
 8006fd6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006fda:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006fde:	f004 facb 	bl	800b578 <_lv_area_is_on>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0e7      	beq.n	8006fb6 <lv_refr_join_area+0xa>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8006fe6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800707c <lv_refr_join_area+0xd0>
 8006fea:	f8d8 3000 	ldr.w	r3, [r8]
 8006fee:	1da9      	adds	r1, r5, #6
 8006ff0:	00ce      	lsls	r6, r1, #3
 8006ff2:	1da2      	adds	r2, r4, #6
 8006ff4:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8006ff8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006ffc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007000:	4668      	mov	r0, sp
 8007002:	f004 f9d4 	bl	800b3ae <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007006:	4668      	mov	r0, sp
 8007008:	f004 f978 	bl	800b2fc <lv_area_get_size>
 800700c:	4607      	mov	r7, r0
 800700e:	f8d8 0000 	ldr.w	r0, [r8]
 8007012:	4430      	add	r0, r6
 8007014:	f004 f972 	bl	800b2fc <lv_area_get_size>
 8007018:	4606      	mov	r6, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800701a:	f8d8 0000 	ldr.w	r0, [r8]
 800701e:	4448      	add	r0, r9
 8007020:	f004 f96c 	bl	800b2fc <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007024:	4406      	add	r6, r0
 8007026:	42b7      	cmp	r7, r6
 8007028:	d2c5      	bcs.n	8006fb6 <lv_refr_join_area+0xa>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800702a:	f8d8 2000 	ldr.w	r2, [r8]
    dest->x1 = src->x1;
 800702e:	f9bd 1000 	ldrsh.w	r1, [sp]
 8007032:	1dab      	adds	r3, r5, #6
 8007034:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    dest->y1 = src->y1;
 8007038:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800703c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007040:	8059      	strh	r1, [r3, #2]
    dest->x2 = src->x2;
 8007042:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8007046:	8099      	strh	r1, [r3, #4]
    dest->y2 = src->y2;
 8007048:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 800704c:	80d9      	strh	r1, [r3, #6]
                disp_refr->inv_area_joined[join_from] = 1;
 800704e:	4422      	add	r2, r4
 8007050:	2301      	movs	r3, #1
 8007052:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
 8007056:	e7ae      	b.n	8006fb6 <lv_refr_join_area+0xa>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007058:	3501      	adds	r5, #1
 800705a:	4b08      	ldr	r3, [pc, #32]	; (800707c <lv_refr_join_area+0xd0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8007062:	42aa      	cmp	r2, r5
 8007064:	d906      	bls.n	8007074 <lv_refr_join_area+0xc8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007066:	442b      	add	r3, r5
 8007068:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f3      	bne.n	8007058 <lv_refr_join_area+0xac>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007070:	2400      	movs	r4, #0
 8007072:	e7a1      	b.n	8006fb8 <lv_refr_join_area+0xc>
}
 8007074:	b003      	add	sp, #12
 8007076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800707a:	bf00      	nop
 800707c:	20000b58 	.word	0x20000b58

08007080 <refr_sync_areas>:
    if(!disp_refr->driver->direct_mode) return;
 8007080:	4b4f      	ldr	r3, [pc, #316]	; (80071c0 <refr_sync_areas+0x140>)
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	6803      	ldr	r3, [r0, #0]
 8007086:	7c1a      	ldrb	r2, [r3, #16]
 8007088:	f012 0f01 	tst.w	r2, #1
 800708c:	f000 8096 	beq.w	80071bc <refr_sync_areas+0x13c>
    if(disp_refr->driver->draw_buf->buf2 == NULL) return;
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8091 	beq.w	80071bc <refr_sync_areas+0x13c>
{
 800709a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709e:	b08d      	sub	sp, #52	; 0x34
    if(_lv_ll_is_empty(&disp_refr->sync_areas)) return;
 80070a0:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80070a4:	f004 ff0a 	bl	800bebc <_lv_ll_is_empty>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	f040 8084 	bne.w	80071b6 <refr_sync_areas+0x136>
    void * buf_off_screen = disp_refr->driver->draw_buf->buf_act;
 80070ae:	4b44      	ldr	r3, [pc, #272]	; (80071c0 <refr_sync_areas+0x140>)
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	6803      	ldr	r3, [r0, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f8d3 b008 	ldr.w	fp, [r3, #8]
    void * buf_on_screen = disp_refr->driver->draw_buf->buf_act == disp_refr->driver->draw_buf->buf1
 80070ba:	f8d3 a000 	ldr.w	sl, [r3]
                           : disp_refr->driver->draw_buf->buf1;
 80070be:	45da      	cmp	sl, fp
 80070c0:	d00a      	beq.n	80070d8 <refr_sync_areas+0x58>
    lv_coord_t stride = lv_disp_get_hor_res(disp_refr);
 80070c2:	f003 fe93 	bl	800adec <lv_disp_get_hor_res>
 80070c6:	4681      	mov	r9, r0
    lv_area_t res[4] = {0};
 80070c8:	2220      	movs	r2, #32
 80070ca:	2100      	movs	r1, #0
 80070cc:	a804      	add	r0, sp, #16
 80070ce:	f007 fb1d 	bl	800e70c <memset>
    for(i = 0; i < disp_refr->inv_p; i++) {
 80070d2:	f04f 0800 	mov.w	r8, #0
 80070d6:	e03a      	b.n	800714e <refr_sync_areas+0xce>
                           : disp_refr->driver->draw_buf->buf1;
 80070d8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80070dc:	e7f1      	b.n	80070c2 <refr_sync_areas+0x42>
                    new_area = _lv_ll_ins_prev(&disp_refr->sync_areas, sync_area);
 80070de:	4b38      	ldr	r3, [pc, #224]	; (80071c0 <refr_sync_areas+0x140>)
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	4629      	mov	r1, r5
 80070e4:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80070e8:	f004 fe5d 	bl	800bda6 <_lv_ll_ins_prev>
 80070ec:	4602      	mov	r2, r0
                    *new_area = res[j];
 80070ee:	ab0c      	add	r3, sp, #48	; 0x30
 80070f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070f4:	3b20      	subs	r3, #32
 80070f6:	cb03      	ldmia	r3!, {r0, r1}
 80070f8:	6010      	str	r0, [r2, #0]
 80070fa:	6051      	str	r1, [r2, #4]
                for(j = 0; j < res_c; j++) {
 80070fc:	3401      	adds	r4, #1
 80070fe:	b264      	sxtb	r4, r4
 8007100:	42b4      	cmp	r4, r6
 8007102:	dbec      	blt.n	80070de <refr_sync_areas+0x5e>
                _lv_ll_remove(&disp_refr->sync_areas, sync_area);
 8007104:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <refr_sync_areas+0x140>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	4629      	mov	r1, r5
 800710a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800710e:	f004 fe7d 	bl	800be0c <_lv_ll_remove>
                lv_mem_free(sync_area);
 8007112:	4628      	mov	r0, r5
 8007114:	f004 ff96 	bl	800c044 <lv_mem_free>
                for(j = 0; j < res_c; j++) {
 8007118:	463d      	mov	r5, r7
        while(sync_area != NULL) {
 800711a:	b1b5      	cbz	r5, 800714a <refr_sync_areas+0xca>
            next_area = _lv_ll_get_next(&disp_refr->sync_areas, sync_area);
 800711c:	4c28      	ldr	r4, [pc, #160]	; (80071c0 <refr_sync_areas+0x140>)
 800711e:	6820      	ldr	r0, [r4, #0]
 8007120:	4629      	mov	r1, r5
 8007122:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8007126:	f004 fe37 	bl	800bd98 <_lv_ll_get_next>
 800712a:	4607      	mov	r7, r0
            res_c = _lv_area_diff(res, sync_area, &disp_refr->inv_areas[i]);
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f108 0206 	add.w	r2, r8, #6
 8007132:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007136:	4629      	mov	r1, r5
 8007138:	a804      	add	r0, sp, #16
 800713a:	f004 fa94 	bl	800b666 <_lv_area_diff>
 800713e:	4606      	mov	r6, r0
            if(res_c != -1) {
 8007140:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007144:	d0e8      	beq.n	8007118 <refr_sync_areas+0x98>
                for(j = 0; j < res_c; j++) {
 8007146:	2400      	movs	r4, #0
 8007148:	e7da      	b.n	8007100 <refr_sync_areas+0x80>
    for(i = 0; i < disp_refr->inv_p; i++) {
 800714a:	f108 0801 	add.w	r8, r8, #1
 800714e:	4b1c      	ldr	r3, [pc, #112]	; (80071c0 <refr_sync_areas+0x140>)
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8007156:	4543      	cmp	r3, r8
 8007158:	d90b      	bls.n	8007172 <refr_sync_areas+0xf2>
        if(disp_refr->inv_area_joined[i]) continue;
 800715a:	eb00 0308 	add.w	r3, r0, r8
 800715e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f1      	bne.n	800714a <refr_sync_areas+0xca>
        sync_area = _lv_ll_get_head(&disp_refr->sync_areas);
 8007166:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800716a:	f004 fe0d 	bl	800bd88 <_lv_ll_get_head>
 800716e:	4605      	mov	r5, r0
        while(sync_area != NULL) {
 8007170:	e7d3      	b.n	800711a <refr_sync_areas+0x9a>
    for(sync_area = _lv_ll_get_head(&disp_refr->sync_areas); sync_area != NULL;
 8007172:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8007176:	f004 fe07 	bl	800bd88 <_lv_ll_get_head>
 800717a:	4604      	mov	r4, r0
 800717c:	b1ac      	cbz	r4, 80071aa <refr_sync_areas+0x12a>
        disp_refr->driver->draw_ctx->buffer_copy(
 800717e:	4d10      	ldr	r5, [pc, #64]	; (80071c0 <refr_sync_areas+0x140>)
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007186:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8007188:	9402      	str	r4, [sp, #8]
 800718a:	f8cd 9004 	str.w	r9, [sp, #4]
 800718e:	f8cd a000 	str.w	sl, [sp]
 8007192:	4623      	mov	r3, r4
 8007194:	464a      	mov	r2, r9
 8007196:	4659      	mov	r1, fp
 8007198:	47b0      	blx	r6
        sync_area = _lv_ll_get_next(&disp_refr->sync_areas, sync_area)) {
 800719a:	6828      	ldr	r0, [r5, #0]
 800719c:	4621      	mov	r1, r4
 800719e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80071a2:	f004 fdf9 	bl	800bd98 <_lv_ll_get_next>
 80071a6:	4604      	mov	r4, r0
 80071a8:	e7e8      	b.n	800717c <refr_sync_areas+0xfc>
    _lv_ll_clear(&disp_refr->sync_areas);
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <refr_sync_areas+0x140>)
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80071b2:	f004 fe6d 	bl	800be90 <_lv_ll_clear>
}
 80071b6:	b00d      	add	sp, #52	; 0x34
 80071b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000b58 	.word	0x20000b58

080071c4 <draw_buf_rotate>:
{
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	b08b      	sub	sp, #44	; 0x2c
 80071ca:	4680      	mov	r8, r0
 80071cc:	460f      	mov	r7, r1
    lv_disp_drv_t * drv = disp_refr->driver;
 80071ce:	4b84      	ldr	r3, [pc, #528]	; (80073e0 <draw_buf_rotate+0x21c>)
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	6804      	ldr	r4, [r0, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 80071d4:	7c23      	ldrb	r3, [r4, #16]
 80071d6:	f013 0f02 	tst.w	r3, #2
 80071da:	d002      	beq.n	80071e2 <draw_buf_rotate+0x1e>
 80071dc:	f013 0f04 	tst.w	r3, #4
 80071e0:	d107      	bne.n	80071f2 <draw_buf_rotate+0x2e>
    if(drv->rotated == LV_DISP_ROT_180) {
 80071e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d006      	beq.n	80071f8 <draw_buf_rotate+0x34>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d00f      	beq.n	800720e <draw_buf_rotate+0x4a>
 80071ee:	2b30      	cmp	r3, #48	; 0x30
 80071f0:	d00d      	beq.n	800720e <draw_buf_rotate+0x4a>
}
 80071f2:	b00b      	add	sp, #44	; 0x2c
 80071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        draw_buf_rotate_180(drv, area, color_p);
 80071f8:	463a      	mov	r2, r7
 80071fa:	4641      	mov	r1, r8
 80071fc:	4620      	mov	r0, r4
 80071fe:	f7ff fd1d 	bl	8006c3c <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 8007202:	463a      	mov	r2, r7
 8007204:	4641      	mov	r1, r8
 8007206:	4620      	mov	r0, r4
 8007208:	f7ff fde5 	bl	8006dd6 <call_flush_cb>
 800720c:	e7f1      	b.n	80071f2 <draw_buf_rotate+0x2e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800720e:	f003 fe32 	bl	800ae76 <lv_disp_get_draw_buf>
 8007212:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007214:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007218:	f9b8 1000 	ldrsh.w	r1, [r8]
 800721c:	b28a      	uxth	r2, r1
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	b29b      	uxth	r3, r3
 8007222:	3301      	adds	r3, #1
 8007224:	b298      	uxth	r0, r3
 8007226:	9008      	str	r0, [sp, #32]
 8007228:	b218      	sxth	r0, r3
 800722a:	9004      	str	r0, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800722c:	f8b8 a006 	ldrh.w	sl, [r8, #6]
 8007230:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8007234:	9309      	str	r3, [sp, #36]	; 0x24
 8007236:	b29b      	uxth	r3, r3
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	ebaa 0a03 	sub.w	sl, sl, r3
 800723e:	fa1f fa8a 	uxth.w	sl, sl
 8007242:	f10a 0a01 	add.w	sl, sl, #1
 8007246:	fa0f fa8a 	sxth.w	sl, sl
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800724a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800724e:	fbb3 f3f0 	udiv	r3, r3, r0
 8007252:	4553      	cmp	r3, sl
 8007254:	bfa8      	it	ge
 8007256:	4653      	movge	r3, sl
 8007258:	9306      	str	r3, [sp, #24]
        if(drv->rotated == LV_DISP_ROT_90) {
 800725a:	7c23      	ldrb	r3, [r4, #16]
 800725c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007260:	2b10      	cmp	r3, #16
 8007262:	d00b      	beq.n	800727c <draw_buf_rotate+0xb8>
            area->y1 = area->x1;
 8007264:	f8a8 1002 	strh.w	r1, [r8, #2]
            area->y2 = area->y1 + area_w - 1;
 8007268:	9b08      	ldr	r3, [sp, #32]
 800726a:	18d3      	adds	r3, r2, r3
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	f8a8 3006 	strh.w	r3, [r8, #6]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8007274:	2600      	movs	r6, #0
 8007276:	9603      	str	r6, [sp, #12]
 8007278:	46bb      	mov	fp, r7
 800727a:	e062      	b.n	8007342 <draw_buf_rotate+0x17e>
            area->y2 = drv->ver_res - area->x1 - 1;
 800727c:	8863      	ldrh	r3, [r4, #2]
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	f8a8 3006 	strh.w	r3, [r8, #6]
            area->y1 = area->y2 - area_w + 1;
 800728a:	9b08      	ldr	r3, [sp, #32]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	b29b      	uxth	r3, r3
 8007290:	3301      	adds	r3, #1
 8007292:	f8a8 3002 	strh.w	r3, [r8, #2]
 8007296:	e7ed      	b.n	8007274 <draw_buf_rotate+0xb0>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8007298:	7c20      	ldrb	r0, [r4, #16]
 800729a:	f000 0030 	and.w	r0, r0, #48	; 0x30
 800729e:	465a      	mov	r2, fp
 80072a0:	4619      	mov	r1, r3
 80072a2:	2830      	cmp	r0, #48	; 0x30
 80072a4:	bf14      	ite	ne
 80072a6:	2000      	movne	r0, #0
 80072a8:	2001      	moveq	r0, #1
 80072aa:	f7ff fd39 	bl	8006d20 <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 80072ae:	7c23      	ldrb	r3, [r4, #16]
 80072b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072b4:	2b10      	cmp	r3, #16
 80072b6:	d00e      	beq.n	80072d6 <draw_buf_rotate+0x112>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 80072b8:	8822      	ldrh	r2, [r4, #0]
 80072ba:	9b07      	ldr	r3, [sp, #28]
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	3a01      	subs	r2, #1
 80072c0:	b293      	uxth	r3, r2
 80072c2:	f8a8 2004 	strh.w	r2, [r8, #4]
                    area->x1 = area->x2 - area_w + 1;
 80072c6:	9a08      	ldr	r2, [sp, #32]
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3301      	adds	r3, #1
 80072ce:	f8a8 3000 	strh.w	r3, [r8]
                height = area_w;
 80072d2:	9f04      	ldr	r7, [sp, #16]
 80072d4:	e06b      	b.n	80073ae <draw_buf_rotate+0x1ea>
                    area->x1 = init_y_off;
 80072d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d8:	f8a8 3000 	strh.w	r3, [r8]
                    area->x2 = init_y_off + area_w - 1;
 80072dc:	9b07      	ldr	r3, [sp, #28]
 80072de:	9a08      	ldr	r2, [sp, #32]
 80072e0:	4413      	add	r3, r2
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	f8a8 3004 	strh.w	r3, [r8, #4]
                height = area_w;
 80072ea:	9f04      	ldr	r7, [sp, #16]
 80072ec:	e05f      	b.n	80073ae <draw_buf_rotate+0x1ea>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 80072ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80072f2:	f004 fedf 	bl	800c0b4 <lv_mem_buf_get>
 80072f6:	9003      	str	r0, [sp, #12]
 80072f8:	e037      	b.n	800736a <draw_buf_rotate+0x1a6>
                    area->x1 = init_y_off + row;
 80072fa:	9b07      	ldr	r3, [sp, #28]
 80072fc:	199a      	adds	r2, r3, r6
 80072fe:	b293      	uxth	r3, r2
 8007300:	f8a8 2000 	strh.w	r2, [r8]
                    area->x2 = init_y_off + row + height - 1;
 8007304:	444b      	add	r3, r9
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	f8a8 3004 	strh.w	r3, [r8, #4]
 800730e:	e04e      	b.n	80073ae <draw_buf_rotate+0x1ea>
                draw_buf->flushing_last = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	616b      	str	r3, [r5, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8007314:	9a03      	ldr	r2, [sp, #12]
 8007316:	b15a      	cbz	r2, 8007330 <draw_buf_rotate+0x16c>
 8007318:	4641      	mov	r1, r8
 800731a:	4620      	mov	r0, r4
 800731c:	f7ff fd5b 	bl	8006dd6 <call_flush_cb>
            while(draw_buf->flushing) {
 8007320:	692b      	ldr	r3, [r5, #16]
 8007322:	b13b      	cbz	r3, 8007334 <draw_buf_rotate+0x170>
                if(drv->wait_cb) drv->wait_cb(drv);
 8007324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0fa      	beq.n	8007320 <draw_buf_rotate+0x15c>
 800732a:	4620      	mov	r0, r4
 800732c:	4798      	blx	r3
 800732e:	e7f7      	b.n	8007320 <draw_buf_rotate+0x15c>
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8007330:	465a      	mov	r2, fp
 8007332:	e7f1      	b.n	8007318 <draw_buf_rotate+0x154>
            color_p += area_w * height;
 8007334:	9b04      	ldr	r3, [sp, #16]
 8007336:	fb09 f903 	mul.w	r9, r9, r3
 800733a:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
            row += height;
 800733e:	443e      	add	r6, r7
 8007340:	b236      	sxth	r6, r6
        while(row < area_h) {
 8007342:	4556      	cmp	r6, sl
 8007344:	da43      	bge.n	80073ce <draw_buf_rotate+0x20a>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8007346:	9605      	str	r6, [sp, #20]
 8007348:	ebaa 0906 	sub.w	r9, sl, r6
 800734c:	9b06      	ldr	r3, [sp, #24]
 800734e:	4599      	cmp	r9, r3
 8007350:	bfa8      	it	ge
 8007352:	4699      	movge	r9, r3
 8007354:	fa0f f789 	sxth.w	r7, r9
            draw_buf->flushing = 1;
 8007358:	2301      	movs	r3, #1
 800735a:	612b      	str	r3, [r5, #16]
            if((row == 0) && (area_h >= area_w)) {
 800735c:	b916      	cbnz	r6, 8007364 <draw_buf_rotate+0x1a0>
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	459a      	cmp	sl, r3
 8007362:	da99      	bge.n	8007298 <draw_buf_rotate+0xd4>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0c1      	beq.n	80072ee <draw_buf_rotate+0x12a>
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800736a:	7c20      	ldrb	r0, [r4, #16]
 800736c:	f000 0030 	and.w	r0, r0, #48	; 0x30
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	465b      	mov	r3, fp
 8007376:	463a      	mov	r2, r7
 8007378:	9904      	ldr	r1, [sp, #16]
 800737a:	2830      	cmp	r0, #48	; 0x30
 800737c:	bf14      	ite	ne
 800737e:	2000      	movne	r0, #0
 8007380:	2001      	moveq	r0, #1
 8007382:	f7ff fca0 	bl	8006cc6 <draw_buf_rotate_90>
                if(drv->rotated == LV_DISP_ROT_90) {
 8007386:	7c23      	ldrb	r3, [r4, #16]
 8007388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800738c:	2b10      	cmp	r3, #16
 800738e:	d0b4      	beq.n	80072fa <draw_buf_rotate+0x136>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 8007390:	8823      	ldrh	r3, [r4, #0]
 8007392:	9a07      	ldr	r2, [sp, #28]
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	b29b      	uxth	r3, r3
 8007398:	1b9b      	subs	r3, r3, r6
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8a8 3004 	strh.w	r3, [r8, #4]
                    area->x1 = area->x2 - height + 1;
 80073a2:	eba2 0309 	sub.w	r3, r2, r9
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3301      	adds	r3, #1
 80073aa:	f8a8 3000 	strh.w	r3, [r8]
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 80073ae:	46b9      	mov	r9, r7
 80073b0:	9b05      	ldr	r3, [sp, #20]
 80073b2:	443b      	add	r3, r7
 80073b4:	459a      	cmp	sl, r3
 80073b6:	dcab      	bgt.n	8007310 <draw_buf_rotate+0x14c>
 80073b8:	69ab      	ldr	r3, [r5, #24]
 80073ba:	f013 0f01 	tst.w	r3, #1
 80073be:	d0a7      	beq.n	8007310 <draw_buf_rotate+0x14c>
 80073c0:	69ab      	ldr	r3, [r5, #24]
 80073c2:	f013 0f02 	tst.w	r3, #2
 80073c6:	d0a3      	beq.n	8007310 <draw_buf_rotate+0x14c>
                draw_buf->flushing_last = 1;
 80073c8:	2301      	movs	r3, #1
 80073ca:	616b      	str	r3, [r5, #20]
 80073cc:	e7a2      	b.n	8007314 <draw_buf_rotate+0x150>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f43f af0e 	beq.w	80071f2 <draw_buf_rotate+0x2e>
 80073d6:	4618      	mov	r0, r3
 80073d8:	f004 fece 	bl	800c178 <lv_mem_buf_release>
 80073dc:	e709      	b.n	80071f2 <draw_buf_rotate+0x2e>
 80073de:	bf00      	nop
 80073e0:	20000b58 	.word	0x20000b58

080073e4 <draw_buf_flush>:
{
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80073e8:	4b2e      	ldr	r3, [pc, #184]	; (80074a4 <draw_buf_flush+0xc0>)
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	f003 fd43 	bl	800ae76 <lv_disp_get_draw_buf>
 80073f0:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80073f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80073f8:	b10b      	cbz	r3, 80073fe <draw_buf_flush+0x1a>
 80073fa:	4630      	mov	r0, r6
 80073fc:	4798      	blx	r3
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 80073fe:	68e1      	ldr	r1, [r4, #12]
 8007400:	4b28      	ldr	r3, [pc, #160]	; (80074a4 <draw_buf_flush+0xc0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	f9b2 3000 	ldrsh.w	r3, [r2]
 800740a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800740e:	fb02 f303 	mul.w	r3, r2, r3
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	b16a      	cbz	r2, 8007432 <draw_buf_flush+0x4e>
 8007416:	6862      	ldr	r2, [r4, #4]
 8007418:	b15a      	cbz	r2, 8007432 <draw_buf_flush+0x4e>
 800741a:	4299      	cmp	r1, r3
 800741c:	d009      	beq.n	8007432 <draw_buf_flush+0x4e>
        while(draw_buf->flushing) {
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	b13b      	cbz	r3, 8007432 <draw_buf_flush+0x4e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8007422:	4b20      	ldr	r3, [pc, #128]	; (80074a4 <draw_buf_flush+0xc0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0f7      	beq.n	800741e <draw_buf_flush+0x3a>
 800742e:	4798      	blx	r3
 8007430:	e7f5      	b.n	800741e <draw_buf_flush+0x3a>
    draw_buf->flushing = 1;
 8007432:	2301      	movs	r3, #1
 8007434:	6123      	str	r3, [r4, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8007436:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <draw_buf_flush+0xc0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	f012 0f01 	tst.w	r2, #1
 8007444:	d006      	beq.n	8007454 <draw_buf_flush+0x70>
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	f013 0f02 	tst.w	r3, #2
 800744c:	d002      	beq.n	8007454 <draw_buf_flush+0x70>
 800744e:	2301      	movs	r3, #1
 8007450:	6163      	str	r3, [r4, #20]
 8007452:	e001      	b.n	8007458 <draw_buf_flush+0x74>
    else draw_buf->flushing_last = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	6163      	str	r3, [r4, #20]
    bool flushing_last = draw_buf->flushing_last;
 8007458:	6967      	ldr	r7, [r4, #20]
    if(disp->driver->flush_cb) {
 800745a:	6828      	ldr	r0, [r5, #0]
 800745c:	6943      	ldr	r3, [r0, #20]
 800745e:	b153      	cbz	r3, 8007476 <draw_buf_flush+0x92>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8007460:	7c03      	ldrb	r3, [r0, #16]
 8007462:	f013 0f30 	tst.w	r3, #48	; 0x30
 8007466:	d002      	beq.n	800746e <draw_buf_flush+0x8a>
 8007468:	f013 0f04 	tst.w	r3, #4
 800746c:	d112      	bne.n	8007494 <draw_buf_flush+0xb0>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800746e:	6832      	ldr	r2, [r6, #0]
 8007470:	6871      	ldr	r1, [r6, #4]
 8007472:	f7ff fcb0 	bl	8006dd6 <call_flush_cb>
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	b15b      	cbz	r3, 8007492 <draw_buf_flush+0xae>
 800747a:	6862      	ldr	r2, [r4, #4]
 800747c:	b14a      	cbz	r2, 8007492 <draw_buf_flush+0xae>
 800747e:	6829      	ldr	r1, [r5, #0]
 8007480:	7c09      	ldrb	r1, [r1, #16]
 8007482:	f011 0f01 	tst.w	r1, #1
 8007486:	d000      	beq.n	800748a <draw_buf_flush+0xa6>
 8007488:	b11f      	cbz	r7, 8007492 <draw_buf_flush+0xae>
        if(draw_buf->buf_act == draw_buf->buf1)
 800748a:	68a1      	ldr	r1, [r4, #8]
 800748c:	428b      	cmp	r3, r1
 800748e:	d006      	beq.n	800749e <draw_buf_flush+0xba>
            draw_buf->buf_act = draw_buf->buf1;
 8007490:	60a3      	str	r3, [r4, #8]
}
 8007492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 8007494:	6831      	ldr	r1, [r6, #0]
 8007496:	6870      	ldr	r0, [r6, #4]
 8007498:	f7ff fe94 	bl	80071c4 <draw_buf_rotate>
 800749c:	e7eb      	b.n	8007476 <draw_buf_flush+0x92>
            draw_buf->buf_act = draw_buf->buf2;
 800749e:	60a2      	str	r2, [r4, #8]
 80074a0:	e7f7      	b.n	8007492 <draw_buf_flush+0xae>
 80074a2:	bf00      	nop
 80074a4:	20000b58 	.word	0x20000b58

080074a8 <_lv_refr_init>:
}
 80074a8:	4770      	bx	lr

080074aa <lv_obj_redraw>:
{
 80074aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074ae:	b087      	sub	sp, #28
 80074b0:	4606      	mov	r6, r0
 80074b2:	460d      	mov	r5, r1
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80074b4:	f8d0 8008 	ldr.w	r8, [r0, #8]
    lv_obj_get_coords(obj, &obj_coords_ext);
 80074b8:	a902      	add	r1, sp, #8
 80074ba:	4628      	mov	r0, r5
 80074bc:	f7fc f9e9 	bl	8003892 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 80074c0:	4628      	mov	r0, r5
 80074c2:	f7fc f86a 	bl	800359a <_lv_obj_get_ext_draw_size>
 80074c6:	4601      	mov	r1, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 80074c8:	4602      	mov	r2, r0
 80074ca:	a802      	add	r0, sp, #8
 80074cc:	f003 ff24 	bl	800b318 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 80074d0:	aa02      	add	r2, sp, #8
 80074d2:	4641      	mov	r1, r8
 80074d4:	a804      	add	r0, sp, #16
 80074d6:	f003 ff3d 	bl	800b354 <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 80074da:	b1b0      	cbz	r0, 800750a <lv_obj_redraw+0x60>
 80074dc:	2301      	movs	r3, #1
    if(should_draw) {
 80074de:	4699      	mov	r9, r3
 80074e0:	b9eb      	cbnz	r3, 800751e <lv_obj_redraw+0x74>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80074e2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80074e6:	4628      	mov	r0, r5
 80074e8:	f7fb faca 	bl	8002a80 <lv_obj_has_flag>
 80074ec:	b348      	cbz	r0, 8007542 <lv_obj_redraw+0x98>
        clip_coords_for_children  = *clip_area_ori;
 80074ee:	466b      	mov	r3, sp
 80074f0:	f8d8 0000 	ldr.w	r0, [r8]
 80074f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074f8:	c303      	stmia	r3!, {r0, r1}
        draw_ctx->clip_area = &clip_coords_for_children;
 80074fa:	f8c6 d008 	str.w	sp, [r6, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80074fe:	4628      	mov	r0, r5
 8007500:	f7ff fb59 	bl	8006bb6 <lv_obj_get_child_cnt>
 8007504:	4607      	mov	r7, r0
        for(i = 0; i < child_cnt; i++) {
 8007506:	2400      	movs	r4, #0
 8007508:	e02b      	b.n	8007562 <lv_obj_redraw+0xb8>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800750a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800750e:	4628      	mov	r0, r5
 8007510:	f7fb fab6 	bl	8002a80 <lv_obj_has_flag>
 8007514:	b908      	cbnz	r0, 800751a <lv_obj_redraw+0x70>
 8007516:	2300      	movs	r3, #0
 8007518:	e7e1      	b.n	80074de <lv_obj_redraw+0x34>
 800751a:	2301      	movs	r3, #1
 800751c:	e7df      	b.n	80074de <lv_obj_redraw+0x34>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800751e:	ab04      	add	r3, sp, #16
 8007520:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 8007522:	4632      	mov	r2, r6
 8007524:	2114      	movs	r1, #20
 8007526:	4628      	mov	r0, r5
 8007528:	f7fa fbf0 	bl	8001d0c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800752c:	4632      	mov	r2, r6
 800752e:	2115      	movs	r1, #21
 8007530:	4628      	mov	r0, r5
 8007532:	f7fa fbeb 	bl	8001d0c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 8007536:	4632      	mov	r2, r6
 8007538:	2116      	movs	r1, #22
 800753a:	4628      	mov	r0, r5
 800753c:	f7fa fbe6 	bl	8001d0c <lv_event_send>
 8007540:	e7cf      	b.n	80074e2 <lv_obj_redraw+0x38>
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 8007542:	f105 0214 	add.w	r2, r5, #20
 8007546:	4641      	mov	r1, r8
 8007548:	4668      	mov	r0, sp
 800754a:	f003 ff03 	bl	800b354 <_lv_area_intersect>
 800754e:	b150      	cbz	r0, 8007566 <lv_obj_redraw+0xbc>
 8007550:	e7d3      	b.n	80074fa <lv_obj_redraw+0x50>
            lv_obj_t * child = obj->spec_attr->children[i];
 8007552:	68ab      	ldr	r3, [r5, #8]
 8007554:	681b      	ldr	r3, [r3, #0]
            refr_obj(draw_ctx, child);
 8007556:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800755a:	4630      	mov	r0, r6
 800755c:	f000 f81e 	bl	800759c <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 8007560:	3401      	adds	r4, #1
 8007562:	42bc      	cmp	r4, r7
 8007564:	d3f5      	bcc.n	8007552 <lv_obj_redraw+0xa8>
    if(should_draw) {
 8007566:	f1b9 0f00 	cmp.w	r9, #0
 800756a:	d104      	bne.n	8007576 <lv_obj_redraw+0xcc>
    draw_ctx->clip_area = clip_area_ori;
 800756c:	f8c6 8008 	str.w	r8, [r6, #8]
}
 8007570:	b007      	add	sp, #28
 8007572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        draw_ctx->clip_area = &clip_coords_for_obj;
 8007576:	ab04      	add	r3, sp, #16
 8007578:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800757a:	4632      	mov	r2, r6
 800757c:	2117      	movs	r1, #23
 800757e:	4628      	mov	r0, r5
 8007580:	f7fa fbc4 	bl	8001d0c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 8007584:	4632      	mov	r2, r6
 8007586:	2118      	movs	r1, #24
 8007588:	4628      	mov	r0, r5
 800758a:	f7fa fbbf 	bl	8001d0c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800758e:	4632      	mov	r2, r6
 8007590:	2119      	movs	r1, #25
 8007592:	4628      	mov	r0, r5
 8007594:	f7fa fbba 	bl	8001d0c <lv_event_send>
 8007598:	e7e8      	b.n	800756c <lv_obj_redraw+0xc2>
	...

0800759c <refr_obj>:
{
 800759c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075a0:	b08b      	sub	sp, #44	; 0x2c
 80075a2:	4605      	mov	r5, r0
 80075a4:	460c      	mov	r4, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 80075a6:	2101      	movs	r1, #1
 80075a8:	4620      	mov	r0, r4
 80075aa:	f7fb fa69 	bl	8002a80 <lv_obj_has_flag>
 80075ae:	b110      	cbz	r0, 80075b6 <refr_obj+0x1a>
}
 80075b0:	b00b      	add	sp, #44	; 0x2c
 80075b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80075b6:	4620      	mov	r0, r4
 80075b8:	f7fc f828 	bl	800360c <_lv_obj_get_layer_type>
    if(layer_type == LV_LAYER_TYPE_NONE) {
 80075bc:	4606      	mov	r6, r0
 80075be:	b920      	cbnz	r0, 80075ca <refr_obj+0x2e>
        lv_obj_redraw(draw_ctx, obj);
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f7ff ff71 	bl	80074aa <lv_obj_redraw>
 80075c8:	e7f2      	b.n	80075b0 <refr_obj+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA_LAYERED);
 80075ca:	2261      	movs	r2, #97	; 0x61
 80075cc:	2100      	movs	r1, #0
 80075ce:	4620      	mov	r0, r4
 80075d0:	f7fe fe8a 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80075d4:	fa5f f880 	uxtb.w	r8, r0
        if(opa < LV_OPA_MIN) return;
 80075d8:	f1b8 0f01 	cmp.w	r8, #1
 80075dc:	d9e8      	bls.n	80075b0 <refr_obj+0x14>
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 80075de:	ab02      	add	r3, sp, #8
 80075e0:	4632      	mov	r2, r6
 80075e2:	4621      	mov	r1, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	f7ff fc52 	bl	8006e8e <layer_get_area>
 80075ea:	4607      	mov	r7, r0
        if(res != LV_RES_OK) return;
 80075ec:	2801      	cmp	r0, #1
 80075ee:	d1df      	bne.n	80075b0 <refr_obj+0x14>
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 80075f0:	2200      	movs	r2, #0
 80075f2:	f104 0114 	add.w	r1, r4, #20
 80075f6:	a802      	add	r0, sp, #8
 80075f8:	f003 ffe0 	bl	800b5bc <_lv_area_is_in>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d16e      	bne.n	80076de <refr_obj+0x142>
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 8007600:	2e01      	cmp	r6, #1
 8007602:	d07c      	beq.n	80076fe <refr_obj+0x162>
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 8007604:	463a      	mov	r2, r7
 8007606:	a902      	add	r1, sp, #8
 8007608:	4628      	mov	r0, r5
 800760a:	f001 f98d 	bl	8008928 <lv_draw_layer_create>
        if(layer_ctx == NULL) {
 800760e:	4606      	mov	r6, r0
 8007610:	2800      	cmp	r0, #0
 8007612:	d0cd      	beq.n	80075b0 <refr_obj+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8007614:	226f      	movs	r2, #111	; 0x6f
 8007616:	2100      	movs	r1, #0
 8007618:	4620      	mov	r0, r4
 800761a:	f7fe fe65 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800761e:	fa0f f980 	sxth.w	r9, r0
        lv_point_t pivot = {
 8007622:	f8ad 9004 	strh.w	r9, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8007626:	2270      	movs	r2, #112	; 0x70
 8007628:	2100      	movs	r1, #0
 800762a:	4620      	mov	r0, r4
 800762c:	f7fe fe5c 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007630:	b200      	sxth	r0, r0
 8007632:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(LV_COORD_IS_PCT(pivot.x)) {
 8007636:	f409 43c0 	and.w	r3, r9, #24576	; 0x6000
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763e:	d062      	beq.n	8007706 <refr_obj+0x16a>
        if(LV_COORD_IS_PCT(pivot.y)) {
 8007640:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007648:	d079      	beq.n	800773e <refr_obj+0x1a2>
        lv_draw_img_dsc_init(&draw_dsc);
 800764a:	a804      	add	r0, sp, #16
 800764c:	f000 fc9a 	bl	8007f84 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 8007650:	f88d 801b 	strb.w	r8, [sp, #27]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8007654:	226e      	movs	r2, #110	; 0x6e
 8007656:	2100      	movs	r1, #0
 8007658:	4620      	mov	r0, r4
 800765a:	f7fe fe45 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800765e:	b200      	sxth	r0, r0
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 8007660:	f8ad 0010 	strh.w	r0, [sp, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 8007664:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
 8007668:	f340 8084 	ble.w	8007774 <refr_obj+0x1d8>
 800766c:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
 8007670:	f8ad 0010 	strh.w	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8007674:	226d      	movs	r2, #109	; 0x6d
 8007676:	2100      	movs	r1, #0
 8007678:	4620      	mov	r0, r4
 800767a:	f7fe fe35 	bl	80062e8 <lv_obj_get_style_prop>
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800767e:	f8ad 0012 	strh.w	r0, [sp, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007682:	2268      	movs	r2, #104	; 0x68
 8007684:	2100      	movs	r1, #0
 8007686:	4620      	mov	r0, r4
 8007688:	f7fe fe2e 	bl	80062e8 <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800768c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007690:	f360 0303 	bfi	r3, r0, #0, #4
 8007694:	f88d 301c 	strb.w	r3, [sp, #28]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8007698:	4b59      	ldr	r3, [pc, #356]	; (8007800 <refr_obj+0x264>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	7c1b      	ldrb	r3, [r3, #16]
 80076a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076a4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80076a8:	f363 0200 	bfi	r2, r3, #0, #1
 80076ac:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 80076b0:	f017 0802 	ands.w	r8, r7, #2
 80076b4:	f000 808e 	beq.w	80077d4 <refr_obj+0x238>
            layer_ctx->area_act = layer_ctx->area_full;
 80076b8:	f106 0308 	add.w	r3, r6, #8
 80076bc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80076c0:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 80076c4:	8973      	ldrh	r3, [r6, #10]
 80076c6:	8a72      	ldrh	r2, [r6, #18]
 80076c8:	4413      	add	r3, r2
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b21b      	sxth	r3, r3
 80076d0:	81f3      	strh	r3, [r6, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 80076d2:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80076d6:	4293      	cmp	r3, r2
 80076d8:	dd7c      	ble.n	80077d4 <refr_obj+0x238>
 80076da:	81f2      	strh	r2, [r6, #14]
 80076dc:	e07a      	b.n	80077d4 <refr_obj+0x238>
            info.res = LV_COVER_RES_COVER;
 80076de:	2300      	movs	r3, #0
 80076e0:	f88d 3010 	strb.w	r3, [sp, #16]
            info.area = &layer_area_full;
 80076e4:	ab02      	add	r3, sp, #8
 80076e6:	9305      	str	r3, [sp, #20]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80076e8:	aa04      	add	r2, sp, #16
 80076ea:	2112      	movs	r1, #18
 80076ec:	4620      	mov	r0, r4
 80076ee:	f7fa fb0d 	bl	8001d0c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 80076f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80076f6:	b103      	cbz	r3, 80076fa <refr_obj+0x15e>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 80076f8:	463b      	mov	r3, r7
 80076fa:	461f      	mov	r7, r3
 80076fc:	e780      	b.n	8007600 <refr_obj+0x64>
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 80076fe:	f047 0702 	orr.w	r7, r7, #2
 8007702:	b2ff      	uxtb	r7, r7
 8007704:	e77e      	b.n	8007604 <refr_obj+0x68>
        if(LV_COORD_IS_PCT(pivot.x)) {
 8007706:	f429 49c0 	bic.w	r9, r9, #24576	; 0x6000
 800770a:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
 800770e:	dc97      	bgt.n	8007640 <refr_obj+0xa4>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8007710:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 8007714:	dd01      	ble.n	800771a <refr_obj+0x17e>
 8007716:	f5c9 797a 	rsb	r9, r9, #1000	; 0x3e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800771a:	8b23      	ldrh	r3, [r4, #24]
 800771c:	8aa2      	ldrh	r2, [r4, #20]
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	b29b      	uxth	r3, r3
 8007722:	3301      	adds	r3, #1
 8007724:	b21b      	sxth	r3, r3
 8007726:	fb09 f903 	mul.w	r9, r9, r3
 800772a:	4b36      	ldr	r3, [pc, #216]	; (8007804 <refr_obj+0x268>)
 800772c:	fb83 2309 	smull	r2, r3, r3, r9
 8007730:	ea4f 79e9 	mov.w	r9, r9, asr #31
 8007734:	ebc9 1363 	rsb	r3, r9, r3, asr #5
 8007738:	f8ad 3004 	strh.w	r3, [sp, #4]
 800773c:	e780      	b.n	8007640 <refr_obj+0xa4>
        if(LV_COORD_IS_PCT(pivot.y)) {
 800773e:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8007742:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8007746:	dc80      	bgt.n	800764a <refr_obj+0xae>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8007748:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800774c:	dd01      	ble.n	8007752 <refr_obj+0x1b6>
 800774e:	f5c0 707a 	rsb	r0, r0, #1000	; 0x3e8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007752:	8b63      	ldrh	r3, [r4, #26]
 8007754:	8ae2      	ldrh	r2, [r4, #22]
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	b29b      	uxth	r3, r3
 800775a:	3301      	adds	r3, #1
 800775c:	b21b      	sxth	r3, r3
 800775e:	fb03 f000 	mul.w	r0, r3, r0
 8007762:	4b28      	ldr	r3, [pc, #160]	; (8007804 <refr_obj+0x268>)
 8007764:	fb83 2300 	smull	r2, r3, r3, r0
 8007768:	17c0      	asrs	r0, r0, #31
 800776a:	ebc0 1363 	rsb	r3, r0, r3, asr #5
 800776e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007772:	e76a      	b.n	800764a <refr_obj+0xae>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 8007774:	2800      	cmp	r0, #0
 8007776:	f6bf af7d 	bge.w	8007674 <refr_obj+0xd8>
 800777a:	f500 6061 	add.w	r0, r0, #3600	; 0xe10
 800777e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8007782:	e777      	b.n	8007674 <refr_obj+0xd8>
            lv_obj_redraw(draw_ctx, obj);
 8007784:	4621      	mov	r1, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f7ff fe8f 	bl	80074aa <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800778c:	8aa3      	ldrh	r3, [r4, #20]
 800778e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007792:	4413      	add	r3, r2
 8007794:	b29b      	uxth	r3, r3
 8007796:	686a      	ldr	r2, [r5, #4]
 8007798:	8811      	ldrh	r1, [r2, #0]
 800779a:	1a5b      	subs	r3, r3, r1
 800779c:	f8ad 3014 	strh.w	r3, [sp, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 80077a0:	8ae1      	ldrh	r1, [r4, #22]
 80077a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80077a6:	4419      	add	r1, r3
 80077a8:	b289      	uxth	r1, r1
 80077aa:	8853      	ldrh	r3, [r2, #2]
 80077ac:	1ac9      	subs	r1, r1, r3
 80077ae:	f8ad 1016 	strh.w	r1, [sp, #22]
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 80077b2:	aa04      	add	r2, sp, #16
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	f001 f8eb 	bl	8008992 <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 80077bc:	f1b8 0f00 	cmp.w	r8, #0
 80077c0:	d018      	beq.n	80077f4 <refr_obj+0x258>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 80077c2:	89f2      	ldrh	r2, [r6, #14]
 80077c4:	3201      	adds	r2, #1
 80077c6:	b293      	uxth	r3, r2
 80077c8:	8172      	strh	r2, [r6, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 80077ca:	8a72      	ldrh	r2, [r6, #18]
 80077cc:	4413      	add	r3, r2
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	81f3      	strh	r3, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 80077d4:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 80077d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80077dc:	429a      	cmp	r2, r3
 80077de:	dc09      	bgt.n	80077f4 <refr_obj+0x258>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 80077e0:	f1b8 0f00 	cmp.w	r8, #0
 80077e4:	d0ce      	beq.n	8007784 <refr_obj+0x1e8>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 80077e6:	463b      	mov	r3, r7
 80077e8:	4632      	mov	r2, r6
 80077ea:	4629      	mov	r1, r5
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff fba6 	bl	8006f3e <layer_alpha_test>
 80077f2:	e7c7      	b.n	8007784 <refr_obj+0x1e8>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	f001 f8d0 	bl	800899c <lv_draw_layer_destroy>
 80077fc:	e6d8      	b.n	80075b0 <refr_obj+0x14>
 80077fe:	bf00      	nop
 8007800:	20000b58 	.word	0x20000b58
 8007804:	51eb851f 	.word	0x51eb851f

08007808 <refr_obj_and_children>:
{
 8007808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800780c:	4681      	mov	r9, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800780e:	4688      	mov	r8, r1
 8007810:	b159      	cbz	r1, 800782a <refr_obj_and_children+0x22>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 8007812:	f1b8 0f00 	cmp.w	r8, #0
 8007816:	d03a      	beq.n	800788e <refr_obj_and_children+0x86>
    refr_obj(draw_ctx, top_obj);
 8007818:	4641      	mov	r1, r8
 800781a:	4648      	mov	r0, r9
 800781c:	f7ff febe 	bl	800759c <refr_obj>
    parent = lv_obj_get_parent(top_obj);
 8007820:	4640      	mov	r0, r8
 8007822:	f7ff f988 	bl	8006b36 <lv_obj_get_parent>
 8007826:	4605      	mov	r5, r0
    while(parent != NULL) {
 8007828:	e029      	b.n	800787e <refr_obj_and_children+0x76>
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800782a:	4b1a      	ldr	r3, [pc, #104]	; (8007894 <refr_obj_and_children+0x8c>)
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f7fa f913 	bl	8001a58 <lv_disp_get_scr_act>
 8007832:	4680      	mov	r8, r0
 8007834:	e7ed      	b.n	8007812 <refr_obj_and_children+0xa>
                refr_obj(draw_ctx, child);
 8007836:	4648      	mov	r0, r9
 8007838:	f7ff feb0 	bl	800759c <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800783c:	3401      	adds	r4, #1
 800783e:	42b4      	cmp	r4, r6
 8007840:	d209      	bcs.n	8007856 <refr_obj_and_children+0x4e>
            lv_obj_t * child = parent->spec_attr->children[i];
 8007842:	68ab      	ldr	r3, [r5, #8]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            if(!go) {
 800784a:	2f00      	cmp	r7, #0
 800784c:	d1f3      	bne.n	8007836 <refr_obj_and_children+0x2e>
                if(child == border_p) go = true;
 800784e:	4588      	cmp	r8, r1
 8007850:	d1f4      	bne.n	800783c <refr_obj_and_children+0x34>
 8007852:	2701      	movs	r7, #1
 8007854:	e7f2      	b.n	800783c <refr_obj_and_children+0x34>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 8007856:	464a      	mov	r2, r9
 8007858:	2117      	movs	r1, #23
 800785a:	4628      	mov	r0, r5
 800785c:	f7fa fa56 	bl	8001d0c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 8007860:	464a      	mov	r2, r9
 8007862:	2118      	movs	r1, #24
 8007864:	4628      	mov	r0, r5
 8007866:	f7fa fa51 	bl	8001d0c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800786a:	464a      	mov	r2, r9
 800786c:	2119      	movs	r1, #25
 800786e:	4628      	mov	r0, r5
 8007870:	f7fa fa4c 	bl	8001d0c <lv_event_send>
        parent = lv_obj_get_parent(parent);
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff f95e 	bl	8006b36 <lv_obj_get_parent>
        border_p = parent;
 800787a:	46a8      	mov	r8, r5
        parent = lv_obj_get_parent(parent);
 800787c:	4605      	mov	r5, r0
    while(parent != NULL) {
 800787e:	b135      	cbz	r5, 800788e <refr_obj_and_children+0x86>
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 8007880:	4628      	mov	r0, r5
 8007882:	f7ff f998 	bl	8006bb6 <lv_obj_get_child_cnt>
 8007886:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 8007888:	2400      	movs	r4, #0
        bool go = false;
 800788a:	4627      	mov	r7, r4
        for(i = 0; i < child_cnt; i++) {
 800788c:	e7d7      	b.n	800783e <refr_obj_and_children+0x36>
}
 800788e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007892:	bf00      	nop
 8007894:	20000b58 	.word	0x20000b58

08007898 <refr_area_part>:
{
 8007898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789c:	b094      	sub	sp, #80	; 0x50
 800789e:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80078a0:	4b6d      	ldr	r3, [pc, #436]	; (8007a58 <refr_area_part+0x1c0>)
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	f003 fae7 	bl	800ae76 <lv_disp_get_draw_buf>
 80078a8:	4604      	mov	r4, r0
    if(draw_ctx->init_buf)
 80078aa:	68eb      	ldr	r3, [r5, #12]
 80078ac:	b10b      	cbz	r3, 80078b2 <refr_area_part+0x1a>
        draw_ctx->init_buf(draw_ctx);
 80078ae:	4628      	mov	r0, r5
 80078b0:	4798      	blx	r3
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 80078b2:	68e0      	ldr	r0, [r4, #12]
 80078b4:	4b68      	ldr	r3, [pc, #416]	; (8007a58 <refr_area_part+0x1c0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	f9b2 3000 	ldrsh.w	r3, [r2]
 80078be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	b112      	cbz	r2, 80078d0 <refr_area_part+0x38>
 80078ca:	6861      	ldr	r1, [r4, #4]
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d030      	beq.n	8007932 <refr_area_part+0x9a>
 80078d0:	b11a      	cbz	r2, 80078da <refr_area_part+0x42>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 80078d2:	6862      	ldr	r2, [r4, #4]
 80078d4:	b10a      	cbz	r2, 80078da <refr_area_part+0x42>
 80078d6:	4298      	cmp	r0, r3
 80078d8:	d02b      	beq.n	8007932 <refr_area_part+0x9a>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 80078da:	686c      	ldr	r4, [r5, #4]
 80078dc:	4e5e      	ldr	r6, [pc, #376]	; (8007a58 <refr_area_part+0x1c0>)
 80078de:	6830      	ldr	r0, [r6, #0]
 80078e0:	f7fa f8ba 	bl	8001a58 <lv_disp_get_scr_act>
 80078e4:	4601      	mov	r1, r0
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7ff fa90 	bl	8006e0c <lv_refr_get_top_obj>
 80078ec:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
 80078ee:	6833      	ldr	r3, [r6, #0]
 80078f0:	695e      	ldr	r6, [r3, #20]
 80078f2:	b126      	cbz	r6, 80078fe <refr_area_part+0x66>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 80078f4:	4631      	mov	r1, r6
 80078f6:	6868      	ldr	r0, [r5, #4]
 80078f8:	f7ff fa88 	bl	8006e0c <lv_refr_get_top_obj>
 80078fc:	4606      	mov	r6, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 80078fe:	b31c      	cbz	r4, 8007948 <refr_area_part+0xb0>
    if(disp_refr->draw_prev_over_act) {
 8007900:	4b55      	ldr	r3, [pc, #340]	; (8007a58 <refr_area_part+0x1c0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007908:	f012 0f01 	tst.w	r2, #1
 800790c:	d07c      	beq.n	8007a08 <refr_area_part+0x170>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800790e:	2c00      	cmp	r4, #0
 8007910:	d076      	beq.n	8007a00 <refr_area_part+0x168>
        refr_obj_and_children(draw_ctx, top_act_scr);
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f7ff ff77 	bl	8007808 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 800791a:	4b4f      	ldr	r3, [pc, #316]	; (8007a58 <refr_area_part+0x1c0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d07d      	beq.n	8007a20 <refr_area_part+0x188>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 8007924:	2e00      	cmp	r6, #0
 8007926:	d06d      	beq.n	8007a04 <refr_area_part+0x16c>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	f7ff ff6c 	bl	8007808 <refr_obj_and_children>
 8007930:	e076      	b.n	8007a20 <refr_area_part+0x188>
        while(draw_buf->flushing) {
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0d0      	beq.n	80078da <refr_area_part+0x42>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8007938:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <refr_area_part+0x1c0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0f6      	beq.n	8007932 <refr_area_part+0x9a>
 8007944:	4798      	blx	r3
 8007946:	e7f4      	b.n	8007932 <refr_area_part+0x9a>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8007948:	2e00      	cmp	r6, #0
 800794a:	d1d9      	bne.n	8007900 <refr_area_part+0x68>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800794c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8007a58 <refr_area_part+0x1c0>
 8007950:	f8d8 0000 	ldr.w	r0, [r8]
 8007954:	f003 fa4a 	bl	800adec <lv_disp_get_hor_res>
 8007958:	b287      	uxth	r7, r0
 800795a:	3f01      	subs	r7, #1
 800795c:	b2bf      	uxth	r7, r7
 800795e:	f8d8 0000 	ldr.w	r0, [r8]
 8007962:	f003 fa5b 	bl	800ae1c <lv_disp_get_ver_res>
 8007966:	b283      	uxth	r3, r0
 8007968:	3b01      	subs	r3, #1
        lv_area_set(&a, 0, 0,
 800796a:	b21b      	sxth	r3, r3
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	b23b      	sxth	r3, r7
 8007970:	2200      	movs	r2, #0
 8007972:	4611      	mov	r1, r2
 8007974:	a804      	add	r0, sp, #16
 8007976:	f003 fcae 	bl	800b2d6 <lv_area_set>
        if(draw_ctx->draw_bg) {
 800797a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800797c:	b1ab      	cbz	r3, 80079aa <refr_area_part+0x112>
            lv_draw_rect_dsc_init(&dsc);
 800797e:	a806      	add	r0, sp, #24
 8007980:	f001 fcae 	bl	80092e0 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 8007984:	f8d8 3000 	ldr.w	r3, [r8]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	920a      	str	r2, [sp, #40]	; 0x28
            dsc.bg_img_opa = disp_refr->bg_opa;
 800798c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8007990:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
            dsc.bg_color = disp_refr->bg_color;
 8007994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007996:	f8ad 301c 	strh.w	r3, [sp, #28]
            dsc.bg_opa = disp_refr->bg_opa;
 800799a:	f88d 201b 	strb.w	r2, [sp, #27]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800799e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80079a0:	aa04      	add	r2, sp, #16
 80079a2:	a906      	add	r1, sp, #24
 80079a4:	4628      	mov	r0, r5
 80079a6:	4798      	blx	r3
 80079a8:	e7aa      	b.n	8007900 <refr_area_part+0x68>
        else if(disp_refr->bg_img) {
 80079aa:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <refr_area_part+0x1c0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80079b0:	b1a0      	cbz	r0, 80079dc <refr_area_part+0x144>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 80079b2:	a903      	add	r1, sp, #12
 80079b4:	f002 f8fc 	bl	8009bb0 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 80079b8:	2801      	cmp	r0, #1
 80079ba:	d1a1      	bne.n	8007900 <refr_area_part+0x68>
                lv_draw_img_dsc_init(&dsc);
 80079bc:	a806      	add	r0, sp, #24
 80079be:	f000 fae1 	bl	8007f84 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 80079c2:	4b25      	ldr	r3, [pc, #148]	; (8007a58 <refr_area_part+0x1c0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80079ca:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	aa04      	add	r2, sp, #16
 80079d2:	a906      	add	r1, sp, #24
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 fc5b 	bl	8008290 <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 80079da:	e791      	b.n	8007900 <refr_area_part+0x68>
            lv_draw_rect_dsc_init(&dsc);
 80079dc:	a806      	add	r0, sp, #24
 80079de:	f001 fc7f 	bl	80092e0 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <refr_area_part+0x1c0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80079e8:	f8ad 201c 	strh.w	r2, [sp, #28]
            dsc.bg_opa = disp_refr->bg_opa;
 80079ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80079f0:	f88d 301b 	strb.w	r3, [sp, #27]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 80079f4:	686a      	ldr	r2, [r5, #4]
 80079f6:	a906      	add	r1, sp, #24
 80079f8:	4628      	mov	r0, r5
 80079fa:	f001 fc99 	bl	8009330 <lv_draw_rect>
 80079fe:	e77f      	b.n	8007900 <refr_area_part+0x68>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8007a00:	691c      	ldr	r4, [r3, #16]
 8007a02:	e786      	b.n	8007912 <refr_area_part+0x7a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 8007a04:	461e      	mov	r6, r3
 8007a06:	e78f      	b.n	8007928 <refr_area_part+0x90>
        if(disp_refr->prev_scr) {
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	b123      	cbz	r3, 8007a16 <refr_area_part+0x17e>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 8007a0c:	b1ee      	cbz	r6, 8007a4a <refr_area_part+0x1b2>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	f7ff fef9 	bl	8007808 <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8007a16:	b1d4      	cbz	r4, 8007a4e <refr_area_part+0x1b6>
        refr_obj_and_children(draw_ctx, top_act_scr);
 8007a18:	4621      	mov	r1, r4
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff fef4 	bl	8007808 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 8007a20:	4c0d      	ldr	r4, [pc, #52]	; (8007a58 <refr_area_part+0x1c0>)
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	f7fa f830 	bl	8001a88 <lv_disp_get_layer_top>
 8007a28:	4601      	mov	r1, r0
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f7ff feec 	bl	8007808 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	f7fa f835 	bl	8001aa0 <lv_disp_get_layer_sys>
 8007a36:	4601      	mov	r1, r0
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7ff fee5 	bl	8007808 <refr_obj_and_children>
    draw_buf_flush(disp_refr);
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	f7ff fcd0 	bl	80073e4 <draw_buf_flush>
}
 8007a44:	b014      	add	sp, #80	; 0x50
 8007a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 8007a4a:	461e      	mov	r6, r3
 8007a4c:	e7df      	b.n	8007a0e <refr_area_part+0x176>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8007a4e:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <refr_area_part+0x1c0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691c      	ldr	r4, [r3, #16]
 8007a54:	e7e0      	b.n	8007a18 <refr_area_part+0x180>
 8007a56:	bf00      	nop
 8007a58:	20000b58 	.word	0x20000b58

08007a5c <refr_area>:
{
 8007a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a60:	b087      	sub	sp, #28
 8007a62:	4607      	mov	r7, r0
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 8007a64:	4b61      	ldr	r3, [pc, #388]	; (8007bec <refr_area+0x190>)
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	6803      	ldr	r3, [r0, #0]
 8007a6a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	602b      	str	r3, [r5, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 8007a72:	6803      	ldr	r3, [r0, #0]
 8007a74:	7c1b      	ldrb	r3, [r3, #16]
 8007a76:	f013 0f03 	tst.w	r3, #3
 8007a7a:	d124      	bne.n	8007ac6 <refr_area+0x6a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007a7c:	88bc      	ldrh	r4, [r7, #4]
 8007a7e:	883b      	ldrh	r3, [r7, #0]
 8007a80:	1ae4      	subs	r4, r4, r3
 8007a82:	b2a4      	uxth	r4, r4
 8007a84:	3401      	adds	r4, #1
 8007a86:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007a88:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8007a8c:	fa1f f886 	uxth.w	r8, r6
 8007a90:	887b      	ldrh	r3, [r7, #2]
 8007a92:	eba8 0803 	sub.w	r8, r8, r3
 8007a96:	fa1f f888 	uxth.w	r8, r8
 8007a9a:	f108 0801 	add.w	r8, r8, #1
 8007a9e:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 8007aa2:	f003 f9bb 	bl	800ae1c <lv_disp_get_ver_res>
 8007aa6:	42b0      	cmp	r0, r6
 8007aa8:	dd40      	ble.n	8007b2c <refr_area+0xd0>
 8007aaa:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
    int32_t max_row = get_max_row(disp_refr, w, h);
 8007aae:	4642      	mov	r2, r8
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4b4e      	ldr	r3, [pc, #312]	; (8007bec <refr_area+0x190>)
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	f7ff f885 	bl	8006bc4 <get_max_row>
 8007aba:	4680      	mov	r8, r0
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    lv_coord_t row_last = 0;
 8007ac0:	f04f 0900 	mov.w	r9, #0
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007ac4:	e042      	b.n	8007b4c <refr_area+0xf0>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8007ac6:	f003 f991 	bl	800adec <lv_disp_get_hor_res>
 8007aca:	b284      	uxth	r4, r0
 8007acc:	3c01      	subs	r4, #1
 8007ace:	b2a4      	uxth	r4, r4
 8007ad0:	4e46      	ldr	r6, [pc, #280]	; (8007bec <refr_area+0x190>)
 8007ad2:	6830      	ldr	r0, [r6, #0]
 8007ad4:	f003 f9a2 	bl	800ae1c <lv_disp_get_ver_res>
 8007ad8:	b283      	uxth	r3, r0
 8007ada:	3b01      	subs	r3, #1
 8007adc:	f10d 0808 	add.w	r8, sp, #8
 8007ae0:	b21b      	sxth	r3, r3
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	b223      	sxth	r3, r4
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4640      	mov	r0, r8
 8007aec:	f003 fbf3 	bl	800b2d6 <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 8007af0:	f8c5 8004 	str.w	r8, [r5, #4]
        if(disp_refr->driver->full_refresh) {
 8007af4:	6833      	ldr	r3, [r6, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	7c1a      	ldrb	r2, [r3, #16]
 8007afa:	f012 0f02 	tst.w	r2, #2
 8007afe:	d00a      	beq.n	8007b16 <refr_area+0xba>
            disp_refr->driver->draw_buf->last_part = 1;
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	7e13      	ldrb	r3, [r2, #24]
 8007b04:	f043 0302 	orr.w	r3, r3, #2
 8007b08:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 8007b0a:	f8c5 8008 	str.w	r8, [r5, #8]
            refr_area_part(draw_ctx);
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f7ff fec2 	bl	8007898 <refr_area_part>
 8007b14:	e047      	b.n	8007ba6 <refr_area+0x14a>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	6991      	ldr	r1, [r2, #24]
 8007b1a:	7e13      	ldrb	r3, [r2, #24]
 8007b1c:	f361 0341 	bfi	r3, r1, #1, #1
 8007b20:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 8007b22:	60af      	str	r7, [r5, #8]
            refr_area_part(draw_ctx);
 8007b24:	4628      	mov	r0, r5
 8007b26:	f7ff feb7 	bl	8007898 <refr_area_part>
        return;
 8007b2a:	e03c      	b.n	8007ba6 <refr_area+0x14a>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007b2c:	4b2f      	ldr	r3, [pc, #188]	; (8007bec <refr_area+0x190>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	f003 f974 	bl	800ae1c <lv_disp_get_ver_res>
 8007b34:	b286      	uxth	r6, r0
 8007b36:	3e01      	subs	r6, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 8007b38:	b236      	sxth	r6, r6
 8007b3a:	e7b8      	b.n	8007aae <refr_area+0x52>
        row_last = sub_area.y2;
 8007b3c:	f9bd 9016 	ldrsh.w	r9, [sp, #22]
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 8007b40:	454e      	cmp	r6, r9
 8007b42:	d027      	beq.n	8007b94 <refr_area+0x138>
        refr_area_part(draw_ctx);
 8007b44:	4628      	mov	r0, r5
 8007b46:	f7ff fea7 	bl	8007898 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007b4a:	b223      	sxth	r3, r4
 8007b4c:	eb03 0208 	add.w	r2, r3, r8
 8007b50:	3a01      	subs	r2, #1
 8007b52:	42b2      	cmp	r2, r6
 8007b54:	dc25      	bgt.n	8007ba2 <refr_area+0x146>
        sub_area.x1 = area_p->x1;
 8007b56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007b5a:	f8ad 2010 	strh.w	r2, [sp, #16]
        sub_area.x2 = area_p->x2;
 8007b5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007b62:	f8ad 2014 	strh.w	r2, [sp, #20]
        sub_area.y1 = row;
 8007b66:	f8ad 3012 	strh.w	r3, [sp, #18]
        sub_area.y2 = row + max_row - 1;
 8007b6a:	4443      	add	r3, r8
 8007b6c:	b29c      	uxth	r4, r3
 8007b6e:	1e63      	subs	r3, r4, #1
 8007b70:	f8ad 3016 	strh.w	r3, [sp, #22]
        draw_ctx->buf_area = &sub_area;
 8007b74:	ab04      	add	r3, sp, #16
 8007b76:	606b      	str	r3, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 8007b78:	60ab      	str	r3, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <refr_area+0x190>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68d2      	ldr	r2, [r2, #12]
 8007b82:	6892      	ldr	r2, [r2, #8]
 8007b84:	602a      	str	r2, [r5, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 8007b86:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8007b8a:	42b2      	cmp	r2, r6
 8007b8c:	ddd6      	ble.n	8007b3c <refr_area+0xe0>
 8007b8e:	f8ad 6016 	strh.w	r6, [sp, #22]
 8007b92:	e7d3      	b.n	8007b3c <refr_area+0xe0>
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	7e13      	ldrb	r3, [r2, #24]
 8007b9a:	f043 0302 	orr.w	r3, r3, #2
 8007b9e:	7613      	strb	r3, [r2, #24]
 8007ba0:	e7d0      	b.n	8007b44 <refr_area+0xe8>
    if(y2 != row_last) {
 8007ba2:	45b1      	cmp	r9, r6
 8007ba4:	d102      	bne.n	8007bac <refr_area+0x150>
}
 8007ba6:	b007      	add	sp, #28
 8007ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sub_area.x1 = area_p->x1;
 8007bac:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007bb0:	f8ad 2010 	strh.w	r2, [sp, #16]
        sub_area.x2 = area_p->x2;
 8007bb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007bb8:	f8ad 2014 	strh.w	r2, [sp, #20]
        sub_area.y1 = row;
 8007bbc:	f8ad 3012 	strh.w	r3, [sp, #18]
        sub_area.y2 = y2;
 8007bc0:	f8ad 6016 	strh.w	r6, [sp, #22]
        draw_ctx->buf_area = &sub_area;
 8007bc4:	ab04      	add	r3, sp, #16
 8007bc6:	606b      	str	r3, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 8007bc8:	60ab      	str	r3, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8007bca:	4b08      	ldr	r3, [pc, #32]	; (8007bec <refr_area+0x190>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68d2      	ldr	r2, [r2, #12]
 8007bd2:	6892      	ldr	r2, [r2, #8]
 8007bd4:	602a      	str	r2, [r5, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	7e13      	ldrb	r3, [r2, #24]
 8007bdc:	f043 0302 	orr.w	r3, r3, #2
 8007be0:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 8007be2:	4628      	mov	r0, r5
 8007be4:	f7ff fe58 	bl	8007898 <refr_area_part>
 8007be8:	e7dd      	b.n	8007ba6 <refr_area+0x14a>
 8007bea:	bf00      	nop
 8007bec:	20000b58 	.word	0x20000b58

08007bf0 <refr_invalid_areas>:
{
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    px_num = 0;
 8007bf2:	4b2e      	ldr	r3, [pc, #184]	; (8007cac <refr_invalid_areas+0xbc>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	f8b2 4150 	ldrh.w	r4, [r2, #336]	; 0x150
 8007bfe:	2c00      	cmp	r4, #0
 8007c00:	d052      	beq.n	8007ca8 <refr_invalid_areas+0xb8>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8007c02:	3c01      	subs	r4, #1
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	db05      	blt.n	8007c14 <refr_invalid_areas+0x24>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007c08:	1913      	adds	r3, r2, r4
 8007c0a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007c0e:	b113      	cbz	r3, 8007c16 <refr_invalid_areas+0x26>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8007c10:	3c01      	subs	r4, #1
 8007c12:	e7f7      	b.n	8007c04 <refr_invalid_areas+0x14>
    int32_t last_i = 0;
 8007c14:	2400      	movs	r4, #0
    if(disp_refr->driver->render_start_cb) {
 8007c16:	6810      	ldr	r0, [r2, #0]
 8007c18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c1a:	b103      	cbz	r3, 8007c1e <refr_invalid_areas+0x2e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 8007c1c:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 8007c1e:	4b23      	ldr	r3, [pc, #140]	; (8007cac <refr_invalid_areas+0xbc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68d1      	ldr	r1, [r2, #12]
 8007c26:	7e0a      	ldrb	r2, [r1, #24]
 8007c28:	f36f 0200 	bfc	r2, #0, #1
 8007c2c:	760a      	strb	r2, [r1, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68d1      	ldr	r1, [r2, #12]
 8007c32:	7e0a      	ldrb	r2, [r1, #24]
 8007c34:	f36f 0241 	bfc	r2, #1, #1
 8007c38:	760a      	strb	r2, [r1, #24]
    disp_refr->rendering_in_progress = true;
 8007c3a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007c3e:	f042 0204 	orr.w	r2, r2, #4
 8007c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007c46:	2500      	movs	r5, #0
 8007c48:	e014      	b.n	8007c74 <refr_invalid_areas+0x84>
            disp_refr->driver->draw_buf->last_part = 0;
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68d1      	ldr	r1, [r2, #12]
 8007c4e:	7e0a      	ldrb	r2, [r1, #24]
 8007c50:	f36f 0241 	bfc	r2, #1, #1
 8007c54:	760a      	strb	r2, [r1, #24]
            refr_area(&disp_refr->inv_areas[i]);
 8007c56:	1da8      	adds	r0, r5, #6
 8007c58:	00c7      	lsls	r7, r0, #3
 8007c5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8007c5e:	f7ff fefd 	bl	8007a5c <refr_area>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007c62:	4e12      	ldr	r6, [pc, #72]	; (8007cac <refr_invalid_areas+0xbc>)
 8007c64:	6830      	ldr	r0, [r6, #0]
 8007c66:	4438      	add	r0, r7
 8007c68:	f003 fb48 	bl	800b2fc <lv_area_get_size>
 8007c6c:	6873      	ldr	r3, [r6, #4]
 8007c6e:	4403      	add	r3, r0
 8007c70:	6073      	str	r3, [r6, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007c72:	3501      	adds	r5, #1
 8007c74:	4b0d      	ldr	r3, [pc, #52]	; (8007cac <refr_invalid_areas+0xbc>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8007c7c:	42aa      	cmp	r2, r5
 8007c7e:	dd0d      	ble.n	8007c9c <refr_invalid_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007c80:	195a      	adds	r2, r3, r5
 8007c82:	f892 2130 	ldrb.w	r2, [r2, #304]	; 0x130
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d1f3      	bne.n	8007c72 <refr_invalid_areas+0x82>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 8007c8a:	42a5      	cmp	r5, r4
 8007c8c:	d1dd      	bne.n	8007c4a <refr_invalid_areas+0x5a>
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68d1      	ldr	r1, [r2, #12]
 8007c92:	7e0a      	ldrb	r2, [r1, #24]
 8007c94:	f042 0201 	orr.w	r2, r2, #1
 8007c98:	760a      	strb	r2, [r1, #24]
 8007c9a:	e7d6      	b.n	8007c4a <refr_invalid_areas+0x5a>
    disp_refr->rendering_in_progress = false;
 8007c9c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007ca0:	f36f 0282 	bfc	r2, #2, #1
 8007ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000b58 	.word	0x20000b58

08007cb0 <_lv_inv_area>:
{
 8007cb0:	b530      	push	{r4, r5, lr}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d03e      	beq.n	8007d3a <_lv_inv_area+0x8a>
    if(!disp) return;
 8007cbc:	2c00      	cmp	r4, #0
 8007cbe:	d043      	beq.n	8007d48 <_lv_inv_area+0x98>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f7f9 ff02 	bl	8001aca <lv_disp_is_invalidation_enabled>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d03e      	beq.n	8007d48 <_lv_inv_area+0x98>
    if(disp->rendering_in_progress) {
 8007cca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007cce:	f013 0f04 	tst.w	r3, #4
 8007cd2:	d139      	bne.n	8007d48 <_lv_inv_area+0x98>
    if(area_p == NULL) {
 8007cd4:	b3ad      	cbz	r5, 8007d42 <_lv_inv_area+0x92>
    scr_area.x1 = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
 8007cdc:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f003 f883 	bl	800adec <lv_disp_get_hor_res>
 8007ce6:	b280      	uxth	r0, r0
 8007ce8:	3801      	subs	r0, #1
 8007cea:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f003 f894 	bl	800ae1c <lv_disp_get_ver_res>
 8007cf4:	b280      	uxth	r0, r0
 8007cf6:	3801      	subs	r0, #1
 8007cf8:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8007cfc:	aa02      	add	r2, sp, #8
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4668      	mov	r0, sp
 8007d02:	f003 fb27 	bl	800b354 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 8007d06:	b1f8      	cbz	r0, 8007d48 <_lv_inv_area+0x98>
    if(disp->driver->full_refresh) {
 8007d08:	6820      	ldr	r0, [r4, #0]
 8007d0a:	7c03      	ldrb	r3, [r0, #16]
 8007d0c:	f013 0f02 	tst.w	r3, #2
 8007d10:	d11c      	bne.n	8007d4c <_lv_inv_area+0x9c>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 8007d12:	6983      	ldr	r3, [r0, #24]
 8007d14:	b10b      	cbz	r3, 8007d1a <_lv_inv_area+0x6a>
 8007d16:	4669      	mov	r1, sp
 8007d18:	4798      	blx	r3
{
 8007d1a:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 8007d1c:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8007d20:	42ab      	cmp	r3, r5
 8007d22:	d923      	bls.n	8007d6c <_lv_inv_area+0xbc>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8007d24:	1da9      	adds	r1, r5, #6
 8007d26:	2200      	movs	r2, #0
 8007d28:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007d2c:	4668      	mov	r0, sp
 8007d2e:	f003 fc45 	bl	800b5bc <_lv_area_is_in>
 8007d32:	b948      	cbnz	r0, 8007d48 <_lv_inv_area+0x98>
    for(i = 0; i < disp->inv_p; i++) {
 8007d34:	3501      	adds	r5, #1
 8007d36:	b2ad      	uxth	r5, r5
 8007d38:	e7f0      	b.n	8007d1c <_lv_inv_area+0x6c>
    if(!disp) disp = lv_disp_get_default();
 8007d3a:	f003 f851 	bl	800ade0 <lv_disp_get_default>
 8007d3e:	4604      	mov	r4, r0
 8007d40:	e7bc      	b.n	8007cbc <_lv_inv_area+0xc>
        disp->inv_p = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
}
 8007d48:	b005      	add	sp, #20
 8007d4a:	bd30      	pop	{r4, r5, pc}
        disp->inv_areas[0] = scr_area;
 8007d4c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007d50:	aa04      	add	r2, sp, #16
 8007d52:	e912 0003 	ldmdb	r2, {r0, r1}
 8007d56:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8007d60:	6860      	ldr	r0, [r4, #4]
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d0f0      	beq.n	8007d48 <_lv_inv_area+0x98>
 8007d66:	f004 fe3e 	bl	800c9e6 <lv_timer_resume>
        return;
 8007d6a:	e7ed      	b.n	8007d48 <_lv_inv_area+0x98>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 8007d6c:	2b1f      	cmp	r3, #31
 8007d6e:	d81a      	bhi.n	8007da6 <_lv_inv_area+0xf6>
    dest->x1 = src->x1;
 8007d70:	f9bd 2000 	ldrsh.w	r2, [sp]
 8007d74:	3306      	adds	r3, #6
 8007d76:	f824 2033 	strh.w	r2, [r4, r3, lsl #3]
    dest->y1 = src->y1;
 8007d7a:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8007d7e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007d82:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8007d84:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8007d88:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8007d8a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8007d8e:	80da      	strh	r2, [r3, #6]
    disp->inv_p++;
 8007d90:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8007d94:	3301      	adds	r3, #1
 8007d96:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8007d9a:	6860      	ldr	r0, [r4, #4]
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d0d3      	beq.n	8007d48 <_lv_inv_area+0x98>
 8007da0:	f004 fe21 	bl	800c9e6 <lv_timer_resume>
 8007da4:	e7d0      	b.n	8007d48 <_lv_inv_area+0x98>
        disp->inv_p = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 8007dac:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8007db0:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 8007db2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8007db6:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 8007db8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8007dbc:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 8007dbe:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8007dc2:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8007dc4:	e7e4      	b.n	8007d90 <_lv_inv_area+0xe0>
	...

08007dc8 <_lv_refr_get_disp_refreshing>:
}
 8007dc8:	4b01      	ldr	r3, [pc, #4]	; (8007dd0 <_lv_refr_get_disp_refreshing+0x8>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000b58 	.word	0x20000b58

08007dd4 <_lv_disp_refr_timer>:
{
 8007dd4:	b530      	push	{r4, r5, lr}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 8007dda:	f003 f867 	bl	800aeac <lv_tick_get>
 8007dde:	4605      	mov	r5, r0
    volatile uint32_t elaps = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	9301      	str	r3, [sp, #4]
    if(tmr) {
 8007de4:	2c00      	cmp	r4, #0
 8007de6:	d031      	beq.n	8007e4c <_lv_disp_refr_timer+0x78>
        disp_refr = tmr->user_data;
 8007de8:	68e2      	ldr	r2, [r4, #12]
 8007dea:	4b3c      	ldr	r3, [pc, #240]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007dec:	601a      	str	r2, [r3, #0]
        lv_timer_pause(tmr);
 8007dee:	4620      	mov	r0, r4
 8007df0:	f004 fdf4 	bl	800c9dc <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 8007df4:	4c39      	ldr	r4, [pc, #228]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	6918      	ldr	r0, [r3, #16]
 8007dfa:	f7fc fdd3 	bl	80049a4 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	6958      	ldr	r0, [r3, #20]
 8007e02:	b108      	cbz	r0, 8007e08 <_lv_disp_refr_timer+0x34>
 8007e04:	f7fc fdce 	bl	80049a4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 8007e08:	4c34      	ldr	r4, [pc, #208]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	69d8      	ldr	r0, [r3, #28]
 8007e0e:	f7fc fdc9 	bl	80049a4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	6a18      	ldr	r0, [r3, #32]
 8007e16:	f7fc fdc5 	bl	80049a4 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	b1d2      	cbz	r2, 8007e56 <_lv_disp_refr_timer+0x82>
    lv_refr_join_area();
 8007e20:	f7ff f8c4 	bl	8006fac <lv_refr_join_area>
    refr_sync_areas();
 8007e24:	f7ff f92c 	bl	8007080 <refr_sync_areas>
    refr_invalid_areas();
 8007e28:	f7ff fee2 	bl	8007bf0 <refr_invalid_areas>
    if(disp_refr->inv_p != 0) {
 8007e2c:	4b2b      	ldr	r3, [pc, #172]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	d048      	beq.n	8007eca <_lv_disp_refr_timer+0xf6>
        if(disp_refr->driver->direct_mode && disp_refr->driver->draw_buf->buf2) {
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	7c1a      	ldrb	r2, [r3, #16]
 8007e3c:	f012 0f01 	tst.w	r2, #1
 8007e40:	d027      	beq.n	8007e92 <_lv_disp_refr_timer+0xbe>
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	b323      	cbz	r3, 8007e92 <_lv_disp_refr_timer+0xbe>
            for(i = 0; i < disp_refr->inv_p; i++) {
 8007e48:	2400      	movs	r4, #0
 8007e4a:	e009      	b.n	8007e60 <_lv_disp_refr_timer+0x8c>
        disp_refr = lv_disp_get_default();
 8007e4c:	f002 ffc8 	bl	800ade0 <lv_disp_get_default>
 8007e50:	4b22      	ldr	r3, [pc, #136]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007e52:	6018      	str	r0, [r3, #0]
 8007e54:	e7ce      	b.n	8007df4 <_lv_disp_refr_timer+0x20>
        disp_refr->inv_p = 0;
 8007e56:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        return;
 8007e5a:	e03c      	b.n	8007ed6 <_lv_disp_refr_timer+0x102>
            for(i = 0; i < disp_refr->inv_p; i++) {
 8007e5c:	3401      	adds	r4, #1
 8007e5e:	b2a4      	uxth	r4, r4
 8007e60:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	f8b0 2150 	ldrh.w	r2, [r0, #336]	; 0x150
 8007e68:	42a2      	cmp	r2, r4
 8007e6a:	d912      	bls.n	8007e92 <_lv_disp_refr_timer+0xbe>
                if(disp_refr->inv_area_joined[i])
 8007e6c:	1902      	adds	r2, r0, r4
 8007e6e:	f892 2130 	ldrb.w	r2, [r2, #304]	; 0x130
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	d1f2      	bne.n	8007e5c <_lv_disp_refr_timer+0x88>
                lv_area_t * sync_area = _lv_ll_ins_tail(&disp_refr->sync_areas);
 8007e76:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8007e7a:	f003 ff66 	bl	800bd4a <_lv_ll_ins_tail>
 8007e7e:	4602      	mov	r2, r0
                *sync_area = disp_refr->inv_areas[i];
 8007e80:	4b16      	ldr	r3, [pc, #88]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	1da1      	adds	r1, r4, #6
 8007e86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007e8a:	cb03      	ldmia	r3!, {r0, r1}
 8007e8c:	6010      	str	r0, [r2, #0]
 8007e8e:	6051      	str	r1, [r2, #4]
 8007e90:	e7e4      	b.n	8007e5c <_lv_disp_refr_timer+0x88>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 8007e92:	4c12      	ldr	r4, [pc, #72]	; (8007edc <_lv_disp_refr_timer+0x108>)
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e9a:	3030      	adds	r0, #48	; 0x30
 8007e9c:	f004 fa31 	bl	800c302 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	2120      	movs	r1, #32
 8007ea4:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8007ea8:	f004 fa2b 	bl	800c302 <lv_memset_00>
        disp_refr->inv_p = 0;
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f003 f803 	bl	800aec0 <lv_tick_elaps>
 8007eba:	9001      	str	r0, [sp, #4]
        if(disp_refr->driver->monitor_cb) {
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ec2:	b113      	cbz	r3, 8007eca <_lv_disp_refr_timer+0xf6>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8007ec4:	9901      	ldr	r1, [sp, #4]
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	4798      	blx	r3
    lv_mem_buf_free_all();
 8007eca:	f004 f96d 	bl	800c1a8 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 8007ece:	f002 fef2 	bl	800acb6 <_lv_font_clean_up_fmt_txt>
    _lv_draw_mask_cleanup();
 8007ed2:	f001 f933 	bl	800913c <_lv_draw_mask_cleanup>
}
 8007ed6:	b003      	add	sp, #12
 8007ed8:	bd30      	pop	{r4, r5, pc}
 8007eda:	bf00      	nop
 8007edc:	20000b58 	.word	0x20000b58

08007ee0 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 8007ee6:	6840      	ldr	r0, [r0, #4]
 8007ee8:	b108      	cbz	r0, 8007eee <apply_theme+0xe>
 8007eea:	f7ff fff9 	bl	8007ee0 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	b113      	cbz	r3, 8007ef8 <apply_theme+0x18>
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	4798      	blx	r3
}
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}

08007efa <lv_theme_get_from_obj>:
{
 8007efa:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8007efc:	b120      	cbz	r0, 8007f08 <lv_theme_get_from_obj+0xe>
 8007efe:	f7fe fe27 	bl	8006b50 <lv_obj_get_disp>
    return lv_disp_get_theme(disp);
 8007f02:	f7f9 fdd9 	bl	8001ab8 <lv_disp_get_theme>
}
 8007f06:	bd08      	pop	{r3, pc}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8007f08:	f002 ff6a 	bl	800ade0 <lv_disp_get_default>
 8007f0c:	e7f9      	b.n	8007f02 <lv_theme_get_from_obj+0x8>
	...

08007f10 <lv_theme_apply>:
{
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4604      	mov	r4, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8007f14:	f7ff fff1 	bl	8007efa <lv_theme_get_from_obj>
    if(th == NULL) return;
 8007f18:	b148      	cbz	r0, 8007f2e <lv_theme_apply+0x1e>
 8007f1a:	4605      	mov	r5, r0
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, (lv_style_selector_t)LV_PART_ANY | (lv_style_selector_t)LV_STATE_ANY);
 8007f1c:	4a04      	ldr	r2, [pc, #16]	; (8007f30 <lv_theme_apply+0x20>)
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7fe fc83 	bl	800682c <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8007f26:	4621      	mov	r1, r4
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7ff ffd9 	bl	8007ee0 <apply_theme>
}
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	000fffff 	.word	0x000fffff

08007f34 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 8007f34:	4770      	bx	lr

08007f36 <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 8007f36:	b508      	push	{r3, lr}
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8007f38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f3a:	b103      	cbz	r3, 8007f3e <lv_draw_wait_for_finish+0x8>
 8007f3c:	4798      	blx	r3
}
 8007f3e:	bd08      	pop	{r3, pc}

08007f40 <draw_cleanup>:
    lv_draw_label_dsc_init(&label_dsc);
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
}

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 8007f40:	b508      	push	{r3, lr}
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 8007f42:	f001 fed8 	bl	8009cf6 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 8007f46:	bd08      	pop	{r3, pc}

08007f48 <show_error>:
{
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	b098      	sub	sp, #96	; 0x60
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	460d      	mov	r5, r1
 8007f50:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 8007f52:	a80a      	add	r0, sp, #40	; 0x28
 8007f54:	f001 f9c4 	bl	80092e0 <lv_draw_rect_dsc_init>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8007f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
    rect_dsc.bg_color = lv_color_white();
 8007f5c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8007f60:	462a      	mov	r2, r5
 8007f62:	a90a      	add	r1, sp, #40	; 0x28
 8007f64:	4620      	mov	r0, r4
 8007f66:	f001 f9e3 	bl	8009330 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 8007f6a:	a802      	add	r0, sp, #8
 8007f6c:	f000 f9da 	bl	8008324 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 8007f70:	2300      	movs	r3, #0
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	4633      	mov	r3, r6
 8007f76:	462a      	mov	r2, r5
 8007f78:	a902      	add	r1, sp, #8
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f9f2 	bl	8008364 <lv_draw_label>
}
 8007f80:	b018      	add	sp, #96	; 0x60
 8007f82:	bd70      	pop	{r4, r5, r6, pc}

08007f84 <lv_draw_img_dsc_init>:
{
 8007f84:	b510      	push	{r4, lr}
 8007f86:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8007f88:	2118      	movs	r1, #24
 8007f8a:	f004 f9ba 	bl	800c302 <lv_memset_00>
 8007f8e:	f04f 0300 	mov.w	r3, #0
    dsc->recolor = lv_color_black();
 8007f92:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 8007f94:	23ff      	movs	r3, #255	; 0xff
 8007f96:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8007f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f9c:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8007f9e:	7d23      	ldrb	r3, [r4, #20]
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	7523      	strb	r3, [r4, #20]
}
 8007fa6:	bd10      	pop	{r4, pc}

08007fa8 <lv_img_cf_get_px_size>:
    switch(cf) {
 8007fa8:	3804      	subs	r0, #4
 8007faa:	280a      	cmp	r0, #10
 8007fac:	d807      	bhi.n	8007fbe <lv_img_cf_get_px_size+0x16>
 8007fae:	e8df f000 	tbb	[pc, r0]
 8007fb2:	0812      	.short	0x0812
 8007fb4:	0e0c0a12 	.word	0x0e0c0a12
 8007fb8:	0e0c0a10 	.word	0x0e0c0a10
 8007fbc:	10          	.byte	0x10
 8007fbd:	00          	.byte	0x00
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 8007fc2:	2018      	movs	r0, #24
            break;
 8007fc4:	4770      	bx	lr
            px_size = 1;
 8007fc6:	2001      	movs	r0, #1
            break;
 8007fc8:	4770      	bx	lr
            px_size = 2;
 8007fca:	2002      	movs	r0, #2
            break;
 8007fcc:	4770      	bx	lr
            px_size = 4;
 8007fce:	2004      	movs	r0, #4
            break;
 8007fd0:	4770      	bx	lr
            px_size = 8;
 8007fd2:	2008      	movs	r0, #8
            break;
 8007fd4:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
 8007fd6:	2010      	movs	r0, #16
}
 8007fd8:	4770      	bx	lr

08007fda <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 8007fda:	2803      	cmp	r0, #3
 8007fdc:	d005      	beq.n	8007fea <lv_img_cf_is_chroma_keyed+0x10>
 8007fde:	2806      	cmp	r0, #6
 8007fe0:	d001      	beq.n	8007fe6 <lv_img_cf_is_chroma_keyed+0xc>
            is_chroma_keyed = false;
 8007fe2:	2000      	movs	r0, #0
}
 8007fe4:	4770      	bx	lr
    switch(cf) {
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	4770      	bx	lr
 8007fea:	2001      	movs	r0, #1
 8007fec:	4770      	bx	lr

08007fee <lv_img_cf_has_alpha>:
    switch(cf) {
 8007fee:	280e      	cmp	r0, #14
 8007ff0:	d809      	bhi.n	8008006 <lv_img_cf_has_alpha+0x18>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ff8:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 8007ffc:	4218      	tst	r0, r3
 8007ffe:	bf14      	ite	ne
 8008000:	2001      	movne	r0, #1
 8008002:	2000      	moveq	r0, #0
 8008004:	4770      	bx	lr
            has_alpha = false;
 8008006:	2000      	movs	r0, #0
}
 8008008:	4770      	bx	lr

0800800a <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800800a:	b160      	cbz	r0, 8008026 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800800c:	7802      	ldrb	r2, [r0, #0]
 800800e:	f1a2 0320 	sub.w	r3, r2, #32
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b5f      	cmp	r3, #95	; 0x5f
 8008016:	d908      	bls.n	800802a <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
 8008018:	f012 0f80 	tst.w	r2, #128	; 0x80
 800801c:	d101      	bne.n	8008022 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800801e:	2000      	movs	r0, #0
}
 8008020:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 8008022:	2002      	movs	r0, #2
 8008024:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8008026:	2003      	movs	r0, #3
 8008028:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800802a:	2001      	movs	r0, #1
 800802c:	4770      	bx	lr

0800802e <lv_draw_img_decoded>:
{
 800802e:	b530      	push	{r4, r5, lr}
 8008030:	b083      	sub	sp, #12
    if(draw_ctx->draw_img_decoded == NULL) return;
 8008032:	6984      	ldr	r4, [r0, #24]
 8008034:	b11c      	cbz	r4, 800803e <lv_draw_img_decoded+0x10>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 8008036:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800803a:	9500      	str	r5, [sp, #0]
 800803c:	47a0      	blx	r4
}
 800803e:	b003      	add	sp, #12
 8008040:	bd30      	pop	{r4, r5, pc}

08008042 <decode_and_draw>:
{
 8008042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008046:	b08d      	sub	sp, #52	; 0x34
 8008048:	4615      	mov	r5, r2
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800804a:	7aca      	ldrb	r2, [r1, #11]
 800804c:	2a02      	cmp	r2, #2
 800804e:	d803      	bhi.n	8008058 <decode_and_draw+0x16>
 8008050:	2001      	movs	r0, #1
}
 8008052:	b00d      	add	sp, #52	; 0x34
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	4606      	mov	r6, r0
 800805a:	460c      	mov	r4, r1
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800805c:	690a      	ldr	r2, [r1, #16]
 800805e:	8909      	ldrh	r1, [r1, #8]
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f9ff 	bl	8009464 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 8008066:	4607      	mov	r7, r0
 8008068:	2800      	cmp	r0, #0
 800806a:	f000 810e 	beq.w	800828a <decode_and_draw+0x248>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800806e:	f890 9014 	ldrb.w	r9, [r0, #20]
 8008072:	f009 091f 	and.w	r9, r9, #31
 8008076:	4648      	mov	r0, r9
 8008078:	f7ff ffaf 	bl	8007fda <lv_img_cf_is_chroma_keyed>
 800807c:	b9b0      	cbnz	r0, 80080ac <decode_and_draw+0x6a>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 800807e:	46c8      	mov	r8, r9
 8008080:	f1b9 0f0e 	cmp.w	r9, #14
 8008084:	d009      	beq.n	800809a <decode_and_draw+0x58>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 8008086:	f1b9 0f14 	cmp.w	r9, #20
 800808a:	d011      	beq.n	80080b0 <decode_and_draw+0x6e>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800808c:	4648      	mov	r0, r9
 800808e:	f7ff ffae 	bl	8007fee <lv_img_cf_has_alpha>
 8008092:	b1c0      	cbz	r0, 80080c6 <decode_and_draw+0x84>
 8008094:	f04f 0805 	mov.w	r8, #5
 8008098:	e00a      	b.n	80080b0 <decode_and_draw+0x6e>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080a0:	d006      	beq.n	80080b0 <decode_and_draw+0x6e>
            cdsc->dec_dsc.img_data = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61bb      	str	r3, [r7, #24]
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 80080a6:	f04f 0805 	mov.w	r8, #5
 80080aa:	e001      	b.n	80080b0 <decode_and_draw+0x6e>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 80080ac:	f04f 0806 	mov.w	r8, #6
    if(cdsc->dec_dsc.error_msg != NULL) {
 80080b0:	6a3a      	ldr	r2, [r7, #32]
 80080b2:	b15a      	cbz	r2, 80080cc <decode_and_draw+0x8a>
        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 80080b4:	4629      	mov	r1, r5
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7ff ff46 	bl	8007f48 <show_error>
    draw_cleanup(cdsc);
 80080bc:	4638      	mov	r0, r7
 80080be:	f7ff ff3f 	bl	8007f40 <draw_cleanup>
    return LV_RES_OK;
 80080c2:	2001      	movs	r0, #1
 80080c4:	e7c5      	b.n	8008052 <decode_and_draw+0x10>
    else cf = LV_IMG_CF_TRUE_COLOR;
 80080c6:	f04f 0804 	mov.w	r8, #4
 80080ca:	e7f1      	b.n	80080b0 <decode_and_draw+0x6e>
    else if(cdsc->dec_dsc.img_data) {
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d05a      	beq.n	8008188 <decode_and_draw+0x146>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 80080d2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80080d6:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 80080da:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80080de:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 80080e2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80080e6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 80080ea:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80080ee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080f8:	d115      	bne.n	8008126 <decode_and_draw+0xe4>
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 80080fa:	aa08      	add	r2, sp, #32
 80080fc:	68b1      	ldr	r1, [r6, #8]
 80080fe:	a80a      	add	r0, sp, #40	; 0x28
 8008100:	f003 f928 	bl	800b354 <_lv_area_intersect>
        if(union_ok == false) {
 8008104:	2800      	cmp	r0, #0
 8008106:	d03a      	beq.n	800817e <decode_and_draw+0x13c>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8008108:	f8d6 9008 	ldr.w	r9, [r6, #8]
        draw_ctx->clip_area = &clip_com;
 800810c:	ab0a      	add	r3, sp, #40	; 0x28
 800810e:	60b3      	str	r3, [r6, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f8cd 8000 	str.w	r8, [sp]
 8008116:	462a      	mov	r2, r5
 8008118:	4621      	mov	r1, r4
 800811a:	4630      	mov	r0, r6
 800811c:	f7ff ff87 	bl	800802e <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 8008120:	f8c6 9008 	str.w	r9, [r6, #8]
 8008124:	e7ca      	b.n	80080bc <decode_and_draw+0x7a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008126:	88a9      	ldrh	r1, [r5, #4]
 8008128:	882b      	ldrh	r3, [r5, #0]
 800812a:	1ac9      	subs	r1, r1, r3
 800812c:	b289      	uxth	r1, r1
 800812e:	3101      	adds	r1, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008130:	88ea      	ldrh	r2, [r5, #6]
 8008132:	886b      	ldrh	r3, [r5, #2]
 8008134:	1ad2      	subs	r2, r2, r3
 8008136:	b292      	uxth	r2, r2
 8008138:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800813a:	4620      	mov	r0, r4
 800813c:	f930 3b04 	ldrsh.w	r3, [r0], #4
 8008140:	9001      	str	r0, [sp, #4]
 8008142:	8860      	ldrh	r0, [r4, #2]
 8008144:	9000      	str	r0, [sp, #0]
 8008146:	b212      	sxth	r2, r2
 8008148:	b209      	sxth	r1, r1
 800814a:	a808      	add	r0, sp, #32
 800814c:	f001 f908 	bl	8009360 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8008150:	882a      	ldrh	r2, [r5, #0]
 8008152:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008156:	4413      	add	r3, r2
 8008158:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800815c:	886b      	ldrh	r3, [r5, #2]
 800815e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8008162:	4419      	add	r1, r3
 8008164:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 8008168:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800816c:	440a      	add	r2, r1
 800816e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 8008172:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8008176:	4413      	add	r3, r2
 8008178:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800817c:	e7bd      	b.n	80080fa <decode_and_draw+0xb8>
            draw_cleanup(cdsc);
 800817e:	4638      	mov	r0, r7
 8008180:	f7ff fede 	bl	8007f40 <draw_cleanup>
            return LV_RES_OK;
 8008184:	2001      	movs	r0, #1
 8008186:	e764      	b.n	8008052 <decode_and_draw+0x10>
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8008188:	462a      	mov	r2, r5
 800818a:	68b1      	ldr	r1, [r6, #8]
 800818c:	a806      	add	r0, sp, #24
 800818e:	f003 f8e1 	bl	800b354 <_lv_area_intersect>
        if(union_ok == false) {
 8008192:	b398      	cbz	r0, 80081fc <decode_and_draw+0x1ba>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008194:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008198:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3301      	adds	r3, #1
 80081a2:	b21b      	sxth	r3, r3
 80081a4:	9305      	str	r3, [sp, #20]
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 80081a6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80081aa:	f003 ff83 	bl	800c0b4 <lv_mem_buf_get>
 80081ae:	4682      	mov	sl, r0
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80081b0:	f8d6 b008 	ldr.w	fp, [r6, #8]
    dest->x1 = src->x1;
 80081b4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80081b8:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 80081bc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80081c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 80081c4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80081c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 80081cc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80081d0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_area_set_height(&line, 1);
 80081d4:	2101      	movs	r1, #1
 80081d6:	a808      	add	r0, sp, #32
 80081d8:	f003 f88a 	bl	800b2f0 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 80081dc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80081e0:	9303      	str	r3, [sp, #12]
 80081e2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80081e6:	9304      	str	r3, [sp, #16]
        int32_t y = mask_com.y1 - coords->y1;
 80081e8:	f9bd 901a 	ldrsh.w	r9, [sp, #26]
 80081ec:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 80081f0:	eba9 0505 	sub.w	r5, r9, r5
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 80081f4:	4623      	mov	r3, r4
 80081f6:	4654      	mov	r4, sl
 80081f8:	469a      	mov	sl, r3
 80081fa:	e013      	b.n	8008224 <decode_and_draw+0x1e2>
            draw_cleanup(cdsc);
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff fe9f 	bl	8007f40 <draw_cleanup>
            return LV_RES_OK;
 8008202:	2001      	movs	r0, #1
 8008204:	e725      	b.n	8008052 <decode_and_draw+0x10>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8008206:	4638      	mov	r0, r7
 8008208:	f001 fd75 	bl	8009cf6 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800820c:	4620      	mov	r0, r4
 800820e:	f003 ffb3 	bl	800c178 <lv_mem_buf_release>
                draw_cleanup(cdsc);
 8008212:	4638      	mov	r0, r7
 8008214:	f7ff fe94 	bl	8007f40 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 8008218:	f8c6 b008 	str.w	fp, [r6, #8]
                return LV_RES_INV;
 800821c:	2000      	movs	r0, #0
 800821e:	e718      	b.n	8008052 <decode_and_draw+0x10>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8008220:	f109 0901 	add.w	r9, r9, #1
 8008224:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8008228:	454b      	cmp	r3, r9
 800822a:	db28      	blt.n	800827e <decode_and_draw+0x23c>
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 800822c:	aa08      	add	r2, sp, #32
 800822e:	4659      	mov	r1, fp
 8008230:	a80a      	add	r0, sp, #40	; 0x28
 8008232:	f003 f88f 	bl	800b354 <_lv_area_intersect>
            if(union_ok == false) continue;
 8008236:	2800      	cmp	r0, #0
 8008238:	d0f2      	beq.n	8008220 <decode_and_draw+0x1de>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	9a04      	ldr	r2, [sp, #16]
 800823e:	1a99      	subs	r1, r3, r2
 8008240:	9400      	str	r4, [sp, #0]
 8008242:	9b05      	ldr	r3, [sp, #20]
 8008244:	b22a      	sxth	r2, r5
 8008246:	b209      	sxth	r1, r1
 8008248:	4638      	mov	r0, r7
 800824a:	f001 fd41 	bl	8009cd0 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800824e:	2801      	cmp	r0, #1
 8008250:	d1d9      	bne.n	8008206 <decode_and_draw+0x1c4>
            draw_ctx->clip_area = &mask_line;
 8008252:	ab0a      	add	r3, sp, #40	; 0x28
 8008254:	60b3      	str	r3, [r6, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8008256:	f8cd 8000 	str.w	r8, [sp]
 800825a:	4623      	mov	r3, r4
 800825c:	aa08      	add	r2, sp, #32
 800825e:	4651      	mov	r1, sl
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff fee4 	bl	800802e <lv_draw_img_decoded>
            line.y1++;
 8008266:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800826a:	3301      	adds	r3, #1
 800826c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 8008270:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8008274:	3301      	adds	r3, #1
 8008276:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 800827a:	3501      	adds	r5, #1
 800827c:	e7d0      	b.n	8008220 <decode_and_draw+0x1de>
        draw_ctx->clip_area = clip_area_ori;
 800827e:	f8c6 b008 	str.w	fp, [r6, #8]
        lv_mem_buf_release(buf);
 8008282:	4620      	mov	r0, r4
 8008284:	f003 ff78 	bl	800c178 <lv_mem_buf_release>
 8008288:	e718      	b.n	80080bc <decode_and_draw+0x7a>
    if(cdsc == NULL) return LV_RES_INV;
 800828a:	2000      	movs	r0, #0
 800828c:	e6e1      	b.n	8008052 <decode_and_draw+0x10>
	...

08008290 <lv_draw_img>:
{
 8008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	4616      	mov	r6, r2
    if(src == NULL) {
 8008298:	b1bb      	cbz	r3, 80082ca <lv_draw_img+0x3a>
 800829a:	460d      	mov	r5, r1
 800829c:	461f      	mov	r7, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800829e:	7acb      	ldrb	r3, [r1, #11]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d910      	bls.n	80082c6 <lv_draw_img+0x36>
    if(draw_ctx->draw_img) {
 80082a4:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80082a8:	f1b8 0f00 	cmp.w	r8, #0
 80082ac:	d003      	beq.n	80082b6 <lv_draw_img+0x26>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 80082ae:	463b      	mov	r3, r7
 80082b0:	47c0      	blx	r8
    if(res != LV_RES_OK) {
 80082b2:	2801      	cmp	r0, #1
 80082b4:	d005      	beq.n	80082c2 <lv_draw_img+0x32>
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 80082b6:	463b      	mov	r3, r7
 80082b8:	4632      	mov	r2, r6
 80082ba:	4629      	mov	r1, r5
 80082bc:	4620      	mov	r0, r4
 80082be:	f7ff fec0 	bl	8008042 <decode_and_draw>
    if(res != LV_RES_OK) {
 80082c2:	2801      	cmp	r0, #1
 80082c4:	d106      	bne.n	80082d4 <lv_draw_img+0x44>
}
 80082c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        show_error(draw_ctx, coords, "No\ndata");
 80082ca:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <lv_draw_img+0x50>)
 80082cc:	4631      	mov	r1, r6
 80082ce:	f7ff fe3b 	bl	8007f48 <show_error>
        return;
 80082d2:	e7f8      	b.n	80082c6 <lv_draw_img+0x36>
        show_error(draw_ctx, coords, "No\ndata");
 80082d4:	4a02      	ldr	r2, [pc, #8]	; (80082e0 <lv_draw_img+0x50>)
 80082d6:	4631      	mov	r1, r6
 80082d8:	4620      	mov	r0, r4
 80082da:	f7ff fe35 	bl	8007f48 <show_error>
 80082de:	e7f2      	b.n	80082c6 <lv_draw_img+0x36>
 80082e0:	080148a8 	.word	0x080148a8

080082e4 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 80082e4:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 80082e6:	3830      	subs	r0, #48	; 0x30
 80082e8:	b2c0      	uxtb	r0, r0
 80082ea:	2809      	cmp	r0, #9
 80082ec:	d918      	bls.n	8008320 <hex_char_to_num+0x3c>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80082ee:	2b60      	cmp	r3, #96	; 0x60
 80082f0:	d901      	bls.n	80082f6 <hex_char_to_num+0x12>
 80082f2:	3b20      	subs	r3, #32
 80082f4:	b2db      	uxtb	r3, r3

        switch(hex) {
 80082f6:	3b41      	subs	r3, #65	; 0x41
 80082f8:	2b05      	cmp	r3, #5
 80082fa:	d80e      	bhi.n	800831a <hex_char_to_num+0x36>
 80082fc:	e8df f003 	tbb	[pc, r3]
 8008300:	07050f03 	.word	0x07050f03
 8008304:	0b09      	.short	0x0b09
 8008306:	200a      	movs	r0, #10
 8008308:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
 800830a:	200c      	movs	r0, #12
                break;
 800830c:	4770      	bx	lr
            case 'D':
                result = 13;
 800830e:	200d      	movs	r0, #13
                break;
 8008310:	4770      	bx	lr
            case 'E':
                result = 14;
 8008312:	200e      	movs	r0, #14
                break;
 8008314:	4770      	bx	lr
            case 'F':
                result = 15;
 8008316:	200f      	movs	r0, #15
                break;
 8008318:	4770      	bx	lr
            default:
                result = 0;
 800831a:	2000      	movs	r0, #0
                break;
 800831c:	4770      	bx	lr
                result = 11;
 800831e:	200b      	movs	r0, #11
        }
    }

    return result;
}
 8008320:	4770      	bx	lr
	...

08008324 <lv_draw_label_dsc_init>:
{
 8008324:	b510      	push	{r4, lr}
 8008326:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8008328:	2120      	movs	r1, #32
 800832a:	f003 ffea 	bl	800c302 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800832e:	23ff      	movs	r3, #255	; 0xff
 8008330:	76a3      	strb	r3, [r4, #26]
 8008332:	f04f 0300 	mov.w	r3, #0
    dsc->color = lv_color_black();
 8008336:	81a3      	strh	r3, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 8008338:	4b07      	ldr	r3, [pc, #28]	; (8008358 <lv_draw_label_dsc_init+0x34>)
 800833a:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800833c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008340:	6063      	str	r3, [r4, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8008342:	60a3      	str	r3, [r4, #8]
 8008344:	f04f 0300 	mov.w	r3, #0
    dsc->sel_color = lv_color_black();
 8008348:	81e3      	strh	r3, [r4, #14]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800834a:	2005      	movs	r0, #5
 800834c:	f003 fb04 	bl	800b958 <lv_palette_main>
 8008350:	8220      	strh	r0, [r4, #16]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8008352:	2300      	movs	r3, #0
 8008354:	76e3      	strb	r3, [r4, #27]
}
 8008356:	bd10      	pop	{r4, pc}
 8008358:	08010fbc 	.word	0x08010fbc

0800835c <lv_draw_letter>:
{
 800835c:	b510      	push	{r4, lr}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800835e:	6a04      	ldr	r4, [r0, #32]
 8008360:	47a0      	blx	r4
}
 8008362:	bd10      	pop	{r4, pc}

08008364 <lv_draw_label>:
{
 8008364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008368:	b0b5      	sub	sp, #212	; 0xd4
 800836a:	9209      	str	r2, [sp, #36]	; 0x24
 800836c:	469c      	mov	ip, r3
 800836e:	9308      	str	r3, [sp, #32]
 8008370:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
    if(dsc->opa <= LV_OPA_MIN) return;
 8008372:	7e8b      	ldrb	r3, [r1, #26]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d915      	bls.n	80083a4 <lv_draw_label+0x40>
 8008378:	4681      	mov	r9, r0
 800837a:	460d      	mov	r5, r1
 800837c:	4696      	mov	lr, r2
    if(dsc->font == NULL) {
 800837e:	680b      	ldr	r3, [r1, #0]
 8008380:	b183      	cbz	r3, 80083a4 <lv_draw_label+0x40>
    if(draw_ctx->draw_letter == NULL) {
 8008382:	6a03      	ldr	r3, [r0, #32]
 8008384:	b173      	cbz	r3, 80083a4 <lv_draw_label+0x40>
    lv_draw_label_dsc_t dsc_mod = *dsc;
 8008386:	ae2c      	add	r6, sp, #176	; 0xb0
 8008388:	460f      	mov	r7, r1
 800838a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800838c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800838e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008392:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    const lv_font_t * font = dsc->font;
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	9304      	str	r3, [sp, #16]
    if(txt == NULL || txt[0] == '\0')
 800839a:	4663      	mov	r3, ip
 800839c:	b113      	cbz	r3, 80083a4 <lv_draw_label+0x40>
 800839e:	f89c 3000 	ldrb.w	r3, [ip]
 80083a2:	b913      	cbnz	r3, 80083aa <lv_draw_label+0x46>
}
 80083a4:	b035      	add	sp, #212	; 0xd4
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 80083aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80083ae:	4671      	mov	r1, lr
 80083b0:	a82a      	add	r0, sp, #168	; 0xa8
 80083b2:	f002 ffcf 	bl	800b354 <_lv_area_intersect>
    if(!clip_ok) return;
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0f4      	beq.n	80083a4 <lv_draw_label+0x40>
    lv_text_align_t align = dsc->align;
 80083ba:	7f2b      	ldrb	r3, [r5, #28]
 80083bc:	930c      	str	r3, [sp, #48]	; 0x30
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 80083be:	b90b      	cbnz	r3, 80083c4 <lv_draw_label+0x60>
 80083c0:	2301      	movs	r3, #1
 80083c2:	930c      	str	r3, [sp, #48]	; 0x30
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 80083c4:	7f6b      	ldrb	r3, [r5, #29]
 80083c6:	f013 0f02 	tst.w	r3, #2
 80083ca:	d127      	bne.n	800841c <lv_draw_label+0xb8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80083cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ce:	8893      	ldrh	r3, [r2, #4]
 80083d0:	8812      	ldrh	r2, [r2, #0]
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3301      	adds	r3, #1
 80083d8:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 80083da:	9a04      	ldr	r2, [sp, #16]
 80083dc:	f9b2 6008 	ldrsh.w	r6, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
 80083e0:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 80083e4:	1990      	adds	r0, r2, r6
 80083e6:	900d      	str	r0, [sp, #52]	; 0x34
    pos.x = coords->x1;
 80083e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80083ee:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    pos.y = coords->y1;
 80083f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80083f6:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
    x_ofs = dsc->ofs_x;
 80083fa:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 80083fe:	910e      	str	r1, [sp, #56]	; 0x38
    y_ofs = dsc->ofs_y;
 8008400:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
    pos.y += y_ofs;
 8008404:	440a      	add	r2, r1
 8008406:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800840a:	b33c      	cbz	r4, 800845c <lv_draw_label+0xf8>
 800840c:	bb49      	cbnz	r1, 8008462 <lv_draw_label+0xfe>
 800840e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008412:	2a00      	cmp	r2, #0
 8008414:	db13      	blt.n	800843e <lv_draw_label+0xda>
    int32_t last_line_start = -1;
 8008416:	f04f 37ff 	mov.w	r7, #4294967295
 800841a:	e024      	b.n	8008466 <lv_draw_label+0x102>
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800841c:	9302      	str	r3, [sp, #8]
 800841e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 800842e:	682a      	ldr	r2, [r5, #0]
 8008430:	9908      	ldr	r1, [sp, #32]
 8008432:	a815      	add	r0, sp, #84	; 0x54
 8008434:	f005 f9e3 	bl	800d7fe <lv_txt_get_size>
        w = p.x;
 8008438:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 800843c:	e7cd      	b.n	80083da <lv_draw_label+0x76>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800843e:	68a1      	ldr	r1, [r4, #8]
 8008440:	1a8a      	subs	r2, r1, r2
 8008442:	2a00      	cmp	r2, #0
 8008444:	bfb8      	it	lt
 8008446:	4252      	neglt	r2, r2
 8008448:	f5c0 7100 	rsb	r1, r0, #512	; 0x200
 800844c:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
 8008450:	dd02      	ble.n	8008458 <lv_draw_label+0xf4>
            hint->line_start = -1;
 8008452:	f04f 32ff 	mov.w	r2, #4294967295
 8008456:	6022      	str	r2, [r4, #0]
        last_line_start = hint->line_start;
 8008458:	6827      	ldr	r7, [r4, #0]
 800845a:	e004      	b.n	8008466 <lv_draw_label+0x102>
    int32_t last_line_start = -1;
 800845c:	f04f 37ff 	mov.w	r7, #4294967295
 8008460:	e001      	b.n	8008466 <lv_draw_label+0x102>
 8008462:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
 8008466:	b1e4      	cbz	r4, 80084a2 <lv_draw_label+0x13e>
 8008468:	2f00      	cmp	r7, #0
 800846a:	db1c      	blt.n	80084a6 <lv_draw_label+0x142>
        pos.y += hint->y;
 800846c:	6862      	ldr	r2, [r4, #4]
 800846e:	f8bd 10a6 	ldrh.w	r1, [sp, #166]	; 0xa6
 8008472:	440a      	add	r2, r1
 8008474:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008478:	b21a      	sxth	r2, r3
 800847a:	920a      	str	r2, [sp, #40]	; 0x28
 800847c:	7f6b      	ldrb	r3, [r5, #29]
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	2300      	movs	r3, #0
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 800848a:	9904      	ldr	r1, [sp, #16]
 800848c:	9808      	ldr	r0, [sp, #32]
 800848e:	4438      	add	r0, r7
 8008490:	f005 f8c4 	bl	800d61c <_lv_txt_get_next_line>
 8008494:	eb00 0b07 	add.w	fp, r0, r7
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8008498:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800849c:	f8dd a020 	ldr.w	sl, [sp, #32]
 80084a0:	e009      	b.n	80084b6 <lv_draw_label+0x152>
    uint32_t line_start     = 0;
 80084a2:	2700      	movs	r7, #0
 80084a4:	e7e8      	b.n	8008478 <lv_draw_label+0x114>
 80084a6:	2700      	movs	r7, #0
 80084a8:	e7e6      	b.n	8008478 <lv_draw_label+0x114>
        if(txt[line_start] == '\0') return;
 80084aa:	783b      	ldrb	r3, [r7, #0]
        line_start = line_end;
 80084ac:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f43f af78 	beq.w	80083a4 <lv_draw_label+0x40>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80084b4:	4683      	mov	fp, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 80084b6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 80084ba:	4433      	add	r3, r6
 80084bc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80084c0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	da28      	bge.n	800851a <lv_draw_label+0x1b6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80084c8:	eb0a 070b 	add.w	r7, sl, fp
 80084cc:	7f6b      	ldrb	r3, [r5, #29]
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	2300      	movs	r3, #0
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d6:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 80084da:	9904      	ldr	r1, [sp, #16]
 80084dc:	4638      	mov	r0, r7
 80084de:	f005 f89d 	bl	800d61c <_lv_txt_get_next_line>
 80084e2:	4458      	add	r0, fp
        pos.y += line_height;
 80084e4:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 80084e8:	4443      	add	r3, r8
 80084ea:	b21b      	sxth	r3, r3
 80084ec:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 80084f0:	2c00      	cmp	r4, #0
 80084f2:	d0da      	beq.n	80084aa <lv_draw_label+0x146>
 80084f4:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80084f8:	dbd7      	blt.n	80084aa <lv_draw_label+0x146>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dad4      	bge.n	80084aa <lv_draw_label+0x146>
            hint->line_start = line_start;
 8008500:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
 8008504:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 8008508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800850a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800850e:	1a9b      	subs	r3, r3, r2
 8008510:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
 8008512:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8008516:	60a3      	str	r3, [r4, #8]
 8008518:	e7c7      	b.n	80084aa <lv_draw_label+0x146>
    if(align == LV_TEXT_ALIGN_CENTER) {
 800851a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800851c:	2b02      	cmp	r3, #2
 800851e:	d024      	beq.n	800856a <lv_draw_label+0x206>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8008520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008522:	2b03      	cmp	r3, #3
 8008524:	d03d      	beq.n	80085a2 <lv_draw_label+0x23e>
    uint32_t sel_start = dsc->sel_start;
 8008526:	686a      	ldr	r2, [r5, #4]
 8008528:	4614      	mov	r4, r2
    uint32_t sel_end = dsc->sel_end;
 800852a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    if(sel_start > sel_end) {
 800852e:	4542      	cmp	r2, r8
 8008530:	d802      	bhi.n	8008538 <lv_draw_label+0x1d4>
 8008532:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
 8008534:	4690      	mov	r8, r2
    uint32_t sel_end = dsc->sel_end;
 8008536:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8008538:	7fab      	ldrb	r3, [r5, #30]
 800853a:	f013 0f03 	tst.w	r3, #3
 800853e:	d149      	bne.n	80085d4 <lv_draw_label+0x270>
 8008540:	f04f 0300 	mov.w	r3, #0
 8008544:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8008548:	469a      	mov	sl, r3
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800854a:	a817      	add	r0, sp, #92	; 0x5c
 800854c:	f000 fec8 	bl	80092e0 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8008550:	8a2b      	ldrh	r3, [r5, #16]
 8008552:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    int32_t pos_x_start = pos.x;
 8008556:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 800855a:	9310      	str	r3, [sp, #64]	; 0x40
    uint32_t par_start = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008560:	4626      	mov	r6, r4
 8008562:	f8cd 901c 	str.w	r9, [sp, #28]
 8008566:	46b9      	mov	r9, r7
    while(txt[line_start] != '\0') {
 8008568:	e151      	b.n	800880e <lv_draw_label+0x4aa>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800856a:	7f6b      	ldrb	r3, [r5, #29]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8008572:	9a04      	ldr	r2, [sp, #16]
 8008574:	ebab 0107 	sub.w	r1, fp, r7
 8008578:	9808      	ldr	r0, [sp, #32]
 800857a:	4438      	add	r0, r7
 800857c:	f005 f8ee 	bl	800d75c <lv_txt_get_width>
 8008580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008582:	8893      	ldrh	r3, [r2, #4]
 8008584:	8812      	ldrh	r2, [r2, #0]
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	b29b      	uxth	r3, r3
 800858a:	3301      	adds	r3, #1
 800858c:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800858e:	1a1b      	subs	r3, r3, r0
 8008590:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008594:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 8008598:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800859c:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 80085a0:	e7c1      	b.n	8008526 <lv_draw_label+0x1c2>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80085a2:	7f6b      	ldrb	r3, [r5, #29]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	ebab 0107 	sub.w	r1, fp, r7
 80085b0:	9808      	ldr	r0, [sp, #32]
 80085b2:	4438      	add	r0, r7
 80085b4:	f005 f8d2 	bl	800d75c <lv_txt_get_width>
 80085b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ba:	8893      	ldrh	r3, [r2, #4]
 80085bc:	8812      	ldrh	r2, [r2, #0]
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3301      	adds	r3, #1
 80085c4:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
 80085c6:	1a1b      	subs	r3, r3, r0
 80085c8:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 80085cc:	4413      	add	r3, r2
 80085ce:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 80085d2:	e7a8      	b.n	8008526 <lv_draw_label+0x1c2>
        lv_draw_line_dsc_init(&line_dsc);
 80085d4:	a826      	add	r0, sp, #152	; 0x98
 80085d6:	f000 f9fe 	bl	80089d6 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80085e6:	b17b      	cbz	r3, 8008608 <lv_draw_label+0x2a4>
 80085e8:	b21b      	sxth	r3, r3
 80085ea:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        line_dsc.opa = dsc->opa;
 80085ee:	7eab      	ldrb	r3, [r5, #26]
 80085f0:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
        line_dsc.blend_mode = dsc->blend_mode;
 80085f4:	7fab      	ldrb	r3, [r5, #30]
 80085f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80085fa:	f89d 20a1 	ldrb.w	r2, [sp, #161]	; 0xa1
 80085fe:	f363 0201 	bfi	r2, r3, #0, #2
 8008602:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 8008606:	e79b      	b.n	8008540 <lv_draw_label+0x1dc>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8008608:	2301      	movs	r3, #1
 800860a:	e7ee      	b.n	80085ea <lv_draw_label+0x286>
            uint32_t logical_char_pos = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	e083      	b.n	800871a <lv_draw_label+0x3b6>
 8008612:	2300      	movs	r3, #0
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	e080      	b.n	800871a <lv_draw_label+0x3b6>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8008618:	b137      	cbz	r7, 8008628 <lv_draw_label+0x2c4>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800861a:	2f01      	cmp	r7, #1
 800861c:	d056      	beq.n	80086cc <lv_draw_label+0x368>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800861e:	2f02      	cmp	r7, #2
 8008620:	f040 8089 	bne.w	8008736 <lv_draw_label+0x3d2>
                        cmd_state = CMD_STATE_WAIT;
 8008624:	2700      	movs	r7, #0
 8008626:	e067      	b.n	80086f8 <lv_draw_label+0x394>
                        par_start = i;
 8008628:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800862a:	930f      	str	r3, [sp, #60]	; 0x3c
                        cmd_state = CMD_STATE_PAR;
 800862c:	2701      	movs	r7, #1
                        continue;
 800862e:	e063      	b.n	80086f8 <lv_draw_label+0x394>
                    if(letter == ' ') {
 8008630:	2b20      	cmp	r3, #32
 8008632:	d161      	bne.n	80086f8 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8008634:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	2b07      	cmp	r3, #7
 800863c:	d004      	beq.n	8008648 <lv_draw_label+0x2e4>
                            recolor.full = dsc->color.full;
 800863e:	89ab      	ldrh	r3, [r5, #12]
 8008640:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8008644:	2702      	movs	r7, #2
                    continue;
 8008646:	e057      	b.n	80086f8 <lv_draw_label+0x394>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8008648:	9b06      	ldr	r3, [sp, #24]
 800864a:	1899      	adds	r1, r3, r2
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
static inline void * LV_ATTRIBUTE_FAST_MEM lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 800864c:	aa15      	add	r2, sp, #84	; 0x54
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800864e:	2306      	movs	r3, #6
 8008650:	e004      	b.n	800865c <lv_draw_label+0x2f8>
        *d8 = *s8;
 8008652:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008656:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
 800865a:	3b01      	subs	r3, #1
    while(len) {
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1f8      	bne.n	8008652 <lv_draw_label+0x2ee>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 8008660:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8008664:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8008668:	f7ff fe3c 	bl	80082e4 <hex_char_to_num>
 800866c:	0104      	lsls	r4, r0, #4
 800866e:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
 8008672:	f7ff fe37 	bl	80082e4 <hex_char_to_num>
 8008676:	1823      	adds	r3, r4, r0
 8008678:	9305      	str	r3, [sp, #20]
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800867a:	f89d 0056 	ldrb.w	r0, [sp, #86]	; 0x56
 800867e:	f7ff fe31 	bl	80082e4 <hex_char_to_num>
 8008682:	0104      	lsls	r4, r0, #4
 8008684:	f89d 0057 	ldrb.w	r0, [sp, #87]	; 0x57
 8008688:	f7ff fe2c 	bl	80082e4 <hex_char_to_num>
 800868c:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800868e:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8008692:	f7ff fe27 	bl	80082e4 <hex_char_to_num>
 8008696:	0107      	lsls	r7, r0, #4
 8008698:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 800869c:	f7ff fe22 	bl	80082e4 <hex_char_to_num>
 80086a0:	183b      	adds	r3, r7, r0
 80086a2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80086a6:	f3c4 0485 	ubfx	r4, r4, #2, #6
 80086aa:	9a05      	ldr	r2, [sp, #20]
 80086ac:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80086b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086b2:	f363 0104 	bfi	r1, r3, #0, #5
 80086b6:	460b      	mov	r3, r1
 80086b8:	f364 134a 	bfi	r3, r4, #5, #6
 80086bc:	f362 23cf 	bfi	r3, r2, #11, #5
 80086c0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80086c4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 80086c8:	2702      	movs	r7, #2
 80086ca:	e015      	b.n	80086f8 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
 80086cc:	2700      	movs	r7, #0
 80086ce:	e035      	b.n	800873c <lv_draw_label+0x3d8>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 80086d0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80086d4:	e036      	b.n	8008744 <lv_draw_label+0x3e0>
            dsc_mod.color = color;
 80086d6:	f8ad a0bc 	strh.w	sl, [sp, #188]	; 0xbc
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 80086da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086dc:	aa29      	add	r2, sp, #164	; 0xa4
 80086de:	a92c      	add	r1, sp, #176	; 0xb0
 80086e0:	9807      	ldr	r0, [sp, #28]
 80086e2:	f7ff fe3b 	bl	800835c <lv_draw_letter>
            if(letter_w > 0) {
 80086e6:	b13c      	cbz	r4, 80086f8 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
 80086e8:	8aa8      	ldrh	r0, [r5, #20]
 80086ea:	4404      	add	r4, r0
 80086ec:	b2a4      	uxth	r4, r4
 80086ee:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 80086f2:	441c      	add	r4, r3
 80086f4:	f8ad 40a4 	strh.w	r4, [sp, #164]	; 0xa4
        while(i < line_end - line_start) {
 80086f8:	ebab 0309 	sub.w	r3, fp, r9
 80086fc:	9925      	ldr	r1, [sp, #148]	; 0x94
 80086fe:	428b      	cmp	r3, r1
 8008700:	d951      	bls.n	80087a6 <lv_draw_label+0x442>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008706:	4598      	cmp	r8, r3
 8008708:	d080      	beq.n	800860c <lv_draw_label+0x2a8>
 800870a:	429e      	cmp	r6, r3
 800870c:	d081      	beq.n	8008612 <lv_draw_label+0x2ae>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800870e:	4b85      	ldr	r3, [pc, #532]	; (8008924 <lv_draw_label+0x5c0>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4449      	add	r1, r9
 8008714:	9808      	ldr	r0, [sp, #32]
 8008716:	4798      	blx	r3
 8008718:	9005      	str	r0, [sp, #20]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800871a:	ab25      	add	r3, sp, #148	; 0x94
 800871c:	aa14      	add	r2, sp, #80	; 0x50
 800871e:	a913      	add	r1, sp, #76	; 0x4c
 8008720:	9806      	ldr	r0, [sp, #24]
 8008722:	f005 f805 	bl	800d730 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8008726:	7f6b      	ldrb	r3, [r5, #29]
 8008728:	f013 0f01 	tst.w	r3, #1
 800872c:	d006      	beq.n	800873c <lv_draw_label+0x3d8>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800872e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008730:	2b23      	cmp	r3, #35	; 0x23
 8008732:	f43f af71 	beq.w	8008618 <lv_draw_label+0x2b4>
                if(cmd_state == CMD_STATE_PAR) {
 8008736:	2f01      	cmp	r7, #1
 8008738:	f43f af7a 	beq.w	8008630 <lv_draw_label+0x2cc>
            color = dsc->color;
 800873c:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008740:	2f02      	cmp	r7, #2
 8008742:	d0c5      	beq.n	80086d0 <lv_draw_label+0x36c>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008744:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008746:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008748:	9804      	ldr	r0, [sp, #16]
 800874a:	f002 f953 	bl	800a9f4 <lv_font_get_glyph_width>
 800874e:	4604      	mov	r4, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008754:	4598      	cmp	r8, r3
 8008756:	d0be      	beq.n	80086d6 <lv_draw_label+0x372>
 8008758:	429e      	cmp	r6, r3
 800875a:	d0bc      	beq.n	80086d6 <lv_draw_label+0x372>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	4598      	cmp	r8, r3
 8008760:	d8b9      	bhi.n	80086d6 <lv_draw_label+0x372>
 8008762:	429e      	cmp	r6, r3
 8008764:	d9b7      	bls.n	80086d6 <lv_draw_label+0x372>
                    sel_coords.x1 = pos.x;
 8008766:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 800876a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.y1 = pos.y;
 800876e:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8008772:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8008776:	b29b      	uxth	r3, r3
 8008778:	4403      	add	r3, r0
 800877a:	b29b      	uxth	r3, r3
 800877c:	8aa9      	ldrh	r1, [r5, #20]
 800877e:	440b      	add	r3, r1
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.y2 = pos.y + line_height - 1;
 8008788:	b293      	uxth	r3, r2
 800878a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800878c:	4413      	add	r3, r2
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 8008796:	aa15      	add	r2, sp, #84	; 0x54
 8008798:	a917      	add	r1, sp, #92	; 0x5c
 800879a:	9807      	ldr	r0, [sp, #28]
 800879c:	f000 fdc8 	bl	8009330 <lv_draw_rect>
                    color = dsc->sel_color;
 80087a0:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
 80087a4:	e797      	b.n	80086d6 <lv_draw_label+0x372>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 80087a6:	7fab      	ldrb	r3, [r5, #30]
 80087a8:	f013 0f02 	tst.w	r3, #2
 80087ac:	d141      	bne.n	8008832 <lv_draw_label+0x4ce>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 80087ae:	7fab      	ldrb	r3, [r5, #30]
 80087b0:	f013 0f01 	tst.w	r3, #1
 80087b4:	d162      	bne.n	800887c <lv_draw_label+0x518>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80087b6:	9b08      	ldr	r3, [sp, #32]
 80087b8:	eb03 040b 	add.w	r4, r3, fp
 80087bc:	7f6b      	ldrb	r3, [r5, #29]
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	2300      	movs	r3, #0
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c6:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 80087ca:	9904      	ldr	r1, [sp, #16]
 80087cc:	4620      	mov	r0, r4
 80087ce:	f004 ff25 	bl	800d61c <_lv_txt_get_next_line>
 80087d2:	eb0b 0700 	add.w	r7, fp, r0
        pos.x = coords->x1;
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087dc:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        if(align == LV_TEXT_ALIGN_CENTER) {
 80087e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d06d      	beq.n	80088c2 <lv_draw_label+0x55e>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 80087e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	f000 8084 	beq.w	80088f6 <lv_draw_label+0x592>
        pos.y += line_height;
 80087ee:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 80087f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087f4:	4413      	add	r3, r2
 80087f6:	b21b      	sxth	r3, r3
 80087f8:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        if(pos.y > draw_ctx->clip_area->y2) return;
 80087fc:	9a07      	ldr	r2, [sp, #28]
 80087fe:	6892      	ldr	r2, [r2, #8]
 8008800:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
 8008804:	46d9      	mov	r9, fp
        if(pos.y > draw_ctx->clip_area->y2) return;
 8008806:	4293      	cmp	r3, r2
 8008808:	f73f adcc 	bgt.w	80083a4 <lv_draw_label+0x40>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800880c:	46bb      	mov	fp, r7
    while(txt[line_start] != '\0') {
 800880e:	9b08      	ldr	r3, [sp, #32]
 8008810:	eb03 0209 	add.w	r2, r3, r9
 8008814:	9206      	str	r2, [sp, #24]
 8008816:	f813 3009 	ldrb.w	r3, [r3, r9]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f43f adc2 	beq.w	80083a4 <lv_draw_label+0x40>
        pos.x += x_ofs;
 8008820:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8008824:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008826:	4413      	add	r3, r2
 8008828:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        i         = 0;
 800882c:	2700      	movs	r7, #0
 800882e:	9725      	str	r7, [sp, #148]	; 0x94
        while(i < line_end - line_start) {
 8008830:	e762      	b.n	80086f8 <lv_draw_label+0x394>
            p1.x = pos_x_start;
 8008832:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008834:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8008838:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 800883c:	682a      	ldr	r2, [r5, #0]
 800883e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8008842:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8008846:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800884a:	b29b      	uxth	r3, r3
 800884c:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
 8008850:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8008854:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8008858:	b21b      	sxth	r3, r3
 800885a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            p2.x = pos.x;
 800885e:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8008862:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            p2.y = p1.y;
 8008866:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            line_dsc.color = color;
 800886a:	f8ad a098 	strh.w	sl, [sp, #152]	; 0x98
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800886e:	ab15      	add	r3, sp, #84	; 0x54
 8008870:	aa14      	add	r2, sp, #80	; 0x50
 8008872:	a926      	add	r1, sp, #152	; 0x98
 8008874:	9807      	ldr	r0, [sp, #28]
 8008876:	f000 f8bb 	bl	80089f0 <lv_draw_line>
 800887a:	e798      	b.n	80087ae <lv_draw_label+0x44a>
            p1.x = pos_x_start;
 800887c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800887e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8008882:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 8008886:	682a      	ldr	r2, [r5, #0]
 8008888:	8911      	ldrh	r1, [r2, #8]
 800888a:	440b      	add	r3, r1
 800888c:	b29b      	uxth	r3, r3
 800888e:	8952      	ldrh	r2, [r2, #10]
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	b29b      	uxth	r3, r3
 8008894:	9a04      	ldr	r2, [sp, #16]
 8008896:	f992 200d 	ldrsb.w	r2, [r2, #13]
 800889a:	b292      	uxth	r2, r2
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	b21b      	sxth	r3, r3
 80088a0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            p2.x = pos.x;
 80088a4:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80088a8:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            p2.y = p1.y;
 80088ac:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            line_dsc.color = color;
 80088b0:	f8ad a098 	strh.w	sl, [sp, #152]	; 0x98
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80088b4:	ab15      	add	r3, sp, #84	; 0x54
 80088b6:	aa14      	add	r2, sp, #80	; 0x50
 80088b8:	a926      	add	r1, sp, #152	; 0x98
 80088ba:	9807      	ldr	r0, [sp, #28]
 80088bc:	f000 f898 	bl	80089f0 <lv_draw_line>
 80088c0:	e779      	b.n	80087b6 <lv_draw_label+0x452>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80088c2:	7f6b      	ldrb	r3, [r5, #29]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80088ca:	9a04      	ldr	r2, [sp, #16]
 80088cc:	4601      	mov	r1, r0
 80088ce:	4620      	mov	r0, r4
 80088d0:	f004 ff44 	bl	800d75c <lv_txt_get_width>
 80088d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088d6:	8893      	ldrh	r3, [r2, #4]
 80088d8:	8812      	ldrh	r2, [r2, #0]
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3301      	adds	r3, #1
 80088e0:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80088e2:	1a18      	subs	r0, r3, r0
 80088e4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80088e8:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 80088ec:	eb03 0060 	add.w	r0, r3, r0, asr #1
 80088f0:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
 80088f4:	e77b      	b.n	80087ee <lv_draw_label+0x48a>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80088f6:	7f6b      	ldrb	r3, [r5, #29]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80088fe:	9a04      	ldr	r2, [sp, #16]
 8008900:	4601      	mov	r1, r0
 8008902:	4620      	mov	r0, r4
 8008904:	f004 ff2a 	bl	800d75c <lv_txt_get_width>
 8008908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800890a:	8893      	ldrh	r3, [r2, #4]
 800890c:	8812      	ldrh	r2, [r2, #0]
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	b29b      	uxth	r3, r3
 8008912:	3301      	adds	r3, #1
 8008914:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
 8008916:	1a1b      	subs	r3, r3, r0
 8008918:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800891c:	4413      	add	r3, r2
 800891e:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 8008922:	e764      	b.n	80087ee <lv_draw_label+0x48a>
 8008924:	20000044 	.word	0x20000044

08008928 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(draw_ctx->layer_init == NULL) return NULL;
 800892a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800892c:	b353      	cbz	r3, 8008984 <lv_draw_layer_create+0x5c>
 800892e:	4604      	mov	r4, r0
 8008930:	460f      	mov	r7, r1
 8008932:	4616      	mov	r6, r2

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 8008934:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008936:	f003 fb67 	bl	800c008 <lv_mem_alloc>
    LV_ASSERT_MALLOC(layer_ctx);
 800893a:	4605      	mov	r5, r0
 800893c:	b1e8      	cbz	r0, 800897a <lv_draw_layer_create+0x52>
    if(layer_ctx == NULL) {
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800893e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008940:	f003 fcdf 	bl	800c302 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8008944:	f7ff fa40 	bl	8007dc8 <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	622b      	str	r3, [r5, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	61eb      	str	r3, [r5, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	61ab      	str	r3, [r5, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 8008954:	6803      	ldr	r3, [r0, #0]
 8008956:	7c1b      	ldrb	r3, [r3, #16]
 8008958:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800895c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 8008960:	462b      	mov	r3, r5
 8008962:	6838      	ldr	r0, [r7, #0]
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 8008968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800896a:	4632      	mov	r2, r6
 800896c:	4629      	mov	r1, r5
 800896e:	4620      	mov	r0, r4
 8008970:	4798      	blx	r3
    if(NULL == init_layer_ctx) {
 8008972:	4604      	mov	r4, r0
 8008974:	b110      	cbz	r0, 800897c <lv_draw_layer_create+0x54>
        lv_mem_free(layer_ctx);
    }
    return init_layer_ctx;
}
 8008976:	4620      	mov	r0, r4
 8008978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(layer_ctx);
 800897a:	e7fe      	b.n	800897a <lv_draw_layer_create+0x52>
        lv_mem_free(layer_ctx);
 800897c:	4628      	mov	r0, r5
 800897e:	f003 fb61 	bl	800c044 <lv_mem_free>
 8008982:	e7f8      	b.n	8008976 <lv_draw_layer_create+0x4e>
    if(draw_ctx->layer_init == NULL) return NULL;
 8008984:	2400      	movs	r4, #0
 8008986:	e7f6      	b.n	8008976 <lv_draw_layer_create+0x4e>

08008988 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 8008988:	b508      	push	{r3, lr}
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800898a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800898c:	b103      	cbz	r3, 8008990 <lv_draw_layer_adjust+0x8>
 800898e:	4798      	blx	r3
}
 8008990:	bd08      	pop	{r3, pc}

08008992 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 8008992:	b508      	push	{r3, lr}
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 8008994:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008996:	b103      	cbz	r3, 800899a <lv_draw_layer_blend+0x8>
 8008998:	4798      	blx	r3
}
 800899a:	bd08      	pop	{r3, pc}

0800899c <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4605      	mov	r5, r0
 80089a0:	460c      	mov	r4, r1

    lv_draw_wait_for_finish(draw_ctx);
 80089a2:	f7ff fac8 	bl	8007f36 <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 80089a6:	6a23      	ldr	r3, [r4, #32]
 80089a8:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 80089aa:	69e3      	ldr	r3, [r4, #28]
 80089ac:	606b      	str	r3, [r5, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 80089ae:	69a3      	ldr	r3, [r4, #24]
 80089b0:	60ab      	str	r3, [r5, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80089b2:	f7ff fa09 	bl	8007dc8 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 80089b6:	6803      	ldr	r3, [r0, #0]
 80089b8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80089bc:	7c1a      	ldrb	r2, [r3, #16]
 80089be:	f361 1286 	bfi	r2, r1, #6, #1
 80089c2:	741a      	strb	r2, [r3, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 80089c4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80089c6:	b113      	cbz	r3, 80089ce <lv_draw_layer_destroy+0x32>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4628      	mov	r0, r5
 80089cc:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 80089ce:	4620      	mov	r0, r4
 80089d0:	f003 fb38 	bl	800c044 <lv_mem_free>
}
 80089d4:	bd38      	pop	{r3, r4, r5, pc}

080089d6 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void LV_ATTRIBUTE_FAST_MEM lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 80089d6:	b510      	push	{r4, lr}
 80089d8:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80089da:	210a      	movs	r1, #10
 80089dc:	f003 fc91 	bl	800c302 <lv_memset_00>
    dsc->width = 1;
 80089e0:	2301      	movs	r3, #1
 80089e2:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 80089e4:	23ff      	movs	r3, #255	; 0xff
 80089e6:	7223      	strb	r3, [r4, #8]
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80089e8:	f04f 0300 	mov.w	r3, #0
    dsc->color = lv_color_black();
 80089ec:	8023      	strh	r3, [r4, #0]
}
 80089ee:	bd10      	pop	{r4, pc}

080089f0 <lv_draw_line>:

void LV_ATTRIBUTE_FAST_MEM lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 80089f0:	b510      	push	{r4, lr}
    if(dsc->width == 0) return;
 80089f2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80089f6:	b124      	cbz	r4, 8008a02 <lv_draw_line+0x12>
    if(dsc->opa <= LV_OPA_MIN) return;
 80089f8:	7a0c      	ldrb	r4, [r1, #8]
 80089fa:	2c02      	cmp	r4, #2
 80089fc:	d901      	bls.n	8008a02 <lv_draw_line+0x12>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 80089fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a00:	47a0      	blx	r4
}
 8008a02:	bd10      	pop	{r4, pc}

08008a04 <circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 8008a04:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 8008a0a:	f1c2 0201 	rsb	r2, r2, #1
 8008a0e:	800a      	strh	r2, [r1, #0]
}
 8008a10:	4770      	bx	lr

08008a12 <circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 8008a12:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008a16:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 8008a1a:	4282      	cmp	r2, r0
 8008a1c:	bfcc      	ite	gt
 8008a1e:	2000      	movgt	r0, #0
 8008a20:	2001      	movle	r0, #1
 8008a22:	4770      	bx	lr

08008a24 <circ_next>:
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{

    if(*tmp <= 0) {
 8008a24:	f9b1 3000 	ldrsh.w	r3, [r1]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dd12      	ble.n	8008a52 <circ_next+0x2e>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8008a2c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008a30:	f9b0 c000 	ldrsh.w	ip, [r0]
 8008a34:	eba2 020c 	sub.w	r2, r2, ip
 8008a38:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008a3c:	3305      	adds	r3, #5
 8008a3e:	800b      	strh	r3, [r1, #0]
        c->x--;
 8008a40:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	8003      	strh	r3, [r0, #0]
    }
    c->y++;
 8008a48:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	8043      	strh	r3, [r0, #2]
}
 8008a50:	4770      	bx	lr
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 8008a52:	8842      	ldrh	r2, [r0, #2]
 8008a54:	0052      	lsls	r2, r2, #1
 8008a56:	b292      	uxth	r2, r2
 8008a58:	4413      	add	r3, r2
 8008a5a:	3303      	adds	r3, #3
 8008a5c:	800b      	strh	r3, [r1, #0]
 8008a5e:	e7f3      	b.n	8008a48 <circ_next+0x24>

08008a60 <get_next_line>:
    lv_mem_buf_release(cir_x);
}

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 8008a60:	b410      	push	{r4}
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8008a62:	68c4      	ldr	r4, [r0, #12]
 8008a64:	f101 0c01 	add.w	ip, r1, #1
 8008a68:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 8008a6c:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8008a70:	ebac 0c04 	sub.w	ip, ip, r4
 8008a74:	f8a2 c000 	strh.w	ip, [r2]
    *x_start = c->x_start_on_y[y];
 8008a78:	6882      	ldr	r2, [r0, #8]
 8008a7a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8008a7e:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8008a80:	6842      	ldr	r2, [r0, #4]
 8008a82:	68c3      	ldr	r3, [r0, #12]
 8008a84:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8008a88:	4410      	add	r0, r2
 8008a8a:	bc10      	pop	{r4}
 8008a8c:	4770      	bx	lr

08008a8e <lv_draw_mask_radius>:
{
 8008a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	461d      	mov	r5, r3
 8008a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
    bool outer = p->cfg.outer;
 8008a9c:	f890 8012 	ldrb.w	r8, [r0, #18]
    int32_t radius = p->cfg.radius;
 8008aa0:	f9b0 9010 	ldrsh.w	r9, [r0, #16]
    dest->x1 = src->x1;
 8008aa4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8008aa8:	f8ad c008 	strh.w	ip, [sp, #8]
    dest->y1 = src->y1;
 8008aac:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8008ab0:	f8ad 100a 	strh.w	r1, [sp, #10]
    dest->x2 = src->x2;
 8008ab4:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 8008ab8:	f8ad 400c 	strh.w	r4, [sp, #12]
    dest->y2 = src->y2;
 8008abc:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8008ac0:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(outer == false) {
 8008ac4:	f018 0801 	ands.w	r8, r8, #1
 8008ac8:	d132      	bne.n	8008b30 <lv_draw_mask_radius+0xa2>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8008aca:	428a      	cmp	r2, r1
 8008acc:	f2c0 8150 	blt.w	8008d70 <lv_draw_mask_radius+0x2e2>
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	f300 8151 	bgt.w	8008d78 <lv_draw_mask_radius+0x2ea>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8008ad6:	eb0c 0e09 	add.w	lr, ip, r9
 8008ada:	4577      	cmp	r7, lr
 8008adc:	db05      	blt.n	8008aea <lv_draw_mask_radius+0x5c>
 8008ade:	eb05 0e07 	add.w	lr, r5, r7
 8008ae2:	eba4 0a09 	sub.w	sl, r4, r9
 8008ae6:	45d6      	cmp	lr, sl
 8008ae8:	dd07      	ble.n	8008afa <lv_draw_mask_radius+0x6c>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8008aea:	eb01 0e09 	add.w	lr, r1, r9
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8008aee:	4572      	cmp	r2, lr
 8008af0:	db4a      	blt.n	8008b88 <lv_draw_mask_radius+0xfa>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8008af2:	eba3 0e09 	sub.w	lr, r3, r9
 8008af6:	4572      	cmp	r2, lr
 8008af8:	dc46      	bgt.n	8008b88 <lv_draw_mask_radius+0xfa>
        if(outer == false) {
 8008afa:	f1b8 0f00 	cmp.w	r8, #0
 8008afe:	d128      	bne.n	8008b52 <lv_draw_mask_radius+0xc4>
            int32_t last = rect.x1 - abs_x;
 8008b00:	ebac 0807 	sub.w	r8, ip, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8008b04:	4545      	cmp	r5, r8
 8008b06:	f2c0 813b 	blt.w	8008d80 <lv_draw_mask_radius+0x2f2>
            if(last >= 0) {
 8008b0a:	f1b8 0f00 	cmp.w	r8, #0
 8008b0e:	da16      	bge.n	8008b3e <lv_draw_mask_radius+0xb0>
            int32_t first = rect.x2 - abs_x + 1;
 8008b10:	1be7      	subs	r7, r4, r7
 8008b12:	3701      	adds	r7, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	f340 8135 	ble.w	8008d84 <lv_draw_mask_radius+0x2f6>
            else if(first < len) {
 8008b1a:	42bd      	cmp	r5, r7
 8008b1c:	dc14      	bgt.n	8008b48 <lv_draw_mask_radius+0xba>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 8008b1e:	f1b8 0f00 	cmp.w	r8, #0
 8008b22:	f040 8131 	bne.w	8008d88 <lv_draw_mask_radius+0x2fa>
 8008b26:	42bd      	cmp	r5, r7
 8008b28:	f000 8130 	beq.w	8008d8c <lv_draw_mask_radius+0x2fe>
            else return LV_DRAW_MASK_RES_CHANGED;
 8008b2c:	2002      	movs	r0, #2
 8008b2e:	e120      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8008b30:	428a      	cmp	r2, r1
 8008b32:	f2c0 8123 	blt.w	8008d7c <lv_draw_mask_radius+0x2ee>
 8008b36:	429a      	cmp	r2, r3
 8008b38:	ddcd      	ble.n	8008ad6 <lv_draw_mask_radius+0x48>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	e119      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
                lv_memset_00(&mask_buf[0], last);
 8008b3e:	4641      	mov	r1, r8
 8008b40:	4630      	mov	r0, r6
 8008b42:	f003 fbde 	bl	800c302 <lv_memset_00>
 8008b46:	e7e3      	b.n	8008b10 <lv_draw_mask_radius+0x82>
                lv_memset_00(&mask_buf[first], len - first);
 8008b48:	1be9      	subs	r1, r5, r7
 8008b4a:	19f0      	adds	r0, r6, r7
 8008b4c:	f003 fbd9 	bl	800c302 <lv_memset_00>
 8008b50:	e7e5      	b.n	8008b1e <lv_draw_mask_radius+0x90>
            if(first < 0) first = 0;
 8008b52:	ebbc 0c07 	subs.w	ip, ip, r7
 8008b56:	d40f      	bmi.n	8008b78 <lv_draw_mask_radius+0xea>
            if(first <= len) {
 8008b58:	4565      	cmp	r5, ip
 8008b5a:	db0b      	blt.n	8008b74 <lv_draw_mask_radius+0xe6>
                int32_t last = rect.x2 - abs_x - first + 1;
 8008b5c:	1be1      	subs	r1, r4, r7
 8008b5e:	eba1 010c 	sub.w	r1, r1, ip
 8008b62:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 8008b64:	eb0c 0301 	add.w	r3, ip, r1
 8008b68:	429d      	cmp	r5, r3
 8008b6a:	da01      	bge.n	8008b70 <lv_draw_mask_radius+0xe2>
 8008b6c:	eba5 010c 	sub.w	r1, r5, ip
                if(last >= 0) {
 8008b70:	2900      	cmp	r1, #0
 8008b72:	da04      	bge.n	8008b7e <lv_draw_mask_radius+0xf0>
        return LV_DRAW_MASK_RES_CHANGED;
 8008b74:	2002      	movs	r0, #2
 8008b76:	e0fc      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
            if(first < 0) first = 0;
 8008b78:	f04f 0c00 	mov.w	ip, #0
 8008b7c:	e7ec      	b.n	8008b58 <lv_draw_mask_radius+0xca>
                    lv_memset_00(&mask_buf[first], last);
 8008b7e:	eb06 000c 	add.w	r0, r6, ip
 8008b82:	f003 fbbe 	bl	800c302 <lv_memset_00>
 8008b86:	e7f5      	b.n	8008b74 <lv_draw_mask_radius+0xe6>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8008b88:	ebac 0707 	sub.w	r7, ip, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008b8c:	b2a4      	uxth	r4, r4
 8008b8e:	fa1f fc8c 	uxth.w	ip, ip
 8008b92:	eba4 040c 	sub.w	r4, r4, ip
 8008b96:	b2a4      	uxth	r4, r4
 8008b98:	3401      	adds	r4, #1
 8008b9a:	b2a4      	uxth	r4, r4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	b289      	uxth	r1, r1
 8008ba0:	1a5b      	subs	r3, r3, r1
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	b29b      	uxth	r3, r3
    abs_y -= rect.y1;
 8008ba8:	b292      	uxth	r2, r2
 8008baa:	eba2 0c01 	sub.w	ip, r2, r1
 8008bae:	fa1f fe8c 	uxth.w	lr, ip
 8008bb2:	fa0f fc8c 	sxth.w	ip, ip
    if(abs_y < radius) {
 8008bb6:	45e1      	cmp	r9, ip
 8008bb8:	dd24      	ble.n	8008c04 <lv_draw_mask_radius+0x176>
        cir_y = radius - abs_y - 1;
 8008bba:	1a89      	subs	r1, r1, r2
 8008bbc:	4449      	add	r1, r9
 8008bbe:	b289      	uxth	r1, r1
 8008bc0:	3901      	subs	r1, #1
 8008bc2:	b209      	sxth	r1, r1
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 8008bc4:	ab01      	add	r3, sp, #4
 8008bc6:	f10d 0206 	add.w	r2, sp, #6
 8008bca:	6940      	ldr	r0, [r0, #20]
 8008bcc:	f7ff ff48 	bl	8008a60 <get_next_line>
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8008bd0:	b2bf      	uxth	r7, r7
 8008bd2:	193a      	adds	r2, r7, r4
 8008bd4:	b292      	uxth	r2, r2
 8008bd6:	fa1f f989 	uxth.w	r9, r9
 8008bda:	eba2 0209 	sub.w	r2, r2, r9
 8008bde:	b292      	uxth	r2, r2
 8008be0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008be4:	441a      	add	r2, r3
 8008be6:	fa1f fc82 	uxth.w	ip, r2
 8008bea:	b211      	sxth	r1, r2
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 8008bec:	444f      	add	r7, r9
 8008bee:	b2bc      	uxth	r4, r7
 8008bf0:	1ae4      	subs	r4, r4, r3
 8008bf2:	b2a4      	uxth	r4, r4
 8008bf4:	3c01      	subs	r4, #1
 8008bf6:	b224      	sxth	r4, r4
    if(outer == false) {
 8008bf8:	f1b8 0f00 	cmp.w	r8, #0
 8008bfc:	f040 8098 	bne.w	8008d30 <lv_draw_mask_radius+0x2a2>
        for(i = 0; i < aa_len; i++) {
 8008c00:	2200      	movs	r2, #0
 8008c02:	e00e      	b.n	8008c22 <lv_draw_mask_radius+0x194>
        cir_y = abs_y - (h - radius);
 8008c04:	eba9 0303 	sub.w	r3, r9, r3
 8008c08:	4473      	add	r3, lr
 8008c0a:	b219      	sxth	r1, r3
 8008c0c:	e7da      	b.n	8008bc4 <lv_draw_mask_radius+0x136>

static inline lv_opa_t LV_ATTRIBUTE_FAST_MEM mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008c0e:	4673      	mov	r3, lr
 8008c10:	e023      	b.n	8008c5a <lv_draw_mask_radius+0x1cc>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e021      	b.n	8008c5a <lv_draw_mask_radius+0x1cc>
 8008c16:	f04f 0e00 	mov.w	lr, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8008c1a:	f806 e007 	strb.w	lr, [r6, r7]
        for(i = 0; i < aa_len; i++) {
 8008c1e:	3201      	adds	r2, #1
 8008c20:	b212      	sxth	r2, r2
 8008c22:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	dd2b      	ble.n	8008c82 <lv_draw_mask_radius+0x1f4>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 8008c2a:	4617      	mov	r7, r2
 8008c2c:	1a9b      	subs	r3, r3, r2
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	f810 e003 	ldrb.w	lr, [r0, r3]
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8008c34:	eb11 0c02 	adds.w	ip, r1, r2
 8008c38:	d411      	bmi.n	8008c5e <lv_draw_mask_radius+0x1d0>
 8008c3a:	45ac      	cmp	ip, r5
 8008c3c:	da0f      	bge.n	8008c5e <lv_draw_mask_radius+0x1d0>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8008c3e:	f816 300c 	ldrb.w	r3, [r6, ip]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008c42:	2bfc      	cmp	r3, #252	; 0xfc
 8008c44:	d8e3      	bhi.n	8008c0e <lv_draw_mask_radius+0x180>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d9e3      	bls.n	8008c12 <lv_draw_mask_radius+0x184>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008c4a:	fb03 f30e 	mul.w	r3, r3, lr
 8008c4e:	eb03 2803 	add.w	r8, r3, r3, lsl #8
 8008c52:	eb03 13c8 	add.w	r3, r3, r8, lsl #7
 8008c56:	f3c3 53c7 	ubfx	r3, r3, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8008c5a:	f806 300c 	strb.w	r3, [r6, ip]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8008c5e:	1be7      	subs	r7, r4, r7
 8008c60:	d4dd      	bmi.n	8008c1e <lv_draw_mask_radius+0x190>
 8008c62:	42af      	cmp	r7, r5
 8008c64:	dadb      	bge.n	8008c1e <lv_draw_mask_radius+0x190>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8008c66:	5df3      	ldrb	r3, [r6, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008c68:	2bfc      	cmp	r3, #252	; 0xfc
 8008c6a:	d8d6      	bhi.n	8008c1a <lv_draw_mask_radius+0x18c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d9d2      	bls.n	8008c16 <lv_draw_mask_radius+0x188>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008c70:	fb03 fe0e 	mul.w	lr, r3, lr
 8008c74:	eb0e 230e 	add.w	r3, lr, lr, lsl #8
 8008c78:	eb0e 1ec3 	add.w	lr, lr, r3, lsl #7
 8008c7c:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
 8008c80:	e7cb      	b.n	8008c1a <lv_draw_mask_radius+0x18c>
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 8008c82:	440a      	add	r2, r1
 8008c84:	42aa      	cmp	r2, r5
 8008c86:	bfa8      	it	ge
 8008c88:	462a      	movge	r2, r5
 8008c8a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008c8e:	b212      	sxth	r2, r2
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 8008c90:	1aa9      	subs	r1, r5, r2
 8008c92:	18b0      	adds	r0, r6, r2
 8008c94:	f003 fb35 	bl	800c302 <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 8008c98:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8008c9c:	1a61      	subs	r1, r4, r1
 8008c9e:	3101      	adds	r1, #1
 8008ca0:	428d      	cmp	r5, r1
 8008ca2:	bfa8      	it	ge
 8008ca4:	460d      	movge	r5, r1
 8008ca6:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
        lv_memset_00(&mask_buf[0], cir_x_left);
 8008caa:	b209      	sxth	r1, r1
 8008cac:	4630      	mov	r0, r6
 8008cae:	f003 fb28 	bl	800c302 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008cb2:	2002      	movs	r0, #2
 8008cb4:	e05d      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	e022      	b.n	8008d00 <lv_draw_mask_radius+0x272>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008cba:	2200      	movs	r2, #0
 8008cbc:	e020      	b.n	8008d00 <lv_draw_mask_radius+0x272>
 8008cbe:	2700      	movs	r7, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8008cc0:	54b7      	strb	r7, [r6, r2]
        for(i = 0; i < aa_len; i++) {
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	b21b      	sxth	r3, r3
 8008cc6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	dd32      	ble.n	8008d34 <lv_draw_mask_radius+0x2a6>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8008cce:	3a01      	subs	r2, #1
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	1ad2      	subs	r2, r2, r3
 8008cd4:	5c87      	ldrb	r7, [r0, r2]
 8008cd6:	43ff      	mvns	r7, r7
 8008cd8:	b2ff      	uxtb	r7, r7
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8008cda:	eb11 0803 	adds.w	r8, r1, r3
 8008cde:	d411      	bmi.n	8008d04 <lv_draw_mask_radius+0x276>
 8008ce0:	45a8      	cmp	r8, r5
 8008ce2:	da0f      	bge.n	8008d04 <lv_draw_mask_radius+0x276>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8008ce4:	f816 2008 	ldrb.w	r2, [r6, r8]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008ce8:	2afc      	cmp	r2, #252	; 0xfc
 8008cea:	d8e4      	bhi.n	8008cb6 <lv_draw_mask_radius+0x228>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008cec:	2a02      	cmp	r2, #2
 8008cee:	d9e4      	bls.n	8008cba <lv_draw_mask_radius+0x22c>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008cf0:	fb07 f202 	mul.w	r2, r7, r2
 8008cf4:	eb02 2902 	add.w	r9, r2, r2, lsl #8
 8008cf8:	eb02 12c9 	add.w	r2, r2, r9, lsl #7
 8008cfc:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8008d00:	f806 2008 	strb.w	r2, [r6, r8]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8008d04:	ebb4 020e 	subs.w	r2, r4, lr
 8008d08:	d4db      	bmi.n	8008cc2 <lv_draw_mask_radius+0x234>
 8008d0a:	42aa      	cmp	r2, r5
 8008d0c:	dad9      	bge.n	8008cc2 <lv_draw_mask_radius+0x234>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8008d0e:	f816 e002 	ldrb.w	lr, [r6, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008d12:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
 8008d16:	d8d3      	bhi.n	8008cc0 <lv_draw_mask_radius+0x232>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008d18:	f1be 0f02 	cmp.w	lr, #2
 8008d1c:	d9cf      	bls.n	8008cbe <lv_draw_mask_radius+0x230>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008d1e:	fb0e f707 	mul.w	r7, lr, r7
 8008d22:	eb07 2e07 	add.w	lr, r7, r7, lsl #8
 8008d26:	eb07 17ce 	add.w	r7, r7, lr, lsl #7
 8008d2a:	f3c7 57c7 	ubfx	r7, r7, #23, #8
 8008d2e:	e7c7      	b.n	8008cc0 <lv_draw_mask_radius+0x232>
        for(i = 0; i < aa_len; i++) {
 8008d30:	2300      	movs	r3, #0
 8008d32:	e7c8      	b.n	8008cc6 <lv_draw_mask_radius+0x238>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 8008d34:	3401      	adds	r4, #1
 8008d36:	42ac      	cmp	r4, r5
 8008d38:	bfa8      	it	ge
 8008d3a:	462c      	movge	r4, r5
 8008d3c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008d40:	b220      	sxth	r0, r4
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 8008d42:	428d      	cmp	r5, r1
 8008d44:	dd08      	ble.n	8008d58 <lv_draw_mask_radius+0x2ca>
 8008d46:	1a0b      	subs	r3, r1, r0
 8008d48:	0fdb      	lsrs	r3, r3, #31
 8008d4a:	b95b      	cbnz	r3, 8008d64 <lv_draw_mask_radius+0x2d6>
 8008d4c:	428d      	cmp	r5, r1
 8008d4e:	dd06      	ble.n	8008d5e <lv_draw_mask_radius+0x2d0>
 8008d50:	ebac 0404 	sub.w	r4, ip, r4
 8008d54:	b221      	sxth	r1, r4
 8008d56:	e006      	b.n	8008d66 <lv_draw_mask_radius+0x2d8>
 8008d58:	1a2b      	subs	r3, r5, r0
 8008d5a:	0fdb      	lsrs	r3, r3, #31
 8008d5c:	e7f5      	b.n	8008d4a <lv_draw_mask_radius+0x2bc>
 8008d5e:	1b2c      	subs	r4, r5, r4
 8008d60:	b221      	sxth	r1, r4
 8008d62:	e000      	b.n	8008d66 <lv_draw_mask_radius+0x2d8>
 8008d64:	2100      	movs	r1, #0
        lv_memset_00(&mask_buf[clr_start], clr_len);
 8008d66:	4430      	add	r0, r6
 8008d68:	f003 facb 	bl	800c302 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008d6c:	2002      	movs	r0, #2
 8008d6e:	e000      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
            return LV_DRAW_MASK_RES_TRANSP;
 8008d70:	2000      	movs	r0, #0
}
 8008d72:	b004      	add	sp, #16
 8008d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LV_DRAW_MASK_RES_TRANSP;
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e7fa      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	e7f8      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8008d80:	2000      	movs	r0, #0
 8008d82:	e7f6      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7f4      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
            else return LV_DRAW_MASK_RES_CHANGED;
 8008d88:	2002      	movs	r0, #2
 8008d8a:	e7f2      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	e7f0      	b.n	8008d72 <lv_draw_mask_radius+0x2e4>

08008d90 <circ_calc_aa4>:
    if(radius == 0) return;
 8008d90:	2900      	cmp	r1, #0
 8008d92:	f000 816e 	beq.w	8009072 <circ_calc_aa4+0x2e2>
{
 8008d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9a:	b08a      	sub	sp, #40	; 0x28
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	468a      	mov	sl, r1
    c->radius = radius;
 8008da0:	8301      	strh	r1, [r0, #24]
    if(c->buf) lv_mem_free(c->buf);
 8008da2:	6800      	ldr	r0, [r0, #0]
 8008da4:	b108      	cbz	r0, 8008daa <circ_calc_aa4+0x1a>
 8008da6:	f003 f94d 	bl	800c044 <lv_mem_free>
    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8008daa:	f10a 0601 	add.w	r6, sl, #1
 8008dae:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8008db2:	0040      	lsls	r0, r0, #1
 8008db4:	f003 f928 	bl	800c008 <lv_mem_alloc>
 8008db8:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MALLOC(c->buf);
 8008dba:	b320      	cbz	r0, 8008e06 <circ_calc_aa4+0x76>
    c->cir_opa = c->buf;
 8008dbc:	6068      	str	r0, [r5, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8008dbe:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8008dc2:	3302      	adds	r3, #2
 8008dc4:	4403      	add	r3, r0
 8008dc6:	60eb      	str	r3, [r5, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8008dc8:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4403      	add	r3, r0
 8008dd0:	60ab      	str	r3, [r5, #8]
    if(radius == 1) {
 8008dd2:	f1ba 0f01 	cmp.w	sl, #1
 8008dd6:	d017      	beq.n	8008e08 <circ_calc_aa4+0x78>
    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 8008dd8:	00f0      	lsls	r0, r6, #3
 8008dda:	f003 f96b 	bl	800c0b4 <lv_mem_buf_get>
 8008dde:	4607      	mov	r7, r0
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 8008de0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8008de4:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8008de8:	b212      	sxth	r2, r2
 8008dea:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8008dee:	a809      	add	r0, sp, #36	; 0x24
 8008df0:	f7ff fe08 	bl	8008a04 <circ_init>
    x_int[0] = cp.x >> 2;
 8008df4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8008df8:	109b      	asrs	r3, r3, #2
 8008dfa:	9304      	str	r3, [sp, #16]
    x_fract[0] = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9300      	str	r3, [sp, #0]
    lv_coord_t cir_size = 0;
 8008e00:	461c      	mov	r4, r3
    uint32_t y_8th_cnt = 0;
 8008e02:	4699      	mov	r9, r3
    while(circ_cont(&cp)) {
 8008e04:	e03c      	b.n	8008e80 <circ_calc_aa4+0xf0>
    LV_ASSERT_MALLOC(c->buf);
 8008e06:	e7fe      	b.n	8008e06 <circ_calc_aa4+0x76>
        c->cir_opa[0] = 180;
 8008e08:	23b4      	movs	r3, #180	; 0xb4
 8008e0a:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] = 0;
 8008e0c:	68ea      	ldr	r2, [r5, #12]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] = 1;
 8008e12:	68ea      	ldr	r2, [r5, #12]
 8008e14:	2101      	movs	r1, #1
 8008e16:	8051      	strh	r1, [r2, #2]
        c->x_start_on_y[0] = 0;
 8008e18:	68aa      	ldr	r2, [r5, #8]
 8008e1a:	8013      	strh	r3, [r2, #0]
        return;
 8008e1c:	e126      	b.n	800906c <circ_calc_aa4+0x2dc>
        if(i != 4) break;
 8008e1e:	f1b8 0f04 	cmp.w	r8, #4
 8008e22:	f040 80b4 	bne.w	8008f8e <circ_calc_aa4+0x1fe>
        if(x_int[0] == x_int[3]) {
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	9a07      	ldr	r2, [sp, #28]
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d04c      	beq.n	8008ec8 <circ_calc_aa4+0x138>
        else if(x_int[0] != x_int[1]) {
 8008e2e:	9a05      	ldr	r2, [sp, #20]
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d05f      	beq.n	8008ef4 <circ_calc_aa4+0x164>
            cir_x[cir_size] = x_int[0];
 8008e34:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8008e38:	fa0f f089 	sxth.w	r0, r9
 8008e3c:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0];
 8008e40:	686a      	ldr	r2, [r5, #4]
 8008e42:	9900      	ldr	r1, [sp, #0]
 8008e44:	5511      	strb	r1, [r2, r4]
            c->cir_opa[cir_size] *= 16;
 8008e46:	6869      	ldr	r1, [r5, #4]
 8008e48:	5d0a      	ldrb	r2, [r1, r4]
 8008e4a:	0112      	lsls	r2, r2, #4
 8008e4c:	550a      	strb	r2, [r1, r4]
            cir_size++;
 8008e4e:	b2a4      	uxth	r4, r4
 8008e50:	1c61      	adds	r1, r4, #1
 8008e52:	b209      	sxth	r1, r1
            cir_x[cir_size] = x_int[0] - 1;
 8008e54:	3b01      	subs	r3, #1
 8008e56:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8008e5a:	f826 0011 	strh.w	r0, [r6, r1, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	9a02      	ldr	r2, [sp, #8]
 8008e62:	4413      	add	r3, r2
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	686a      	ldr	r2, [r5, #4]
 8008e68:	9803      	ldr	r0, [sp, #12]
 8008e6a:	4403      	add	r3, r0
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	5453      	strb	r3, [r2, r1]
            c->cir_opa[cir_size] *= 16;
 8008e70:	686a      	ldr	r2, [r5, #4]
 8008e72:	5c53      	ldrb	r3, [r2, r1]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	5453      	strb	r3, [r2, r1]
            cir_size++;
 8008e78:	3402      	adds	r4, #2
 8008e7a:	b224      	sxth	r4, r4
        y_8th_cnt++;
 8008e7c:	f109 0901 	add.w	r9, r9, #1
    while(circ_cont(&cp)) {
 8008e80:	a809      	add	r0, sp, #36	; 0x24
 8008e82:	f7ff fdc6 	bl	8008a12 <circ_cont>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	f000 8081 	beq.w	8008f8e <circ_calc_aa4+0x1fe>
        for(i = 0; i < 4; i++) {
 8008e8c:	f04f 0800 	mov.w	r8, #0
 8008e90:	f1b8 0f03 	cmp.w	r8, #3
 8008e94:	dcc3      	bgt.n	8008e1e <circ_calc_aa4+0x8e>
            circ_next(&cp, &tmp);
 8008e96:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8008e9a:	a809      	add	r0, sp, #36	; 0x24
 8008e9c:	f7ff fdc2 	bl	8008a24 <circ_next>
            if(circ_cont(&cp) == false) break;
 8008ea0:	a809      	add	r0, sp, #36	; 0x24
 8008ea2:	f7ff fdb6 	bl	8008a12 <circ_cont>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d0b9      	beq.n	8008e1e <circ_calc_aa4+0x8e>
            x_int[i] = cp.x >> 2;
 8008eaa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8008eae:	1099      	asrs	r1, r3, #2
 8008eb0:	aa0a      	add	r2, sp, #40	; 0x28
 8008eb2:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 8008eb6:	f842 1c18 	str.w	r1, [r2, #-24]
            x_fract[i] = cp.x & 0x3;
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	f842 3c28 	str.w	r3, [r2, #-40]
        for(i = 0; i < 4; i++) {
 8008ec2:	f108 0801 	add.w	r8, r8, #1
 8008ec6:	e7e3      	b.n	8008e90 <circ_calc_aa4+0x100>
            cir_x[cir_size] = x_int[0];
 8008ec8:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8008ecc:	f826 9014 	strh.w	r9, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8008ed0:	9b00      	ldr	r3, [sp, #0]
 8008ed2:	9a01      	ldr	r2, [sp, #4]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	9a02      	ldr	r2, [sp, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	686a      	ldr	r2, [r5, #4]
 8008ee0:	9903      	ldr	r1, [sp, #12]
 8008ee2:	440b      	add	r3, r1
 8008ee4:	5513      	strb	r3, [r2, r4]
            c->cir_opa[cir_size] *= 16;
 8008ee6:	686a      	ldr	r2, [r5, #4]
 8008ee8:	5d13      	ldrb	r3, [r2, r4]
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	5513      	strb	r3, [r2, r4]
            cir_size++;
 8008eee:	3401      	adds	r4, #1
 8008ef0:	b224      	sxth	r4, r4
 8008ef2:	e7c3      	b.n	8008e7c <circ_calc_aa4+0xec>
        else if(x_int[0] != x_int[2]) {
 8008ef4:	9a06      	ldr	r2, [sp, #24]
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d023      	beq.n	8008f42 <circ_calc_aa4+0x1b2>
            cir_x[cir_size] = x_int[0];
 8008efa:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8008efe:	fa0f fc89 	sxth.w	ip, r9
 8008f02:	f826 c014 	strh.w	ip, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 8008f06:	6869      	ldr	r1, [r5, #4]
 8008f08:	9a00      	ldr	r2, [sp, #0]
 8008f0a:	9801      	ldr	r0, [sp, #4]
 8008f0c:	4402      	add	r2, r0
 8008f0e:	550a      	strb	r2, [r1, r4]
            c->cir_opa[cir_size] *= 16;
 8008f10:	6869      	ldr	r1, [r5, #4]
 8008f12:	5d0a      	ldrb	r2, [r1, r4]
 8008f14:	0112      	lsls	r2, r2, #4
 8008f16:	550a      	strb	r2, [r1, r4]
            cir_size++;
 8008f18:	b2a4      	uxth	r4, r4
 8008f1a:	1c62      	adds	r2, r4, #1
 8008f1c:	b212      	sxth	r2, r2
            cir_x[cir_size] = x_int[0] - 1;
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8008f24:	f826 c012 	strh.w	ip, [r6, r2, lsl #1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8008f28:	6869      	ldr	r1, [r5, #4]
 8008f2a:	9b02      	ldr	r3, [sp, #8]
 8008f2c:	9803      	ldr	r0, [sp, #12]
 8008f2e:	4403      	add	r3, r0
 8008f30:	3308      	adds	r3, #8
 8008f32:	548b      	strb	r3, [r1, r2]
            c->cir_opa[cir_size] *= 16;
 8008f34:	6869      	ldr	r1, [r5, #4]
 8008f36:	5c8b      	ldrb	r3, [r1, r2]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	548b      	strb	r3, [r1, r2]
            cir_size++;
 8008f3c:	3402      	adds	r4, #2
 8008f3e:	b224      	sxth	r4, r4
 8008f40:	e79c      	b.n	8008e7c <circ_calc_aa4+0xec>
            cir_x[cir_size] = x_int[0];
 8008f42:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8008f46:	fa0f f189 	sxth.w	r1, r9
 8008f4a:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8008f4e:	9a00      	ldr	r2, [sp, #0]
 8008f50:	9801      	ldr	r0, [sp, #4]
 8008f52:	4402      	add	r2, r0
 8008f54:	fa5f fc82 	uxtb.w	ip, r2
 8008f58:	6868      	ldr	r0, [r5, #4]
 8008f5a:	9a02      	ldr	r2, [sp, #8]
 8008f5c:	4462      	add	r2, ip
 8008f5e:	5502      	strb	r2, [r0, r4]
            c->cir_opa[cir_size] *= 16;
 8008f60:	6868      	ldr	r0, [r5, #4]
 8008f62:	5d02      	ldrb	r2, [r0, r4]
 8008f64:	0112      	lsls	r2, r2, #4
 8008f66:	5502      	strb	r2, [r0, r4]
            cir_size++;
 8008f68:	b2a4      	uxth	r4, r4
 8008f6a:	1c62      	adds	r2, r4, #1
 8008f6c:	b212      	sxth	r2, r2
            cir_x[cir_size] = x_int[0] - 1;
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8008f74:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8008f78:	6869      	ldr	r1, [r5, #4]
 8008f7a:	9b03      	ldr	r3, [sp, #12]
 8008f7c:	330c      	adds	r3, #12
 8008f7e:	548b      	strb	r3, [r1, r2]
            c->cir_opa[cir_size] *= 16;
 8008f80:	6869      	ldr	r1, [r5, #4]
 8008f82:	5c8b      	ldrb	r3, [r1, r2]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	548b      	strb	r3, [r1, r2]
            cir_size++;
 8008f88:	3402      	adds	r4, #2
 8008f8a:	b224      	sxth	r4, r4
 8008f8c:	e776      	b.n	8008e7c <circ_calc_aa4+0xec>
    int32_t mid = radius * 723;
 8008f8e:	f240 23d3 	movw	r3, #723	; 0x2d3
 8008f92:	fb03 fa0a 	mul.w	sl, r3, sl
    int32_t mid_int = mid >> 10;
 8008f96:	ea4f 21aa 	mov.w	r1, sl, asr #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
 8008fa6:	ebb0 2faa 	cmp.w	r0, sl, asr #10
 8008faa:	d017      	beq.n	8008fdc <circ_calc_aa4+0x24c>
        int32_t tmp_val = mid - (mid_int << 10);
 8008fac:	f3ca 0a09 	ubfx	sl, sl, #0, #10
        if(tmp_val <= 512) {
 8008fb0:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
 8008fb4:	dc17      	bgt.n	8008fe6 <circ_calc_aa4+0x256>
            tmp_val = tmp_val * tmp_val * 2;
 8008fb6:	fb0a fa0a 	mul.w	sl, sl, sl
            tmp_val = tmp_val >> (10 + 6);
 8008fba:	ea4f 33ea 	mov.w	r3, sl, asr #15
        cir_x[cir_size] = mid_int;
 8008fbe:	b209      	sxth	r1, r1
 8008fc0:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
        cir_y[cir_size] = mid_int;
 8008fc4:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
        c->cir_opa[cir_size] = tmp_val;
 8008fc8:	6869      	ldr	r1, [r5, #4]
 8008fca:	548b      	strb	r3, [r1, r2]
        c->cir_opa[cir_size] *= 16;
 8008fcc:	6869      	ldr	r1, [r5, #4]
 8008fce:	5c8b      	ldrb	r3, [r1, r2]
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	548b      	strb	r3, [r1, r2]
        cir_size++;
 8008fd4:	3401      	adds	r4, #1
 8008fd6:	b224      	sxth	r4, r4
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8008fd8:	1ea3      	subs	r3, r4, #2
 8008fda:	e01b      	b.n	8009014 <circ_calc_aa4+0x284>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8008fdc:	f936 3013 	ldrsh.w	r3, [r6, r3, lsl #1]
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	d1e3      	bne.n	8008fac <circ_calc_aa4+0x21c>
 8008fe4:	e7f8      	b.n	8008fd8 <circ_calc_aa4+0x248>
            tmp_val = 1024 - tmp_val;
 8008fe6:	f5ca 6a80 	rsb	sl, sl, #1024	; 0x400
            tmp_val = tmp_val * tmp_val * 2;
 8008fea:	fb0a fa0a 	mul.w	sl, sl, sl
            tmp_val = tmp_val >> (10 + 6);
 8008fee:	ea4f 33ea 	mov.w	r3, sl, asr #15
            tmp_val = 15 - tmp_val;
 8008ff2:	f1c3 030f 	rsb	r3, r3, #15
 8008ff6:	e7e2      	b.n	8008fbe <circ_calc_aa4+0x22e>
        cir_x[cir_size] = cir_y[i];
 8008ff8:	f936 2013 	ldrsh.w	r2, [r6, r3, lsl #1]
 8008ffc:	f827 2014 	strh.w	r2, [r7, r4, lsl #1]
        cir_y[cir_size] = cir_x[i];
 8009000:	f937 2013 	ldrsh.w	r2, [r7, r3, lsl #1]
 8009004:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8009008:	686a      	ldr	r2, [r5, #4]
 800900a:	5cd1      	ldrb	r1, [r2, r3]
 800900c:	5511      	strb	r1, [r2, r4]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800900e:	3b01      	subs	r3, #1
 8009010:	3401      	adds	r4, #1
 8009012:	b224      	sxth	r4, r4
 8009014:	2b00      	cmp	r3, #0
 8009016:	daef      	bge.n	8008ff8 <circ_calc_aa4+0x268>
    c->opa_start_on_y[0] = 0;
 8009018:	68ea      	ldr	r2, [r5, #12]
 800901a:	2300      	movs	r3, #0
 800901c:	8013      	strh	r3, [r2, #0]
    lv_coord_t y = 0;
 800901e:	469c      	mov	ip, r3
    while(i < cir_size) {
 8009020:	e013      	b.n	800904a <circ_calc_aa4+0x2ba>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 8009022:	5e7a      	ldrsh	r2, [r7, r1]
 8009024:	68a9      	ldr	r1, [r5, #8]
 8009026:	f831 8000 	ldrh.w	r8, [r1, r0]
 800902a:	4542      	cmp	r2, r8
 800902c:	bfa8      	it	ge
 800902e:	4642      	movge	r2, r8
 8009030:	520a      	strh	r2, [r1, r0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8009032:	3301      	adds	r3, #1
 8009034:	0059      	lsls	r1, r3, #1
 8009036:	f936 2013 	ldrsh.w	r2, [r6, r3, lsl #1]
 800903a:	4562      	cmp	r2, ip
 800903c:	d101      	bne.n	8009042 <circ_calc_aa4+0x2b2>
 800903e:	459e      	cmp	lr, r3
 8009040:	dcef      	bgt.n	8009022 <circ_calc_aa4+0x292>
        y++;
 8009042:	f10c 0c01 	add.w	ip, ip, #1
 8009046:	fa0f fc8c 	sxth.w	ip, ip
    while(i < cir_size) {
 800904a:	46a6      	mov	lr, r4
 800904c:	429c      	cmp	r4, r3
 800904e:	dd0a      	ble.n	8009066 <circ_calc_aa4+0x2d6>
        c->opa_start_on_y[y] = i;
 8009050:	68ea      	ldr	r2, [r5, #12]
 8009052:	ea4f 004c 	mov.w	r0, ip, lsl #1
 8009056:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 800905a:	68aa      	ldr	r2, [r5, #8]
 800905c:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8009060:	f822 101c 	strh.w	r1, [r2, ip, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8009064:	e7e6      	b.n	8009034 <circ_calc_aa4+0x2a4>
    lv_mem_buf_release(cir_x);
 8009066:	4638      	mov	r0, r7
 8009068:	f003 f886 	bl	800c178 <lv_mem_buf_release>
}
 800906c:	b00a      	add	sp, #40	; 0x28
 800906e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009072:	4770      	bx	lr

08009074 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009074:	2300      	movs	r3, #0
 8009076:	2b0f      	cmp	r3, #15
 8009078:	d806      	bhi.n	8009088 <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800907a:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <lv_draw_mask_add+0x30>)
 800907c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009080:	b112      	cbz	r2, 8009088 <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009082:	3301      	adds	r3, #1
 8009084:	b2db      	uxtb	r3, r3
 8009086:	e7f6      	b.n	8009076 <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
 8009088:	2b0f      	cmp	r3, #15
 800908a:	d807      	bhi.n	800909c <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800908c:	4a05      	ldr	r2, [pc, #20]	; (80090a4 <lv_draw_mask_add+0x30>)
 800908e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8009092:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009096:	6051      	str	r1, [r2, #4]
    return i;
 8009098:	b218      	sxth	r0, r3
 800909a:	4770      	bx	lr
        return LV_MASK_ID_INV;
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000d2c 	.word	0x20000d2c

080090a8 <lv_draw_mask_remove_id>:
{
 80090a8:	4603      	mov	r3, r0
    if(id != LV_MASK_ID_INV) {
 80090aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090ae:	d009      	beq.n	80090c4 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 80090b0:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <lv_draw_mask_remove_id+0x20>)
 80090b2:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 80090b6:	2100      	movs	r1, #0
 80090b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 80090bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090c0:	6059      	str	r1, [r3, #4]
 80090c2:	4770      	bx	lr
    _lv_draw_mask_common_dsc_t * p = NULL;
 80090c4:	2000      	movs	r0, #0
}
 80090c6:	4770      	bx	lr
 80090c8:	20000d2c 	.word	0x20000d2c

080090cc <lv_draw_mask_remove_custom>:
{
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	4605      	mov	r5, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80090d0:	2400      	movs	r4, #0
    _lv_draw_mask_common_dsc_t * p = NULL;
 80090d2:	4626      	mov	r6, r4
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80090d4:	e001      	b.n	80090da <lv_draw_mask_remove_custom+0xe>
 80090d6:	3401      	adds	r4, #1
 80090d8:	b2e4      	uxtb	r4, r4
 80090da:	2c0f      	cmp	r4, #15
 80090dc:	d80c      	bhi.n	80090f8 <lv_draw_mask_remove_custom+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <lv_draw_mask_remove_custom+0x30>)
 80090e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	42ab      	cmp	r3, r5
 80090e8:	d1f5      	bne.n	80090d6 <lv_draw_mask_remove_custom+0xa>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 80090ea:	4b04      	ldr	r3, [pc, #16]	; (80090fc <lv_draw_mask_remove_custom+0x30>)
 80090ec:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
            lv_draw_mask_remove_id(i);
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff ffd9 	bl	80090a8 <lv_draw_mask_remove_id>
 80090f6:	e7ee      	b.n	80090d6 <lv_draw_mask_remove_custom+0xa>
}
 80090f8:	4630      	mov	r0, r6
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	20000d2c 	.word	0x20000d2c

08009100 <lv_draw_mask_free_param>:
{
 8009100:	b510      	push	{r4, lr}
 8009102:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8009104:	7903      	ldrb	r3, [r0, #4]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d002      	beq.n	8009110 <lv_draw_mask_free_param+0x10>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 800910a:	2b05      	cmp	r3, #5
 800910c:	d011      	beq.n	8009132 <lv_draw_mask_free_param+0x32>
}
 800910e:	bd10      	pop	{r4, pc}
        if(radius_p->circle) {
 8009110:	6943      	ldr	r3, [r0, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0fb      	beq.n	800910e <lv_draw_mask_free_param+0xe>
            if(radius_p->circle->life < 0) {
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	2a00      	cmp	r2, #0
 800911a:	db03      	blt.n	8009124 <lv_draw_mask_free_param+0x24>
                radius_p->circle->used_cnt--;
 800911c:	695a      	ldr	r2, [r3, #20]
 800911e:	3a01      	subs	r2, #1
 8009120:	615a      	str	r2, [r3, #20]
 8009122:	e7f4      	b.n	800910e <lv_draw_mask_free_param+0xe>
                lv_mem_free(radius_p->circle->cir_opa);
 8009124:	6858      	ldr	r0, [r3, #4]
 8009126:	f002 ff8d 	bl	800c044 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 800912a:	6960      	ldr	r0, [r4, #20]
 800912c:	f002 ff8a 	bl	800c044 <lv_mem_free>
 8009130:	e7ed      	b.n	800910e <lv_draw_mask_free_param+0xe>
        lv_mem_free(poly_p->cfg.points);
 8009132:	6880      	ldr	r0, [r0, #8]
 8009134:	f002 ff86 	bl	800c044 <lv_mem_free>
}
 8009138:	e7e9      	b.n	800910e <lv_draw_mask_free_param+0xe>
	...

0800913c <_lv_draw_mask_cleanup>:
{
 800913c:	b538      	push	{r3, r4, r5, lr}
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800913e:	2400      	movs	r4, #0
 8009140:	e009      	b.n	8009156 <_lv_draw_mask_cleanup+0x1a>
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8009142:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8009146:	00ab      	lsls	r3, r5, #2
 8009148:	211c      	movs	r1, #28
 800914a:	480a      	ldr	r0, [pc, #40]	; (8009174 <_lv_draw_mask_cleanup+0x38>)
 800914c:	4418      	add	r0, r3
 800914e:	f003 f8d8 	bl	800c302 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8009152:	3401      	adds	r4, #1
 8009154:	b2e4      	uxtb	r4, r4
 8009156:	2c03      	cmp	r4, #3
 8009158:	d80a      	bhi.n	8009170 <_lv_draw_mask_cleanup+0x34>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 800915a:	4625      	mov	r5, r4
 800915c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8009160:	0093      	lsls	r3, r2, #2
 8009162:	4a04      	ldr	r2, [pc, #16]	; (8009174 <_lv_draw_mask_cleanup+0x38>)
 8009164:	58d0      	ldr	r0, [r2, r3]
 8009166:	2800      	cmp	r0, #0
 8009168:	d0eb      	beq.n	8009142 <_lv_draw_mask_cleanup+0x6>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 800916a:	f002 ff6b 	bl	800c044 <lv_mem_free>
 800916e:	e7e8      	b.n	8009142 <_lv_draw_mask_cleanup+0x6>
}
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000cbc 	.word	0x20000cbc

08009178 <lv_draw_mask_radius_init>:
{
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	4604      	mov	r4, r0
 800917c:	4615      	mov	r5, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800917e:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8009182:	f9b1 0000 	ldrsh.w	r0, [r1]
 8009186:	b282      	uxth	r2, r0
 8009188:	ebac 0c02 	sub.w	ip, ip, r2
 800918c:	fa1f fc8c 	uxth.w	ip, ip
 8009190:	f10c 0c01 	add.w	ip, ip, #1
 8009194:	fa0f f28c 	sxth.w	r2, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009198:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800919c:	884e      	ldrh	r6, [r1, #2]
 800919e:	ebac 0c06 	sub.w	ip, ip, r6
 80091a2:	fa1f fc8c 	uxth.w	ip, ip
 80091a6:	f10c 0c01 	add.w	ip, ip, #1
 80091aa:	fa0f fc8c 	sxth.w	ip, ip
    int32_t short_side = LV_MIN(w, h);
 80091ae:	4594      	cmp	ip, r2
 80091b0:	bfa8      	it	ge
 80091b2:	4694      	movge	ip, r2
    if(radius > short_side >> 1) radius = short_side >> 1;
 80091b4:	ebb5 0f6c 	cmp.w	r5, ip, asr #1
 80091b8:	dd02      	ble.n	80091c0 <lv_draw_mask_radius_init+0x48>
 80091ba:	ea4f 026c 	mov.w	r2, ip, asr #1
 80091be:	b215      	sxth	r5, r2
    if(radius < 0) radius = 0;
 80091c0:	2d00      	cmp	r5, #0
 80091c2:	db21      	blt.n	8009208 <lv_draw_mask_radius_init+0x90>
    dest->x1 = src->x1;
 80091c4:	8120      	strh	r0, [r4, #8]
    dest->y1 = src->y1;
 80091c6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80091ca:	8162      	strh	r2, [r4, #10]
    dest->x2 = src->x2;
 80091cc:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80091d0:	81a2      	strh	r2, [r4, #12]
    dest->y2 = src->y2;
 80091d2:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80091d6:	81e2      	strh	r2, [r4, #14]
    param->cfg.radius = radius;
 80091d8:	8225      	strh	r5, [r4, #16]
    param->cfg.outer = inv ? 1 : 0;
 80091da:	7ca2      	ldrb	r2, [r4, #18]
 80091dc:	f363 0200 	bfi	r2, r3, #0, #1
 80091e0:	74a2      	strb	r2, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 80091e2:	4b3d      	ldr	r3, [pc, #244]	; (80092d8 <lv_draw_mask_radius_init+0x160>)
 80091e4:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 80091e6:	2302      	movs	r3, #2
 80091e8:	7123      	strb	r3, [r4, #4]
    if(radius == 0) {
 80091ea:	b17d      	cbz	r5, 800920c <lv_draw_mask_radius_init+0x94>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80091ec:	2300      	movs	r3, #0
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d82a      	bhi.n	8009248 <lv_draw_mask_radius_init+0xd0>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 80091f2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80091f6:	4939      	ldr	r1, [pc, #228]	; (80092dc <lv_draw_mask_radius_init+0x164>)
 80091f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80091fc:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8009200:	42aa      	cmp	r2, r5
 8009202:	d006      	beq.n	8009212 <lv_draw_mask_radius_init+0x9a>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8009204:	3301      	adds	r3, #1
 8009206:	e7f2      	b.n	80091ee <lv_draw_mask_radius_init+0x76>
    if(radius < 0) radius = 0;
 8009208:	2500      	movs	r5, #0
 800920a:	e7db      	b.n	80091c4 <lv_draw_mask_radius_init+0x4c>
        param->circle = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	6163      	str	r3, [r4, #20]
        return;
 8009210:	e051      	b.n	80092b6 <lv_draw_mask_radius_init+0x13e>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8009212:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009216:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800921a:	6951      	ldr	r1, [r2, #20]
 800921c:	3101      	adds	r1, #1
 800921e:	6151      	str	r1, [r2, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8009220:	6912      	ldr	r2, [r2, #16]
 8009222:	2d0f      	cmp	r5, #15
 8009224:	dd0e      	ble.n	8009244 <lv_draw_mask_radius_init+0xcc>
 8009226:	112d      	asrs	r5, r5, #4
 8009228:	4415      	add	r5, r2
 800922a:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800922e:	bfa8      	it	ge
 8009230:	f44f 757a 	movge.w	r5, #1000	; 0x3e8
 8009234:	4a29      	ldr	r2, [pc, #164]	; (80092dc <lv_draw_mask_radius_init+0x164>)
 8009236:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800923a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800923e:	610d      	str	r5, [r1, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 8009240:	6161      	str	r1, [r4, #20]
            return;
 8009242:	e038      	b.n	80092b6 <lv_draw_mask_radius_init+0x13e>
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8009244:	2501      	movs	r5, #1
 8009246:	e7ef      	b.n	8009228 <lv_draw_mask_radius_init+0xb0>
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 8009248:	2600      	movs	r6, #0
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800924a:	4633      	mov	r3, r6
 800924c:	e004      	b.n	8009258 <lv_draw_mask_radius_init+0xe0>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800924e:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009252:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8009256:	3301      	adds	r3, #1
 8009258:	2b03      	cmp	r3, #3
 800925a:	d818      	bhi.n	800928e <lv_draw_mask_radius_init+0x116>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 800925c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009260:	491e      	ldr	r1, [pc, #120]	; (80092dc <lv_draw_mask_radius_init+0x164>)
 8009262:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009266:	6952      	ldr	r2, [r2, #20]
 8009268:	2a00      	cmp	r2, #0
 800926a:	d1f4      	bne.n	8009256 <lv_draw_mask_radius_init+0xde>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800926c:	2e00      	cmp	r6, #0
 800926e:	d0ee      	beq.n	800924e <lv_draw_mask_radius_init+0xd6>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8009270:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009274:	4919      	ldr	r1, [pc, #100]	; (80092dc <lv_draw_mask_radius_init+0x164>)
 8009276:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800927a:	6911      	ldr	r1, [r2, #16]
 800927c:	6932      	ldr	r2, [r6, #16]
 800927e:	4291      	cmp	r1, r2
 8009280:	dae9      	bge.n	8009256 <lv_draw_mask_radius_init+0xde>
 8009282:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009286:	4a15      	ldr	r2, [pc, #84]	; (80092dc <lv_draw_mask_radius_init+0x164>)
 8009288:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800928c:	e7e3      	b.n	8009256 <lv_draw_mask_radius_init+0xde>
    if(!entry) {
 800928e:	b19e      	cbz	r6, 80092b8 <lv_draw_mask_radius_init+0x140>
        entry->used_cnt++;
 8009290:	6973      	ldr	r3, [r6, #20]
 8009292:	3301      	adds	r3, #1
 8009294:	6173      	str	r3, [r6, #20]
        entry->life = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	6133      	str	r3, [r6, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800929a:	2d0f      	cmp	r5, #15
 800929c:	dd19      	ble.n	80092d2 <lv_draw_mask_radius_init+0x15a>
 800929e:	112b      	asrs	r3, r5, #4
 80092a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a4:	bfa8      	it	ge
 80092a6:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80092aa:	6133      	str	r3, [r6, #16]
    param->circle = entry;
 80092ac:	6166      	str	r6, [r4, #20]
    circ_calc_aa4(param->circle, radius);
 80092ae:	4629      	mov	r1, r5
 80092b0:	4630      	mov	r0, r6
 80092b2:	f7ff fd6d 	bl	8008d90 <circ_calc_aa4>
}
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80092b8:	201c      	movs	r0, #28
 80092ba:	f002 fea5 	bl	800c008 <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 80092be:	4606      	mov	r6, r0
 80092c0:	b130      	cbz	r0, 80092d0 <lv_draw_mask_radius_init+0x158>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80092c2:	211c      	movs	r1, #28
 80092c4:	f003 f81d 	bl	800c302 <lv_memset_00>
        entry->life = -1;
 80092c8:	f04f 33ff 	mov.w	r3, #4294967295
 80092cc:	6133      	str	r3, [r6, #16]
 80092ce:	e7ed      	b.n	80092ac <lv_draw_mask_radius_init+0x134>
        LV_ASSERT_MALLOC(entry);
 80092d0:	e7fe      	b.n	80092d0 <lv_draw_mask_radius_init+0x158>
        CIRCLE_CACHE_AGING(entry->life, radius);
 80092d2:	2301      	movs	r3, #1
 80092d4:	e7e4      	b.n	80092a0 <lv_draw_mask_radius_init+0x128>
 80092d6:	bf00      	nop
 80092d8:	08008a8f 	.word	0x08008a8f
 80092dc:	20000cbc 	.word	0x20000cbc

080092e0 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void LV_ATTRIBUTE_FAST_MEM lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 80092e0:	b510      	push	{r4, lr}
 80092e2:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 80092e4:	2138      	movs	r1, #56	; 0x38
 80092e6:	f003 f80c 	bl	800c302 <lv_memset_00>
 80092ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->bg_color = lv_color_white();
 80092ee:	80a3      	strh	r3, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 80092f0:	80e3      	strh	r3, [r4, #6]
 80092f2:	f04f 0300 	mov.w	r3, #0
    dsc->bg_grad.stops[1].color = lv_color_black();
 80092f6:	8163      	strh	r3, [r4, #10]
    dsc->bg_grad.stops[1].frac = 0xFF;
 80092f8:	23ff      	movs	r3, #255	; 0xff
 80092fa:	7323      	strb	r3, [r4, #12]
    dsc->bg_grad.stops_count = 2;
 80092fc:	2202      	movs	r2, #2
 80092fe:	73a2      	strb	r2, [r4, #14]
 8009300:	f04f 0200 	mov.w	r2, #0
    dsc->border_color = lv_color_black();
 8009304:	83e2      	strh	r2, [r4, #30]
    dsc->shadow_color = lv_color_black();
 8009306:	85a2      	strh	r2, [r4, #44]	; 0x2c
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 8009308:	4a08      	ldr	r2, [pc, #32]	; (800932c <lv_draw_rect_dsc_init+0x4c>)
 800930a:	6162      	str	r2, [r4, #20]
    dsc->bg_opa = LV_OPA_COVER;
 800930c:	70e3      	strb	r3, [r4, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 800930e:	76a3      	strb	r3, [r4, #26]
    dsc->outline_opa = LV_OPA_COVER;
 8009310:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_opa = LV_OPA_COVER;
 8009314:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    dsc->shadow_opa = LV_OPA_COVER;
 8009318:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800931c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8009320:	220f      	movs	r2, #15
 8009322:	f362 0345 	bfi	r3, r2, #1, #5
 8009326:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 800932a:	bd10      	pop	{r4, pc}
 800932c:	08010fbc 	.word	0x08010fbc

08009330 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8009330:	b508      	push	{r3, lr}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009332:	88d3      	ldrh	r3, [r2, #6]
 8009334:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8009338:	eba3 030c 	sub.w	r3, r3, ip
 800933c:	b29b      	uxth	r3, r3
 800933e:	3301      	adds	r3, #1
 8009340:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd0b      	ble.n	800935e <lv_draw_rect+0x2e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009346:	8893      	ldrh	r3, [r2, #4]
 8009348:	f8b2 c000 	ldrh.w	ip, [r2]
 800934c:	eba3 030c 	sub.w	r3, r3, ip
 8009350:	b29b      	uxth	r3, r3
 8009352:	3301      	adds	r3, #1
 8009354:	b21b      	sxth	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	dd01      	ble.n	800935e <lv_draw_rect+0x2e>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 800935a:	6903      	ldr	r3, [r0, #16]
 800935c:	4798      	blx	r3

    LV_ASSERT_MEM_INTEGRITY();
}
 800935e:	bd08      	pop	{r3, pc}

08009360 <_lv_img_buf_get_transformed_area>:
    }
}

void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	b085      	sub	sp, #20
 8009364:	4604      	mov	r4, r0
 8009366:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800936a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800936c:	461e      	mov	r6, r3
 800936e:	b913      	cbnz	r3, 8009376 <_lv_img_buf_get_transformed_area+0x16>
 8009370:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009374:	d06e      	beq.n	8009454 <_lv_img_buf_get_transformed_area+0xf4>
        res->x2 = w - 1;
        res->y2 = h - 1;
        return;
    }

    lv_point_t p[4] = {
 8009376:	2300      	movs	r3, #0
 8009378:	f8ad 3000 	strh.w	r3, [sp]
 800937c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009380:	f8ad 1004 	strh.w	r1, [sp, #4]
 8009384:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009388:	f8ad 3008 	strh.w	r3, [sp, #8]
 800938c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8009390:	f8ad 100c 	strh.w	r1, [sp, #12]
 8009394:	f8ad 200e 	strh.w	r2, [sp, #14]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 8009398:	463b      	mov	r3, r7
 800939a:	462a      	mov	r2, r5
 800939c:	4631      	mov	r1, r6
 800939e:	4668      	mov	r0, sp
 80093a0:	f002 fa24 	bl	800b7ec <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 80093a4:	463b      	mov	r3, r7
 80093a6:	462a      	mov	r2, r5
 80093a8:	4631      	mov	r1, r6
 80093aa:	a801      	add	r0, sp, #4
 80093ac:	f002 fa1e 	bl	800b7ec <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 80093b0:	463b      	mov	r3, r7
 80093b2:	462a      	mov	r2, r5
 80093b4:	4631      	mov	r1, r6
 80093b6:	a802      	add	r0, sp, #8
 80093b8:	f002 fa18 	bl	800b7ec <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 80093bc:	463b      	mov	r3, r7
 80093be:	462a      	mov	r2, r5
 80093c0:	4631      	mov	r1, r6
 80093c2:	a803      	add	r0, sp, #12
 80093c4:	f002 fa12 	bl	800b7ec <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 80093c8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80093cc:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 80093d0:	461a      	mov	r2, r3
 80093d2:	42ab      	cmp	r3, r5
 80093d4:	bfa8      	it	ge
 80093d6:	462a      	movge	r2, r5
 80093d8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80093dc:	f9bd 0000 	ldrsh.w	r0, [sp]
 80093e0:	460e      	mov	r6, r1
 80093e2:	4281      	cmp	r1, r0
 80093e4:	bfa8      	it	ge
 80093e6:	4606      	movge	r6, r0
 80093e8:	42b2      	cmp	r2, r6
 80093ea:	bfa8      	it	ge
 80093ec:	4632      	movge	r2, r6
 80093ee:	b292      	uxth	r2, r2
 80093f0:	3a02      	subs	r2, #2
 80093f2:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 80093f4:	42ab      	cmp	r3, r5
 80093f6:	bfb8      	it	lt
 80093f8:	462b      	movlt	r3, r5
 80093fa:	4281      	cmp	r1, r0
 80093fc:	bfb8      	it	lt
 80093fe:	4601      	movlt	r1, r0
 8009400:	428b      	cmp	r3, r1
 8009402:	bfb8      	it	lt
 8009404:	460b      	movlt	r3, r1
 8009406:	b29b      	uxth	r3, r3
 8009408:	3302      	adds	r3, #2
 800940a:	80a3      	strh	r3, [r4, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800940c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8009410:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8009414:	461a      	mov	r2, r3
 8009416:	42ab      	cmp	r3, r5
 8009418:	bfa8      	it	ge
 800941a:	462a      	movge	r2, r5
 800941c:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8009420:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8009424:	460e      	mov	r6, r1
 8009426:	4281      	cmp	r1, r0
 8009428:	bfa8      	it	ge
 800942a:	4606      	movge	r6, r0
 800942c:	42b2      	cmp	r2, r6
 800942e:	bfa8      	it	ge
 8009430:	4632      	movge	r2, r6
 8009432:	b292      	uxth	r2, r2
 8009434:	3a02      	subs	r2, #2
 8009436:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 8009438:	42ab      	cmp	r3, r5
 800943a:	bfb8      	it	lt
 800943c:	462b      	movlt	r3, r5
 800943e:	4281      	cmp	r1, r0
 8009440:	bfb8      	it	lt
 8009442:	4601      	movlt	r1, r0
 8009444:	428b      	cmp	r3, r1
 8009446:	bfb8      	it	lt
 8009448:	460b      	movlt	r3, r1
 800944a:	b29b      	uxth	r3, r3
 800944c:	3302      	adds	r3, #2
 800944e:	80e3      	strh	r3, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 8009450:	b005      	add	sp, #20
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res->x1 = 0;
 8009454:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 8009456:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 8009458:	3901      	subs	r1, #1
 800945a:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
 800945c:	3a01      	subs	r2, #1
 800945e:	80c2      	strh	r2, [r0, #6]
        return;
 8009460:	e7f6      	b.n	8009450 <_lv_img_buf_get_transformed_area+0xf0>
	...

08009464 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	4604      	mov	r4, r0
 8009468:	460d      	mov	r5, r1
 800946a:	4616      	mov	r6, r2
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 800946c:	f001 fd1e 	bl	800aeac <lv_tick_get>
 8009470:	4607      	mov	r7, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8009472:	4633      	mov	r3, r6
 8009474:	462a      	mov	r2, r5
 8009476:	4621      	mov	r1, r4
 8009478:	4810      	ldr	r0, [pc, #64]	; (80094bc <_lv_img_cache_open+0x58>)
 800947a:	f000 fbc5 	bl	8009c08 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800947e:	b158      	cbz	r0, 8009498 <_lv_img_cache_open+0x34>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
        return NULL;
    }

    cached_src->life = 0;
 8009480:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <_lv_img_cache_open+0x58>)
 8009482:	2200      	movs	r2, #0
 8009484:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	b183      	cbz	r3, 80094ac <_lv_img_cache_open+0x48>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800948a:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <_lv_img_cache_open+0x58>)
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	b99b      	cbnz	r3, 80094b8 <_lv_img_cache_open+0x54>
 8009490:	480a      	ldr	r0, [pc, #40]	; (80094bc <_lv_img_cache_open+0x58>)
 8009492:	2301      	movs	r3, #1
 8009494:	61c3      	str	r3, [r0, #28]

    return cached_src;
}
 8009496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 8009498:	4c08      	ldr	r4, [pc, #32]	; (80094bc <_lv_img_cache_open+0x58>)
 800949a:	212c      	movs	r1, #44	; 0x2c
 800949c:	4620      	mov	r0, r4
 800949e:	f002 ff30 	bl	800c302 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 80094a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a6:	62a3      	str	r3, [r4, #40]	; 0x28
        return NULL;
 80094a8:	2000      	movs	r0, #0
 80094aa:	e7f4      	b.n	8009496 <_lv_img_cache_open+0x32>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80094ac:	4638      	mov	r0, r7
 80094ae:	f001 fd07 	bl	800aec0 <lv_tick_elaps>
 80094b2:	4b02      	ldr	r3, [pc, #8]	; (80094bc <_lv_img_cache_open+0x58>)
 80094b4:	61d8      	str	r0, [r3, #28]
 80094b6:	e7e8      	b.n	800948a <_lv_img_cache_open+0x26>
    return cached_src;
 80094b8:	4800      	ldr	r0, [pc, #0]	; (80094bc <_lv_img_cache_open+0x58>)
 80094ba:	e7ec      	b.n	8009496 <_lv_img_cache_open+0x32>
 80094bc:	20000c0c 	.word	0x20000c0c

080094c0 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	460d      	mov	r5, r1
 80094c6:	4614      	mov	r4, r2
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 80094c8:	4608      	mov	r0, r1
 80094ca:	f7fe fd9e 	bl	800800a <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80094ce:	4606      	mov	r6, r0
 80094d0:	b9e8      	cbnz	r0, 800950e <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80094d2:	782b      	ldrb	r3, [r5, #0]
 80094d4:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80094d8:	3b04      	subs	r3, #4
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b10      	cmp	r3, #16
 80094de:	d813      	bhi.n	8009508 <lv_img_decoder_built_in_info+0x48>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	f363 2294 	bfi	r2, r3, #10, #11
 80094ec:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80094ee:	886b      	ldrh	r3, [r5, #2]
 80094f0:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80094f4:	8862      	ldrh	r2, [r4, #2]
 80094f6:	f363 124f 	bfi	r2, r3, #5, #11
 80094fa:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80094fc:	782a      	ldrb	r2, [r5, #0]
 80094fe:	7823      	ldrb	r3, [r4, #0]
 8009500:	f362 0304 	bfi	r3, r2, #0, #5
 8009504:	7023      	strb	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 8009506:	2601      	movs	r6, #1
}
 8009508:	4630      	mov	r0, r6
 800950a:	b004      	add	sp, #16
 800950c:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800950e:	2801      	cmp	r0, #1
 8009510:	d010      	beq.n	8009534 <lv_img_decoder_built_in_info+0x74>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8009512:	2802      	cmp	r0, #2
 8009514:	d137      	bne.n	8009586 <lv_img_decoder_built_in_info+0xc6>
        header->w = 1;
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	2601      	movs	r6, #1
 800951a:	f366 2394 	bfi	r3, r6, #10, #11
 800951e:	6023      	str	r3, [r4, #0]
        header->h = 1;
 8009520:	8863      	ldrh	r3, [r4, #2]
 8009522:	f366 134f 	bfi	r3, r6, #5, #11
 8009526:	8063      	strh	r3, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8009528:	7823      	ldrb	r3, [r4, #0]
 800952a:	220b      	movs	r2, #11
 800952c:	f362 0304 	bfi	r3, r2, #0, #5
 8009530:	7023      	strb	r3, [r4, #0]
 8009532:	e7e9      	b.n	8009508 <lv_img_decoder_built_in_info+0x48>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8009534:	4628      	mov	r0, r5
 8009536:	f002 fbbd 	bl	800bcb4 <lv_fs_get_ext>
 800953a:	4914      	ldr	r1, [pc, #80]	; (800958c <lv_img_decoder_built_in_info+0xcc>)
 800953c:	f7f6 fe68 	bl	8000210 <strcmp>
 8009540:	b108      	cbz	r0, 8009546 <lv_img_decoder_built_in_info+0x86>
 8009542:	2600      	movs	r6, #0
 8009544:	e7e0      	b.n	8009508 <lv_img_decoder_built_in_info+0x48>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8009546:	2202      	movs	r2, #2
 8009548:	4629      	mov	r1, r5
 800954a:	a801      	add	r0, sp, #4
 800954c:	f002 fb6e 	bl	800bc2c <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8009550:	b140      	cbz	r0, 8009564 <lv_img_decoder_built_in_info+0xa4>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8009552:	7823      	ldrb	r3, [r4, #0]
 8009554:	f003 031f 	and.w	r3, r3, #31
 8009558:	331c      	adds	r3, #28
 800955a:	f003 031f 	and.w	r3, r3, #31
 800955e:	2b10      	cmp	r3, #16
 8009560:	d9d2      	bls.n	8009508 <lv_img_decoder_built_in_info+0x48>
 8009562:	e7ee      	b.n	8009542 <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8009564:	466b      	mov	r3, sp
 8009566:	2204      	movs	r2, #4
 8009568:	4621      	mov	r1, r4
 800956a:	eb0d 0002 	add.w	r0, sp, r2
 800956e:	f002 fad0 	bl	800bb12 <lv_fs_read>
 8009572:	4605      	mov	r5, r0
            lv_fs_close(&f);
 8009574:	a801      	add	r0, sp, #4
 8009576:	f002 faad 	bl	800bad4 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800957a:	2d00      	cmp	r5, #0
 800957c:	d1e1      	bne.n	8009542 <lv_img_decoder_built_in_info+0x82>
 800957e:	9b00      	ldr	r3, [sp, #0]
 8009580:	2b04      	cmp	r3, #4
 8009582:	d1de      	bne.n	8009542 <lv_img_decoder_built_in_info+0x82>
 8009584:	e7e5      	b.n	8009552 <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
 8009586:	2600      	movs	r6, #0
 8009588:	e7be      	b.n	8009508 <lv_img_decoder_built_in_info+0x48>
 800958a:	bf00      	nop
 800958c:	080148b0 	.word	0x080148b0

08009590 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8009590:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8009592:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    if(user_data) {
 8009594:	b185      	cbz	r5, 80095b8 <lv_img_decoder_built_in_close+0x28>
 8009596:	460c      	mov	r4, r1
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009598:	7c0b      	ldrb	r3, [r1, #16]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d00d      	beq.n	80095ba <lv_img_decoder_built_in_close+0x2a>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800959e:	68e8      	ldr	r0, [r5, #12]
 80095a0:	b108      	cbz	r0, 80095a6 <lv_img_decoder_built_in_close+0x16>
 80095a2:	f002 fd4f 	bl	800c044 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 80095a6:	6928      	ldr	r0, [r5, #16]
 80095a8:	b108      	cbz	r0, 80095ae <lv_img_decoder_built_in_close+0x1e>
 80095aa:	f002 fd4b 	bl	800c044 <lv_mem_free>

        lv_mem_free(user_data);
 80095ae:	4628      	mov	r0, r5
 80095b0:	f002 fd48 	bl	800c044 <lv_mem_free>
        dsc->user_data = NULL;
 80095b4:	2300      	movs	r3, #0
 80095b6:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
            lv_fs_close(&user_data->f);
 80095ba:	4628      	mov	r0, r5
 80095bc:	f002 fa8a 	bl	800bad4 <lv_fs_close>
 80095c0:	e7ed      	b.n	800959e <lv_img_decoder_built_in_close+0xe>
	...

080095c4 <lv_img_decoder_built_in_open>:
{
 80095c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	4605      	mov	r5, r0
 80095cc:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80095ce:	7c08      	ldrb	r0, [r1, #16]
 80095d0:	2801      	cmp	r0, #1
 80095d2:	d018      	beq.n	8009606 <lv_img_decoder_built_in_open+0x42>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80095d4:	b918      	cbnz	r0, 80095de <lv_img_decoder_built_in_open+0x1a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 80095d6:	684b      	ldr	r3, [r1, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d065      	beq.n	80096aa <lv_img_decoder_built_in_open+0xe6>
    lv_img_cf_t cf = dsc->header.cf;
 80095de:	7d23      	ldrb	r3, [r4, #20]
 80095e0:	f003 031f 	and.w	r3, r3, #31
    if(cf == LV_IMG_CF_ALPHA_8BIT || cf == LV_IMG_CF_RGB565A8) {
 80095e4:	2b0e      	cmp	r3, #14
 80095e6:	d036      	beq.n	8009656 <lv_img_decoder_built_in_open+0x92>
 80095e8:	2b14      	cmp	r3, #20
 80095ea:	d034      	beq.n	8009656 <lv_img_decoder_built_in_open+0x92>
    else if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80095ec:	1f1a      	subs	r2, r3, #4
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	2a02      	cmp	r2, #2
 80095f2:	d864      	bhi.n	80096be <lv_img_decoder_built_in_open+0xfa>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80095f4:	7c23      	ldrb	r3, [r4, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 80ee 	bne.w	80097d8 <lv_img_decoder_built_in_open+0x214>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 8009602:	2001      	movs	r0, #1
 8009604:	e051      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8009606:	6848      	ldr	r0, [r1, #4]
 8009608:	f002 fb54 	bl	800bcb4 <lv_fs_get_ext>
 800960c:	4973      	ldr	r1, [pc, #460]	; (80097dc <lv_img_decoder_built_in_open+0x218>)
 800960e:	f7f6 fdff 	bl	8000210 <strcmp>
 8009612:	b108      	cbz	r0, 8009618 <lv_img_decoder_built_in_open+0x54>
 8009614:	2000      	movs	r0, #0
 8009616:	e048      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8009618:	2202      	movs	r2, #2
 800961a:	6861      	ldr	r1, [r4, #4]
 800961c:	a801      	add	r0, sp, #4
 800961e:	f002 fb05 	bl	800bc2c <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8009622:	2800      	cmp	r0, #0
 8009624:	d1f6      	bne.n	8009614 <lv_img_decoder_built_in_open+0x50>
        if(dsc->user_data == NULL) {
 8009626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009628:	b11b      	cbz	r3, 8009632 <lv_img_decoder_built_in_open+0x6e>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800962a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    const uint8_t * s8 = (const uint8_t *)src;
 800962c:	aa01      	add	r2, sp, #4
    while(len) {
 800962e:	230c      	movs	r3, #12
 8009630:	e00e      	b.n	8009650 <lv_img_decoder_built_in_open+0x8c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8009632:	2014      	movs	r0, #20
 8009634:	f002 fce8 	bl	800c008 <lv_mem_alloc>
 8009638:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800963a:	b118      	cbz	r0, 8009644 <lv_img_decoder_built_in_open+0x80>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800963c:	2114      	movs	r1, #20
 800963e:	f002 fe60 	bl	800c302 <lv_memset_00>
 8009642:	e7f2      	b.n	800962a <lv_img_decoder_built_in_open+0x66>
            LV_ASSERT_MALLOC(dsc->user_data);
 8009644:	e7fe      	b.n	8009644 <lv_img_decoder_built_in_open+0x80>
        *d8 = *s8;
 8009646:	f812 0b01 	ldrb.w	r0, [r2], #1
 800964a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
 800964e:	3b01      	subs	r3, #1
    while(len) {
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1f8      	bne.n	8009646 <lv_img_decoder_built_in_open+0x82>
 8009654:	e7c3      	b.n	80095de <lv_img_decoder_built_in_open+0x1a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8009656:	7c22      	ldrb	r2, [r4, #16]
 8009658:	b31a      	cbz	r2, 80096a2 <lv_img_decoder_built_in_open+0xde>
            uint32_t len = dsc->header.w * dsc->header.h;
 800965a:	6962      	ldr	r2, [r4, #20]
 800965c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8009660:	8ae1      	ldrh	r1, [r4, #22]
 8009662:	f3c1 114a 	ubfx	r1, r1, #5, #11
 8009666:	fb01 f202 	mul.w	r2, r1, r2
            len *= cf == LV_IMG_CF_RGB565A8 ? 3 : 1;
 800966a:	2b14      	cmp	r3, #20
 800966c:	d020      	beq.n	80096b0 <lv_img_decoder_built_in_open+0xec>
 800966e:	2501      	movs	r5, #1
 8009670:	fb02 f505 	mul.w	r5, r2, r5
            uint8_t * fs_buf = lv_mem_alloc(len);
 8009674:	4628      	mov	r0, r5
 8009676:	f002 fcc7 	bl	800c008 <lv_mem_alloc>
            if(fs_buf == NULL) return LV_RES_INV;
 800967a:	4606      	mov	r6, r0
 800967c:	2800      	cmp	r0, #0
 800967e:	f000 80a9 	beq.w	80097d4 <lv_img_decoder_built_in_open+0x210>
            lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8009682:	6a67      	ldr	r7, [r4, #36]	; 0x24
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8009684:	2200      	movs	r2, #0
 8009686:	2104      	movs	r1, #4
 8009688:	4638      	mov	r0, r7
 800968a:	f002 fa67 	bl	800bb5c <lv_fs_seek>
            lv_fs_res_t res = lv_fs_read(&user_data->f, fs_buf, len, NULL);
 800968e:	2300      	movs	r3, #0
 8009690:	462a      	mov	r2, r5
 8009692:	4631      	mov	r1, r6
 8009694:	4638      	mov	r0, r7
 8009696:	f002 fa3c 	bl	800bb12 <lv_fs_read>
            if(res != LV_FS_RES_OK) {
 800969a:	b958      	cbnz	r0, 80096b4 <lv_img_decoder_built_in_open+0xf0>
            dsc->img_data = fs_buf;
 800969c:	61a6      	str	r6, [r4, #24]
            return LV_RES_OK;
 800969e:	2001      	movs	r0, #1
 80096a0:	e003      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80096a2:	6863      	ldr	r3, [r4, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 80096a8:	2001      	movs	r0, #1
}
 80096aa:	b004      	add	sp, #16
 80096ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            len *= cf == LV_IMG_CF_RGB565A8 ? 3 : 1;
 80096b0:	2503      	movs	r5, #3
 80096b2:	e7dd      	b.n	8009670 <lv_img_decoder_built_in_open+0xac>
                lv_mem_free(fs_buf);
 80096b4:	4630      	mov	r0, r6
 80096b6:	f002 fcc5 	bl	800c044 <lv_mem_free>
                return LV_RES_INV;
 80096ba:	2000      	movs	r0, #0
 80096bc:	e7f5      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80096be:	1fda      	subs	r2, r3, #7
 80096c0:	b2d2      	uxtb	r2, r2
 80096c2:	2a03      	cmp	r2, #3
 80096c4:	d905      	bls.n	80096d2 <lv_img_decoder_built_in_open+0x10e>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 80096c6:	3b0b      	subs	r3, #11
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d87c      	bhi.n	80097c8 <lv_img_decoder_built_in_open+0x204>
        return LV_RES_OK; /*Nothing to process*/
 80096ce:	2001      	movs	r0, #1
 80096d0:	e7eb      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fc68 	bl	8007fa8 <lv_img_cf_get_px_size>
 80096d8:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
 80096da:	f04f 0901 	mov.w	r9, #1
 80096de:	fa09 f900 	lsl.w	r9, r9, r0
        if(dsc->user_data == NULL) {
 80096e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e4:	b39b      	cbz	r3, 800974e <lv_img_decoder_built_in_open+0x18a>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80096e6:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80096ea:	2002      	movs	r0, #2
 80096ec:	fa00 f00a 	lsl.w	r0, r0, sl
 80096f0:	f002 fc8a 	bl	800c008 <lv_mem_alloc>
 80096f4:	f8c8 000c 	str.w	r0, [r8, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 80096f8:	b398      	cbz	r0, 8009762 <lv_img_decoder_built_in_open+0x19e>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80096fa:	4648      	mov	r0, r9
 80096fc:	f002 fc84 	bl	800c008 <lv_mem_alloc>
 8009700:	f8c8 0010 	str.w	r0, [r8, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8009704:	b370      	cbz	r0, 8009764 <lv_img_decoder_built_in_open+0x1a0>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8009706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800970a:	b363      	cbz	r3, 8009766 <lv_img_decoder_built_in_open+0x1a2>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800970c:	7c23      	ldrb	r3, [r4, #16]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d02f      	beq.n	8009772 <lv_img_decoder_built_in_open+0x1ae>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	689f      	ldr	r7, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 8009716:	2300      	movs	r3, #0
 8009718:	454b      	cmp	r3, r9
 800971a:	d253      	bcs.n	80097c4 <lv_img_decoder_built_in_open+0x200>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800971c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8009720:	7891      	ldrb	r1, [r2, #2]
 8009722:	7854      	ldrb	r4, [r2, #1]
 8009724:	f817 5023 	ldrb.w	r5, [r7, r3, lsl #2]
 8009728:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800972c:	08ed      	lsrs	r5, r5, #3
 800972e:	08a4      	lsrs	r4, r4, #2
 8009730:	08c9      	lsrs	r1, r1, #3
 8009732:	f365 0604 	bfi	r6, r5, #0, #5
 8009736:	f364 164a 	bfi	r6, r4, #5, #6
 800973a:	f361 26cf 	bfi	r6, r1, #11, #5
 800973e:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8009742:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009746:	78d2      	ldrb	r2, [r2, #3]
 8009748:	54ca      	strb	r2, [r1, r3]
            for(i = 0; i < palette_size; i++) {
 800974a:	3301      	adds	r3, #1
 800974c:	e7e4      	b.n	8009718 <lv_img_decoder_built_in_open+0x154>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800974e:	2014      	movs	r0, #20
 8009750:	f002 fc5a 	bl	800c008 <lv_mem_alloc>
 8009754:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8009756:	b118      	cbz	r0, 8009760 <lv_img_decoder_built_in_open+0x19c>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8009758:	2114      	movs	r1, #20
 800975a:	f002 fdd2 	bl	800c302 <lv_memset_00>
 800975e:	e7c2      	b.n	80096e6 <lv_img_decoder_built_in_open+0x122>
            LV_ASSERT_MALLOC(dsc->user_data);
 8009760:	e7fe      	b.n	8009760 <lv_img_decoder_built_in_open+0x19c>
        LV_ASSERT_MALLOC(user_data->palette);
 8009762:	e7fe      	b.n	8009762 <lv_img_decoder_built_in_open+0x19e>
        LV_ASSERT_MALLOC(user_data->opa);
 8009764:	e7fe      	b.n	8009764 <lv_img_decoder_built_in_open+0x1a0>
            lv_img_decoder_built_in_close(decoder, dsc);
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	f7ff ff11 	bl	8009590 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 800976e:	2000      	movs	r0, #0
 8009770:	e79b      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8009772:	2200      	movs	r2, #0
 8009774:	2104      	movs	r1, #4
 8009776:	4640      	mov	r0, r8
 8009778:	f002 f9f0 	bl	800bb5c <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800977c:	2400      	movs	r4, #0
 800977e:	e01f      	b.n	80097c0 <lv_img_decoder_built_in_open+0x1fc>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8009780:	2300      	movs	r3, #0
 8009782:	2204      	movs	r2, #4
 8009784:	eb0d 0102 	add.w	r1, sp, r2
 8009788:	4640      	mov	r0, r8
 800978a:	f002 f9c2 	bl	800bb12 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800978e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009792:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009796:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800979a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800979e:	08c0      	lsrs	r0, r0, #3
 80097a0:	0892      	lsrs	r2, r2, #2
 80097a2:	08db      	lsrs	r3, r3, #3
 80097a4:	f360 0704 	bfi	r7, r0, #0, #5
 80097a8:	f362 174a 	bfi	r7, r2, #5, #6
 80097ac:	f363 27cf 	bfi	r7, r3, #11, #5
 80097b0:	f821 7014 	strh.w	r7, [r1, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 80097b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80097b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80097bc:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 80097be:	3401      	adds	r4, #1
 80097c0:	454c      	cmp	r4, r9
 80097c2:	d3dd      	bcc.n	8009780 <lv_img_decoder_built_in_open+0x1bc>
        return LV_RES_OK;
 80097c4:	2001      	movs	r0, #1
 80097c6:	e770      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
        lv_img_decoder_built_in_close(decoder, dsc);
 80097c8:	4621      	mov	r1, r4
 80097ca:	4628      	mov	r0, r5
 80097cc:	f7ff fee0 	bl	8009590 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 80097d0:	2000      	movs	r0, #0
 80097d2:	e76a      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
            if(fs_buf == NULL) return LV_RES_INV;
 80097d4:	2000      	movs	r0, #0
 80097d6:	e768      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
            return LV_RES_OK;
 80097d8:	2001      	movs	r0, #1
 80097da:	e766      	b.n	80096aa <lv_img_decoder_built_in_open+0xe6>
 80097dc:	080148b0 	.word	0x080148b0

080097e0 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 80097e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097e4:	b083      	sub	sp, #12
 80097e6:	4605      	mov	r5, r0
 80097e8:	460c      	mov	r4, r1
 80097ea:	4691      	mov	r9, r2
 80097ec:	461f      	mov	r7, r3
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80097ee:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80097f2:	7d00      	ldrb	r0, [r0, #20]
 80097f4:	f000 001f 	and.w	r0, r0, #31
 80097f8:	f7fe fbd6 	bl	8007fa8 <lv_img_cf_get_px_size>
 80097fc:	4606      	mov	r6, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 80097fe:	6969      	ldr	r1, [r5, #20]
 8009800:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8009804:	fb01 4109 	mla	r1, r1, r9, r4
 8009808:	fb00 f101 	mul.w	r1, r0, r1
 800980c:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800980e:	2200      	movs	r2, #0
 8009810:	3104      	adds	r1, #4
 8009812:	4640      	mov	r0, r8
 8009814:	f002 f9a2 	bl	800bb5c <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8009818:	b120      	cbz	r0, 8009824 <lv_img_decoder_built_in_line_true_color+0x44>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 800981a:	2400      	movs	r4, #0
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
    }

    return LV_RES_OK;
}
 800981c:	4620      	mov	r0, r4
 800981e:	b003      	add	sp, #12
 8009820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009824:	4604      	mov	r4, r0
    uint32_t btr = len * (px_size >> 3);
 8009826:	f3c6 06c7 	ubfx	r6, r6, #3, #8
 800982a:	fb07 f606 	mul.w	r6, r7, r6
    uint32_t br  = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	9301      	str	r3, [sp, #4]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8009832:	ab01      	add	r3, sp, #4
 8009834:	4632      	mov	r2, r6
 8009836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009838:	4640      	mov	r0, r8
 800983a:	f002 f96a 	bl	800bb12 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800983e:	2800      	cmp	r0, #0
 8009840:	d1ec      	bne.n	800981c <lv_img_decoder_built_in_line_true_color+0x3c>
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	42b3      	cmp	r3, r6
 8009846:	d1e9      	bne.n	800981c <lv_img_decoder_built_in_line_true_color+0x3c>
    return LV_RES_OK;
 8009848:	2401      	movs	r4, #1
 800984a:	e7e7      	b.n	800981c <lv_img_decoder_built_in_line_true_color+0x3c>

0800984c <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 800984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	b08b      	sub	sp, #44	; 0x2c
 8009852:	4607      	mov	r7, r0
 8009854:	460c      	mov	r4, r1
 8009856:	4692      	mov	sl, r2
 8009858:	461e      	mov	r6, r3
 800985a:	9d14      	ldr	r5, [sp, #80]	; 0x50
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800985c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8009860:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8009864:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 8009868:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800986c:	9308      	str	r3, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800986e:	4b59      	ldr	r3, [pc, #356]	; (80099d4 <lv_img_decoder_built_in_line_alpha+0x188>)
 8009870:	f10d 0c10 	add.w	ip, sp, #16
 8009874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009876:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800987a:	8938      	ldrh	r0, [r7, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800987c:	2300      	movs	r3, #0
 800987e:	e008      	b.n	8009892 <lv_img_decoder_built_in_line_alpha+0x46>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8009880:	b282      	uxth	r2, r0
 8009882:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009886:	546a      	strb	r2, [r5, r1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8009888:	3101      	adds	r1, #1
 800988a:	0a12      	lsrs	r2, r2, #8
 800988c:	546a      	strb	r2, [r5, r1]
    for(i = 0; i < len; i++) {
 800988e:	3301      	adds	r3, #1
 8009890:	b21b      	sxth	r3, r3
 8009892:	42b3      	cmp	r3, r6
 8009894:	dbf4      	blt.n	8009880 <lv_img_decoder_built_in_line_alpha+0x34>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8009896:	7d38      	ldrb	r0, [r7, #20]
 8009898:	f000 001f 	and.w	r0, r0, #31
 800989c:	f7fe fb84 	bl	8007fa8 <lv_img_cf_get_px_size>
 80098a0:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80098a2:	f04f 0801 	mov.w	r8, #1
 80098a6:	fa08 f800 	lsl.w	r8, r8, r0
 80098aa:	fa1f f888 	uxth.w	r8, r8
 80098ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80098b2:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 80098b6:	7d3b      	ldrb	r3, [r7, #20]
 80098b8:	f003 031f 	and.w	r3, r3, #31
 80098bc:	3b0b      	subs	r3, #11
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d847      	bhi.n	8009952 <lv_img_decoder_built_in_line_alpha+0x106>
 80098c2:	e8df f003 	tbb	[pc, r3]
 80098c6:	1e02      	.short	0x1e02
 80098c8:	3d2e      	.short	0x3d2e
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80098d0:	3007      	adds	r0, #7
 80098d2:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 80098d4:	10e3      	asrs	r3, r4, #3
 80098d6:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 7 - (x & 0x7);
 80098da:	43e4      	mvns	r4, r4
 80098dc:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 80098e0:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
            ofs += w * y + x;  /*First pixel*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	9302      	str	r3, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80098e8:	9003      	str	r0, [sp, #12]
 80098ea:	f002 fbe3 	bl	800c0b4 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 80098ee:	9001      	str	r0, [sp, #4]
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d06d      	beq.n	80099d0 <lv_img_decoder_built_in_line_alpha+0x184>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80098f4:	7c3b      	ldrb	r3, [r7, #16]
 80098f6:	bbab      	cbnz	r3, 8009964 <lv_img_decoder_built_in_line_alpha+0x118>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80098f8:	687b      	ldr	r3, [r7, #4]

        data_tmp = img_dsc->data + ofs;
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	449a      	add	sl, r3
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
 80098fe:	2200      	movs	r2, #0
 8009900:	e041      	b.n	8009986 <lv_img_decoder_built_in_line_alpha+0x13a>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8009908:	3003      	adds	r0, #3
 800990a:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800990c:	10a3      	asrs	r3, r4, #2
 800990e:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 6 - (x & 0x3) * 2;
 8009912:	b2a4      	uxth	r4, r4
 8009914:	43e4      	mvns	r4, r4
 8009916:	f004 0403 	and.w	r4, r4, #3
 800991a:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800991c:	f10d 0b20 	add.w	fp, sp, #32
            break;
 8009920:	e7e0      	b.n	80098e4 <lv_img_decoder_built_in_line_alpha+0x98>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8009928:	3001      	adds	r0, #1
 800992a:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800992c:	1063      	asrs	r3, r4, #1
 800992e:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 4 - (x & 0x1) * 4;
 8009932:	f014 0f01 	tst.w	r4, #1
 8009936:	d111      	bne.n	800995c <lv_img_decoder_built_in_line_alpha+0x110>
 8009938:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
 800993a:	f10d 0b10 	add.w	fp, sp, #16
 800993e:	e7d1      	b.n	80098e4 <lv_img_decoder_built_in_line_alpha+0x98>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8009940:	6978      	ldr	r0, [r7, #20]
 8009942:	f3c0 238a 	ubfx	r3, r0, #10, #11
 8009946:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 8009948:	fb0a 4a03 	mla	sl, sl, r3, r4
            pos = 0;
 800994c:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800994e:	46a3      	mov	fp, r4
            break;
 8009950:	e7c8      	b.n	80098e4 <lv_img_decoder_built_in_line_alpha+0x98>
    switch(dsc->header.cf) {
 8009952:	2400      	movs	r4, #0
 8009954:	46a2      	mov	sl, r4
 8009956:	4620      	mov	r0, r4
 8009958:	46a3      	mov	fp, r4
 800995a:	e7c3      	b.n	80098e4 <lv_img_decoder_built_in_line_alpha+0x98>
            pos = 4 - (x & 0x1) * 4;
 800995c:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
 800995e:	f10d 0b10 	add.w	fp, sp, #16
 8009962:	e7bf      	b.n	80098e4 <lv_img_decoder_built_in_line_alpha+0x98>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8009964:	2200      	movs	r2, #0
 8009966:	f10a 0104 	add.w	r1, sl, #4
 800996a:	9802      	ldr	r0, [sp, #8]
 800996c:	f002 f8f6 	bl	800bb5c <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8009970:	2300      	movs	r3, #0
 8009972:	9a03      	ldr	r2, [sp, #12]
 8009974:	f8dd a004 	ldr.w	sl, [sp, #4]
 8009978:	4651      	mov	r1, sl
 800997a:	9802      	ldr	r0, [sp, #8]
 800997c:	f002 f8c9 	bl	800bb12 <lv_fs_read>
        data_tmp = fs_buf;
 8009980:	e7bd      	b.n	80098fe <lv_img_decoder_built_in_line_alpha+0xb2>
    }

    for(i = 0; i < len; i++) {
 8009982:	3201      	adds	r2, #1
 8009984:	b212      	sxth	r2, r2
 8009986:	42b2      	cmp	r2, r6
 8009988:	da1b      	bge.n	80099c2 <lv_img_decoder_built_in_line_alpha+0x176>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800998a:	f89a 3000 	ldrb.w	r3, [sl]
 800998e:	4123      	asrs	r3, r4
 8009990:	ea03 0308 	and.w	r3, r3, r8
 8009994:	b2db      	uxtb	r3, r3

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8009996:	7d39      	ldrb	r1, [r7, #20]
 8009998:	f001 011f 	and.w	r1, r1, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800999c:	290e      	cmp	r1, #14
 800999e:	d001      	beq.n	80099a4 <lv_img_decoder_built_in_line_alpha+0x158>
 80099a0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80099a4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80099a8:	3102      	adds	r1, #2
 80099aa:	546b      	strb	r3, [r5, r1]

        pos -= px_size;
 80099ac:	eba4 0409 	sub.w	r4, r4, r9
 80099b0:	b264      	sxtb	r4, r4
        if(pos < 0) {
 80099b2:	2c00      	cmp	r4, #0
 80099b4:	dae5      	bge.n	8009982 <lv_img_decoder_built_in_line_alpha+0x136>
            pos = 8 - px_size;
 80099b6:	f1c9 0408 	rsb	r4, r9, #8
 80099ba:	b264      	sxtb	r4, r4
            data_tmp++;
 80099bc:	f10a 0a01 	add.w	sl, sl, #1
 80099c0:	e7df      	b.n	8009982 <lv_img_decoder_built_in_line_alpha+0x136>
        }
    }
    lv_mem_buf_release(fs_buf);
 80099c2:	9801      	ldr	r0, [sp, #4]
 80099c4:	f002 fbd8 	bl	800c178 <lv_mem_buf_release>
    return LV_RES_OK;
 80099c8:	2001      	movs	r0, #1
}
 80099ca:	b00b      	add	sp, #44	; 0x2c
 80099cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(fs_buf == NULL) return LV_RES_INV;
 80099d0:	2000      	movs	r0, #0
 80099d2:	e7fa      	b.n	80099ca <lv_img_decoder_built_in_line_alpha+0x17e>
 80099d4:	08010fac 	.word	0x08010fac

080099d8 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80099d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	b083      	sub	sp, #12
 80099de:	4682      	mov	sl, r0
 80099e0:	460c      	mov	r4, r1
 80099e2:	4693      	mov	fp, r2
 80099e4:	4699      	mov	r9, r3
 80099e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80099e8:	7d00      	ldrb	r0, [r0, #20]
 80099ea:	f000 001f 	and.w	r0, r0, #31
 80099ee:	f7fe fadb 	bl	8007fa8 <lv_img_cf_get_px_size>
 80099f2:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80099f4:	2601      	movs	r6, #1
 80099f6:	4086      	lsls	r6, r0
 80099f8:	b2b6      	uxth	r6, r6
 80099fa:	3e01      	subs	r6, #1
 80099fc:	b2b6      	uxth	r6, r6

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 80099fe:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8009a02:	f003 031f 	and.w	r3, r3, #31
 8009a06:	3b07      	subs	r3, #7
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d84e      	bhi.n	8009aaa <lv_img_decoder_built_in_line_indexed+0xd2>
 8009a0c:	e8df f003 	tbb	[pc, r3]
 8009a10:	42322102 	.word	0x42322102
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8009a14:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009a18:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8009a1c:	3007      	adds	r0, #7
 8009a1e:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 8009a20:	10e3      	asrs	r3, r4, #3
 8009a22:	fb0b 3b00 	mla	fp, fp, r0, r3
            ofs += 8;                /*Skip the palette*/
 8009a26:	f10b 0b08 	add.w	fp, fp, #8
            pos = 7 - (x & 0x7);
 8009a2a:	43e4      	mvns	r4, r4
 8009a2c:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8009a30:	f8da 7024 	ldr.w	r7, [sl, #36]	; 0x24

    uint8_t * fs_buf = lv_mem_buf_get(w);
 8009a34:	9001      	str	r0, [sp, #4]
 8009a36:	f002 fb3d 	bl	800c0b4 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8009a3a:	9000      	str	r0, [sp, #0]
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d074      	beq.n	8009b2a <lv_img_decoder_built_in_line_indexed+0x152>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8009a40:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8009a44:	bbc3      	cbnz	r3, 8009ab8 <lv_img_decoder_built_in_line_indexed+0xe0>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8009a46:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	449b      	add	fp, r3
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e043      	b.n	8009ada <lv_img_decoder_built_in_line_indexed+0x102>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8009a52:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009a56:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8009a5a:	3003      	adds	r0, #3
 8009a5c:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 8009a5e:	10a3      	asrs	r3, r4, #2
 8009a60:	fb0b 3b00 	mla	fp, fp, r0, r3
            ofs += 16;               /*Skip the palette*/
 8009a64:	f10b 0b10 	add.w	fp, fp, #16
            pos = 6 - (x & 0x3) * 2;
 8009a68:	b2a4      	uxth	r4, r4
 8009a6a:	43e4      	mvns	r4, r4
 8009a6c:	f004 0403 	and.w	r4, r4, #3
 8009a70:	0064      	lsls	r4, r4, #1
            break;
 8009a72:	e7dd      	b.n	8009a30 <lv_img_decoder_built_in_line_indexed+0x58>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8009a74:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009a78:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8009a80:	1063      	asrs	r3, r4, #1
 8009a82:	fb0b 3b00 	mla	fp, fp, r0, r3
            ofs += 64;               /*Skip the palette*/
 8009a86:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 8009a8a:	f014 0f01 	tst.w	r4, #1
 8009a8e:	d111      	bne.n	8009ab4 <lv_img_decoder_built_in_line_indexed+0xdc>
 8009a90:	2404      	movs	r4, #4
 8009a92:	e7cd      	b.n	8009a30 <lv_img_decoder_built_in_line_indexed+0x58>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8009a94:	f8da 0014 	ldr.w	r0, [sl, #20]
 8009a98:	f3c0 238a 	ubfx	r3, r0, #10, #11
 8009a9c:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 8009a9e:	fb0b 4b03 	mla	fp, fp, r3, r4
            ofs += 1024;       /*Skip the palette*/
 8009aa2:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
            pos = 0;
 8009aa6:	2400      	movs	r4, #0
            break;
 8009aa8:	e7c2      	b.n	8009a30 <lv_img_decoder_built_in_line_indexed+0x58>
    switch(dsc->header.cf) {
 8009aaa:	f04f 0b00 	mov.w	fp, #0
 8009aae:	465c      	mov	r4, fp
 8009ab0:	4658      	mov	r0, fp
 8009ab2:	e7bd      	b.n	8009a30 <lv_img_decoder_built_in_line_indexed+0x58>
            pos = 4 - (x & 0x1) * 4;
 8009ab4:	2400      	movs	r4, #0
 8009ab6:	e7bb      	b.n	8009a30 <lv_img_decoder_built_in_line_indexed+0x58>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f10b 0104 	add.w	r1, fp, #4
 8009abe:	4638      	mov	r0, r7
 8009ac0:	f002 f84c 	bl	800bb5c <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9a01      	ldr	r2, [sp, #4]
 8009ac8:	f8dd b000 	ldr.w	fp, [sp]
 8009acc:	4659      	mov	r1, fp
 8009ace:	4638      	mov	r0, r7
 8009ad0:	f002 f81f 	bl	800bb12 <lv_fs_read>
        data_tmp = fs_buf;
 8009ad4:	e7bb      	b.n	8009a4e <lv_img_decoder_built_in_line_indexed+0x76>
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	b200      	sxth	r0, r0
 8009ada:	4548      	cmp	r0, r9
 8009adc:	da1e      	bge.n	8009b1c <lv_img_decoder_built_in_line_indexed+0x144>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8009ade:	f89b 3000 	ldrb.w	r3, [fp]
 8009ae2:	4123      	asrs	r3, r4
 8009ae4:	4033      	ands	r3, r6
 8009ae6:	b2db      	uxtb	r3, r3

        lv_color_t color = user_data->palette[val_act];
 8009ae8:	68fa      	ldr	r2, [r7, #12]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 8009aea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8009aee:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8009af2:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 8009af4:	f102 0c01 	add.w	ip, r2, #1
 8009af8:	0a09      	lsrs	r1, r1, #8
 8009afa:	f805 100c 	strb.w	r1, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8009afe:	6939      	ldr	r1, [r7, #16]
 8009b00:	3202      	adds	r2, #2
 8009b02:	5ccb      	ldrb	r3, [r1, r3]
 8009b04:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
 8009b06:	eba4 0408 	sub.w	r4, r4, r8
 8009b0a:	b264      	sxtb	r4, r4
        if(pos < 0) {
 8009b0c:	2c00      	cmp	r4, #0
 8009b0e:	dae2      	bge.n	8009ad6 <lv_img_decoder_built_in_line_indexed+0xfe>
            pos = 8 - px_size;
 8009b10:	f1c8 0408 	rsb	r4, r8, #8
 8009b14:	b264      	sxtb	r4, r4
            data_tmp++;
 8009b16:	f10b 0b01 	add.w	fp, fp, #1
 8009b1a:	e7dc      	b.n	8009ad6 <lv_img_decoder_built_in_line_indexed+0xfe>
        }
    }
    lv_mem_buf_release(fs_buf);
 8009b1c:	9800      	ldr	r0, [sp, #0]
 8009b1e:	f002 fb2b 	bl	800c178 <lv_mem_buf_release>
    return LV_RES_OK;
 8009b22:	2001      	movs	r0, #1
}
 8009b24:	b003      	add	sp, #12
 8009b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(fs_buf == NULL) return LV_RES_INV;
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	e7fa      	b.n	8009b24 <lv_img_decoder_built_in_line_indexed+0x14c>

08009b2e <lv_img_decoder_built_in_read_line>:
{
 8009b2e:	b500      	push	{lr}
 8009b30:	b083      	sub	sp, #12
 8009b32:	4608      	mov	r0, r1
 8009b34:	4611      	mov	r1, r2
 8009b36:	461a      	mov	r2, r3
 8009b38:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8009b3c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8009b40:	f00c 0e1e 	and.w	lr, ip, #30
 8009b44:	f1be 0f04 	cmp.w	lr, #4
 8009b48:	d014      	beq.n	8009b74 <lv_img_decoder_built_in_read_line+0x46>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8009b4a:	f00c 0c1f 	and.w	ip, ip, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8009b4e:	f1bc 0f06 	cmp.w	ip, #6
 8009b52:	d00f      	beq.n	8009b74 <lv_img_decoder_built_in_read_line+0x46>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8009b54:	f1ac 0e0b 	sub.w	lr, ip, #11
 8009b58:	fa5f fe8e 	uxtb.w	lr, lr
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8009b5c:	f1be 0f03 	cmp.w	lr, #3
 8009b60:	d918      	bls.n	8009b94 <lv_img_decoder_built_in_read_line+0x66>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8009b62:	f1ac 0c07 	sub.w	ip, ip, #7
 8009b66:	fa5f fc8c 	uxtb.w	ip, ip
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8009b6a:	f1bc 0f03 	cmp.w	ip, #3
 8009b6e:	d918      	bls.n	8009ba2 <lv_img_decoder_built_in_read_line+0x74>
        return LV_RES_INV;
 8009b70:	2000      	movs	r0, #0
 8009b72:	e005      	b.n	8009b80 <lv_img_decoder_built_in_read_line+0x52>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009b74:	f890 c010 	ldrb.w	ip, [r0, #16]
 8009b78:	f1bc 0f01 	cmp.w	ip, #1
 8009b7c:	d003      	beq.n	8009b86 <lv_img_decoder_built_in_read_line+0x58>
    lv_res_t res = LV_RES_INV;
 8009b7e:	2000      	movs	r0, #0
}
 8009b80:	b003      	add	sp, #12
 8009b82:	f85d fb04 	ldr.w	pc, [sp], #4
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8009b86:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009b8a:	f8cd c000 	str.w	ip, [sp]
 8009b8e:	f7ff fe27 	bl	80097e0 <lv_img_decoder_built_in_line_true_color>
 8009b92:	e7f5      	b.n	8009b80 <lv_img_decoder_built_in_read_line+0x52>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8009b94:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009b98:	f8cd c000 	str.w	ip, [sp]
 8009b9c:	f7ff fe56 	bl	800984c <lv_img_decoder_built_in_line_alpha>
 8009ba0:	e7ee      	b.n	8009b80 <lv_img_decoder_built_in_read_line+0x52>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8009ba2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009ba6:	f8cd c000 	str.w	ip, [sp]
 8009baa:	f7ff ff15 	bl	80099d8 <lv_img_decoder_built_in_line_indexed>
 8009bae:	e7e7      	b.n	8009b80 <lv_img_decoder_built_in_read_line+0x52>

08009bb0 <lv_img_decoder_get_info>:
{
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
    lv_memset_00(header, sizeof(lv_img_header_t));
 8009bb6:	2104      	movs	r1, #4
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f002 fba2 	bl	800c302 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 8009bbe:	b1ee      	cbz	r6, 8009bfc <lv_img_decoder_get_info+0x4c>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7fe fa22 	bl	800800a <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	b908      	cbnz	r0, 8009bce <lv_img_decoder_get_info+0x1e>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8009bca:	68b3      	ldr	r3, [r6, #8]
 8009bcc:	b1bb      	cbz	r3, 8009bfe <lv_img_decoder_get_info+0x4e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8009bce:	480d      	ldr	r0, [pc, #52]	; (8009c04 <lv_img_decoder_get_info+0x54>)
 8009bd0:	f002 f8da 	bl	800bd88 <_lv_ll_get_head>
 8009bd4:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
 8009bd6:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8009bd8:	e004      	b.n	8009be4 <lv_img_decoder_get_info+0x34>
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4809      	ldr	r0, [pc, #36]	; (8009c04 <lv_img_decoder_get_info+0x54>)
 8009bde:	f002 f8db 	bl	800bd98 <_lv_ll_get_next>
 8009be2:	4604      	mov	r4, r0
 8009be4:	b15c      	cbz	r4, 8009bfe <lv_img_decoder_get_info+0x4e>
        if(d->info_cb) {
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d0f6      	beq.n	8009bda <lv_img_decoder_get_info+0x2a>
            res = d->info_cb(d, src, header);
 8009bec:	463a      	mov	r2, r7
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4798      	blx	r3
 8009bf4:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 8009bf6:	2801      	cmp	r0, #1
 8009bf8:	d1ef      	bne.n	8009bda <lv_img_decoder_get_info+0x2a>
 8009bfa:	e000      	b.n	8009bfe <lv_img_decoder_get_info+0x4e>
    if(src == NULL) return LV_RES_INV;
 8009bfc:	2500      	movs	r5, #0
}
 8009bfe:	4628      	mov	r0, r5
 8009c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c02:	bf00      	nop
 8009c04:	20000bf0 	.word	0x20000bf0

08009c08 <lv_img_decoder_open>:
{
 8009c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	4688      	mov	r8, r1
 8009c10:	4617      	mov	r7, r2
 8009c12:	461c      	mov	r4, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 8009c14:	2128      	movs	r1, #40	; 0x28
 8009c16:	f002 fb74 	bl	800c302 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 8009c1a:	f1b8 0f00 	cmp.w	r8, #0
 8009c1e:	d053      	beq.n	8009cc8 <lv_img_decoder_open+0xc0>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8009c20:	4640      	mov	r0, r8
 8009c22:	f7fe f9f2 	bl	800800a <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8009c26:	4605      	mov	r5, r0
 8009c28:	b918      	cbnz	r0, 8009c32 <lv_img_decoder_open+0x2a>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8009c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d043      	beq.n	8009cba <lv_img_decoder_open+0xb2>
    dsc->color    = color;
 8009c32:	8137      	strh	r7, [r6, #8]
    dsc->src_type = src_type;
 8009c34:	7435      	strb	r5, [r6, #16]
    dsc->frame_id = frame_id;
 8009c36:	60f4      	str	r4, [r6, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009c38:	2d01      	cmp	r5, #1
 8009c3a:	d007      	beq.n	8009c4c <lv_img_decoder_open+0x44>
        dsc->src = src;
 8009c3c:	f8c6 8004 	str.w	r8, [r6, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009c40:	4822      	ldr	r0, [pc, #136]	; (8009ccc <lv_img_decoder_open+0xc4>)
 8009c42:	f002 f8a1 	bl	800bd88 <_lv_ll_get_head>
 8009c46:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
 8009c48:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009c4a:	e011      	b.n	8009c70 <lv_img_decoder_open+0x68>
        size_t fnlen = strlen(src);
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	f7f6 fae9 	bl	8000224 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 8009c52:	3001      	adds	r0, #1
 8009c54:	f002 f9d8 	bl	800c008 <lv_mem_alloc>
 8009c58:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MALLOC(dsc->src);
 8009c5a:	b118      	cbz	r0, 8009c64 <lv_img_decoder_open+0x5c>
        strcpy((char *)dsc->src, src);
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	f004 fd5d 	bl	800e71c <strcpy>
 8009c62:	e7ed      	b.n	8009c40 <lv_img_decoder_open+0x38>
        LV_ASSERT_MALLOC(dsc->src);
 8009c64:	e7fe      	b.n	8009c64 <lv_img_decoder_open+0x5c>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009c66:	4621      	mov	r1, r4
 8009c68:	4818      	ldr	r0, [pc, #96]	; (8009ccc <lv_img_decoder_open+0xc4>)
 8009c6a:	f002 f895 	bl	800bd98 <_lv_ll_get_next>
 8009c6e:	4604      	mov	r4, r0
 8009c70:	b304      	cbz	r4, 8009cb4 <lv_img_decoder_open+0xac>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0f6      	beq.n	8009c66 <lv_img_decoder_open+0x5e>
 8009c78:	6862      	ldr	r2, [r4, #4]
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d0f3      	beq.n	8009c66 <lv_img_decoder_open+0x5e>
        res = decoder->info_cb(decoder, src, &dsc->header);
 8009c7e:	f106 0714 	add.w	r7, r6, #20
 8009c82:	463a      	mov	r2, r7
 8009c84:	4641      	mov	r1, r8
 8009c86:	4620      	mov	r0, r4
 8009c88:	4798      	blx	r3
 8009c8a:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
 8009c8c:	2801      	cmp	r0, #1
 8009c8e:	d1ea      	bne.n	8009c66 <lv_img_decoder_open+0x5e>
        dsc->decoder = decoder;
 8009c90:	6034      	str	r4, [r6, #0]
        res = decoder->open_cb(decoder, dsc);
 8009c92:	6863      	ldr	r3, [r4, #4]
 8009c94:	4631      	mov	r1, r6
 8009c96:	4620      	mov	r0, r4
 8009c98:	4798      	blx	r3
 8009c9a:	4605      	mov	r5, r0
        if(res == LV_RES_OK) return res;
 8009c9c:	2801      	cmp	r0, #1
 8009c9e:	d00c      	beq.n	8009cba <lv_img_decoder_open+0xb2>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 8009ca0:	2104      	movs	r1, #4
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	f002 fb2d 	bl	800c302 <lv_memset_00>
        dsc->error_msg = NULL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	6233      	str	r3, [r6, #32]
        dsc->img_data  = NULL;
 8009cac:	61b3      	str	r3, [r6, #24]
        dsc->user_data = NULL;
 8009cae:	6273      	str	r3, [r6, #36]	; 0x24
        dsc->time_to_open = 0;
 8009cb0:	61f3      	str	r3, [r6, #28]
 8009cb2:	e7d8      	b.n	8009c66 <lv_img_decoder_open+0x5e>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 8009cb4:	7c33      	ldrb	r3, [r6, #16]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d002      	beq.n	8009cc0 <lv_img_decoder_open+0xb8>
}
 8009cba:	4628      	mov	r0, r5
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_mem_free((void *)dsc->src);
 8009cc0:	6870      	ldr	r0, [r6, #4]
 8009cc2:	f002 f9bf 	bl	800c044 <lv_mem_free>
 8009cc6:	e7f8      	b.n	8009cba <lv_img_decoder_open+0xb2>
    if(src == NULL) return LV_RES_INV;
 8009cc8:	2500      	movs	r5, #0
 8009cca:	e7f6      	b.n	8009cba <lv_img_decoder_open+0xb2>
 8009ccc:	20000bf0 	.word	0x20000bf0

08009cd0 <lv_img_decoder_read_line>:
{
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	4684      	mov	ip, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	6884      	ldr	r4, [r0, #8]
 8009cda:	b154      	cbz	r4, 8009cf2 <lv_img_decoder_read_line+0x22>
 8009cdc:	f8dd e010 	ldr.w	lr, [sp, #16]
 8009ce0:	f8cd e004 	str.w	lr, [sp, #4]
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	460a      	mov	r2, r1
 8009cea:	4661      	mov	r1, ip
 8009cec:	47a0      	blx	r4
}
 8009cee:	b002      	add	sp, #8
 8009cf0:	bd10      	pop	{r4, pc}
    lv_res_t res = LV_RES_INV;
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	e7fb      	b.n	8009cee <lv_img_decoder_read_line+0x1e>

08009cf6 <lv_img_decoder_close>:
{
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	4604      	mov	r4, r0
    if(dsc->decoder) {
 8009cfa:	6800      	ldr	r0, [r0, #0]
 8009cfc:	b130      	cbz	r0, 8009d0c <lv_img_decoder_close+0x16>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8009cfe:	68c3      	ldr	r3, [r0, #12]
 8009d00:	b10b      	cbz	r3, 8009d06 <lv_img_decoder_close+0x10>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009d06:	7c23      	ldrb	r3, [r4, #16]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d000      	beq.n	8009d0e <lv_img_decoder_close+0x18>
}
 8009d0c:	bd10      	pop	{r4, pc}
            lv_mem_free((void *)dsc->src);
 8009d0e:	6860      	ldr	r0, [r4, #4]
 8009d10:	f002 f998 	bl	800c044 <lv_mem_free>
            dsc->src = NULL;
 8009d14:	2300      	movs	r3, #0
 8009d16:	6063      	str	r3, [r4, #4]
}
 8009d18:	e7f8      	b.n	8009d0c <lv_img_decoder_close+0x16>
	...

08009d1c <lv_img_decoder_create>:
{
 8009d1c:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 8009d1e:	4805      	ldr	r0, [pc, #20]	; (8009d34 <lv_img_decoder_create+0x18>)
 8009d20:	f001 fff4 	bl	800bd0c <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 8009d24:	b128      	cbz	r0, 8009d32 <lv_img_decoder_create+0x16>
 8009d26:	4604      	mov	r4, r0
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 8009d28:	2114      	movs	r1, #20
 8009d2a:	f002 faea 	bl	800c302 <lv_memset_00>
}
 8009d2e:	4620      	mov	r0, r4
 8009d30:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 8009d32:	e7fe      	b.n	8009d32 <lv_img_decoder_create+0x16>
 8009d34:	20000bf0 	.word	0x20000bf0

08009d38 <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
 8009d38:	6001      	str	r1, [r0, #0]
}
 8009d3a:	4770      	bx	lr

08009d3c <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
 8009d3c:	6041      	str	r1, [r0, #4]
}
 8009d3e:	4770      	bx	lr

08009d40 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
 8009d40:	6081      	str	r1, [r0, #8]
}
 8009d42:	4770      	bx	lr

08009d44 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
 8009d44:	60c1      	str	r1, [r0, #12]
}
 8009d46:	4770      	bx	lr

08009d48 <_lv_img_decoder_init>:
{
 8009d48:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 8009d4a:	2114      	movs	r1, #20
 8009d4c:	480b      	ldr	r0, [pc, #44]	; (8009d7c <_lv_img_decoder_init+0x34>)
 8009d4e:	f001 ffd5 	bl	800bcfc <_lv_ll_init>
    decoder = lv_img_decoder_create();
 8009d52:	f7ff ffe3 	bl	8009d1c <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 8009d56:	b180      	cbz	r0, 8009d7a <_lv_img_decoder_init+0x32>
 8009d58:	4604      	mov	r4, r0
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8009d5a:	4909      	ldr	r1, [pc, #36]	; (8009d80 <_lv_img_decoder_init+0x38>)
 8009d5c:	f7ff ffec 	bl	8009d38 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 8009d60:	4908      	ldr	r1, [pc, #32]	; (8009d84 <_lv_img_decoder_init+0x3c>)
 8009d62:	4620      	mov	r0, r4
 8009d64:	f7ff ffea 	bl	8009d3c <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8009d68:	4907      	ldr	r1, [pc, #28]	; (8009d88 <_lv_img_decoder_init+0x40>)
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff ffe8 	bl	8009d40 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 8009d70:	4906      	ldr	r1, [pc, #24]	; (8009d8c <_lv_img_decoder_init+0x44>)
 8009d72:	4620      	mov	r0, r4
 8009d74:	f7ff ffe6 	bl	8009d44 <lv_img_decoder_set_close_cb>
}
 8009d78:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 8009d7a:	e7fe      	b.n	8009d7a <_lv_img_decoder_init+0x32>
 8009d7c:	20000bf0 	.word	0x20000bf0
 8009d80:	080094c1 	.word	0x080094c1
 8009d84:	080095c5 	.word	0x080095c5
 8009d88:	08009b2f 	.word	0x08009b2f
 8009d8c:	08009591 	.word	0x08009591

08009d90 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8009d90:	4603      	mov	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009d92:	8880      	ldrh	r0, [r0, #4]
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	1ac0      	subs	r0, r0, r3
 8009d98:	b280      	uxth	r0, r0
 8009d9a:	3001      	adds	r0, #1
}
 8009d9c:	b200      	sxth	r0, r0
 8009d9e:	4770      	bx	lr

08009da0 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8009da0:	4603      	mov	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009da2:	88c0      	ldrh	r0, [r0, #6]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	1ac0      	subs	r0, r0, r3
 8009da8:	b280      	uxth	r0, r0
 8009daa:	3001      	adds	r0, #1
}
 8009dac:	b200      	sxth	r0, r0
 8009dae:	4770      	bx	lr

08009db0 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
 8009db0:	b410      	push	{r4}
 8009db2:	9c01      	ldr	r4, [sp, #4]
    if(item_cnt <= 1) {
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	dd07      	ble.n	8009dc8 <place_content+0x18>
            default:
                break;
        }
    }

    switch(place) {
 8009db8:	3801      	subs	r0, #1
 8009dba:	2804      	cmp	r0, #4
 8009dbc:	d846      	bhi.n	8009e4c <place_content+0x9c>
 8009dbe:	e8df f000 	tbb	[pc, r0]
 8009dc2:	0814      	.short	0x0814
 8009dc4:	2637      	.short	0x2637
 8009dc6:	1d          	.byte	0x1d
 8009dc7:	00          	.byte	0x00
        switch(place) {
 8009dc8:	f1a0 0c03 	sub.w	ip, r0, #3
 8009dcc:	f1bc 0f02 	cmp.w	ip, #2
 8009dd0:	d8f2      	bhi.n	8009db8 <place_content+0x8>
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9802      	ldr	r0, [sp, #8]
 8009dd6:	8003      	strh	r3, [r0, #0]
            *start_pos += (max_size - content_size) / 2;
 8009dd8:	1a89      	subs	r1, r1, r2
 8009dda:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8009dde:	8823      	ldrh	r3, [r4, #0]
 8009de0:	eb03 0161 	add.w	r1, r3, r1, asr #1
 8009de4:	8021      	strh	r1, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 8009de6:	bc10      	pop	{r4}
 8009de8:	4770      	bx	lr
            *gap = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	9802      	ldr	r0, [sp, #8]
 8009dee:	8003      	strh	r3, [r0, #0]
            *start_pos += max_size - content_size;
 8009df0:	1a89      	subs	r1, r1, r2
 8009df2:	b289      	uxth	r1, r1
 8009df4:	8823      	ldrh	r3, [r4, #0]
 8009df6:	4419      	add	r1, r3
 8009df8:	8021      	strh	r1, [r4, #0]
            break;
 8009dfa:	e7f4      	b.n	8009de6 <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 8009dfc:	1a89      	subs	r1, r1, r2
 8009dfe:	b209      	sxth	r1, r1
 8009e00:	3b01      	subs	r3, #1
 8009e02:	b21b      	sxth	r3, r3
 8009e04:	fb91 f1f3 	sdiv	r1, r1, r3
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	8019      	strh	r1, [r3, #0]
            break;
 8009e0c:	e7eb      	b.n	8009de6 <place_content+0x36>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 8009e0e:	1a89      	subs	r1, r1, r2
 8009e10:	b209      	sxth	r1, r1
 8009e12:	fb91 f3f3 	sdiv	r3, r1, r3
 8009e16:	9a02      	ldr	r2, [sp, #8]
 8009e18:	8812      	ldrh	r2, [r2, #0]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	b21b      	sxth	r3, r3
 8009e1e:	9a02      	ldr	r2, [sp, #8]
 8009e20:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap / 2;
 8009e22:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8009e26:	8822      	ldrh	r2, [r4, #0]
 8009e28:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8009e2c:	8023      	strh	r3, [r4, #0]
            break;
 8009e2e:	e7da      	b.n	8009de6 <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 8009e30:	1a89      	subs	r1, r1, r2
 8009e32:	b209      	sxth	r1, r1
 8009e34:	3301      	adds	r3, #1
 8009e36:	b21b      	sxth	r3, r3
 8009e38:	fb91 f3f3 	sdiv	r3, r1, r3
 8009e3c:	b21b      	sxth	r3, r3
 8009e3e:	9a02      	ldr	r2, [sp, #8]
 8009e40:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap;
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	8822      	ldrh	r2, [r4, #0]
 8009e46:	4413      	add	r3, r2
 8009e48:	8023      	strh	r3, [r4, #0]
            break;
 8009e4a:	e7cc      	b.n	8009de6 <place_content+0x36>
            *gap = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9a02      	ldr	r2, [sp, #8]
 8009e50:	8013      	strh	r3, [r2, #0]
}
 8009e52:	e7c8      	b.n	8009de6 <place_content+0x36>

08009e54 <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 8009e54:	b149      	cbz	r1, 8009e6a <get_next_item+0x16>
        (*item_id)--;
 8009e56:	6813      	ldr	r3, [r2, #0]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	db0f      	blt.n	8009e80 <get_next_item+0x2c>
 8009e60:	6882      	ldr	r2, [r0, #8]
 8009e62:	6812      	ldr	r2, [r2, #0]
 8009e64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009e68:	4770      	bx	lr
        else return NULL;
    }
    else {
        (*item_id)++;
 8009e6a:	6813      	ldr	r3, [r2, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8009e70:	6882      	ldr	r2, [r0, #8]
 8009e72:	6851      	ldr	r1, [r2, #4]
 8009e74:	428b      	cmp	r3, r1
 8009e76:	da05      	bge.n	8009e84 <get_next_item+0x30>
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009e7e:	4770      	bx	lr
        else return NULL;
 8009e80:	2000      	movs	r0, #0
 8009e82:	4770      	bx	lr
        else return NULL;
 8009e84:	2000      	movs	r0, #0
    }
}
 8009e86:	4770      	bx	lr

08009e88 <find_track_end>:
{
 8009e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	b087      	sub	sp, #28
 8009e8e:	4681      	mov	r9, r0
 8009e90:	460e      	mov	r6, r1
 8009e92:	4690      	mov	r8, r2
 8009e94:	9302      	str	r3, [sp, #8]
 8009e96:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 8009e9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	f7fc fa22 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009ea4:	b204      	sxth	r4, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8009ea6:	2204      	movs	r2, #4
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4648      	mov	r0, r9
 8009eac:	f7fc fa1c 	bl	80062e8 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 8009eb0:	78f3      	ldrb	r3, [r6, #3]
 8009eb2:	f013 0f02 	tst.w	r3, #2
 8009eb6:	d010      	beq.n	8009eda <find_track_end+0x52>
 8009eb8:	b200      	sxth	r0, r0
 8009eba:	f013 0301 	ands.w	r3, r3, #1
 8009ebe:	d003      	beq.n	8009ec8 <find_track_end+0x40>
 8009ec0:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8009ec4:	4294      	cmp	r4, r2
 8009ec6:	d004      	beq.n	8009ed2 <find_track_end+0x4a>
 8009ec8:	b93b      	cbnz	r3, 8009eda <find_track_end+0x52>
 8009eca:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8009ece:	4298      	cmp	r0, r3
 8009ed0:	d103      	bne.n	8009eda <find_track_end+0x52>
        f->wrap = false;
 8009ed2:	78f3      	ldrb	r3, [r6, #3]
 8009ed4:	f36f 0341 	bfc	r3, #1, #1
 8009ed8:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 8009eda:	78f3      	ldrb	r3, [r6, #3]
 8009edc:	f013 0301 	ands.w	r3, r3, #1
 8009ee0:	d013      	beq.n	8009f0a <find_track_end+0x82>
 8009ee2:	4a80      	ldr	r2, [pc, #512]	; (800a0e4 <find_track_end+0x25c>)
 8009ee4:	9203      	str	r2, [sp, #12]
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8009ee6:	b99b      	cbnz	r3, 8009f10 <find_track_end+0x88>
 8009ee8:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 800a0e4 <find_track_end+0x25c>
    t->track_main_size = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	806b      	strh	r3, [r5, #2]
    t->track_fix_main_size = 0;
 8009ef0:	80ab      	strh	r3, [r5, #4]
    t->grow_item_cnt = 0;
 8009ef2:	612b      	str	r3, [r5, #16]
    t->track_cross_size = 0;
 8009ef4:	802b      	strh	r3, [r5, #0]
    t->item_cnt = 0;
 8009ef6:	60ab      	str	r3, [r5, #8]
    t->grow_dsc = NULL;
 8009ef8:	60eb      	str	r3, [r5, #12]
    int32_t item_id = item_start_id;
 8009efa:	f8cd 8014 	str.w	r8, [sp, #20]
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 8009efe:	4641      	mov	r1, r8
 8009f00:	4648      	mov	r0, r9
 8009f02:	f7fc fe43 	bl	8006b8c <lv_obj_get_child>
 8009f06:	4604      	mov	r4, r0
    while(item) {
 8009f08:	e0a6      	b.n	800a058 <find_track_end+0x1d0>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 8009f0a:	4a77      	ldr	r2, [pc, #476]	; (800a0e8 <find_track_end+0x260>)
 8009f0c:	9203      	str	r2, [sp, #12]
 8009f0e:	e7ea      	b.n	8009ee6 <find_track_end+0x5e>
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8009f10:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 800a0e8 <find_track_end+0x260>
 8009f14:	e7ea      	b.n	8009eec <find_track_end+0x64>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8009f16:	4b75      	ldr	r3, [pc, #468]	; (800a0ec <find_track_end+0x264>)
 8009f18:	881a      	ldrh	r2, [r3, #0]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7fc f9e3 	bl	80062e8 <lv_obj_get_style_prop>
 8009f22:	4607      	mov	r7, r0
            if(grow_value) {
 8009f24:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009f28:	d06c      	beq.n	800a004 <find_track_end+0x17c>
                t->grow_item_cnt++;
 8009f2a:	6928      	ldr	r0, [r5, #16]
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	6128      	str	r0, [r5, #16]
                t->track_fix_main_size += item_gap;
 8009f30:	88ab      	ldrh	r3, [r5, #4]
 8009f32:	445b      	add	r3, fp
 8009f34:	80ab      	strh	r3, [r5, #4]
                if(t->grow_dsc_calc) {
 8009f36:	7d2b      	ldrb	r3, [r5, #20]
 8009f38:	f013 0f01 	tst.w	r3, #1
 8009f3c:	d074      	beq.n	800a028 <find_track_end+0x1a0>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 8009f3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009f42:	0080      	lsls	r0, r0, #2
 8009f44:	f002 f8b6 	bl	800c0b4 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 8009f48:	9001      	str	r0, [sp, #4]
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d04b      	beq.n	8009fe6 <find_track_end+0x15e>
                    if(t->grow_dsc) {
 8009f4e:	68e9      	ldr	r1, [r5, #12]
 8009f50:	b151      	cbz	r1, 8009f68 <find_track_end+0xe0>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 8009f52:	692b      	ldr	r3, [r5, #16]
 8009f54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f58:	009a      	lsls	r2, r3, #2
 8009f5a:	3a14      	subs	r2, #20
 8009f5c:	9801      	ldr	r0, [sp, #4]
 8009f5e:	f002 f941 	bl	800c1e4 <lv_memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 8009f62:	68e8      	ldr	r0, [r5, #12]
 8009f64:	f002 f908 	bl	800c178 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 8009f68:	692b      	ldr	r3, [r5, #16]
 8009f6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	3b14      	subs	r3, #20
 8009f72:	9a01      	ldr	r2, [sp, #4]
 8009f74:	50d4      	str	r4, [r2, r3]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 8009f76:	78f3      	ldrb	r3, [r6, #3]
 8009f78:	f013 0f01 	tst.w	r3, #1
 8009f7c:	d034      	beq.n	8009fe8 <find_track_end+0x160>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8009f7e:	2202      	movs	r2, #2
 8009f80:	2100      	movs	r1, #0
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7fc f9b0 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009f88:	b200      	sxth	r0, r0
 8009f8a:	692b      	ldr	r3, [r5, #16]
 8009f8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	3b14      	subs	r3, #20
 8009f94:	9a01      	ldr	r2, [sp, #4]
 8009f96:	4413      	add	r3, r2
 8009f98:	8098      	strh	r0, [r3, #4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 8009f9a:	78f3      	ldrb	r3, [r6, #3]
 8009f9c:	f013 0f01 	tst.w	r3, #1
 8009fa0:	d029      	beq.n	8009ff6 <find_track_end+0x16e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f7fc f99e 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009fac:	b200      	sxth	r0, r0
 8009fae:	692b      	ldr	r3, [r5, #16]
 8009fb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	3b14      	subs	r3, #20
 8009fb8:	9901      	ldr	r1, [sp, #4]
 8009fba:	440b      	add	r3, r1
 8009fbc:	80d8      	strh	r0, [r3, #6]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 8009fbe:	692b      	ldr	r3, [r5, #16]
 8009fc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	3b14      	subs	r3, #20
 8009fc8:	440b      	add	r3, r1
 8009fca:	b2ff      	uxtb	r7, r7
 8009fcc:	60df      	str	r7, [r3, #12]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8009fce:	692b      	ldr	r3, [r5, #16]
 8009fd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	3b14      	subs	r3, #20
 8009fd8:	440b      	add	r3, r1
 8009fda:	7c1a      	ldrb	r2, [r3, #16]
 8009fdc:	f36f 0200 	bfc	r2, #0, #1
 8009fe0:	741a      	strb	r2, [r3, #16]
                    t->grow_dsc = new_dsc;
 8009fe2:	60e9      	str	r1, [r5, #12]
 8009fe4:	e020      	b.n	800a028 <find_track_end+0x1a0>
                    LV_ASSERT_MALLOC(new_dsc);
 8009fe6:	e7fe      	b.n	8009fe6 <find_track_end+0x15e>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8009fe8:	2205      	movs	r2, #5
 8009fea:	2100      	movs	r1, #0
 8009fec:	4620      	mov	r0, r4
 8009fee:	f7fc f97b 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009ff2:	b200      	sxth	r0, r0
 8009ff4:	e7c9      	b.n	8009f8a <find_track_end+0x102>
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8009ff6:	2206      	movs	r2, #6
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f7fc f974 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a000:	b200      	sxth	r0, r0
 800a002:	e7d4      	b.n	8009fae <find_track_end+0x126>
                lv_coord_t item_size = get_main_size(item);
 800a004:	4620      	mov	r0, r4
 800a006:	9b03      	ldr	r3, [sp, #12]
 800a008:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 800a00a:	78f3      	ldrb	r3, [r6, #3]
 800a00c:	f013 0f02 	tst.w	r3, #2
 800a010:	d005      	beq.n	800a01e <find_track_end+0x196>
 800a012:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800a016:	4403      	add	r3, r0
 800a018:	9a02      	ldr	r2, [sp, #8]
 800a01a:	4293      	cmp	r3, r2
 800a01c:	dc34      	bgt.n	800a088 <find_track_end+0x200>
                t->track_fix_main_size += item_size + item_gap;
 800a01e:	4458      	add	r0, fp
 800a020:	b280      	uxth	r0, r0
 800a022:	88ab      	ldrh	r3, [r5, #4]
 800a024:	4418      	add	r0, r3
 800a026:	80a8      	strh	r0, [r5, #4]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 800a028:	4620      	mov	r0, r4
 800a02a:	47d0      	blx	sl
 800a02c:	f9b5 3000 	ldrsh.w	r3, [r5]
 800a030:	4298      	cmp	r0, r3
 800a032:	dd02      	ble.n	800a03a <find_track_end+0x1b2>
 800a034:	4620      	mov	r0, r4
 800a036:	47d0      	blx	sl
 800a038:	4603      	mov	r3, r0
 800a03a:	802b      	strh	r3, [r5, #0]
            t->item_cnt++;
 800a03c:	68ab      	ldr	r3, [r5, #8]
 800a03e:	3301      	adds	r3, #1
 800a040:	60ab      	str	r3, [r5, #8]
 800a042:	e01a      	b.n	800a07a <find_track_end+0x1f2>
        item_id += f->rev ? -1 : +1;
 800a044:	2101      	movs	r1, #1
 800a046:	9b05      	ldr	r3, [sp, #20]
 800a048:	4419      	add	r1, r3
 800a04a:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 800a04c:	2900      	cmp	r1, #0
 800a04e:	db1b      	blt.n	800a088 <find_track_end+0x200>
        item = lv_obj_get_child(cont, item_id);
 800a050:	4648      	mov	r0, r9
 800a052:	f7fc fd9b 	bl	8006b8c <lv_obj_get_child>
 800a056:	4604      	mov	r4, r0
    while(item) {
 800a058:	b1b4      	cbz	r4, 800a088 <find_track_end+0x200>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800a05a:	9b05      	ldr	r3, [sp, #20]
 800a05c:	4543      	cmp	r3, r8
 800a05e:	d005      	beq.n	800a06c <find_track_end+0x1e4>
 800a060:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800a064:	4620      	mov	r0, r4
 800a066:	f7f8 fd0b 	bl	8002a80 <lv_obj_has_flag>
 800a06a:	b968      	cbnz	r0, 800a088 <find_track_end+0x200>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800a06c:	4920      	ldr	r1, [pc, #128]	; (800a0f0 <find_track_end+0x268>)
 800a06e:	4620      	mov	r0, r4
 800a070:	f7f8 fd0d 	bl	8002a8e <lv_obj_has_flag_any>
 800a074:	2800      	cmp	r0, #0
 800a076:	f43f af4e 	beq.w	8009f16 <find_track_end+0x8e>
        item_id += f->rev ? -1 : +1;
 800a07a:	78f3      	ldrb	r3, [r6, #3]
 800a07c:	f013 0f04 	tst.w	r3, #4
 800a080:	d0e0      	beq.n	800a044 <find_track_end+0x1bc>
 800a082:	f04f 31ff 	mov.w	r1, #4294967295
 800a086:	e7de      	b.n	800a046 <find_track_end+0x1be>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800a088:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd02      	ble.n	800a096 <find_track_end+0x20e>
 800a090:	eba3 030b 	sub.w	r3, r3, fp
 800a094:	80ab      	strh	r3, [r5, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800a096:	692b      	ldr	r3, [r5, #16]
 800a098:	b913      	cbnz	r3, 800a0a0 <find_track_end+0x218>
 800a09a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800a09e:	9302      	str	r3, [sp, #8]
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	806b      	strh	r3, [r5, #2]
    if(item && item_id == item_start_id) {
 800a0a4:	b114      	cbz	r4, 800a0ac <find_track_end+0x224>
 800a0a6:	9b05      	ldr	r3, [sp, #20]
 800a0a8:	4543      	cmp	r3, r8
 800a0aa:	d003      	beq.n	800a0b4 <find_track_end+0x22c>
}
 800a0ac:	9805      	ldr	r0, [sp, #20]
 800a0ae:	b007      	add	sp, #28
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        item = cont->spec_attr->children[item_id];
 800a0b4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 800a0be:	78f1      	ldrb	r1, [r6, #3]
 800a0c0:	aa05      	add	r2, sp, #20
 800a0c2:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800a0c6:	4648      	mov	r0, r9
 800a0c8:	f7ff fec4 	bl	8009e54 <get_next_item>
        if(item) {
 800a0cc:	2c00      	cmp	r4, #0
 800a0ce:	d0ed      	beq.n	800a0ac <find_track_end+0x224>
            t->track_cross_size = get_cross_size(item);
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	47d0      	blx	sl
 800a0d4:	8028      	strh	r0, [r5, #0]
            t->track_main_size = get_main_size(item);
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	4798      	blx	r3
 800a0dc:	8068      	strh	r0, [r5, #2]
            t->item_cnt = 1;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	60ab      	str	r3, [r5, #8]
 800a0e2:	e7e3      	b.n	800a0ac <find_track_end+0x224>
 800a0e4:	080038ad 	.word	0x080038ad
 800a0e8:	080038bd 	.word	0x080038bd
 800a0ec:	20000b60 	.word	0x20000b60
 800a0f0:	00060001 	.word	0x00060001

0800a0f4 <children_repos>:
{
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	b093      	sub	sp, #76	; 0x4c
 800a0fa:	9003      	str	r0, [sp, #12]
 800a0fc:	4689      	mov	r9, r1
 800a0fe:	920d      	str	r2, [sp, #52]	; 0x34
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800a106:	9306      	str	r3, [sp, #24]
 800a108:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800a10c:	9307      	str	r3, [sp, #28]
 800a10e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 800a112:	9308      	str	r3, [sp, #32]
 800a114:	9c20      	ldr	r4, [sp, #128]	; 0x80
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800a116:	78cb      	ldrb	r3, [r1, #3]
 800a118:	f013 0301 	ands.w	r3, r3, #1
 800a11c:	d009      	beq.n	800a132 <children_repos+0x3e>
 800a11e:	4a88      	ldr	r2, [pc, #544]	; (800a340 <children_repos+0x24c>)
 800a120:	920a      	str	r2, [sp, #40]	; 0x28
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800a122:	b14b      	cbz	r3, 800a138 <children_repos+0x44>
 800a124:	4a87      	ldr	r2, [pc, #540]	; (800a344 <children_repos+0x250>)
 800a126:	9205      	str	r2, [sp, #20]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 800a128:	b94b      	cbnz	r3, 800a13e <children_repos+0x4a>
 800a12a:	4b86      	ldr	r3, [pc, #536]	; (800a344 <children_repos+0x250>)
 800a12c:	9309      	str	r3, [sp, #36]	; 0x24
    bool grow_reiterate  = true;
 800a12e:	2601      	movs	r6, #1
    while(grow_reiterate) {
 800a130:	e05a      	b.n	800a1e8 <children_repos+0xf4>
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800a132:	4a85      	ldr	r2, [pc, #532]	; (800a348 <children_repos+0x254>)
 800a134:	920a      	str	r2, [sp, #40]	; 0x28
 800a136:	e7f4      	b.n	800a122 <children_repos+0x2e>
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800a138:	4a84      	ldr	r2, [pc, #528]	; (800a34c <children_repos+0x258>)
 800a13a:	9205      	str	r2, [sp, #20]
 800a13c:	e7f4      	b.n	800a128 <children_repos+0x34>
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 800a13e:	4b83      	ldr	r3, [pc, #524]	; (800a34c <children_repos+0x258>)
 800a140:	9309      	str	r3, [sp, #36]	; 0x24
 800a142:	e7f4      	b.n	800a12e <children_repos+0x3a>
                grow_max_size -= t->grow_dsc[i].final_size;
 800a144:	8900      	ldrh	r0, [r0, #8]
 800a146:	1a09      	subs	r1, r1, r0
 800a148:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 800a14a:	3301      	adds	r3, #1
 800a14c:	6920      	ldr	r0, [r4, #16]
 800a14e:	4298      	cmp	r0, r3
 800a150:	d90c      	bls.n	800a16c <children_repos+0x78>
            if(t->grow_dsc[i].clamped == 0) {
 800a152:	68e0      	ldr	r0, [r4, #12]
 800a154:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800a158:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800a15c:	7c05      	ldrb	r5, [r0, #16]
 800a15e:	f015 0f01 	tst.w	r5, #1
 800a162:	d1ef      	bne.n	800a144 <children_repos+0x50>
                grow_value_sum += t->grow_dsc[i].grow_value;
 800a164:	68c0      	ldr	r0, [r0, #12]
 800a166:	4402      	add	r2, r0
 800a168:	b212      	sxth	r2, r2
 800a16a:	e7ee      	b.n	800a14a <children_repos+0x56>
        grow_reiterate = false;
 800a16c:	f04f 0c00 	mov.w	ip, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800a170:	4660      	mov	r0, ip
 800a172:	e00c      	b.n	800a18e <children_repos+0x9a>
                LV_ASSERT(grow_value_sum != 0);
 800a174:	e7fe      	b.n	800a174 <children_repos+0x80>
                t->grow_dsc[i].final_size = size_clamp;
 800a176:	68e3      	ldr	r3, [r4, #12]
 800a178:	443b      	add	r3, r7
 800a17a:	811d      	strh	r5, [r3, #8]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800a17c:	68e3      	ldr	r3, [r4, #12]
 800a17e:	443b      	add	r3, r7
 800a180:	68dd      	ldr	r5, [r3, #12]
 800a182:	1b52      	subs	r2, r2, r5
 800a184:	b212      	sxth	r2, r2
                grow_max_size  -= t->grow_dsc[i].final_size;
 800a186:	891b      	ldrh	r3, [r3, #8]
 800a188:	1ac9      	subs	r1, r1, r3
 800a18a:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 800a18c:	3001      	adds	r0, #1
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	4283      	cmp	r3, r0
 800a192:	d928      	bls.n	800a1e6 <children_repos+0xf2>
            if(t->grow_dsc[i].clamped == 0) {
 800a194:	68e3      	ldr	r3, [r4, #12]
 800a196:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800a19a:	00af      	lsls	r7, r5, #2
 800a19c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a1a0:	7c1d      	ldrb	r5, [r3, #16]
 800a1a2:	f015 0f01 	tst.w	r5, #1
 800a1a6:	d1f1      	bne.n	800a18c <children_repos+0x98>
                LV_ASSERT(grow_value_sum != 0);
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	d0e3      	beq.n	800a174 <children_repos+0x80>
                grow_unit = grow_max_size / grow_value_sum;
 800a1ac:	fb91 fef2 	sdiv	lr, r1, r2
 800a1b0:	fa0f fe8e 	sxth.w	lr, lr
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800a1b4:	68dd      	ldr	r5, [r3, #12]
 800a1b6:	fb0e f505 	mul.w	r5, lr, r5
 800a1ba:	fa0f fe85 	sxth.w	lr, r5
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800a1be:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800a1c2:	4575      	cmp	r5, lr
 800a1c4:	bfa8      	it	ge
 800a1c6:	4675      	movge	r5, lr
 800a1c8:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 800a1cc:	4545      	cmp	r5, r8
 800a1ce:	bfb8      	it	lt
 800a1d0:	4645      	movlt	r5, r8
                if(size_clamp != size) {
 800a1d2:	45ae      	cmp	lr, r5
 800a1d4:	d0cf      	beq.n	800a176 <children_repos+0x82>
                    t->grow_dsc[i].clamped = 1;
 800a1d6:	f893 c010 	ldrb.w	ip, [r3, #16]
 800a1da:	f04c 0c01 	orr.w	ip, ip, #1
 800a1de:	f883 c010 	strb.w	ip, [r3, #16]
                    grow_reiterate = true;
 800a1e2:	46b4      	mov	ip, r6
 800a1e4:	e7c7      	b.n	800a176 <children_repos+0x82>
 800a1e6:	4666      	mov	r6, ip
    while(grow_reiterate) {
 800a1e8:	b136      	cbz	r6, 800a1f8 <children_repos+0x104>
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800a1ea:	8861      	ldrh	r1, [r4, #2]
 800a1ec:	88a3      	ldrh	r3, [r4, #4]
 800a1ee:	1ac9      	subs	r1, r1, r3
 800a1f0:	b209      	sxth	r1, r1
        lv_coord_t grow_value_sum = 0;
 800a1f2:	2200      	movs	r2, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	e7a9      	b.n	800a14c <children_repos+0x58>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a1f8:	2216      	movs	r2, #22
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	9803      	ldr	r0, [sp, #12]
 800a1fe:	f7fc f873 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800a202:	b2c3      	uxtb	r3, r0
 800a204:	461d      	mov	r5, r3
 800a206:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t main_pos = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_coord_t place_gap = 0;
 800a20e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800a212:	ab11      	add	r3, sp, #68	; 0x44
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800a220:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a224:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 800a228:	f899 0000 	ldrb.w	r0, [r9]
 800a22c:	f7ff fdc0 	bl	8009db0 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800a230:	f899 3003 	ldrb.w	r3, [r9, #3]
 800a234:	f013 0f01 	tst.w	r3, #1
 800a238:	d001      	beq.n	800a23e <children_repos+0x14a>
 800a23a:	2d01      	cmp	r5, #1
 800a23c:	d005      	beq.n	800a24a <children_repos+0x156>
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 800a23e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a240:	9803      	ldr	r0, [sp, #12]
 800a242:	f7fc fca3 	bl	8006b8c <lv_obj_get_child>
 800a246:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 800a248:	e10b      	b.n	800a462 <children_repos+0x36e>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800a24a:	9803      	ldr	r0, [sp, #12]
 800a24c:	f7f9 fb3e 	bl	80038cc <lv_obj_get_content_width>
 800a250:	b283      	uxth	r3, r0
 800a252:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800a256:	4413      	add	r3, r2
 800a258:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800a25c:	e7ef      	b.n	800a23e <children_repos+0x14a>
            item = get_next_item(cont, f->rev, &item_first_id);
 800a25e:	f899 1003 	ldrb.w	r1, [r9, #3]
 800a262:	aa0d      	add	r2, sp, #52	; 0x34
 800a264:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800a268:	9803      	ldr	r0, [sp, #12]
 800a26a:	f7ff fdf3 	bl	8009e54 <get_next_item>
 800a26e:	4605      	mov	r5, r0
            continue;
 800a270:	e0f7      	b.n	800a462 <children_repos+0x36e>
                    s = t->grow_dsc[i].final_size;
 800a272:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
                    break;
 800a276:	e00f      	b.n	800a298 <children_repos+0x1a4>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800a278:	2300      	movs	r3, #0
 800a27a:	6922      	ldr	r2, [r4, #16]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d90a      	bls.n	800a296 <children_repos+0x1a2>
                if(t->grow_dsc[i].item == item) {
 800a280:	68e2      	ldr	r2, [r4, #12]
 800a282:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a286:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a28a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a28e:	42aa      	cmp	r2, r5
 800a290:	d0ef      	beq.n	800a272 <children_repos+0x17e>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800a292:	3301      	adds	r3, #1
 800a294:	e7f1      	b.n	800a27a <children_repos+0x186>
            lv_coord_t s = 0;
 800a296:	2700      	movs	r7, #0
            if(f->row) {
 800a298:	f899 3003 	ldrb.w	r3, [r9, #3]
 800a29c:	f013 0f01 	tst.w	r3, #1
 800a2a0:	d039      	beq.n	800a316 <children_repos+0x222>
                item->w_layout = 1;
 800a2a2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800a2a6:	f043 0308 	orr.w	r3, r3, #8
 800a2aa:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
                item->h_layout = 0;
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f36f 0382 	bfc	r3, #2, #1
 800a2b4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 800a2b8:	f105 0614 	add.w	r6, r5, #20
 800a2bc:	4630      	mov	r0, r6
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	4798      	blx	r3
 800a2c2:	42b8      	cmp	r0, r7
 800a2c4:	f000 80f0 	beq.w	800a4a8 <children_repos+0x3b4>
                lv_obj_invalidate(item);
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f7f9 fed0 	bl	800406e <lv_obj_invalidate>
    dest->x1 = src->x1;
 800a2ce:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 800a2d2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    dest->y1 = src->y1;
 800a2d6:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 800a2da:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    dest->x2 = src->x2;
 800a2de:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 800a2e2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    dest->y2 = src->y2;
 800a2e6:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 800a2ea:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                area_set_main_size(&item->coords, s);
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f4:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800a2f6:	aa0f      	add	r2, sp, #60	; 0x3c
 800a2f8:	2129      	movs	r1, #41	; 0x29
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f7f7 fd06 	bl	8001d0c <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800a300:	4628      	mov	r0, r5
 800a302:	f7fc fc18 	bl	8006b36 <lv_obj_get_parent>
 800a306:	462a      	mov	r2, r5
 800a308:	2122      	movs	r1, #34	; 0x22
 800a30a:	f7f7 fcff 	bl	8001d0c <lv_event_send>
                lv_obj_invalidate(item);
 800a30e:	4628      	mov	r0, r5
 800a310:	f7f9 fead 	bl	800406e <lv_obj_invalidate>
 800a314:	e0c8      	b.n	800a4a8 <children_repos+0x3b4>
                item->h_layout = 1;
 800a316:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800a31a:	f043 0304 	orr.w	r3, r3, #4
 800a31e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
                item->w_layout = 0;
 800a322:	b2db      	uxtb	r3, r3
 800a324:	f36f 03c3 	bfc	r3, #3, #1
 800a328:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 800a32c:	e7c4      	b.n	800a2b8 <children_repos+0x1c4>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 800a32e:	8826      	ldrh	r6, [r4, #0]
 800a330:	f105 0014 	add.w	r0, r5, #20
 800a334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a336:	4798      	blx	r3
 800a338:	b283      	uxth	r3, r0
 800a33a:	1af6      	subs	r6, r6, r3
 800a33c:	b236      	sxth	r6, r6
                break;
 800a33e:	e008      	b.n	800a352 <children_repos+0x25e>
 800a340:	0800b2e5 	.word	0x0800b2e5
 800a344:	08009d91 	.word	0x08009d91
 800a348:	0800b2f1 	.word	0x0800b2f1
 800a34c:	08009da1 	.word	0x08009da1
        switch(f->cross_place) {
 800a350:	2600      	movs	r6, #0
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800a352:	f899 3003 	ldrb.w	r3, [r9, #3]
 800a356:	f013 0f01 	tst.w	r3, #1
 800a35a:	d003      	beq.n	800a364 <children_repos+0x270>
 800a35c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a35e:	2b01      	cmp	r3, #1
 800a360:	f000 80b9 	beq.w	800a4d6 <children_repos+0x3e2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800a364:	226b      	movs	r2, #107	; 0x6b
 800a366:	2100      	movs	r1, #0
 800a368:	4628      	mov	r0, r5
 800a36a:	f7fb ffbd 	bl	80062e8 <lv_obj_get_style_prop>
 800a36e:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 800a370:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800a374:	226c      	movs	r2, #108	; 0x6c
 800a376:	2100      	movs	r1, #0
 800a378:	4628      	mov	r0, r5
 800a37a:	f7fb ffb5 	bl	80062e8 <lv_obj_get_style_prop>
 800a37e:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 800a380:	fa0f fa80 	sxth.w	sl, r0
        lv_coord_t w = lv_obj_get_width(item);
 800a384:	4628      	mov	r0, r5
 800a386:	f7f9 fa91 	bl	80038ac <lv_obj_get_width>
 800a38a:	900b      	str	r0, [sp, #44]	; 0x2c
        lv_coord_t h = lv_obj_get_height(item);
 800a38c:	4628      	mov	r0, r5
 800a38e:	f7f9 fa95 	bl	80038bc <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800a392:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800a396:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800a39a:	f000 80a7 	beq.w	800a4ec <children_repos+0x3f8>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800a39e:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 800a3a2:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 800a3a6:	f000 80ba 	beq.w	800a51e <children_repos+0x42a>
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800a3aa:	8aaf      	ldrh	r7, [r5, #20]
 800a3ac:	9b06      	ldr	r3, [sp, #24]
 800a3ae:	1bdf      	subs	r7, r3, r7
 800a3b0:	b2bf      	uxth	r7, r7
 800a3b2:	445f      	add	r7, fp
 800a3b4:	b2bf      	uxth	r7, r7
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800a3b6:	8aeb      	ldrh	r3, [r5, #22]
 800a3b8:	9a07      	ldr	r2, [sp, #28]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4453      	add	r3, sl
 800a3c0:	b29b      	uxth	r3, r3
        diff_x += f->row ? main_pos : cross_pos;
 800a3c2:	f899 2003 	ldrb.w	r2, [r9, #3]
 800a3c6:	f012 0201 	ands.w	r2, r2, #1
 800a3ca:	f000 80bf 	beq.w	800a54c <children_repos+0x458>
 800a3ce:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 800a3d2:	440f      	add	r7, r1
 800a3d4:	fa1f f887 	uxth.w	r8, r7
 800a3d8:	b23f      	sxth	r7, r7
        diff_y += f->row ? cross_pos : main_pos;
 800a3da:	2a00      	cmp	r2, #0
 800a3dc:	f000 80b8 	beq.w	800a550 <children_repos+0x45c>
 800a3e0:	b2b6      	uxth	r6, r6
 800a3e2:	4433      	add	r3, r6
 800a3e4:	fa1f fa83 	uxth.w	sl, r3
 800a3e8:	b21e      	sxth	r6, r3
        if(diff_x || diff_y) {
 800a3ea:	b907      	cbnz	r7, 800a3ee <children_repos+0x2fa>
 800a3ec:	b1ce      	cbz	r6, 800a422 <children_repos+0x32e>
            lv_obj_invalidate(item);
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f7f9 fe3d 	bl	800406e <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 800a3f4:	8aab      	ldrh	r3, [r5, #20]
 800a3f6:	4443      	add	r3, r8
 800a3f8:	82ab      	strh	r3, [r5, #20]
            item->coords.x2 += diff_x;
 800a3fa:	8b2b      	ldrh	r3, [r5, #24]
 800a3fc:	4498      	add	r8, r3
 800a3fe:	f8a5 8018 	strh.w	r8, [r5, #24]
            item->coords.y1 += diff_y;
 800a402:	8aeb      	ldrh	r3, [r5, #22]
 800a404:	4453      	add	r3, sl
 800a406:	82eb      	strh	r3, [r5, #22]
            item->coords.y2 += diff_y;
 800a408:	8b6b      	ldrh	r3, [r5, #26]
 800a40a:	449a      	add	sl, r3
 800a40c:	f8a5 a01a 	strh.w	sl, [r5, #26]
            lv_obj_invalidate(item);
 800a410:	4628      	mov	r0, r5
 800a412:	f7f9 fe2c 	bl	800406e <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 800a416:	2300      	movs	r3, #0
 800a418:	4632      	mov	r2, r6
 800a41a:	4639      	mov	r1, r7
 800a41c:	4628      	mov	r0, r5
 800a41e:	f7f9 fc93 	bl	8003d48 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800a422:	f899 3003 	ldrb.w	r3, [r9, #3]
 800a426:	f013 0f01 	tst.w	r3, #1
 800a42a:	d003      	beq.n	800a434 <children_repos+0x340>
 800a42c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a42e:	2b01      	cmp	r3, #1
 800a430:	f000 8091 	beq.w	800a556 <children_repos+0x462>
 800a434:	f105 0014 	add.w	r0, r5, #20
 800a438:	9b05      	ldr	r3, [sp, #20]
 800a43a:	4798      	blx	r3
 800a43c:	9b08      	ldr	r3, [sp, #32]
 800a43e:	181a      	adds	r2, r3, r0
 800a440:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800a444:	4413      	add	r3, r2
 800a446:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800a44a:	4413      	add	r3, r2
 800a44c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        item = get_next_item(cont, f->rev, &item_first_id);
 800a450:	f899 1003 	ldrb.w	r1, [r9, #3]
 800a454:	aa0d      	add	r2, sp, #52	; 0x34
 800a456:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800a45a:	9803      	ldr	r0, [sp, #12]
 800a45c:	f7ff fcfa 	bl	8009e54 <get_next_item>
 800a460:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 800a462:	2d00      	cmp	r5, #0
 800a464:	f000 8082 	beq.w	800a56c <children_repos+0x478>
 800a468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a46a:	9a04      	ldr	r2, [sp, #16]
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d07d      	beq.n	800a56c <children_repos+0x478>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800a470:	4940      	ldr	r1, [pc, #256]	; (800a574 <children_repos+0x480>)
 800a472:	4628      	mov	r0, r5
 800a474:	f7f8 fb0b 	bl	8002a8e <lv_obj_has_flag_any>
 800a478:	2800      	cmp	r0, #0
 800a47a:	f47f aef0 	bne.w	800a25e <children_repos+0x16a>
 800a47e:	4b3e      	ldr	r3, [pc, #248]	; (800a578 <children_repos+0x484>)
 800a480:	881a      	ldrh	r2, [r3, #0]
 800a482:	2100      	movs	r1, #0
 800a484:	4628      	mov	r0, r5
 800a486:	f7fb ff2f 	bl	80062e8 <lv_obj_get_style_prop>
        if(grow_size) {
 800a48a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800a48e:	f47f aef3 	bne.w	800a278 <children_repos+0x184>
            item->w_layout = 0;
 800a492:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800a496:	f36f 03c3 	bfc	r3, #3, #1
 800a49a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            item->h_layout = 0;
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f36f 0382 	bfc	r3, #2, #1
 800a4a4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
        switch(f->cross_place) {
 800a4a8:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	f43f af3e 	beq.w	800a32e <children_repos+0x23a>
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	f47f af4c 	bne.w	800a350 <children_repos+0x25c>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 800a4b8:	f9b4 6000 	ldrsh.w	r6, [r4]
 800a4bc:	3601      	adds	r6, #1
 800a4be:	f026 0601 	bic.w	r6, r6, #1
 800a4c2:	f105 0014 	add.w	r0, r5, #20
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	4798      	blx	r3
 800a4ca:	1a36      	subs	r6, r6, r0
 800a4cc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800a4d0:	f346 064f 	sbfx	r6, r6, #1, #16
                break;
 800a4d4:	e73d      	b.n	800a352 <children_repos+0x25e>
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800a4d6:	f105 0014 	add.w	r0, r5, #20
 800a4da:	9b05      	ldr	r3, [sp, #20]
 800a4dc:	4798      	blx	r3
 800a4de:	b282      	uxth	r2, r0
 800a4e0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800a4e4:	1a9b      	subs	r3, r3, r2
 800a4e6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800a4ea:	e73b      	b.n	800a364 <children_repos+0x270>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800a4ec:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 800a4f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a4f4:	f73f af53 	bgt.w	800a39e <children_repos+0x2aa>
 800a4f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4fc:	dd01      	ble.n	800a502 <children_repos+0x40e>
 800a4fe:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800a502:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a504:	fb03 f202 	mul.w	r2, r3, r2
 800a508:	4613      	mov	r3, r2
 800a50a:	4a1c      	ldr	r2, [pc, #112]	; (800a57c <children_repos+0x488>)
 800a50c:	fb82 1203 	smull	r1, r2, r2, r3
 800a510:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800a514:	ebcb 1b62 	rsb	fp, fp, r2, asr #5
 800a518:	fa0f fb8b 	sxth.w	fp, fp
 800a51c:	e73f      	b.n	800a39e <children_repos+0x2aa>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800a51e:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 800a522:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a526:	f73f af40 	bgt.w	800a3aa <children_repos+0x2b6>
 800a52a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a52e:	dd01      	ble.n	800a534 <children_repos+0x440>
 800a530:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800a534:	fb03 f000 	mul.w	r0, r3, r0
 800a538:	f8df a040 	ldr.w	sl, [pc, #64]	; 800a57c <children_repos+0x488>
 800a53c:	fb8a 3a00 	smull	r3, sl, sl, r0
 800a540:	17c0      	asrs	r0, r0, #31
 800a542:	ebc0 1a6a 	rsb	sl, r0, sl, asr #5
 800a546:	fa0f fa8a 	sxth.w	sl, sl
 800a54a:	e72e      	b.n	800a3aa <children_repos+0x2b6>
        diff_x += f->row ? main_pos : cross_pos;
 800a54c:	b2b1      	uxth	r1, r6
 800a54e:	e740      	b.n	800a3d2 <children_repos+0x2de>
        diff_y += f->row ? cross_pos : main_pos;
 800a550:	f8bd 6046 	ldrh.w	r6, [sp, #70]	; 0x46
 800a554:	e745      	b.n	800a3e2 <children_repos+0x2ee>
        else main_pos -= item_gap + place_gap;
 800a556:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a55a:	9a08      	ldr	r2, [sp, #32]
 800a55c:	4413      	add	r3, r2
 800a55e:	b29b      	uxth	r3, r3
 800a560:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800a56a:	e771      	b.n	800a450 <children_repos+0x35c>
}
 800a56c:	b013      	add	sp, #76	; 0x4c
 800a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a572:	bf00      	nop
 800a574:	00060001 	.word	0x00060001
 800a578:	20000b60 	.word	0x20000b60
 800a57c:	51eb851f 	.word	0x51eb851f

0800a580 <flex_update>:
{
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	b095      	sub	sp, #84	; 0x54
 800a586:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 800a588:	4db3      	ldr	r5, [pc, #716]	; (800a858 <flex_update+0x2d8>)
 800a58a:	886a      	ldrh	r2, [r5, #2]
 800a58c:	2100      	movs	r1, #0
 800a58e:	f7fb feab 	bl	80062e8 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 800a592:	f010 0f01 	tst.w	r0, #1
 800a596:	bf0c      	ite	eq
 800a598:	2201      	moveq	r2, #1
 800a59a:	2200      	movne	r2, #0
 800a59c:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a5a0:	f362 0300 	bfi	r3, r2, #0, #1
 800a5a4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    f.wrap = flow & _LV_FLEX_WRAP ? 1 : 0;
 800a5a8:	f3c0 0280 	ubfx	r2, r0, #2, #1
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	f362 0341 	bfi	r3, r2, #1, #1
 800a5b2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    f.rev = flow & _LV_FLEX_REVERSE ? 1 : 0;
 800a5b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f360 0382 	bfi	r3, r0, #2, #1
 800a5c0:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 800a5c4:	88aa      	ldrh	r2, [r5, #4]
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f7fb fe8d 	bl	80062e8 <lv_obj_get_style_prop>
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 800a5ce:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 800a5d2:	88ea      	ldrh	r2, [r5, #6]
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f7fb fe86 	bl	80062e8 <lv_obj_get_style_prop>
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 800a5dc:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 800a5e0:	892a      	ldrh	r2, [r5, #8]
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f7fb fe7f 	bl	80062e8 <lv_obj_get_style_prop>
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 800a5ea:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a5ee:	2216      	movs	r2, #22
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7fb fe78 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800a5f8:	fa5f f880 	uxtb.w	r8, r0
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 800a5fc:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a600:	f013 0f01 	tst.w	r3, #1
 800a604:	f040 808b 	bne.w	800a71e <flex_update+0x19e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800a608:	2215      	movs	r2, #21
 800a60a:	2100      	movs	r1, #0
 800a60c:	4620      	mov	r0, r4
 800a60e:	f7fb fe6b 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a612:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 800a616:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a61a:	f013 0f01 	tst.w	r3, #1
 800a61e:	f000 8086 	beq.w	800a72e <flex_update+0x1ae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800a622:	2215      	movs	r2, #21
 800a624:	2100      	movs	r1, #0
 800a626:	4620      	mov	r0, r4
 800a628:	f7fb fe5e 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a62c:	b206      	sxth	r6, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800a62e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a632:	f013 0f01 	tst.w	r3, #1
 800a636:	f000 8081 	beq.w	800a73c <flex_update+0x1bc>
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7f9 f946 	bl	80038cc <lv_obj_get_content_width>
 800a640:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a642:	2232      	movs	r2, #50	; 0x32
 800a644:	2100      	movs	r1, #0
 800a646:	4620      	mov	r0, r4
 800a648:	f7fb fe4e 	bl	80062e8 <lv_obj_get_style_prop>
 800a64c:	4605      	mov	r5, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800a64e:	f8b4 9016 	ldrh.w	r9, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a652:	2210      	movs	r2, #16
 800a654:	2100      	movs	r1, #0
 800a656:	4620      	mov	r0, r4
 800a658:	f7fb fe46 	bl	80062e8 <lv_obj_get_style_prop>
 800a65c:	b280      	uxth	r0, r0
 800a65e:	4481      	add	r9, r0
 800a660:	fa1f f989 	uxth.w	r9, r9
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 800a664:	b2ad      	uxth	r5, r5
 800a666:	44a9      	add	r9, r5
 800a668:	fa1f f989 	uxth.w	r9, r9
 800a66c:	4620      	mov	r0, r4
 800a66e:	f7fa f9fb 	bl	8004a68 <lv_obj_get_scroll_y>
 800a672:	b280      	uxth	r0, r0
 800a674:	eba9 0900 	sub.w	r9, r9, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800a678:	f8ad 904a 	strh.w	r9, [sp, #74]	; 0x4a
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800a67c:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a680:	2212      	movs	r2, #18
 800a682:	2100      	movs	r1, #0
 800a684:	4620      	mov	r0, r4
 800a686:	f7fb fe2f 	bl	80062e8 <lv_obj_get_style_prop>
 800a68a:	b280      	uxth	r0, r0
 800a68c:	4481      	add	r9, r0
 800a68e:	fa1f f989 	uxth.w	r9, r9
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 800a692:	444d      	add	r5, r9
 800a694:	b2ad      	uxth	r5, r5
 800a696:	4620      	mov	r0, r4
 800a698:	f7fa f9de 	bl	8004a58 <lv_obj_get_scroll_x>
 800a69c:	b280      	uxth	r0, r0
 800a69e:	1a2d      	subs	r5, r5, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800a6a0:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
    lv_flex_align_t track_cross_place = f.track_place;
 800a6a4:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800a6a8:	9307      	str	r3, [sp, #28]
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800a6aa:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a6ae:	f013 0f01 	tst.w	r3, #1
 800a6b2:	d048      	beq.n	800a746 <flex_update+0x1c6>
 800a6b4:	f10d 094a 	add.w	r9, sp, #74	; 0x4a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7fb fe13 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a6c2:	b203      	sxth	r3, r0
 800a6c4:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f7fb fe0c 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a6d0:	b203      	sxth	r3, r0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	9309      	str	r3, [sp, #36]	; 0x24
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800a6d6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a6da:	f013 0201 	ands.w	r2, r3, #1
 800a6de:	d003      	beq.n	800a6e8 <flex_update+0x168>
 800a6e0:	f242 71d1 	movw	r1, #10193	; 0x27d1
 800a6e4:	4288      	cmp	r0, r1
 800a6e6:	d031      	beq.n	800a74c <flex_update+0x1cc>
 800a6e8:	b922      	cbnz	r2, 800a6f4 <flex_update+0x174>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800a6ea:	f242 71d1 	movw	r1, #10193	; 0x27d1
 800a6ee:	9808      	ldr	r0, [sp, #32]
 800a6f0:	4288      	cmp	r0, r1
 800a6f2:	d033      	beq.n	800a75c <flex_update+0x1dc>
    if(rtl && !f.row) {
 800a6f4:	f1b8 0f01 	cmp.w	r8, #1
 800a6f8:	d038      	beq.n	800a76c <flex_update+0x1ec>
    lv_coord_t gap = 0;
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800a700:	9a07      	ldr	r2, [sp, #28]
 800a702:	2a00      	cmp	r2, #0
 800a704:	f000 8095 	beq.w	800a832 <flex_update+0x2b2>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800a708:	f013 0f04 	tst.w	r3, #4
 800a70c:	f000 808a 	beq.w	800a824 <flex_update+0x2a4>
 800a710:	68a3      	ldr	r3, [r4, #8]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	3a01      	subs	r2, #1
 800a716:	f04f 0b00 	mov.w	fp, #0
 800a71a:	465d      	mov	r5, fp
 800a71c:	e04d      	b.n	800a7ba <flex_update+0x23a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800a71e:	2214      	movs	r2, #20
 800a720:	2100      	movs	r1, #0
 800a722:	4620      	mov	r0, r4
 800a724:	f7fb fde0 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a728:	fa0f fa80 	sxth.w	sl, r0
 800a72c:	e773      	b.n	800a616 <flex_update+0x96>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800a72e:	2214      	movs	r2, #20
 800a730:	2100      	movs	r1, #0
 800a732:	4620      	mov	r0, r4
 800a734:	f7fb fdd8 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a738:	b206      	sxth	r6, r0
 800a73a:	e778      	b.n	800a62e <flex_update+0xae>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800a73c:	4620      	mov	r0, r4
 800a73e:	f7f9 f8e5 	bl	800390c <lv_obj_get_content_height>
 800a742:	4607      	mov	r7, r0
 800a744:	e77d      	b.n	800a642 <flex_update+0xc2>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800a746:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 800a74a:	e7b5      	b.n	800a6b8 <flex_update+0x138>
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800a74c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 800a750:	f011 0f04 	tst.w	r1, #4
 800a754:	d1c8      	bne.n	800a6e8 <flex_update+0x168>
        track_cross_place = LV_FLEX_ALIGN_START;
 800a756:	2100      	movs	r1, #0
 800a758:	9107      	str	r1, [sp, #28]
 800a75a:	e7cb      	b.n	800a6f4 <flex_update+0x174>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800a75c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 800a760:	f011 0f08 	tst.w	r1, #8
 800a764:	d1c6      	bne.n	800a6f4 <flex_update+0x174>
        track_cross_place = LV_FLEX_ALIGN_START;
 800a766:	2100      	movs	r1, #0
 800a768:	9107      	str	r1, [sp, #28]
 800a76a:	e7c3      	b.n	800a6f4 <flex_update+0x174>
    if(rtl && !f.row) {
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	d1c4      	bne.n	800a6fa <flex_update+0x17a>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800a770:	9a07      	ldr	r2, [sp, #28]
 800a772:	b922      	cbnz	r2, 800a77e <flex_update+0x1fe>
    lv_coord_t gap = 0;
 800a774:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800a778:	f8cd 801c 	str.w	r8, [sp, #28]
 800a77c:	e7c4      	b.n	800a708 <flex_update+0x188>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800a77e:	9a07      	ldr	r2, [sp, #28]
 800a780:	2a01      	cmp	r2, #1
 800a782:	d1ba      	bne.n	800a6fa <flex_update+0x17a>
    lv_coord_t gap = 0;
 800a784:	2500      	movs	r5, #0
 800a786:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800a78a:	e036      	b.n	800a7fa <flex_update+0x27a>
            t.grow_dsc_calc = 0;
 800a78c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a790:	f36f 0300 	bfc	r3, #0, #1
 800a794:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800a798:	ab0b      	add	r3, sp, #44	; 0x2c
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	9600      	str	r6, [sp, #0]
 800a79e:	463b      	mov	r3, r7
 800a7a0:	a913      	add	r1, sp, #76	; 0x4c
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f7ff fb70 	bl	8009e88 <find_track_end>
 800a7a8:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800a7aa:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800a7ae:	4453      	add	r3, sl
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	441d      	add	r5, r3
 800a7b4:	b22d      	sxth	r5, r5
            track_cnt++;
 800a7b6:	f10b 0b01 	add.w	fp, fp, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800a7ba:	68a3      	ldr	r3, [r4, #8]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	dd01      	ble.n	800a7c6 <flex_update+0x246>
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	dae2      	bge.n	800a78c <flex_update+0x20c>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800a7c6:	f1bb 0f00 	cmp.w	fp, #0
 800a7ca:	d002      	beq.n	800a7d2 <flex_update+0x252>
 800a7cc:	eba5 050a 	sub.w	r5, r5, sl
 800a7d0:	b22d      	sxth	r5, r5
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800a7d2:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a7d6:	f013 0f01 	tst.w	r3, #1
 800a7da:	d025      	beq.n	800a828 <flex_update+0x2a8>
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7f9 f895 	bl	800390c <lv_obj_get_content_height>
 800a7e2:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800a7e4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	f8cd 9000 	str.w	r9, [sp]
 800a7ee:	fa0f f38b 	sxth.w	r3, fp
 800a7f2:	462a      	mov	r2, r5
 800a7f4:	9807      	ldr	r0, [sp, #28]
 800a7f6:	f7ff fadb 	bl	8009db0 <place_content>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800a7fa:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a7fe:	f013 0f04 	tst.w	r3, #4
 800a802:	d018      	beq.n	800a836 <flex_update+0x2b6>
 800a804:	68a2      	ldr	r2, [r4, #8]
 800a806:	6852      	ldr	r2, [r2, #4]
 800a808:	f102 3bff 	add.w	fp, r2, #4294967295
    if(rtl && !f.row) {
 800a80c:	f1b8 0f01 	cmp.w	r8, #1
 800a810:	d132      	bne.n	800a878 <flex_update+0x2f8>
 800a812:	f013 0f01 	tst.w	r3, #1
 800a816:	d12f      	bne.n	800a878 <flex_update+0x2f8>
        *cross_pos += total_track_cross_size;
 800a818:	f8b9 3000 	ldrh.w	r3, [r9]
 800a81c:	441d      	add	r5, r3
 800a81e:	f8a9 5000 	strh.w	r5, [r9]
 800a822:	e029      	b.n	800a878 <flex_update+0x2f8>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800a824:	2200      	movs	r2, #0
 800a826:	e776      	b.n	800a716 <flex_update+0x196>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800a828:	4620      	mov	r0, r4
 800a82a:	f7f9 f84f 	bl	80038cc <lv_obj_get_content_width>
 800a82e:	4601      	mov	r1, r0
 800a830:	e7d8      	b.n	800a7e4 <flex_update+0x264>
    lv_coord_t total_track_cross_size = 0;
 800a832:	2500      	movs	r5, #0
 800a834:	e7e1      	b.n	800a7fa <flex_update+0x27a>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800a836:	f04f 0b00 	mov.w	fp, #0
 800a83a:	e7e7      	b.n	800a80c <flex_update+0x28c>
        if(rtl && !f.row) {
 800a83c:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a840:	f013 0f01 	tst.w	r3, #1
 800a844:	d132      	bne.n	800a8ac <flex_update+0x32c>
            *cross_pos -= t.track_cross_size;
 800a846:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800a84a:	f8b9 3000 	ldrh.w	r3, [r9]
 800a84e:	1a9b      	subs	r3, r3, r2
 800a850:	f8a9 3000 	strh.w	r3, [r9]
 800a854:	e02a      	b.n	800a8ac <flex_update+0x32c>
 800a856:	bf00      	nop
 800a858:	20000b60 	.word	0x20000b60
            *cross_pos += t.track_cross_size + gap + track_gap;
 800a85c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800a860:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800a864:	441a      	add	r2, r3
 800a866:	b292      	uxth	r2, r2
 800a868:	4452      	add	r2, sl
 800a86a:	b292      	uxth	r2, r2
 800a86c:	f8b9 3000 	ldrh.w	r3, [r9]
 800a870:	441a      	add	r2, r3
 800a872:	f8a9 2000 	strh.w	r2, [r9]
        track_first_item = next_track_first_item;
 800a876:	46ab      	mov	fp, r5
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800a878:	68a3      	ldr	r3, [r4, #8]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	455b      	cmp	r3, fp
 800a87e:	dd3c      	ble.n	800a8fa <flex_update+0x37a>
 800a880:	f1bb 0f00 	cmp.w	fp, #0
 800a884:	db39      	blt.n	800a8fa <flex_update+0x37a>
        t.grow_dsc_calc = 1;
 800a886:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a88a:	f043 0301 	orr.w	r3, r3, #1
 800a88e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800a892:	ab0b      	add	r3, sp, #44	; 0x2c
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	9600      	str	r6, [sp, #0]
 800a898:	463b      	mov	r3, r7
 800a89a:	465a      	mov	r2, fp
 800a89c:	a913      	add	r1, sp, #76	; 0x4c
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7ff faf2 	bl	8009e88 <find_track_end>
 800a8a4:	4605      	mov	r5, r0
        if(rtl && !f.row) {
 800a8a6:	f1b8 0f01 	cmp.w	r8, #1
 800a8aa:	d0c7      	beq.n	800a83c <flex_update+0x2bc>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800a8ac:	ab0b      	add	r3, sp, #44	; 0x2c
 800a8ae:	9304      	str	r3, [sp, #16]
 800a8b0:	9603      	str	r6, [sp, #12]
 800a8b2:	9702      	str	r7, [sp, #8]
 800a8b4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 800a8b8:	9301      	str	r3, [sp, #4]
 800a8ba:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	462b      	mov	r3, r5
 800a8c2:	465a      	mov	r2, fp
 800a8c4:	a913      	add	r1, sp, #76	; 0x4c
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff fc14 	bl	800a0f4 <children_repos>
        lv_mem_buf_release(t.grow_dsc);
 800a8cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a8ce:	f001 fc53 	bl	800c178 <lv_mem_buf_release>
        t.grow_dsc = NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	930e      	str	r3, [sp, #56]	; 0x38
        if(rtl && !f.row) {
 800a8d6:	f1b8 0f01 	cmp.w	r8, #1
 800a8da:	d1bf      	bne.n	800a85c <flex_update+0x2dc>
 800a8dc:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800a8e0:	f013 0f01 	tst.w	r3, #1
 800a8e4:	d1ba      	bne.n	800a85c <flex_update+0x2dc>
            *cross_pos -= gap + track_gap;
 800a8e6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800a8ea:	4453      	add	r3, sl
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	f8b9 2000 	ldrh.w	r2, [r9]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	f8a9 3000 	strh.w	r3, [r9]
 800a8f8:	e7bd      	b.n	800a876 <flex_update+0x2f6>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800a8fa:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800a8fe:	9a08      	ldr	r2, [sp, #32]
 800a900:	429a      	cmp	r2, r3
 800a902:	d00a      	beq.n	800a91a <flex_update+0x39a>
 800a904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a906:	429a      	cmp	r2, r3
 800a908:	d007      	beq.n	800a91a <flex_update+0x39a>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800a90a:	2200      	movs	r2, #0
 800a90c:	212b      	movs	r1, #43	; 0x2b
 800a90e:	4620      	mov	r0, r4
 800a910:	f7f7 f9fc 	bl	8001d0c <lv_event_send>
}
 800a914:	b015      	add	sp, #84	; 0x54
 800a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7f9 fe48 	bl	80045b0 <lv_obj_refr_size>
 800a920:	e7f3      	b.n	800a90a <flex_update+0x38a>
 800a922:	bf00      	nop

0800a924 <lv_flex_init>:
{
 800a924:	b510      	push	{r4, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 800a926:	2100      	movs	r1, #0
 800a928:	480c      	ldr	r0, [pc, #48]	; (800a95c <lv_flex_init+0x38>)
 800a92a:	f7f8 ff83 	bl	8003834 <lv_layout_register>
 800a92e:	4c0c      	ldr	r4, [pc, #48]	; (800a960 <lv_flex_init+0x3c>)
 800a930:	8160      	strh	r0, [r4, #10]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop(LV_STYLE_PROP_FLAG_NONE);
 800a932:	2000      	movs	r0, #0
 800a934:	f001 fd2c 	bl	800c390 <lv_style_register_prop>
 800a938:	8060      	strh	r0, [r4, #2]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800a93a:	2004      	movs	r0, #4
 800a93c:	f001 fd28 	bl	800c390 <lv_style_register_prop>
 800a940:	80a0      	strh	r0, [r4, #4]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800a942:	2004      	movs	r0, #4
 800a944:	f001 fd24 	bl	800c390 <lv_style_register_prop>
 800a948:	80e0      	strh	r0, [r4, #6]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800a94a:	2004      	movs	r0, #4
 800a94c:	f001 fd20 	bl	800c390 <lv_style_register_prop>
 800a950:	8120      	strh	r0, [r4, #8]
    LV_STYLE_FLEX_GROW = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800a952:	2004      	movs	r0, #4
 800a954:	f001 fd1c 	bl	800c390 <lv_style_register_prop>
 800a958:	8020      	strh	r0, [r4, #0]
}
 800a95a:	bd10      	pop	{r4, pc}
 800a95c:	0800a581 	.word	0x0800a581
 800a960:	20000b60 	.word	0x20000b60

0800a964 <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 800a964:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 800a966:	f7ff ffdd 	bl	800a924 <lv_flex_init>
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 800a96a:	bd08      	pop	{r3, pc}

0800a96c <lv_font_get_glyph_dsc>:
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{

    LV_ASSERT_NULL(font_p);
 800a96c:	b150      	cbz	r0, 800a984 <lv_font_get_glyph_dsc+0x18>
{
 800a96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a972:	460d      	mov	r5, r1
 800a974:	4616      	mov	r6, r2
 800a976:	461f      	mov	r7, r3
 800a978:	4680      	mov	r8, r0
    LV_ASSERT_NULL(dsc_out);
 800a97a:	b121      	cbz	r1, 800a986 <lv_font_get_glyph_dsc+0x1a>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	600b      	str	r3, [r1, #0]
    const lv_font_t * f = font_p;
 800a980:	4604      	mov	r4, r0

    while(f) {
 800a982:	e002      	b.n	800a98a <lv_font_get_glyph_dsc+0x1e>
    LV_ASSERT_NULL(font_p);
 800a984:	e7fe      	b.n	800a984 <lv_font_get_glyph_dsc+0x18>
    LV_ASSERT_NULL(dsc_out);
 800a986:	e7fe      	b.n	800a986 <lv_font_get_glyph_dsc+0x1a>
            else if(placeholder_font == NULL) {
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 800a988:	6964      	ldr	r4, [r4, #20]
    while(f) {
 800a98a:	b17c      	cbz	r4, 800a9ac <lv_font_get_glyph_dsc+0x40>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 800a98c:	463b      	mov	r3, r7
 800a98e:	4632      	mov	r2, r6
 800a990:	4629      	mov	r1, r5
 800a992:	4620      	mov	r0, r4
 800a994:	f8d4 c000 	ldr.w	ip, [r4]
 800a998:	47e0      	blx	ip
        if(found) {
 800a99a:	4603      	mov	r3, r0
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d0f3      	beq.n	800a988 <lv_font_get_glyph_dsc+0x1c>
            if(!dsc_out->is_placeholder) {
 800a9a0:	7baa      	ldrb	r2, [r5, #14]
 800a9a2:	f012 0f10 	tst.w	r2, #16
 800a9a6:	d1ef      	bne.n	800a988 <lv_font_get_glyph_dsc+0x1c>
                dsc_out->resolved_font = f;
 800a9a8:	602c      	str	r4, [r5, #0]
                return true;
 800a9aa:	e020      	b.n	800a9ee <lv_font_get_glyph_dsc+0x82>
        dsc_out->resolved_font = placeholder_font;
        return true;
    }
#endif

    if(letter < 0x20 ||
 800a9ac:	2e1f      	cmp	r6, #31
 800a9ae:	d90b      	bls.n	800a9c8 <lv_font_get_glyph_dsc+0x5c>
 800a9b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a9b4:	429e      	cmp	r6, r3
 800a9b6:	d007      	beq.n	800a9c8 <lv_font_get_glyph_dsc+0x5c>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 800a9b8:	f242 030c 	movw	r3, #8204	; 0x200c
 800a9bc:	429e      	cmp	r6, r3
 800a9be:	d003      	beq.n	800a9c8 <lv_font_get_glyph_dsc+0x5c>
    else {
#if LV_USE_FONT_PLACEHOLDER
        dsc_out->box_w = font_p->line_height / 2;
        dsc_out->adv_w = dsc_out->box_w + 2;
#else
        dsc_out->box_w = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = 0;
 800a9c4:	80ab      	strh	r3, [r5, #4]
 800a9c6:	e002      	b.n	800a9ce <lv_font_get_glyph_dsc+0x62>
        dsc_out->box_w = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = 0;
 800a9cc:	80ab      	strh	r3, [r5, #4]
#endif
    }

    dsc_out->resolved_font = NULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	602b      	str	r3, [r5, #0]
    dsc_out->box_h = font_p->line_height;
 800a9d2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800a9d6:	812a      	strh	r2, [r5, #8]
    dsc_out->ofs_x = 0;
 800a9d8:	816b      	strh	r3, [r5, #10]
    dsc_out->ofs_y = 0;
 800a9da:	81ab      	strh	r3, [r5, #12]
    dsc_out->bpp   = 1;
 800a9dc:	7baa      	ldrb	r2, [r5, #14]
 800a9de:	2101      	movs	r1, #1
 800a9e0:	f361 0203 	bfi	r2, r1, #0, #4
 800a9e4:	73aa      	strb	r2, [r5, #14]
    dsc_out->is_placeholder = true;
 800a9e6:	b2d2      	uxtb	r2, r2
 800a9e8:	f042 0210 	orr.w	r2, r2, #16
 800a9ec:	73aa      	strb	r2, [r5, #14]

    return false;
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9f4 <lv_font_get_glyph_width>:
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    LV_ASSERT_NULL(font);
 800a9f4:	b158      	cbz	r0, 800aa0e <lv_font_get_glyph_width+0x1a>
{
 800a9f6:	b500      	push	{lr}
 800a9f8:	b085      	sub	sp, #20
 800a9fa:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800a9fc:	460a      	mov	r2, r1
 800a9fe:	4669      	mov	r1, sp
 800aa00:	f7ff ffb4 	bl	800a96c <lv_font_get_glyph_dsc>
    return g.adv_w;
}
 800aa04:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800aa08:	b005      	add	sp, #20
 800aa0a:	f85d fb04 	ldr.w	pc, [sp], #4
    LV_ASSERT_NULL(font);
 800aa0e:	e7fe      	b.n	800aa0e <lv_font_get_glyph_width+0x1a>

0800aa10 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800aa10:	7803      	ldrb	r3, [r0, #0]
 800aa12:	780a      	ldrb	r2, [r1, #0]
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d001      	beq.n	800aa1c <kern_pair_8_compare+0xc>
 800aa18:	1a98      	subs	r0, r3, r2
 800aa1a:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 800aa1c:	7840      	ldrb	r0, [r0, #1]
 800aa1e:	784b      	ldrb	r3, [r1, #1]
 800aa20:	1ac0      	subs	r0, r0, r3

}
 800aa22:	4770      	bx	lr

0800aa24 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800aa24:	8803      	ldrh	r3, [r0, #0]
 800aa26:	880a      	ldrh	r2, [r1, #0]
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d001      	beq.n	800aa30 <kern_pair_16_compare+0xc>
 800aa2c:	1a98      	subs	r0, r3, r2
 800aa2e:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 800aa30:	8840      	ldrh	r0, [r0, #2]
 800aa32:	884b      	ldrh	r3, [r1, #2]
 800aa34:	1ac0      	subs	r0, r0, r3
}
 800aa36:	4770      	bx	lr

0800aa38 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 800aa38:	8800      	ldrh	r0, [r0, #0]
 800aa3a:	880b      	ldrh	r3, [r1, #0]
}
 800aa3c:	1ac0      	subs	r0, r0, r3
 800aa3e:	4770      	bx	lr

0800aa40 <get_glyph_dsc_id>:
{
 800aa40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa42:	b085      	sub	sp, #20
    if(letter == '\0') return 0;
 800aa44:	460d      	mov	r5, r1
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d06a      	beq.n	800ab20 <get_glyph_dsc_id+0xe0>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 800aa4a:	6904      	ldr	r4, [r0, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 800aa4c:	6967      	ldr	r7, [r4, #20]
 800aa4e:	2f00      	cmp	r7, #0
 800aa50:	d05e      	beq.n	800ab10 <get_glyph_dsc_id+0xd0>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	428b      	cmp	r3, r1
 800aa56:	d019      	beq.n	800aa8c <get_glyph_dsc_id+0x4c>
 800aa58:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
 800aa5a:	8a63      	ldrh	r3, [r4, #18]
 800aa5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d957      	bls.n	800ab14 <get_glyph_dsc_id+0xd4>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800aa64:	68a1      	ldr	r1, [r4, #8]
 800aa66:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800aa6a:	009e      	lsls	r6, r3, #2
 800aa6c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800aa70:	5988      	ldr	r0, [r1, r6]
 800aa72:	1a28      	subs	r0, r5, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800aa74:	8899      	ldrh	r1, [r3, #4]
 800aa76:	4281      	cmp	r1, r0
 800aa78:	d30a      	bcc.n	800aa90 <get_glyph_dsc_id+0x50>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800aa7a:	7c9a      	ldrb	r2, [r3, #18]
 800aa7c:	2a02      	cmp	r2, #2
 800aa7e:	d00a      	beq.n	800aa96 <get_glyph_dsc_id+0x56>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800aa80:	b992      	cbnz	r2, 800aaa8 <get_glyph_dsc_id+0x68>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 800aa82:	68da      	ldr	r2, [r3, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800aa84:	88db      	ldrh	r3, [r3, #6]
 800aa86:	5c10      	ldrb	r0, [r2, r0]
 800aa88:	4418      	add	r0, r3
 800aa8a:	e006      	b.n	800aa9a <get_glyph_dsc_id+0x5a>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	e009      	b.n	800aaa4 <get_glyph_dsc_id+0x64>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800aa90:	3201      	adds	r2, #1
 800aa92:	b292      	uxth	r2, r2
 800aa94:	e7e1      	b.n	800aa5a <get_glyph_dsc_id+0x1a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800aa96:	88db      	ldrh	r3, [r3, #6]
 800aa98:	4418      	add	r0, r3
        if(fdsc->cache) {
 800aa9a:	6963      	ldr	r3, [r4, #20]
 800aa9c:	b113      	cbz	r3, 800aaa4 <get_glyph_dsc_id+0x64>
            fdsc->cache->last_letter = letter;
 800aa9e:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 800aaa0:	6963      	ldr	r3, [r4, #20]
 800aaa2:	6058      	str	r0, [r3, #4]
}
 800aaa4:	b005      	add	sp, #20
 800aaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800aaa8:	2a03      	cmp	r2, #3
 800aaaa:	d003      	beq.n	800aab4 <get_glyph_dsc_id+0x74>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 800aaac:	2a01      	cmp	r2, #1
 800aaae:	d018      	beq.n	800aae2 <get_glyph_dsc_id+0xa2>
        uint32_t glyph_id = 0;
 800aab0:	2000      	movs	r0, #0
 800aab2:	e7f2      	b.n	800aa9a <get_glyph_dsc_id+0x5a>
            uint16_t key = rcp;
 800aab4:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800aab8:	6899      	ldr	r1, [r3, #8]
 800aaba:	8a1a      	ldrh	r2, [r3, #16]
 800aabc:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <get_glyph_dsc_id+0xe8>)
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	2302      	movs	r3, #2
 800aac2:	f10d 000e 	add.w	r0, sp, #14
 800aac6:	f002 ff00 	bl	800d8ca <_lv_utils_bsearch>
            if(p) {
 800aaca:	4602      	mov	r2, r0
 800aacc:	b138      	cbz	r0, 800aade <get_glyph_dsc_id+0x9e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	441e      	add	r6, r3
 800aad2:	68b0      	ldr	r0, [r6, #8]
 800aad4:	1a12      	subs	r2, r2, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800aad6:	88f0      	ldrh	r0, [r6, #6]
 800aad8:	eb00 0062 	add.w	r0, r0, r2, asr #1
 800aadc:	e7dd      	b.n	800aa9a <get_glyph_dsc_id+0x5a>
        uint32_t glyph_id = 0;
 800aade:	2000      	movs	r0, #0
 800aae0:	e7db      	b.n	800aa9a <get_glyph_dsc_id+0x5a>
            uint16_t key = rcp;
 800aae2:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800aae6:	6899      	ldr	r1, [r3, #8]
 800aae8:	8a1a      	ldrh	r2, [r3, #16]
 800aaea:	4b0f      	ldr	r3, [pc, #60]	; (800ab28 <get_glyph_dsc_id+0xe8>)
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	2302      	movs	r3, #2
 800aaf0:	f10d 000e 	add.w	r0, sp, #14
 800aaf4:	f002 fee9 	bl	800d8ca <_lv_utils_bsearch>
            if(p) {
 800aaf8:	b140      	cbz	r0, 800ab0c <get_glyph_dsc_id+0xcc>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	441e      	add	r6, r3
 800aafe:	68b3      	ldr	r3, [r6, #8]
 800ab00:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 800ab02:	68f3      	ldr	r3, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800ab04:	88f0      	ldrh	r0, [r6, #6]
 800ab06:	5a9b      	ldrh	r3, [r3, r2]
 800ab08:	4418      	add	r0, r3
 800ab0a:	e7c6      	b.n	800aa9a <get_glyph_dsc_id+0x5a>
        uint32_t glyph_id = 0;
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e7c4      	b.n	800aa9a <get_glyph_dsc_id+0x5a>
 800ab10:	2200      	movs	r2, #0
 800ab12:	e7a2      	b.n	800aa5a <get_glyph_dsc_id+0x1a>
    if(fdsc->cache) {
 800ab14:	b137      	cbz	r7, 800ab24 <get_glyph_dsc_id+0xe4>
        fdsc->cache->last_letter = letter;
 800ab16:	603d      	str	r5, [r7, #0]
        fdsc->cache->last_glyph_id = 0;
 800ab18:	6963      	ldr	r3, [r4, #20]
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	6058      	str	r0, [r3, #4]
 800ab1e:	e7c1      	b.n	800aaa4 <get_glyph_dsc_id+0x64>
    if(letter == '\0') return 0;
 800ab20:	4608      	mov	r0, r1
 800ab22:	e7bf      	b.n	800aaa4 <get_glyph_dsc_id+0x64>
    return 0;
 800ab24:	2000      	movs	r0, #0
 800ab26:	e7bd      	b.n	800aaa4 <get_glyph_dsc_id+0x64>
 800ab28:	0800aa39 	.word	0x0800aa39

0800ab2c <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 800ab2c:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
 800ab2e:	7cd8      	ldrb	r0, [r3, #19]
 800ab30:	f010 0f20 	tst.w	r0, #32
 800ab34:	d139      	bne.n	800abaa <get_kern_value+0x7e>
{
 800ab36:	b530      	push	{r4, r5, lr}
 800ab38:	b085      	sub	sp, #20
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 800ab3a:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
 800ab3c:	7ae3      	ldrb	r3, [r4, #11]
 800ab3e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 800ab42:	d004      	beq.n	800ab4e <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
 800ab44:	2b40      	cmp	r3, #64	; 0x40
 800ab46:	d01a      	beq.n	800ab7e <get_kern_value+0x52>
    int8_t value = 0;
 800ab48:	2000      	movs	r0, #0
}
 800ab4a:	b005      	add	sp, #20
 800ab4c:	bd30      	pop	{r4, r5, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
 800ab4e:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800ab50:	0212      	lsls	r2, r2, #8
 800ab52:	b293      	uxth	r3, r2
 800ab54:	185a      	adds	r2, r3, r1
 800ab56:	f8ad 200c 	strh.w	r2, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800ab5a:	68a2      	ldr	r2, [r4, #8]
 800ab5c:	4b1c      	ldr	r3, [pc, #112]	; (800abd0 <get_kern_value+0xa4>)
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	2302      	movs	r3, #2
 800ab62:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800ab66:	4629      	mov	r1, r5
 800ab68:	a803      	add	r0, sp, #12
 800ab6a:	f002 feae 	bl	800d8ca <_lv_utils_bsearch>
            if(kid_p) {
 800ab6e:	b120      	cbz	r0, 800ab7a <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
 800ab70:	1b43      	subs	r3, r0, r5
 800ab72:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 800ab74:	6862      	ldr	r2, [r4, #4]
 800ab76:	56d0      	ldrsb	r0, [r2, r3]
 800ab78:	e7e7      	b.n	800ab4a <get_kern_value+0x1e>
    int8_t value = 0;
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	e7e5      	b.n	800ab4a <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
 800ab7e:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 800ab80:	eb01 4202 	add.w	r2, r1, r2, lsl #16
 800ab84:	9203      	str	r2, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800ab86:	68a2      	ldr	r2, [r4, #8]
 800ab88:	4b12      	ldr	r3, [pc, #72]	; (800abd4 <get_kern_value+0xa8>)
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800ab92:	4629      	mov	r1, r5
 800ab94:	a803      	add	r0, sp, #12
 800ab96:	f002 fe98 	bl	800d8ca <_lv_utils_bsearch>
            if(kid_p) {
 800ab9a:	b120      	cbz	r0, 800aba6 <get_kern_value+0x7a>
                lv_uintptr_t ofs = kid_p - g_ids;
 800ab9c:	1b43      	subs	r3, r0, r5
 800ab9e:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
 800aba0:	6862      	ldr	r2, [r4, #4]
 800aba2:	56d0      	ldrsb	r0, [r2, r3]
 800aba4:	e7d1      	b.n	800ab4a <get_kern_value+0x1e>
    int8_t value = 0;
 800aba6:	2000      	movs	r0, #0
 800aba8:	e7cf      	b.n	800ab4a <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 800abaa:	68db      	ldr	r3, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800abac:	6858      	ldr	r0, [r3, #4]
 800abae:	5c41      	ldrb	r1, [r0, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 800abb0:	6898      	ldr	r0, [r3, #8]
 800abb2:	5c82      	ldrb	r2, [r0, r2]
        if(left_class > 0 && right_class > 0) {
 800abb4:	b141      	cbz	r1, 800abc8 <get_kern_value+0x9c>
 800abb6:	b14a      	cbz	r2, 800abcc <get_kern_value+0xa0>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 800abb8:	6818      	ldr	r0, [r3, #0]
 800abba:	3901      	subs	r1, #1
 800abbc:	7b5b      	ldrb	r3, [r3, #13]
 800abbe:	3a01      	subs	r2, #1
 800abc0:	fb03 2201 	mla	r2, r3, r1, r2
 800abc4:	5680      	ldrsb	r0, [r0, r2]
 800abc6:	4770      	bx	lr
    int8_t value = 0;
 800abc8:	2000      	movs	r0, #0
 800abca:	4770      	bx	lr
 800abcc:	2000      	movs	r0, #0
}
 800abce:	4770      	bx	lr
 800abd0:	0800aa11 	.word	0x0800aa11
 800abd4:	0800aa25 	.word	0x0800aa25

0800abd8 <lv_font_get_bitmap_fmt_txt>:
{
 800abd8:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800abda:	2909      	cmp	r1, #9
 800abdc:	d010      	beq.n	800ac00 <lv_font_get_bitmap_fmt_txt+0x28>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 800abde:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 800abe0:	f7ff ff2e 	bl	800aa40 <get_glyph_dsc_id>
    if(!gid) return NULL;
 800abe4:	4602      	mov	r2, r0
 800abe6:	b168      	cbz	r0, 800ac04 <lv_font_get_bitmap_fmt_txt+0x2c>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800abe8:	6861      	ldr	r1, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800abea:	7ce3      	ldrb	r3, [r4, #19]
 800abec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800abf0:	d10a      	bne.n	800ac08 <lv_font_get_bitmap_fmt_txt+0x30>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800abf2:	6820      	ldr	r0, [r4, #0]
 800abf4:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
 800abf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abfc:	4418      	add	r0, r3
}
 800abfe:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800ac00:	2120      	movs	r1, #32
 800ac02:	e7ec      	b.n	800abde <lv_font_get_bitmap_fmt_txt+0x6>
    if(!gid) return NULL;
 800ac04:	2000      	movs	r0, #0
 800ac06:	e7fa      	b.n	800abfe <lv_font_get_bitmap_fmt_txt+0x26>
        return NULL;
 800ac08:	2000      	movs	r0, #0
 800ac0a:	e7f8      	b.n	800abfe <lv_font_get_bitmap_fmt_txt+0x26>

0800ac0c <lv_font_get_glyph_dsc_fmt_txt>:
{
 800ac0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac10:	4607      	mov	r7, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	4615      	mov	r5, r2
 800ac16:	4699      	mov	r9, r3
    if(is_tab) {
 800ac18:	2a09      	cmp	r2, #9
 800ac1a:	d011      	beq.n	800ac40 <lv_font_get_glyph_dsc_fmt_txt+0x34>
 800ac1c:	4611      	mov	r1, r2
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 800ac1e:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 800ac20:	4638      	mov	r0, r7
 800ac22:	f7ff ff0d 	bl	800aa40 <get_glyph_dsc_id>
    if(!gid) return false;
 800ac26:	4680      	mov	r8, r0
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d042      	beq.n	800acb2 <lv_font_get_glyph_dsc_fmt_txt+0xa6>
    if(fdsc->kern_dsc) {
 800ac2c:	68f3      	ldr	r3, [r6, #12]
 800ac2e:	b17b      	cbz	r3, 800ac50 <lv_font_get_glyph_dsc_fmt_txt+0x44>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 800ac30:	4649      	mov	r1, r9
 800ac32:	4638      	mov	r0, r7
 800ac34:	f7ff ff04 	bl	800aa40 <get_glyph_dsc_id>
        if(gid_next) {
 800ac38:	4602      	mov	r2, r0
 800ac3a:	b918      	cbnz	r0, 800ac44 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t kvalue = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e008      	b.n	800ac52 <lv_font_get_glyph_dsc_fmt_txt+0x46>
        unicode_letter = ' ';
 800ac40:	2120      	movs	r1, #32
 800ac42:	e7ec      	b.n	800ac1e <lv_font_get_glyph_dsc_fmt_txt+0x12>
            kvalue = get_kern_value(font, gid, gid_next);
 800ac44:	4641      	mov	r1, r8
 800ac46:	4638      	mov	r0, r7
 800ac48:	f7ff ff70 	bl	800ab2c <get_kern_value>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	e000      	b.n	800ac52 <lv_font_get_glyph_dsc_fmt_txt+0x46>
    int8_t kvalue = 0;
 800ac50:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800ac52:	6871      	ldr	r1, [r6, #4]
 800ac54:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800ac58:	8a30      	ldrh	r0, [r6, #16]
 800ac5a:	fb00 f303 	mul.w	r3, r0, r3
 800ac5e:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 800ac60:	884a      	ldrh	r2, [r1, #2]
 800ac62:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
 800ac66:	2d09      	cmp	r5, #9
 800ac68:	d01d      	beq.n	800aca6 <lv_font_get_glyph_dsc_fmt_txt+0x9a>
    adv_w += kv;
 800ac6a:	4413      	add	r3, r2
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800ac70:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 800ac72:	794b      	ldrb	r3, [r1, #5]
 800ac74:	8123      	strh	r3, [r4, #8]
    dsc_out->box_w = gdsc->box_w;
 800ac76:	790a      	ldrb	r2, [r1, #4]
 800ac78:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 800ac7a:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800ac7e:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 800ac80:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800ac84:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800ac86:	7cf3      	ldrb	r3, [r6, #19]
 800ac88:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800ac8c:	7ba1      	ldrb	r1, [r4, #14]
 800ac8e:	f363 0103 	bfi	r1, r3, #0, #4
 800ac92:	73a1      	strb	r1, [r4, #14]
    dsc_out->is_placeholder = false;
 800ac94:	b2cb      	uxtb	r3, r1
 800ac96:	f36f 1304 	bfc	r3, #4, #1
 800ac9a:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 800ac9c:	2d09      	cmp	r5, #9
 800ac9e:	d004      	beq.n	800acaa <lv_font_get_glyph_dsc_fmt_txt+0x9e>
    return true;
 800aca0:	2001      	movs	r0, #1
}
 800aca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(is_tab) adv_w *= 2;
 800aca6:	0052      	lsls	r2, r2, #1
 800aca8:	e7df      	b.n	800ac6a <lv_font_get_glyph_dsc_fmt_txt+0x5e>
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 800acaa:	0052      	lsls	r2, r2, #1
 800acac:	80e2      	strh	r2, [r4, #6]
    return true;
 800acae:	2001      	movs	r0, #1
 800acb0:	e7f7      	b.n	800aca2 <lv_font_get_glyph_dsc_fmt_txt+0x96>
    if(!gid) return false;
 800acb2:	2000      	movs	r0, #0
 800acb4:	e7f5      	b.n	800aca2 <lv_font_get_glyph_dsc_fmt_txt+0x96>

0800acb6 <_lv_font_clean_up_fmt_txt>:
}
 800acb6:	4770      	bx	lr

0800acb8 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	4604      	mov	r4, r0
 800acbc:	460d      	mov	r5, r1
 800acbe:	4617      	mov	r7, r2
 800acc0:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 800acc2:	211c      	movs	r1, #28
 800acc4:	f001 fb1d 	bl	800c302 <lv_memset_00>

    draw_buf->buf1    = buf1;
 800acc8:	6025      	str	r5, [r4, #0]
    draw_buf->buf2    = buf2;
 800acca:	6067      	str	r7, [r4, #4]
    draw_buf->buf_act = draw_buf->buf1;
 800accc:	60a5      	str	r5, [r4, #8]
    draw_buf->size    = size_in_px_cnt;
 800acce:	60e6      	str	r6, [r4, #12]
}
 800acd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acd4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800acd8:	483d      	ldr	r0, [pc, #244]	; (800add0 <lv_disp_drv_register+0xfc>)
 800acda:	f001 f817 	bl	800bd0c <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(disp);
 800acde:	2800      	cmp	r0, #0
 800ace0:	d066      	beq.n	800adb0 <lv_disp_drv_register+0xdc>
 800ace2:	4604      	mov	r4, r0
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 800ace4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d063      	beq.n	800adb2 <lv_disp_drv_register+0xde>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
        driver->draw_ctx = draw_ctx;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 800acea:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800acee:	4620      	mov	r0, r4
 800acf0:	f001 fb07 	bl	800c302 <lv_memset_00>

    disp->driver = driver;
 800acf4:	6025      	str	r5, [r4, #0]

    disp->inv_en_cnt = 1;
 800acf6:	2301      	movs	r3, #1
 800acf8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154

    _lv_ll_init(&disp->sync_areas, sizeof(lv_area_t));
 800acfc:	2108      	movs	r1, #8
 800acfe:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 800ad02:	f000 fffb 	bl	800bcfc <_lv_ll_init>

    lv_disp_t * disp_def_tmp = disp_def;
 800ad06:	4b33      	ldr	r3, [pc, #204]	; (800add4 <lv_disp_drv_register+0x100>)
 800ad08:	691e      	ldr	r6, [r3, #16]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800ad0a:	611c      	str	r4, [r3, #16]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	2114      	movs	r1, #20
 800ad10:	4831      	ldr	r0, [pc, #196]	; (800add8 <lv_disp_drv_register+0x104>)
 800ad12:	f001 fd7b 	bl	800c80c <lv_timer_create>
 800ad16:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d056      	beq.n	800adca <lv_disp_drv_register+0xf6>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 800ad1c:	7c2b      	ldrb	r3, [r5, #16]
 800ad1e:	f013 0f02 	tst.w	r3, #2
 800ad22:	d00d      	beq.n	800ad40 <lv_disp_drv_register+0x6c>
 800ad24:	68eb      	ldr	r3, [r5, #12]
 800ad26:	68da      	ldr	r2, [r3, #12]
 800ad28:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ad2c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800ad30:	fb01 f303 	mul.w	r3, r1, r3
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d203      	bcs.n	800ad40 <lv_disp_drv_register+0x6c>
        driver->full_refresh = 0;
 800ad38:	7c2b      	ldrb	r3, [r5, #16]
 800ad3a:	f36f 0341 	bfc	r3, #1, #1
 800ad3e:	742b      	strb	r3, [r5, #16]
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800ad40:	f64f 73ff 	movw	r3, #65535	; 0xffff
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 800ad44:	8563      	strh	r3, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 800ad46:	23ff      	movs	r3, #255	; 0xff
 800ad48:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f7f7 fe33 	bl	80029b8 <lv_obj_create>
 800ad52:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 800ad54:	2000      	movs	r0, #0
 800ad56:	f7f7 fe2f 	bl	80029b8 <lv_obj_create>
 800ad5a:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	f7f7 fe2b 	bl	80029b8 <lv_obj_create>
 800ad62:	6220      	str	r0, [r4, #32]
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, (lv_style_selector_t)LV_PART_ANY | (lv_style_selector_t)LV_STATE_ANY);
 800ad64:	4d1d      	ldr	r5, [pc, #116]	; (800addc <lv_disp_drv_register+0x108>)
 800ad66:	462a      	mov	r2, r5
 800ad68:	2100      	movs	r1, #0
 800ad6a:	69e0      	ldr	r0, [r4, #28]
 800ad6c:	f7fb fd5e 	bl	800682c <lv_obj_remove_style>
 800ad70:	462a      	mov	r2, r5
 800ad72:	2100      	movs	r1, #0
 800ad74:	6a20      	ldr	r0, [r4, #32]
 800ad76:	f7fb fd59 	bl	800682c <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 800ad7a:	2102      	movs	r1, #2
 800ad7c:	69e0      	ldr	r0, [r4, #28]
 800ad7e:	f7f7 fe27 	bl	80029d0 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 800ad82:	2102      	movs	r1, #2
 800ad84:	6a20      	ldr	r0, [r4, #32]
 800ad86:	f7f7 fe23 	bl	80029d0 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	69e0      	ldr	r0, [r4, #28]
 800ad8e:	f7f9 fe30 	bl	80049f2 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 800ad92:	2100      	movs	r1, #0
 800ad94:	6a20      	ldr	r0, [r4, #32]
 800ad96:	f7f9 fe2c 	bl	80049f2 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 800ad9a:	6920      	ldr	r0, [r4, #16]
 800ad9c:	f7f9 f967 	bl	800406e <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 800ada0:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <lv_disp_drv_register+0x100>)
 800ada2:	611e      	str	r6, [r3, #16]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 800ada4:	b196      	cbz	r6, 800adcc <lv_disp_drv_register+0xf8>

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 800ada6:	6860      	ldr	r0, [r4, #4]
 800ada8:	f001 fe22 	bl	800c9f0 <lv_timer_ready>

    return disp;
}
 800adac:	4620      	mov	r0, r4
 800adae:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(disp);
 800adb0:	e7fe      	b.n	800adb0 <lv_disp_drv_register+0xdc>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 800adb2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800adb4:	f001 f928 	bl	800c008 <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 800adb8:	4606      	mov	r6, r0
 800adba:	b128      	cbz	r0, 800adc8 <lv_disp_drv_register+0xf4>
        driver->draw_ctx_init(driver, draw_ctx);
 800adbc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800adbe:	4601      	mov	r1, r0
 800adc0:	4628      	mov	r0, r5
 800adc2:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 800adc4:	63ee      	str	r6, [r5, #60]	; 0x3c
 800adc6:	e790      	b.n	800acea <lv_disp_drv_register+0x16>
        LV_ASSERT_MALLOC(draw_ctx);
 800adc8:	e7fe      	b.n	800adc8 <lv_disp_drv_register+0xf4>
    LV_ASSERT_MALLOC(disp->refr_timer);
 800adca:	e7fe      	b.n	800adca <lv_disp_drv_register+0xf6>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 800adcc:	611c      	str	r4, [r3, #16]
 800adce:	e7ea      	b.n	800ada6 <lv_disp_drv_register+0xd2>
 800add0:	20000bb4 	.word	0x20000bb4
 800add4:	20000b74 	.word	0x20000b74
 800add8:	08007dd5 	.word	0x08007dd5
 800addc:	000fffff 	.word	0x000fffff

0800ade0 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 800ade0:	4b01      	ldr	r3, [pc, #4]	; (800ade8 <lv_disp_get_default+0x8>)
 800ade2:	6918      	ldr	r0, [r3, #16]
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	20000b74 	.word	0x20000b74

0800adec <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 800adec:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 800adee:	4603      	mov	r3, r0
 800adf0:	b158      	cbz	r0, 800ae0a <lv_disp_get_hor_res+0x1e>

    if(disp == NULL) {
 800adf2:	b18b      	cbz	r3, 800ae18 <lv_disp_get_hor_res+0x2c>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	7c13      	ldrb	r3, [r2, #16]
 800adf8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d008      	beq.n	800ae12 <lv_disp_get_hor_res+0x26>
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d006      	beq.n	800ae12 <lv_disp_get_hor_res+0x26>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
            default:
                return disp->driver->hor_res;
 800ae04:	f9b2 0000 	ldrsh.w	r0, [r2]
 800ae08:	e005      	b.n	800ae16 <lv_disp_get_hor_res+0x2a>
    if(disp == NULL) disp = lv_disp_get_default();
 800ae0a:	f7ff ffe9 	bl	800ade0 <lv_disp_get_default>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	e7ef      	b.n	800adf2 <lv_disp_get_hor_res+0x6>
                return disp->driver->ver_res;
 800ae12:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
        }
    }
}
 800ae16:	bd08      	pop	{r3, pc}
        return 0;
 800ae18:	2000      	movs	r0, #0
 800ae1a:	e7fc      	b.n	800ae16 <lv_disp_get_hor_res+0x2a>

0800ae1c <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 800ae1c:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 800ae1e:	4603      	mov	r3, r0
 800ae20:	b158      	cbz	r0, 800ae3a <lv_disp_get_ver_res+0x1e>

    if(disp == NULL) {
 800ae22:	b18b      	cbz	r3, 800ae48 <lv_disp_get_ver_res+0x2c>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	7c13      	ldrb	r3, [r2, #16]
 800ae28:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d008      	beq.n	800ae42 <lv_disp_get_ver_res+0x26>
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d006      	beq.n	800ae42 <lv_disp_get_ver_res+0x26>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
            default:
                return disp->driver->ver_res;
 800ae34:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800ae38:	e005      	b.n	800ae46 <lv_disp_get_ver_res+0x2a>
    if(disp == NULL) disp = lv_disp_get_default();
 800ae3a:	f7ff ffd1 	bl	800ade0 <lv_disp_get_default>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	e7ef      	b.n	800ae22 <lv_disp_get_ver_res+0x6>
                return disp->driver->hor_res;
 800ae42:	f9b2 0000 	ldrsh.w	r0, [r2]
        }
    }
}
 800ae46:	bd08      	pop	{r3, pc}
        return 0;
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e7fc      	b.n	800ae46 <lv_disp_get_ver_res+0x2a>

0800ae4c <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 800ae4c:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 800ae4e:	4603      	mov	r3, r0
 800ae50:	b128      	cbz	r0, 800ae5e <lv_disp_get_dpi+0x12>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 800ae52:	b143      	cbz	r3, 800ae66 <lv_disp_get_dpi+0x1a>
    return disp->driver->dpi;
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6918      	ldr	r0, [r3, #16]
 800ae58:	f3c0 10c9 	ubfx	r0, r0, #7, #10
}
 800ae5c:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 800ae5e:	f7ff ffbf 	bl	800ade0 <lv_disp_get_default>
 800ae62:	4603      	mov	r3, r0
 800ae64:	e7f5      	b.n	800ae52 <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 800ae66:	2082      	movs	r0, #130	; 0x82
 800ae68:	e7f8      	b.n	800ae5c <lv_disp_get_dpi+0x10>

0800ae6a <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
void LV_ATTRIBUTE_FLUSH_READY lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->draw_buf->flushing = 0;
 800ae6a:	68c2      	ldr	r2, [r0, #12]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	6113      	str	r3, [r2, #16]
    disp_drv->draw_buf->flushing_last = 0;
 800ae70:	68c2      	ldr	r2, [r0, #12]
 800ae72:	6153      	str	r3, [r2, #20]
}
 800ae74:	4770      	bx	lr

0800ae76 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 800ae76:	6803      	ldr	r3, [r0, #0]
}
 800ae78:	68d8      	ldr	r0, [r3, #12]
 800ae7a:	4770      	bx	lr

0800ae7c <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800ae7c:	b508      	push	{r3, lr}
    if(indev == NULL)
 800ae7e:	b120      	cbz	r0, 800ae8a <lv_indev_get_next+0xe>
 800ae80:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800ae82:	4804      	ldr	r0, [pc, #16]	; (800ae94 <lv_indev_get_next+0x18>)
 800ae84:	f000 ff88 	bl	800bd98 <_lv_ll_get_next>
}
 800ae88:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800ae8a:	4802      	ldr	r0, [pc, #8]	; (800ae94 <lv_indev_get_next+0x18>)
 800ae8c:	f000 ff7c 	bl	800bd88 <_lv_ll_get_head>
 800ae90:	e7fa      	b.n	800ae88 <lv_indev_get_next+0xc>
 800ae92:	bf00      	nop
 800ae94:	20000bc0 	.word	0x20000bc0

0800ae98 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
void LV_ATTRIBUTE_TICK_INC lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800ae98:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <lv_tick_inc+0x10>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	4402      	add	r2, r0
 800aea2:	605a      	str	r2, [r3, #4]
}
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	20000b88 	.word	0x20000b88

0800aeac <lv_tick_get>:
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800aeac:	4b03      	ldr	r3, [pc, #12]	; (800aebc <lv_tick_get+0x10>)
 800aeae:	2201      	movs	r2, #1
 800aeb0:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 800aeb2:	6858      	ldr	r0, [r3, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0f8      	beq.n	800aeac <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800aeba:	4770      	bx	lr
 800aebc:	20000b88 	.word	0x20000b88

0800aec0 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800aec0:	b510      	push	{r4, lr}
 800aec2:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800aec4:	f7ff fff2 	bl	800aeac <lv_tick_get>

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 800aec8:	42a0      	cmp	r0, r4
 800aeca:	d301      	bcc.n	800aed0 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
 800aecc:	1b00      	subs	r0, r0, r4
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800aece:	bd10      	pop	{r4, pc}
        prev_tick += act_time;
 800aed0:	1b00      	subs	r0, r0, r4
    return prev_tick;
 800aed2:	e7fc      	b.n	800aece <lv_tick_elaps+0xe>

0800aed4 <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 800aed4:	b508      	push	{r3, lr}
    anim_list_changed = true;
 800aed6:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <anim_mark_list_change+0x24>)
 800aed8:	2201      	movs	r2, #1
 800aeda:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 800aedc:	4807      	ldr	r0, [pc, #28]	; (800aefc <anim_mark_list_change+0x28>)
 800aede:	f000 ff53 	bl	800bd88 <_lv_ll_get_head>
 800aee2:	b120      	cbz	r0, 800aeee <anim_mark_list_change+0x1a>
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
 800aee4:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <anim_mark_list_change+0x24>)
 800aee6:	6858      	ldr	r0, [r3, #4]
 800aee8:	f001 fd7d 	bl	800c9e6 <lv_timer_resume>
}
 800aeec:	bd08      	pop	{r3, pc}
        lv_timer_pause(_lv_anim_tmr);
 800aeee:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <anim_mark_list_change+0x24>)
 800aef0:	6858      	ldr	r0, [r3, #4]
 800aef2:	f001 fd73 	bl	800c9dc <lv_timer_pause>
 800aef6:	e7f9      	b.n	800aeec <anim_mark_list_change+0x18>
 800aef8:	20000b90 	.word	0x20000b90
 800aefc:	20000bd8 	.word	0x20000bd8

0800af00 <anim_ready_handler>:
{
 800af00:	b510      	push	{r4, lr}
 800af02:	4604      	mov	r4, r0
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 800af04:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800af08:	f013 0302 	ands.w	r3, r3, #2
 800af0c:	d109      	bne.n	800af22 <anim_ready_handler+0x22>
 800af0e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800af12:	b132      	cbz	r2, 800af22 <anim_ready_handler+0x22>
 800af14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af18:	428a      	cmp	r2, r1
 800af1a:	d002      	beq.n	800af22 <anim_ready_handler+0x22>
        a->repeat_cnt--;
 800af1c:	3a01      	subs	r2, #1
 800af1e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 800af22:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800af26:	b9a2      	cbnz	r2, 800af52 <anim_ready_handler+0x52>
 800af28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800af2a:	b102      	cbz	r2, 800af2e <anim_ready_handler+0x2e>
 800af2c:	b18b      	cbz	r3, 800af52 <anim_ready_handler+0x52>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800af2e:	4621      	mov	r1, r4
 800af30:	4815      	ldr	r0, [pc, #84]	; (800af88 <anim_ready_handler+0x88>)
 800af32:	f000 ff6b 	bl	800be0c <_lv_ll_remove>
        anim_mark_list_change();
 800af36:	f7ff ffcd 	bl	800aed4 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 800af3a:	68e3      	ldr	r3, [r4, #12]
 800af3c:	b10b      	cbz	r3, 800af42 <anim_ready_handler+0x42>
 800af3e:	4620      	mov	r0, r4
 800af40:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	b10b      	cbz	r3, 800af4a <anim_ready_handler+0x4a>
 800af46:	4620      	mov	r0, r4
 800af48:	4798      	blx	r3
        lv_mem_free(a);
 800af4a:	4620      	mov	r0, r4
 800af4c:	f001 f87a 	bl	800c044 <lv_mem_free>
 800af50:	e018      	b.n	800af84 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 800af52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800af54:	4252      	negs	r2, r2
 800af56:	6322      	str	r2, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 800af58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800af5a:	b19a      	cbz	r2, 800af84 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 800af5c:	b913      	cbnz	r3, 800af64 <anim_ready_handler+0x64>
 800af5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af60:	4249      	negs	r1, r1
 800af62:	6321      	str	r1, [r4, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800af64:	fab3 f383 	clz	r3, r3
 800af68:	095b      	lsrs	r3, r3, #5
 800af6a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 800af6e:	f363 0141 	bfi	r1, r3, #1, #1
 800af72:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
            int32_t tmp    = a->start_value;
 800af76:	6a23      	ldr	r3, [r4, #32]
            a->start_value = a->end_value;
 800af78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800af7a:	6221      	str	r1, [r4, #32]
            a->end_value   = tmp;
 800af7c:	62a3      	str	r3, [r4, #40]	; 0x28
            tmp = a->time;
 800af7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            a->time = a->playback_time;
 800af80:	62e2      	str	r2, [r4, #44]	; 0x2c
            a->playback_time = tmp;
 800af82:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800af84:	bd10      	pop	{r4, pc}
 800af86:	bf00      	nop
 800af88:	20000bd8 	.word	0x20000bd8

0800af8c <anim_timer>:
{
 800af8c:	b538      	push	{r3, r4, r5, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 800af8e:	4c3a      	ldr	r4, [pc, #232]	; (800b078 <anim_timer+0xec>)
 800af90:	68a0      	ldr	r0, [r4, #8]
 800af92:	f7ff ff95 	bl	800aec0 <lv_tick_elaps>
 800af96:	4605      	mov	r5, r0
    anim_run_round = anim_run_round ? false : true;
 800af98:	7b23      	ldrb	r3, [r4, #12]
 800af9a:	f083 0301 	eor.w	r3, r3, #1
 800af9e:	7323      	strb	r3, [r4, #12]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800afa0:	4836      	ldr	r0, [pc, #216]	; (800b07c <anim_timer+0xf0>)
 800afa2:	f000 fef1 	bl	800bd88 <_lv_ll_get_head>
 800afa6:	4604      	mov	r4, r0
    while(a != NULL) {
 800afa8:	e025      	b.n	800aff6 <anim_timer+0x6a>
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 800afaa:	2900      	cmp	r1, #0
 800afac:	db3e      	blt.n	800b02c <anim_timer+0xa0>
                if(a->early_apply == 0 && a->get_value_cb) {
 800afae:	f012 0f01 	tst.w	r2, #1
 800afb2:	d109      	bne.n	800afc8 <anim_timer+0x3c>
 800afb4:	6963      	ldr	r3, [r4, #20]
 800afb6:	b13b      	cbz	r3, 800afc8 <anim_timer+0x3c>
                    int32_t v_ofs = a->get_value_cb(a);
 800afb8:	4620      	mov	r0, r4
 800afba:	4798      	blx	r3
                    a->start_value += v_ofs;
 800afbc:	6a23      	ldr	r3, [r4, #32]
 800afbe:	4403      	add	r3, r0
 800afc0:	6223      	str	r3, [r4, #32]
                    a->end_value += v_ofs;
 800afc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afc4:	4418      	add	r0, r3
 800afc6:	62a0      	str	r0, [r4, #40]	; 0x28
                if(a->start_cb) a->start_cb(a);
 800afc8:	68a3      	ldr	r3, [r4, #8]
 800afca:	b10b      	cbz	r3, 800afd0 <anim_timer+0x44>
 800afcc:	4620      	mov	r0, r4
 800afce:	4798      	blx	r3
                a->start_cb_called = 1;
 800afd0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800afd4:	f043 0308 	orr.w	r3, r3, #8
 800afd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afdc:	e026      	b.n	800b02c <anim_timer+0xa0>
                if(a->act_time >= a->time) {
 800afde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800afe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800afe2:	429a      	cmp	r2, r3
 800afe4:	da39      	bge.n	800b05a <anim_timer+0xce>
        if(anim_list_changed)
 800afe6:	4b24      	ldr	r3, [pc, #144]	; (800b078 <anim_timer+0xec>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d039      	beq.n	800b062 <anim_timer+0xd6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800afee:	4823      	ldr	r0, [pc, #140]	; (800b07c <anim_timer+0xf0>)
 800aff0:	f000 feca 	bl	800bd88 <_lv_ll_get_head>
 800aff4:	4604      	mov	r4, r0
    while(a != NULL) {
 800aff6:	2c00      	cmp	r4, #0
 800aff8:	d039      	beq.n	800b06e <anim_timer+0xe2>
        anim_list_changed = false;
 800affa:	4a1f      	ldr	r2, [pc, #124]	; (800b078 <anim_timer+0xec>)
 800affc:	2300      	movs	r3, #0
 800affe:	7013      	strb	r3, [r2, #0]
        if(a->run_round != anim_run_round) {
 800b000:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b004:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b008:	7b12      	ldrb	r2, [r2, #12]
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d0eb      	beq.n	800afe6 <anim_timer+0x5a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 800b00e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b012:	f362 0382 	bfi	r3, r2, #2, #1
 800b016:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            int32_t new_act_time = a->act_time + elaps;
 800b01a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b01c:	1959      	adds	r1, r3, r5
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 800b01e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800b022:	f012 0f08 	tst.w	r2, #8
 800b026:	d101      	bne.n	800b02c <anim_timer+0xa0>
 800b028:	2b00      	cmp	r3, #0
 800b02a:	ddbe      	ble.n	800afaa <anim_timer+0x1e>
            a->act_time += elaps;
 800b02c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b02e:	442b      	add	r3, r5
 800b030:	6323      	str	r3, [r4, #48]	; 0x30
            if(a->act_time >= 0) {
 800b032:	2b00      	cmp	r3, #0
 800b034:	dbd7      	blt.n	800afe6 <anim_timer+0x5a>
                if(a->act_time > a->time) a->act_time = a->time;
 800b036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b038:	4293      	cmp	r3, r2
 800b03a:	dd00      	ble.n	800b03e <anim_timer+0xb2>
 800b03c:	6322      	str	r2, [r4, #48]	; 0x30
                new_value = a->path_cb(a);
 800b03e:	69e3      	ldr	r3, [r4, #28]
 800b040:	4620      	mov	r0, r4
 800b042:	4798      	blx	r3
                if(new_value != a->current_value) {
 800b044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b046:	4283      	cmp	r3, r0
 800b048:	d0c9      	beq.n	800afde <anim_timer+0x52>
                    a->current_value = new_value;
 800b04a:	6260      	str	r0, [r4, #36]	; 0x24
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 800b04c:	6863      	ldr	r3, [r4, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0c5      	beq.n	800afde <anim_timer+0x52>
 800b052:	4601      	mov	r1, r0
 800b054:	6820      	ldr	r0, [r4, #0]
 800b056:	4798      	blx	r3
 800b058:	e7c1      	b.n	800afde <anim_timer+0x52>
                    anim_ready_handler(a);
 800b05a:	4620      	mov	r0, r4
 800b05c:	f7ff ff50 	bl	800af00 <anim_ready_handler>
 800b060:	e7c1      	b.n	800afe6 <anim_timer+0x5a>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800b062:	4621      	mov	r1, r4
 800b064:	4805      	ldr	r0, [pc, #20]	; (800b07c <anim_timer+0xf0>)
 800b066:	f000 fe97 	bl	800bd98 <_lv_ll_get_next>
 800b06a:	4604      	mov	r4, r0
 800b06c:	e7c3      	b.n	800aff6 <anim_timer+0x6a>
    last_timer_run = lv_tick_get();
 800b06e:	f7ff ff1d 	bl	800aeac <lv_tick_get>
 800b072:	4b01      	ldr	r3, [pc, #4]	; (800b078 <anim_timer+0xec>)
 800b074:	6098      	str	r0, [r3, #8]
}
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	20000b90 	.word	0x20000b90
 800b07c:	20000bd8 	.word	0x20000bd8

0800b080 <lv_anim_path_linear>:
{
 800b080:	b510      	push	{r4, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 800b086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2300      	movs	r3, #0
 800b08e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b090:	4619      	mov	r1, r3
 800b092:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b094:	f000 ff87 	bl	800bfa6 <lv_map>
    new_value = step * (a->end_value - a->start_value);
 800b098:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b09a:	6a22      	ldr	r2, [r4, #32]
 800b09c:	1a9b      	subs	r3, r3, r2
 800b09e:	fb03 f000 	mul.w	r0, r3, r0
}
 800b0a2:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 800b0a6:	b002      	add	sp, #8
 800b0a8:	bd10      	pop	{r4, pc}
	...

0800b0ac <_lv_anim_core_init>:
{
 800b0ac:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800b0ae:	2144      	movs	r1, #68	; 0x44
 800b0b0:	4807      	ldr	r0, [pc, #28]	; (800b0d0 <_lv_anim_core_init+0x24>)
 800b0b2:	f000 fe23 	bl	800bcfc <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2114      	movs	r1, #20
 800b0ba:	4806      	ldr	r0, [pc, #24]	; (800b0d4 <_lv_anim_core_init+0x28>)
 800b0bc:	f001 fba6 	bl	800c80c <lv_timer_create>
 800b0c0:	4c05      	ldr	r4, [pc, #20]	; (800b0d8 <_lv_anim_core_init+0x2c>)
 800b0c2:	6060      	str	r0, [r4, #4]
    anim_mark_list_change(); /*Turn off the animation timer*/
 800b0c4:	f7ff ff06 	bl	800aed4 <anim_mark_list_change>
    anim_list_changed = false;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	7023      	strb	r3, [r4, #0]
}
 800b0cc:	bd10      	pop	{r4, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000bd8 	.word	0x20000bd8
 800b0d4:	0800af8d 	.word	0x0800af8d
 800b0d8:	20000b90 	.word	0x20000b90

0800b0dc <lv_anim_init>:
{
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 800b0e0:	2144      	movs	r1, #68	; 0x44
 800b0e2:	f001 f90e 	bl	800c302 <lv_memset_00>
    a->time = 500;
 800b0e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b0ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    a->start_value = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6223      	str	r3, [r4, #32]
    a->end_value = 100;
 800b0f0:	2364      	movs	r3, #100	; 0x64
 800b0f2:	62a3      	str	r3, [r4, #40]	; 0x28
    a->repeat_cnt = 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 800b0fa:	4b04      	ldr	r3, [pc, #16]	; (800b10c <lv_anim_init+0x30>)
 800b0fc:	61e3      	str	r3, [r4, #28]
    a->early_apply = 1;
 800b0fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800b10a:	bd10      	pop	{r4, pc}
 800b10c:	0800b081 	.word	0x0800b081

0800b110 <lv_anim_del>:
{
 800b110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b114:	4606      	mov	r6, r0
 800b116:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800b118:	4815      	ldr	r0, [pc, #84]	; (800b170 <lv_anim_del+0x60>)
 800b11a:	f000 fe35 	bl	800bd88 <_lv_ll_get_head>
 800b11e:	4604      	mov	r4, r0
    bool del = false;
 800b120:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
 800b124:	e004      	b.n	800b130 <lv_anim_del+0x20>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800b126:	6863      	ldr	r3, [r4, #4]
 800b128:	42bb      	cmp	r3, r7
 800b12a:	d00d      	beq.n	800b148 <lv_anim_del+0x38>
 800b12c:	b167      	cbz	r7, 800b148 <lv_anim_del+0x38>
            del = true;
 800b12e:	462c      	mov	r4, r5
    while(a != NULL) {
 800b130:	b1d4      	cbz	r4, 800b168 <lv_anim_del+0x58>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800b132:	4621      	mov	r1, r4
 800b134:	480e      	ldr	r0, [pc, #56]	; (800b170 <lv_anim_del+0x60>)
 800b136:	f000 fe2f 	bl	800bd98 <_lv_ll_get_next>
 800b13a:	4605      	mov	r5, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	42b3      	cmp	r3, r6
 800b140:	d0f1      	beq.n	800b126 <lv_anim_del+0x16>
 800b142:	2e00      	cmp	r6, #0
 800b144:	d1f3      	bne.n	800b12e <lv_anim_del+0x1e>
 800b146:	e7ee      	b.n	800b126 <lv_anim_del+0x16>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800b148:	4621      	mov	r1, r4
 800b14a:	4809      	ldr	r0, [pc, #36]	; (800b170 <lv_anim_del+0x60>)
 800b14c:	f000 fe5e 	bl	800be0c <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	b10b      	cbz	r3, 800b158 <lv_anim_del+0x48>
 800b154:	4620      	mov	r0, r4
 800b156:	4798      	blx	r3
            lv_mem_free(a);
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 ff73 	bl	800c044 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 800b15e:	f7ff feb9 	bl	800aed4 <anim_mark_list_change>
            del = true;
 800b162:	f04f 0801 	mov.w	r8, #1
 800b166:	e7e2      	b.n	800b12e <lv_anim_del+0x1e>
}
 800b168:	4640      	mov	r0, r8
 800b16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b16e:	bf00      	nop
 800b170:	20000bd8 	.word	0x20000bd8

0800b174 <lv_anim_start>:
{
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 800b178:	6841      	ldr	r1, [r0, #4]
 800b17a:	b111      	cbz	r1, 800b182 <lv_anim_start+0xe>
 800b17c:	6800      	ldr	r0, [r0, #0]
 800b17e:	f7ff ffc7 	bl	800b110 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 800b182:	481c      	ldr	r0, [pc, #112]	; (800b1f4 <lv_anim_start+0x80>)
 800b184:	f000 fe9a 	bl	800bebc <_lv_ll_is_empty>
 800b188:	bb58      	cbnz	r0, 800b1e2 <lv_anim_start+0x6e>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800b18a:	481a      	ldr	r0, [pc, #104]	; (800b1f4 <lv_anim_start+0x80>)
 800b18c:	f000 fdbe 	bl	800bd0c <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 800b190:	4605      	mov	r5, r0
 800b192:	b358      	cbz	r0, 800b1ec <lv_anim_start+0x78>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 800b194:	2244      	movs	r2, #68	; 0x44
 800b196:	4621      	mov	r1, r4
 800b198:	f001 f824 	bl	800c1e4 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	42a3      	cmp	r3, r4
 800b1a0:	d025      	beq.n	800b1ee <lv_anim_start+0x7a>
    new_anim->run_round = anim_run_round;
 800b1a2:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800b1a6:	4a14      	ldr	r2, [pc, #80]	; (800b1f8 <lv_anim_start+0x84>)
 800b1a8:	7b12      	ldrb	r2, [r2, #12]
 800b1aa:	f362 0382 	bfi	r3, r2, #2, #1
 800b1ae:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    if(new_anim->early_apply) {
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	f013 0f01 	tst.w	r3, #1
 800b1b8:	d00f      	beq.n	800b1da <lv_anim_start+0x66>
        if(new_anim->get_value_cb) {
 800b1ba:	696b      	ldr	r3, [r5, #20]
 800b1bc:	b13b      	cbz	r3, 800b1ce <lv_anim_start+0x5a>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 800b1be:	4628      	mov	r0, r5
 800b1c0:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 800b1c2:	6a2b      	ldr	r3, [r5, #32]
 800b1c4:	4403      	add	r3, r0
 800b1c6:	622b      	str	r3, [r5, #32]
            new_anim->end_value += v_ofs;
 800b1c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b1ca:	4403      	add	r3, r0
 800b1cc:	62ab      	str	r3, [r5, #40]	; 0x28
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 800b1ce:	686b      	ldr	r3, [r5, #4]
 800b1d0:	b11b      	cbz	r3, 800b1da <lv_anim_start+0x66>
 800b1d2:	6828      	ldr	r0, [r5, #0]
 800b1d4:	b108      	cbz	r0, 800b1da <lv_anim_start+0x66>
 800b1d6:	6a29      	ldr	r1, [r5, #32]
 800b1d8:	4798      	blx	r3
    anim_mark_list_change();
 800b1da:	f7ff fe7b 	bl	800aed4 <anim_mark_list_change>
}
 800b1de:	4628      	mov	r0, r5
 800b1e0:	bd38      	pop	{r3, r4, r5, pc}
        last_timer_run = lv_tick_get();
 800b1e2:	f7ff fe63 	bl	800aeac <lv_tick_get>
 800b1e6:	4b04      	ldr	r3, [pc, #16]	; (800b1f8 <lv_anim_start+0x84>)
 800b1e8:	6098      	str	r0, [r3, #8]
 800b1ea:	e7ce      	b.n	800b18a <lv_anim_start+0x16>
    LV_ASSERT_MALLOC(new_anim);
 800b1ec:	e7fe      	b.n	800b1ec <lv_anim_start+0x78>
    if(a->var == a) new_anim->var = new_anim;
 800b1ee:	602d      	str	r5, [r5, #0]
 800b1f0:	e7d7      	b.n	800b1a2 <lv_anim_start+0x2e>
 800b1f2:	bf00      	nop
 800b1f4:	20000bd8 	.word	0x20000bd8
 800b1f8:	20000b90 	.word	0x20000b90

0800b1fc <lv_anim_get>:
{
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4604      	mov	r4, r0
 800b200:	460d      	mov	r5, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 800b202:	480a      	ldr	r0, [pc, #40]	; (800b22c <lv_anim_get+0x30>)
 800b204:	f000 fdc0 	bl	800bd88 <_lv_ll_get_head>
 800b208:	4601      	mov	r1, r0
 800b20a:	e003      	b.n	800b214 <lv_anim_get+0x18>
 800b20c:	4807      	ldr	r0, [pc, #28]	; (800b22c <lv_anim_get+0x30>)
 800b20e:	f000 fdc3 	bl	800bd98 <_lv_ll_get_next>
 800b212:	4601      	mov	r1, r0
 800b214:	b139      	cbz	r1, 800b226 <lv_anim_get+0x2a>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800b216:	680b      	ldr	r3, [r1, #0]
 800b218:	42a3      	cmp	r3, r4
 800b21a:	d1f7      	bne.n	800b20c <lv_anim_get+0x10>
 800b21c:	684b      	ldr	r3, [r1, #4]
 800b21e:	42ab      	cmp	r3, r5
 800b220:	d001      	beq.n	800b226 <lv_anim_get+0x2a>
 800b222:	2d00      	cmp	r5, #0
 800b224:	d1f2      	bne.n	800b20c <lv_anim_get+0x10>
}
 800b226:	4608      	mov	r0, r1
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	20000bd8 	.word	0x20000bd8

0800b230 <lv_anim_speed_to_time>:
{
 800b230:	4603      	mov	r3, r0
    uint32_t d    = LV_ABS(start - end);
 800b232:	1a8a      	subs	r2, r1, r2
 800b234:	2a00      	cmp	r2, #0
 800b236:	bfb8      	it	lt
 800b238:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 800b23a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b23e:	fb01 f202 	mul.w	r2, r1, r2
 800b242:	fbb2 f0f0 	udiv	r0, r2, r0
    if(time == 0) {
 800b246:	429a      	cmp	r2, r3
 800b248:	d200      	bcs.n	800b24c <lv_anim_speed_to_time+0x1c>
        time++;
 800b24a:	3001      	adds	r0, #1
}
 800b24c:	4770      	bx	lr

0800b24e <lv_anim_path_ease_out>:
{
 800b24e:	b530      	push	{r4, r5, lr}
 800b250:	b083      	sub	sp, #12
 800b252:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 800b254:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b258:	9500      	str	r5, [sp, #0]
 800b25a:	2300      	movs	r3, #0
 800b25c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b25e:	4619      	mov	r1, r3
 800b260:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b262:	f000 fea0 	bl	800bfa6 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 800b266:	9500      	str	r5, [sp, #0]
 800b268:	f240 33b6 	movw	r3, #950	; 0x3b6
 800b26c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b270:	2100      	movs	r1, #0
 800b272:	f000 fe6f 	bl	800bf54 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 800b276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b278:	6a22      	ldr	r2, [r4, #32]
 800b27a:	1a9b      	subs	r3, r3, r2
 800b27c:	fb03 f000 	mul.w	r0, r3, r0
}
 800b280:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 800b284:	b003      	add	sp, #12
 800b286:	bd30      	pop	{r4, r5, pc}

0800b288 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 800b288:	b500      	push	{lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800b28a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b28e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b292:	1a9b      	subs	r3, r3, r2
 800b294:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b298:	f343 0e4f 	sbfx	lr, r3, #1, #16

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 800b29c:	b292      	uxth	r2, r2
 800b29e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800b2a2:	441a      	add	r2, r3
 800b2a4:	fa1f fc82 	uxth.w	ip, r2
    lv_coord_t cy = area->y1 + r;
 800b2a8:	8842      	ldrh	r2, [r0, #2]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	b29b      	uxth	r3, r3

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 800b2ae:	880a      	ldrh	r2, [r1, #0]
 800b2b0:	eba2 020c 	sub.w	r2, r2, ip
 800b2b4:	b212      	sxth	r2, r2
    lv_coord_t py = p->y - cy;
 800b2b6:	8849      	ldrh	r1, [r1, #2]
 800b2b8:	1acb      	subs	r3, r1, r3
 800b2ba:	b21b      	sxth	r3, r3

    uint32_t r_sqrd = r * r;
 800b2bc:	fb0e fe0e 	mul.w	lr, lr, lr
    uint32_t dist = (px * px) + (py * py);
 800b2c0:	fb03 f303 	mul.w	r3, r3, r3
 800b2c4:	fb02 3202 	mla	r2, r2, r2, r3

    if(dist <= r_sqrd)
 800b2c8:	4596      	cmp	lr, r2
 800b2ca:	d302      	bcc.n	800b2d2 <lv_point_within_circle+0x4a>
        return true;
 800b2cc:	2001      	movs	r0, #1
    else
        return false;
}
 800b2ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	e7fb      	b.n	800b2ce <lv_point_within_circle+0x46>

0800b2d6 <lv_area_set>:
    area_p->x1 = x1;
 800b2d6:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800b2d8:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800b2da:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800b2dc:	f9bd 3000 	ldrsh.w	r3, [sp]
 800b2e0:	80c3      	strh	r3, [r0, #6]
}
 800b2e2:	4770      	bx	lr

0800b2e4 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 800b2e4:	8803      	ldrh	r3, [r0, #0]
 800b2e6:	440b      	add	r3, r1
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	8083      	strh	r3, [r0, #4]
}
 800b2ee:	4770      	bx	lr

0800b2f0 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 800b2f0:	8843      	ldrh	r3, [r0, #2]
 800b2f2:	440b      	add	r3, r1
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	80c3      	strh	r3, [r0, #6]
}
 800b2fa:	4770      	bx	lr

0800b2fc <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800b2fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800b300:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b304:	1ad2      	subs	r2, r2, r3
 800b306:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b30a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800b30e:	1a18      	subs	r0, r3, r0
 800b310:	3001      	adds	r0, #1
}
 800b312:	fb02 0000 	mla	r0, r2, r0, r0
 800b316:	4770      	bx	lr

0800b318 <lv_area_increase>:
    area->x1 -= w_extra;
 800b318:	b289      	uxth	r1, r1
 800b31a:	8803      	ldrh	r3, [r0, #0]
 800b31c:	1a5b      	subs	r3, r3, r1
 800b31e:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 800b320:	8883      	ldrh	r3, [r0, #4]
 800b322:	4419      	add	r1, r3
 800b324:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 800b326:	b292      	uxth	r2, r2
 800b328:	8843      	ldrh	r3, [r0, #2]
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 800b32e:	88c3      	ldrh	r3, [r0, #6]
 800b330:	441a      	add	r2, r3
 800b332:	80c2      	strh	r2, [r0, #6]
}
 800b334:	4770      	bx	lr

0800b336 <lv_area_move>:
    area->x1 += x_ofs;
 800b336:	b289      	uxth	r1, r1
 800b338:	8803      	ldrh	r3, [r0, #0]
 800b33a:	440b      	add	r3, r1
 800b33c:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 800b33e:	8883      	ldrh	r3, [r0, #4]
 800b340:	4419      	add	r1, r3
 800b342:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 800b344:	b292      	uxth	r2, r2
 800b346:	8843      	ldrh	r3, [r0, #2]
 800b348:	4413      	add	r3, r2
 800b34a:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 800b34c:	88c3      	ldrh	r3, [r0, #6]
 800b34e:	441a      	add	r2, r3
 800b350:	80c2      	strh	r2, [r0, #6]
}
 800b352:	4770      	bx	lr

0800b354 <_lv_area_intersect>:
{
 800b354:	b510      	push	{r4, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 800b356:	f9b2 c000 	ldrsh.w	ip, [r2]
 800b35a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800b35e:	459c      	cmp	ip, r3
 800b360:	bfb8      	it	lt
 800b362:	469c      	movlt	ip, r3
 800b364:	f8a0 c000 	strh.w	ip, [r0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 800b368:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800b36c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800b370:	459e      	cmp	lr, r3
 800b372:	bfb8      	it	lt
 800b374:	469e      	movlt	lr, r3
 800b376:	f8a0 e002 	strh.w	lr, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 800b37a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800b37e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800b382:	42a3      	cmp	r3, r4
 800b384:	bfa8      	it	ge
 800b386:	4623      	movge	r3, r4
 800b388:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 800b38a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b38e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800b392:	428a      	cmp	r2, r1
 800b394:	bfa8      	it	ge
 800b396:	460a      	movge	r2, r1
 800b398:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800b39a:	459c      	cmp	ip, r3
 800b39c:	dc03      	bgt.n	800b3a6 <_lv_area_intersect+0x52>
 800b39e:	4596      	cmp	lr, r2
 800b3a0:	dc03      	bgt.n	800b3aa <_lv_area_intersect+0x56>
    bool union_ok = true;
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	e000      	b.n	800b3a8 <_lv_area_intersect+0x54>
        union_ok = false;
 800b3a6:	2000      	movs	r0, #0
}
 800b3a8:	bd10      	pop	{r4, pc}
        union_ok = false;
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e7fc      	b.n	800b3a8 <_lv_area_intersect+0x54>

0800b3ae <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 800b3ae:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b3b2:	f9b1 c000 	ldrsh.w	ip, [r1]
 800b3b6:	4563      	cmp	r3, ip
 800b3b8:	bfa8      	it	ge
 800b3ba:	4663      	movge	r3, ip
 800b3bc:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 800b3be:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800b3c2:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 800b3c6:	4563      	cmp	r3, ip
 800b3c8:	bfa8      	it	ge
 800b3ca:	4663      	movge	r3, ip
 800b3cc:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 800b3ce:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800b3d2:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
 800b3d6:	4563      	cmp	r3, ip
 800b3d8:	bfb8      	it	lt
 800b3da:	4663      	movlt	r3, ip
 800b3dc:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 800b3de:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800b3e2:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	bfb8      	it	lt
 800b3ea:	4613      	movlt	r3, r2
 800b3ec:	80c3      	strh	r3, [r0, #6]
}
 800b3ee:	4770      	bx	lr

0800b3f0 <_lv_area_is_point_on>:
{
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	460d      	mov	r5, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800b3f8:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b3fc:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b400:	4281      	cmp	r1, r0
 800b402:	f2c0 80ae 	blt.w	800b562 <_lv_area_is_point_on+0x172>
 800b406:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800b40a:	4299      	cmp	r1, r3
 800b40c:	f300 80ac 	bgt.w	800b568 <_lv_area_is_point_on+0x178>
 800b410:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 800b414:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
 800b418:	4566      	cmp	r6, ip
 800b41a:	f2c0 80a7 	blt.w	800b56c <_lv_area_is_point_on+0x17c>
 800b41e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800b422:	428e      	cmp	r6, r1
 800b424:	f300 80a4 	bgt.w	800b570 <_lv_area_is_point_on+0x180>
    if(radius <= 0) {
 800b428:	2a00      	cmp	r2, #0
 800b42a:	f340 80a3 	ble.w	800b574 <_lv_area_is_point_on+0x184>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b42e:	b29b      	uxth	r3, r3
 800b430:	fa1f fe80 	uxth.w	lr, r0
 800b434:	eba3 030e 	sub.w	r3, r3, lr
 800b438:	b29b      	uxth	r3, r3
 800b43a:	3301      	adds	r3, #1
 800b43c:	b21e      	sxth	r6, r3
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800b43e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800b442:	4433      	add	r3, r6
 800b444:	105b      	asrs	r3, r3, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b446:	b289      	uxth	r1, r1
 800b448:	fa1f fc8c 	uxth.w	ip, ip
 800b44c:	eba1 010c 	sub.w	r1, r1, ip
 800b450:	b289      	uxth	r1, r1
 800b452:	3101      	adds	r1, #1
 800b454:	b20e      	sxth	r6, r1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800b456:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 800b45a:	4431      	add	r1, r6
 800b45c:	1049      	asrs	r1, r1, #1
    lv_coord_t max_radius = LV_MIN(w, h);
 800b45e:	428b      	cmp	r3, r1
 800b460:	bfa8      	it	ge
 800b462:	460b      	movge	r3, r1
    if(radius > max_radius)
 800b464:	429a      	cmp	r2, r3
 800b466:	dc00      	bgt.n	800b46a <_lv_area_is_point_on+0x7a>
 800b468:	4613      	mov	r3, r2
    corner_area.x1 = a_p->x1;
 800b46a:	f8ad 0000 	strh.w	r0, [sp]
    corner_area.x2 = a_p->x1 + radius;
 800b46e:	b29e      	uxth	r6, r3
 800b470:	44b6      	add	lr, r6
 800b472:	f8ad e004 	strh.w	lr, [sp, #4]
    corner_area.y1 = a_p->y1;
 800b476:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800b47a:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
 800b47e:	b29b      	uxth	r3, r3
 800b480:	4433      	add	r3, r6
 800b482:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b486:	2200      	movs	r2, #0
 800b488:	4629      	mov	r1, r5
 800b48a:	4668      	mov	r0, sp
 800b48c:	f7ff ffb0 	bl	800b3f0 <_lv_area_is_point_on>
 800b490:	b170      	cbz	r0, 800b4b0 <_lv_area_is_point_on+0xc0>
        corner_area.x2 += radius;
 800b492:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b496:	4433      	add	r3, r6
 800b498:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
 800b49c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b4a0:	441e      	add	r6, r3
 800b4a2:	f8ad 6006 	strh.w	r6, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4668      	mov	r0, sp
 800b4aa:	f7ff feed 	bl	800b288 <lv_point_within_circle>
 800b4ae:	e059      	b.n	800b564 <_lv_area_is_point_on+0x174>
    corner_area.y1 = a_p->y2 - radius;
 800b4b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800b4b4:	b293      	uxth	r3, r2
 800b4b6:	1b9b      	subs	r3, r3, r6
 800b4b8:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
 800b4bc:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4668      	mov	r0, sp
 800b4c6:	f7ff ff93 	bl	800b3f0 <_lv_area_is_point_on>
 800b4ca:	b170      	cbz	r0, 800b4ea <_lv_area_is_point_on+0xfa>
        corner_area.x2 += radius;
 800b4cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b4d0:	4433      	add	r3, r6
 800b4d2:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
 800b4d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b4da:	1b9e      	subs	r6, r3, r6
 800b4dc:	f8ad 6002 	strh.w	r6, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4668      	mov	r0, sp
 800b4e4:	f7ff fed0 	bl	800b288 <lv_point_within_circle>
 800b4e8:	e03c      	b.n	800b564 <_lv_area_is_point_on+0x174>
    corner_area.x1 = a_p->x2 - radius;
 800b4ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800b4ee:	b293      	uxth	r3, r2
 800b4f0:	1b9b      	subs	r3, r3, r6
 800b4f2:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
 800b4f6:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	4668      	mov	r0, sp
 800b500:	f7ff ff76 	bl	800b3f0 <_lv_area_is_point_on>
 800b504:	b170      	cbz	r0, 800b524 <_lv_area_is_point_on+0x134>
        corner_area.x1 -= radius;
 800b506:	f8bd 3000 	ldrh.w	r3, [sp]
 800b50a:	1b9b      	subs	r3, r3, r6
 800b50c:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
 800b510:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b514:	1b9e      	subs	r6, r3, r6
 800b516:	f8ad 6002 	strh.w	r6, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
 800b51a:	4629      	mov	r1, r5
 800b51c:	4668      	mov	r0, sp
 800b51e:	f7ff feb3 	bl	800b288 <lv_point_within_circle>
 800b522:	e01f      	b.n	800b564 <_lv_area_is_point_on+0x174>
    corner_area.y1 = a_p->y1;
 800b524:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800b528:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	4433      	add	r3, r6
 800b530:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b534:	2200      	movs	r2, #0
 800b536:	4629      	mov	r1, r5
 800b538:	4668      	mov	r0, sp
 800b53a:	f7ff ff59 	bl	800b3f0 <_lv_area_is_point_on>
 800b53e:	b908      	cbnz	r0, 800b544 <_lv_area_is_point_on+0x154>
    return true;
 800b540:	2001      	movs	r0, #1
 800b542:	e00f      	b.n	800b564 <_lv_area_is_point_on+0x174>
        corner_area.x1 -= radius;
 800b544:	f8bd 3000 	ldrh.w	r3, [sp]
 800b548:	1b9b      	subs	r3, r3, r6
 800b54a:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
 800b54e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b552:	441e      	add	r6, r3
 800b554:	f8ad 6006 	strh.w	r6, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
 800b558:	4629      	mov	r1, r5
 800b55a:	4668      	mov	r0, sp
 800b55c:	f7ff fe94 	bl	800b288 <lv_point_within_circle>
 800b560:	e000      	b.n	800b564 <_lv_area_is_point_on+0x174>
        return false;
 800b562:	2000      	movs	r0, #0
}
 800b564:	b002      	add	sp, #8
 800b566:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 800b568:	2000      	movs	r0, #0
 800b56a:	e7fb      	b.n	800b564 <_lv_area_is_point_on+0x174>
 800b56c:	2000      	movs	r0, #0
 800b56e:	e7f9      	b.n	800b564 <_lv_area_is_point_on+0x174>
 800b570:	2000      	movs	r0, #0
 800b572:	e7f7      	b.n	800b564 <_lv_area_is_point_on+0x174>
        return true;
 800b574:	2001      	movs	r0, #1
 800b576:	e7f5      	b.n	800b564 <_lv_area_is_point_on+0x174>

0800b578 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800b578:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b57c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800b580:	429a      	cmp	r2, r3
 800b582:	dc13      	bgt.n	800b5ac <_lv_area_is_on+0x34>
 800b584:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800b588:	f9b1 3000 	ldrsh.w	r3, [r1]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	db0f      	blt.n	800b5b0 <_lv_area_is_on+0x38>
 800b590:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b594:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800b598:	429a      	cmp	r2, r3
 800b59a:	dc0b      	bgt.n	800b5b4 <_lv_area_is_on+0x3c>
 800b59c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800b5a0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	da07      	bge.n	800b5b8 <_lv_area_is_on+0x40>
        return false;
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	4770      	bx	lr
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	4770      	bx	lr
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	4770      	bx	lr
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	4770      	bx	lr
        return true;
 800b5b8:	2001      	movs	r0, #1
}
 800b5ba:	4770      	bx	lr

0800b5bc <_lv_area_is_in>:
{
 800b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800b5c4:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b5c8:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	db40      	blt.n	800b652 <_lv_area_is_in+0x96>
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	4615      	mov	r5, r2
 800b5d4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b5d8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b5dc:	428a      	cmp	r2, r1
 800b5de:	db3c      	blt.n	800b65a <_lv_area_is_in+0x9e>
 800b5e0:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 800b5e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b5e8:	428f      	cmp	r7, r1
 800b5ea:	dc38      	bgt.n	800b65e <_lv_area_is_in+0xa2>
       ain_p->y2 <= aholder_p->y2) {
 800b5ec:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 800b5f0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800b5f4:	4588      	cmp	r8, r1
 800b5f6:	dc34      	bgt.n	800b662 <_lv_area_is_in+0xa6>
    if(radius == 0) return true;
 800b5f8:	b90d      	cbnz	r5, 800b5fe <_lv_area_is_in+0x42>
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	e02a      	b.n	800b654 <_lv_area_is_in+0x98>
    p.x = ain_p->x1;
 800b5fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y1;
 800b602:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b606:	462a      	mov	r2, r5
 800b608:	a901      	add	r1, sp, #4
 800b60a:	4620      	mov	r0, r4
 800b60c:	f7ff fef0 	bl	800b3f0 <_lv_area_is_point_on>
 800b610:	b300      	cbz	r0, 800b654 <_lv_area_is_in+0x98>
    p.x = ain_p->x2;
 800b612:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 800b616:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800b61a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b61e:	462a      	mov	r2, r5
 800b620:	a901      	add	r1, sp, #4
 800b622:	4620      	mov	r0, r4
 800b624:	f7ff fee4 	bl	800b3f0 <_lv_area_is_point_on>
 800b628:	b1a0      	cbz	r0, 800b654 <_lv_area_is_in+0x98>
    p.x = ain_p->x1;
 800b62a:	f9b6 3000 	ldrsh.w	r3, [r6]
 800b62e:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
 800b632:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b636:	462a      	mov	r2, r5
 800b638:	a901      	add	r1, sp, #4
 800b63a:	4620      	mov	r0, r4
 800b63c:	f7ff fed8 	bl	800b3f0 <_lv_area_is_point_on>
 800b640:	b140      	cbz	r0, 800b654 <_lv_area_is_in+0x98>
    p.x = ain_p->x2;
 800b642:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b646:	462a      	mov	r2, r5
 800b648:	a901      	add	r1, sp, #4
 800b64a:	4620      	mov	r0, r4
 800b64c:	f7ff fed0 	bl	800b3f0 <_lv_area_is_point_on>
 800b650:	e000      	b.n	800b654 <_lv_area_is_in+0x98>
    if(!is_in) return false;
 800b652:	2000      	movs	r0, #0
}
 800b654:	b002      	add	sp, #8
 800b656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!is_in) return false;
 800b65a:	2000      	movs	r0, #0
 800b65c:	e7fa      	b.n	800b654 <_lv_area_is_in+0x98>
 800b65e:	2000      	movs	r0, #0
 800b660:	e7f8      	b.n	800b654 <_lv_area_is_in+0x98>
 800b662:	2000      	movs	r0, #0
 800b664:	e7f6      	b.n	800b654 <_lv_area_is_in+0x98>

0800b666 <_lv_area_diff>:
{
 800b666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b66a:	b083      	sub	sp, #12
 800b66c:	4606      	mov	r6, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	4615      	mov	r5, r2
    if(!_lv_area_is_on(a1_p, a2_p)) return -1;
 800b672:	4611      	mov	r1, r2
 800b674:	4620      	mov	r0, r4
 800b676:	f7ff ff7f 	bl	800b578 <_lv_area_is_on>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	f000 80af 	beq.w	800b7de <_lv_area_diff+0x178>
    if(_lv_area_is_in(a1_p, a2_p, 0)) return 0;
 800b680:	2200      	movs	r2, #0
 800b682:	4629      	mov	r1, r5
 800b684:	4620      	mov	r0, r4
 800b686:	f7ff ff99 	bl	800b5bc <_lv_area_is_in>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	f040 80aa 	bne.w	800b7e4 <_lv_area_diff+0x17e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b690:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800b694:	b283      	uxth	r3, r0
 800b696:	f9b4 7000 	ldrsh.w	r7, [r4]
 800b69a:	b2ba      	uxth	r2, r7
 800b69c:	1a9b      	subs	r3, r3, r2
 800b69e:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b6a0:	88e2      	ldrh	r2, [r4, #6]
 800b6a2:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
 800b6a6:	fa1f fc8e 	uxth.w	ip, lr
 800b6aa:	eba2 020c 	sub.w	r2, r2, ip
 800b6ae:	b292      	uxth	r2, r2
    lv_coord_t th = a2_p->y1 - a1_p->y1;
 800b6b0:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800b6b4:	fa1f f188 	uxth.w	r1, r8
 800b6b8:	eba1 010c 	sub.w	r1, r1, ip
 800b6bc:	b209      	sxth	r1, r1
    if(th > 0) {
 800b6be:	2900      	cmp	r1, #0
 800b6c0:	f340 808a 	ble.w	800b7d8 <_lv_area_diff+0x172>
        n.x1 = a1_p->x1;
 800b6c4:	f8ad 7000 	strh.w	r7, [sp]
        n.y1 = a1_p->y1;
 800b6c8:	f8ad e002 	strh.w	lr, [sp, #2]
        n.x2 = a1_p->x2;
 800b6cc:	f8ad 0004 	strh.w	r0, [sp, #4]
        n.y2 = a1_p->y1 + th;
 800b6d0:	f8ad 8006 	strh.w	r8, [sp, #6]
        res_p[res_c++] = n;
 800b6d4:	466f      	mov	r7, sp
 800b6d6:	cf03      	ldmia	r7!, {r0, r1}
 800b6d8:	6030      	str	r0, [r6, #0]
 800b6da:	6071      	str	r1, [r6, #4]
 800b6dc:	f04f 0c01 	mov.w	ip, #1
    lv_coord_t bh = a1_h - (a2_p->y2 - a1_p->y1);
 800b6e0:	8861      	ldrh	r1, [r4, #2]
 800b6e2:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 800b6e6:	b287      	uxth	r7, r0
 800b6e8:	1bc9      	subs	r1, r1, r7
 800b6ea:	440a      	add	r2, r1
 800b6ec:	b291      	uxth	r1, r2
 800b6ee:	b212      	sxth	r2, r2
    if(bh > 0 && a2_p->y2 < a1_p->y2) {
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	dd1c      	ble.n	800b72e <_lv_area_diff+0xc8>
 800b6f4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800b6f8:	4290      	cmp	r0, r2
 800b6fa:	da18      	bge.n	800b72e <_lv_area_diff+0xc8>
        n.x1 = a1_p->x1;
 800b6fc:	f9b4 2000 	ldrsh.w	r2, [r4]
 800b700:	f8ad 2000 	strh.w	r2, [sp]
        n.y1 = a2_p->y2;
 800b704:	f8ad 0002 	strh.w	r0, [sp, #2]
        n.x2 = a1_p->x2;
 800b708:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800b70c:	f8ad 2004 	strh.w	r2, [sp, #4]
        n.y2 = a2_p->y2 + bh;
 800b710:	440f      	add	r7, r1
 800b712:	f8ad 7006 	strh.w	r7, [sp, #6]
        res_p[res_c++] = n;
 800b716:	f10c 0701 	add.w	r7, ip, #1
 800b71a:	eb06 0ecc 	add.w	lr, r6, ip, lsl #3
 800b71e:	466a      	mov	r2, sp
 800b720:	ca03      	ldmia	r2!, {r0, r1}
 800b722:	f846 003c 	str.w	r0, [r6, ip, lsl #3]
 800b726:	f8ce 1004 	str.w	r1, [lr, #4]
 800b72a:	fa4f fc87 	sxtb.w	ip, r7
    lv_coord_t y1 = a2_p->y1 > a1_p->y1 ? a2_p->y1 : a1_p->y1;
 800b72e:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 800b732:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800b736:	4297      	cmp	r7, r2
 800b738:	bfb8      	it	lt
 800b73a:	4617      	movlt	r7, r2
    lv_coord_t y2 = a2_p->y2 < a1_p->y2 ? a2_p->y2 : a1_p->y2;
 800b73c:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 800b740:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800b744:	4596      	cmp	lr, r2
 800b746:	bfa8      	it	ge
 800b748:	4696      	movge	lr, r2
    lv_coord_t sh = y2 - y1;
 800b74a:	ebae 0207 	sub.w	r2, lr, r7
 800b74e:	b211      	sxth	r1, r2
    lv_coord_t lw = a2_p->x1 - a1_p->x1;
 800b750:	f9b5 0000 	ldrsh.w	r0, [r5]
 800b754:	b282      	uxth	r2, r0
 800b756:	f9b4 8000 	ldrsh.w	r8, [r4]
 800b75a:	fa1f f988 	uxth.w	r9, r8
 800b75e:	eba2 0209 	sub.w	r2, r2, r9
 800b762:	b212      	sxth	r2, r2
    if(lw > 0 && sh > 0) {
 800b764:	2a00      	cmp	r2, #0
 800b766:	dd15      	ble.n	800b794 <_lv_area_diff+0x12e>
 800b768:	2900      	cmp	r1, #0
 800b76a:	dd13      	ble.n	800b794 <_lv_area_diff+0x12e>
        n.x1 = a1_p->x1;
 800b76c:	f8ad 8000 	strh.w	r8, [sp]
        n.y1 = y1;
 800b770:	f8ad 7002 	strh.w	r7, [sp, #2]
        n.x2 = a1_p->x1 + lw;
 800b774:	f8ad 0004 	strh.w	r0, [sp, #4]
        n.y2 = y1 + sh;
 800b778:	f8ad e006 	strh.w	lr, [sp, #6]
        res_p[res_c++] = n;
 800b77c:	f10c 0801 	add.w	r8, ip, #1
 800b780:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 800b784:	466a      	mov	r2, sp
 800b786:	ca03      	ldmia	r2!, {r0, r1}
 800b788:	f846 003c 	str.w	r0, [r6, ip, lsl #3]
 800b78c:	f8c9 1004 	str.w	r1, [r9, #4]
 800b790:	fa4f fc88 	sxtb.w	ip, r8
    lv_coord_t rw = a1_w - (a2_p->x2 - a1_p->x1);
 800b794:	8822      	ldrh	r2, [r4, #0]
 800b796:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800b79a:	b281      	uxth	r1, r0
 800b79c:	1a52      	subs	r2, r2, r1
 800b79e:	4413      	add	r3, r2
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	b21b      	sxth	r3, r3
    if(rw > 0) {
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dd13      	ble.n	800b7d0 <_lv_area_diff+0x16a>
        n.x1 = a2_p->x2;
 800b7a8:	f8ad 0000 	strh.w	r0, [sp]
        n.y1 = y1;
 800b7ac:	f8ad 7002 	strh.w	r7, [sp, #2]
        n.x2 = a2_p->x2 + rw;
 800b7b0:	4411      	add	r1, r2
 800b7b2:	f8ad 1004 	strh.w	r1, [sp, #4]
        n.y2 = y1 + sh;
 800b7b6:	f8ad e006 	strh.w	lr, [sp, #6]
        res_p[res_c++] = n;
 800b7ba:	f10c 0201 	add.w	r2, ip, #1
 800b7be:	eb06 04cc 	add.w	r4, r6, ip, lsl #3
 800b7c2:	466b      	mov	r3, sp
 800b7c4:	cb03      	ldmia	r3!, {r0, r1}
 800b7c6:	f846 003c 	str.w	r0, [r6, ip, lsl #3]
 800b7ca:	6061      	str	r1, [r4, #4]
 800b7cc:	fa4f fc82 	sxtb.w	ip, r2
}
 800b7d0:	4660      	mov	r0, ip
 800b7d2:	b003      	add	sp, #12
 800b7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int8_t res_c = 0;
 800b7d8:	f04f 0c00 	mov.w	ip, #0
 800b7dc:	e780      	b.n	800b6e0 <_lv_area_diff+0x7a>
    if(!_lv_area_is_on(a1_p, a2_p)) return -1;
 800b7de:	f04f 3cff 	mov.w	ip, #4294967295
 800b7e2:	e7f5      	b.n	800b7d0 <_lv_area_diff+0x16a>
    if(_lv_area_is_in(a1_p, a2_p, 0)) return 0;
 800b7e4:	f04f 0c00 	mov.w	ip, #0
 800b7e8:	e7f2      	b.n	800b7d0 <_lv_area_diff+0x16a>
	...

0800b7ec <lv_point_transform>:
{
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	4617      	mov	r7, r2
 800b7f6:	461e      	mov	r6, r3
    if(angle == 0 && zoom == 256) {
 800b7f8:	4688      	mov	r8, r1
 800b7fa:	b911      	cbnz	r1, 800b802 <lv_point_transform+0x16>
 800b7fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b800:	d07a      	beq.n	800b8f8 <lv_point_transform+0x10c>
    p->x -= pivot->x;
 800b802:	8832      	ldrh	r2, [r6, #0]
 800b804:	8823      	ldrh	r3, [r4, #0]
 800b806:	1a9b      	subs	r3, r3, r2
 800b808:	b21b      	sxth	r3, r3
 800b80a:	8023      	strh	r3, [r4, #0]
    p->y -= pivot->y;
 800b80c:	8871      	ldrh	r1, [r6, #2]
 800b80e:	8862      	ldrh	r2, [r4, #2]
 800b810:	1a52      	subs	r2, r2, r1
 800b812:	b212      	sxth	r2, r2
 800b814:	8062      	strh	r2, [r4, #2]
    if(angle == 0) {
 800b816:	f1b8 0f00 	cmp.w	r8, #0
 800b81a:	d070      	beq.n	800b8fe <lv_point_transform+0x112>
    if(angle_prev != angle) {
 800b81c:	4b4b      	ldr	r3, [pc, #300]	; (800b94c <lv_point_transform+0x160>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4543      	cmp	r3, r8
 800b822:	d04a      	beq.n	800b8ba <lv_point_transform+0xce>
        if(angle_limited > 3600) angle_limited -= 3600;
 800b824:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
 800b828:	dd76      	ble.n	800b918 <lv_point_transform+0x12c>
 800b82a:	f5a8 6561 	sub.w	r5, r8, #3600	; 0xe10
        if(angle_limited < 0) angle_limited += 3600;
 800b82e:	2d00      	cmp	r5, #0
 800b830:	db74      	blt.n	800b91c <lv_point_transform+0x130>
        int32_t angle_low = angle_limited / 10;
 800b832:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800b950 <lv_point_transform+0x164>
 800b836:	fb8a 3005 	smull	r3, r0, sl, r5
 800b83a:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800b83e:	ebc9 09a0 	rsb	r9, r9, r0, asr #2
        int32_t angle_high = angle_low + 1;
 800b842:	f109 0b01 	add.w	fp, r9, #1
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 800b846:	f06f 0309 	mvn.w	r3, #9
 800b84a:	fb03 5509 	mla	r5, r3, r9, r5
        int32_t s1 = lv_trigo_sin(angle_low);
 800b84e:	fa0f f089 	sxth.w	r0, r9
 800b852:	f000 fb41 	bl	800bed8 <lv_trigo_sin>
 800b856:	9000      	str	r0, [sp, #0]
        int32_t s2 = lv_trigo_sin(angle_high);
 800b858:	fa0f f08b 	sxth.w	r0, fp
 800b85c:	f000 fb3c 	bl	800bed8 <lv_trigo_sin>
 800b860:	9001      	str	r0, [sp, #4]
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 800b862:	f109 005a 	add.w	r0, r9, #90	; 0x5a
 800b866:	b200      	sxth	r0, r0
 800b868:	f000 fb36 	bl	800bed8 <lv_trigo_sin>
 800b86c:	4681      	mov	r9, r0
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 800b86e:	f10b 005a 	add.w	r0, fp, #90	; 0x5a
 800b872:	b200      	sxth	r0, r0
 800b874:	f000 fb30 	bl	800bed8 <lv_trigo_sin>
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800b878:	f1c5 010a 	rsb	r1, r5, #10
 800b87c:	9b01      	ldr	r3, [sp, #4]
 800b87e:	fb05 f303 	mul.w	r3, r5, r3
 800b882:	9a00      	ldr	r2, [sp, #0]
 800b884:	fb02 3301 	mla	r3, r2, r1, r3
 800b888:	fb8a c203 	smull	ip, r2, sl, r3
 800b88c:	17db      	asrs	r3, r3, #31
 800b88e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800b892:	4a30      	ldr	r2, [pc, #192]	; (800b954 <lv_point_transform+0x168>)
 800b894:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800b896:	fb00 f505 	mul.w	r5, r0, r5
 800b89a:	fb09 5901 	mla	r9, r9, r1, r5
 800b89e:	fb8a 1a09 	smull	r1, sl, sl, r9
 800b8a2:	ea4f 79e9 	mov.w	r9, r9, asr #31
 800b8a6:	ebc9 05aa 	rsb	r5, r9, sl, asr #2
 800b8aa:	6055      	str	r5, [r2, #4]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800b8ac:	115b      	asrs	r3, r3, #5
 800b8ae:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800b8b0:	116d      	asrs	r5, r5, #5
 800b8b2:	6055      	str	r5, [r2, #4]
        angle_prev = angle;
 800b8b4:	4b25      	ldr	r3, [pc, #148]	; (800b94c <lv_point_transform+0x160>)
 800b8b6:	f8c3 8000 	str.w	r8, [r3]
    int32_t x = p->x;
 800b8ba:	f9b4 1000 	ldrsh.w	r1, [r4]
    int32_t y = p->y;
 800b8be:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    if(zoom == 256) {
 800b8c2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800b8c6:	d02c      	beq.n	800b922 <lv_point_transform+0x136>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 800b8c8:	4d22      	ldr	r5, [pc, #136]	; (800b954 <lv_point_transform+0x168>)
 800b8ca:	686b      	ldr	r3, [r5, #4]
 800b8cc:	fb01 f203 	mul.w	r2, r1, r3
 800b8d0:	f8d5 c000 	ldr.w	ip, [r5]
 800b8d4:	fb00 221c 	mls	r2, r0, ip, r2
 800b8d8:	fb07 f202 	mul.w	r2, r7, r2
 800b8dc:	8835      	ldrh	r5, [r6, #0]
 800b8de:	eb05 42a2 	add.w	r2, r5, r2, asr #18
 800b8e2:	8022      	strh	r2, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 800b8e4:	fb00 f303 	mul.w	r3, r0, r3
 800b8e8:	fb01 330c 	mla	r3, r1, ip, r3
 800b8ec:	fb03 f707 	mul.w	r7, r3, r7
 800b8f0:	8872      	ldrh	r2, [r6, #2]
 800b8f2:	eb02 47a7 	add.w	r7, r2, r7, asr #18
 800b8f6:	8067      	strh	r7, [r4, #2]
}
 800b8f8:	b003      	add	sp, #12
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 800b8fe:	fb07 f303 	mul.w	r3, r7, r3
 800b902:	8831      	ldrh	r1, [r6, #0]
 800b904:	eb01 2323 	add.w	r3, r1, r3, asr #8
 800b908:	8023      	strh	r3, [r4, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 800b90a:	fb07 f202 	mul.w	r2, r7, r2
 800b90e:	8877      	ldrh	r7, [r6, #2]
 800b910:	eb07 2222 	add.w	r2, r7, r2, asr #8
 800b914:	8062      	strh	r2, [r4, #2]
        return;
 800b916:	e7ef      	b.n	800b8f8 <lv_point_transform+0x10c>
        int32_t angle_limited = angle;
 800b918:	4645      	mov	r5, r8
 800b91a:	e788      	b.n	800b82e <lv_point_transform+0x42>
        if(angle_limited < 0) angle_limited += 3600;
 800b91c:	f505 6561 	add.w	r5, r5, #3600	; 0xe10
 800b920:	e787      	b.n	800b832 <lv_point_transform+0x46>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800b922:	4d0c      	ldr	r5, [pc, #48]	; (800b954 <lv_point_transform+0x168>)
 800b924:	686b      	ldr	r3, [r5, #4]
 800b926:	fb01 f203 	mul.w	r2, r1, r3
 800b92a:	682f      	ldr	r7, [r5, #0]
 800b92c:	fb00 2517 	mls	r5, r0, r7, r2
 800b930:	8832      	ldrh	r2, [r6, #0]
 800b932:	eb02 22a5 	add.w	r2, r2, r5, asr #10
 800b936:	8022      	strh	r2, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800b938:	fb00 f303 	mul.w	r3, r0, r3
 800b93c:	fb01 3307 	mla	r3, r1, r7, r3
 800b940:	8871      	ldrh	r1, [r6, #2]
 800b942:	eb01 23a3 	add.w	r3, r1, r3, asr #10
 800b946:	8063      	strh	r3, [r4, #2]
 800b948:	e7d6      	b.n	800b8f8 <lv_point_transform+0x10c>
 800b94a:	bf00      	nop
 800b94c:	20000028 	.word	0x20000028
 800b950:	66666667 	.word	0x66666667
 800b954:	20000ba0 	.word	0x20000ba0

0800b958 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 800b958:	2812      	cmp	r0, #18
 800b95a:	d803      	bhi.n	800b964 <lv_palette_main+0xc>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 800b95c:	4b03      	ldr	r3, [pc, #12]	; (800b96c <lv_palette_main+0x14>)
 800b95e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]

}
 800b962:	4770      	bx	lr
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800b964:	f04f 0000 	mov.w	r0, #0
        return lv_color_black();
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	08014504 	.word	0x08014504

0800b970 <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 800b970:	4603      	mov	r3, r0
    path++; /*Ignore the driver letter*/
 800b972:	3001      	adds	r0, #1
    if(*path == ':') path++;
 800b974:	785a      	ldrb	r2, [r3, #1]
 800b976:	2a3a      	cmp	r2, #58	; 0x3a
 800b978:	d000      	beq.n	800b97c <lv_fs_get_real_path+0xc>

    return path;
}
 800b97a:	4770      	bx	lr
    if(*path == ':') path++;
 800b97c:	1c98      	adds	r0, r3, #2
    return path;
 800b97e:	e7fc      	b.n	800b97a <lv_fs_get_real_path+0xa>

0800b980 <lv_fs_read_cached>:
{
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	b085      	sub	sp, #20
 800b986:	4604      	mov	r4, r0
 800b988:	4688      	mov	r8, r1
 800b98a:	4615      	mov	r5, r2
 800b98c:	461f      	mov	r7, r3
    uint32_t file_position = file_p->cache->file_position;
 800b98e:	6886      	ldr	r6, [r0, #8]
 800b990:	f8d6 9008 	ldr.w	r9, [r6, #8]
    uint32_t start = file_p->cache->start;
 800b994:	6833      	ldr	r3, [r6, #0]
    uint32_t end = file_p->cache->end;
 800b996:	6872      	ldr	r2, [r6, #4]
    char * buffer = file_p->cache->buffer;
 800b998:	f8d6 a00c 	ldr.w	sl, [r6, #12]
    uint16_t buffer_size = file_p->drv->cache_size;
 800b99c:	6840      	ldr	r0, [r0, #4]
 800b99e:	f8b0 b002 	ldrh.w	fp, [r0, #2]
    if(start <= file_position && file_position < end) {
 800b9a2:	4599      	cmp	r9, r3
 800b9a4:	d351      	bcc.n	800ba4a <lv_fs_read_cached+0xca>
 800b9a6:	4591      	cmp	r9, r2
 800b9a8:	d24f      	bcs.n	800ba4a <lv_fs_read_cached+0xca>
        uint16_t buffer_offset = file_position - start;
 800b9aa:	fa1f f189 	uxth.w	r1, r9
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	1acb      	subs	r3, r1, r3
 800b9b2:	b29b      	uxth	r3, r3
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 800b9b4:	eba2 0909 	sub.w	r9, r2, r9
 800b9b8:	ebab 0203 	sub.w	r2, fp, r3
 800b9bc:	4591      	cmp	r9, r2
 800b9be:	bf28      	it	cs
 800b9c0:	4691      	movcs	r9, r2
        if(btr <= buffer_remaining_length) {
 800b9c2:	45a9      	cmp	r9, r5
 800b9c4:	d308      	bcc.n	800b9d8 <lv_fs_read_cached+0x58>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 800b9c6:	462a      	mov	r2, r5
 800b9c8:	eb0a 0103 	add.w	r1, sl, r3
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	f000 fc09 	bl	800c1e4 <lv_memcpy>
            *br = btr;
 800b9d2:	603d      	str	r5, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 800b9d4:	2600      	movs	r6, #0
 800b9d6:	e042      	b.n	800ba5e <lv_fs_read_cached+0xde>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 800b9d8:	464a      	mov	r2, r9
 800b9da:	eb0a 0103 	add.w	r1, sl, r3
 800b9de:	4640      	mov	r0, r8
 800b9e0:	f000 fc00 	bl	800c1e4 <lv_memcpy>
            uint32_t bytes_read_to_buffer = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9303      	str	r3, [sp, #12]
            if(btr > buffer_size) {
 800b9e8:	45ab      	cmp	fp, r5
 800b9ea:	d211      	bcs.n	800ba10 <lv_fs_read_cached+0x90>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 800b9ec:	6860      	ldr	r0, [r4, #4]
 800b9ee:	6906      	ldr	r6, [r0, #16]
 800b9f0:	ab03      	add	r3, sp, #12
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	eba5 0309 	sub.w	r3, r5, r9
 800b9f8:	eb08 0209 	add.w	r2, r8, r9
 800b9fc:	6821      	ldr	r1, [r4, #0]
 800b9fe:	47b0      	blx	r6
 800ba00:	4606      	mov	r6, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	4499      	add	r9, r3
 800ba06:	454d      	cmp	r5, r9
 800ba08:	bf28      	it	cs
 800ba0a:	464d      	movcs	r5, r9
 800ba0c:	603d      	str	r5, [r7, #0]
 800ba0e:	e025      	b.n	800ba5c <lv_fs_read_cached+0xdc>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 800ba10:	6860      	ldr	r0, [r4, #4]
 800ba12:	6906      	ldr	r6, [r0, #16]
 800ba14:	ab03      	add	r3, sp, #12
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	465b      	mov	r3, fp
 800ba1a:	4652      	mov	r2, sl
 800ba1c:	6821      	ldr	r1, [r4, #0]
 800ba1e:	47b0      	blx	r6
 800ba20:	4606      	mov	r6, r0
                file_p->cache->start = file_p->cache->end;
 800ba22:	68a3      	ldr	r3, [r4, #8]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 800ba28:	68a1      	ldr	r1, [r4, #8]
 800ba2a:	680b      	ldr	r3, [r1, #0]
 800ba2c:	9a03      	ldr	r2, [sp, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	604b      	str	r3, [r1, #4]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 800ba32:	eba5 0309 	sub.w	r3, r5, r9
 800ba36:	429a      	cmp	r2, r3
 800ba38:	bf28      	it	cs
 800ba3a:	461a      	movcs	r2, r3
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 800ba3c:	b292      	uxth	r2, r2
 800ba3e:	4651      	mov	r1, sl
 800ba40:	eb08 0009 	add.w	r0, r8, r9
 800ba44:	f000 fbce 	bl	800c1e4 <lv_memcpy>
 800ba48:	e7db      	b.n	800ba02 <lv_fs_read_cached+0x82>
        if(btr > buffer_size) {
 800ba4a:	45ab      	cmp	fp, r5
 800ba4c:	d210      	bcs.n	800ba70 <lv_fs_read_cached+0xf0>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 800ba4e:	6906      	ldr	r6, [r0, #16]
 800ba50:	9700      	str	r7, [sp, #0]
 800ba52:	462b      	mov	r3, r5
 800ba54:	4642      	mov	r2, r8
 800ba56:	6821      	ldr	r1, [r4, #0]
 800ba58:	47b0      	blx	r6
 800ba5a:	4606      	mov	r6, r0
    if(res == LV_FS_RES_OK) {
 800ba5c:	b926      	cbnz	r6, 800ba68 <lv_fs_read_cached+0xe8>
        file_p->cache->file_position += *br;
 800ba5e:	68a2      	ldr	r2, [r4, #8]
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6893      	ldr	r3, [r2, #8]
 800ba64:	440b      	add	r3, r1
 800ba66:	6093      	str	r3, [r2, #8]
}
 800ba68:	4630      	mov	r0, r6
 800ba6a:	b005      	add	sp, #20
 800ba6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(buffer == NULL) {
 800ba70:	f1ba 0f00 	cmp.w	sl, #0
 800ba74:	d01b      	beq.n	800baae <lv_fs_read_cached+0x12e>
            uint32_t bytes_read_to_buffer = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	9303      	str	r3, [sp, #12]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 800ba7a:	6860      	ldr	r0, [r4, #4]
 800ba7c:	6906      	ldr	r6, [r0, #16]
 800ba7e:	ab03      	add	r3, sp, #12
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	465b      	mov	r3, fp
 800ba84:	4652      	mov	r2, sl
 800ba86:	6821      	ldr	r1, [r4, #0]
 800ba88:	47b0      	blx	r6
 800ba8a:	4606      	mov	r6, r0
            file_p->cache->start = file_position;
 800ba8c:	68a3      	ldr	r3, [r4, #8]
 800ba8e:	f8c3 9000 	str.w	r9, [r3]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 800ba92:	68a1      	ldr	r1, [r4, #8]
 800ba94:	680b      	ldr	r3, [r1, #0]
 800ba96:	9a03      	ldr	r2, [sp, #12]
 800ba98:	4413      	add	r3, r2
 800ba9a:	604b      	str	r3, [r1, #4]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 800ba9c:	42aa      	cmp	r2, r5
 800ba9e:	bf28      	it	cs
 800baa0:	462a      	movcs	r2, r5
 800baa2:	603a      	str	r2, [r7, #0]
            lv_memcpy(buf, buffer, *br);
 800baa4:	4651      	mov	r1, sl
 800baa6:	4640      	mov	r0, r8
 800baa8:	f000 fb9c 	bl	800c1e4 <lv_memcpy>
 800baac:	e7d6      	b.n	800ba5c <lv_fs_read_cached+0xdc>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 800baae:	4658      	mov	r0, fp
 800bab0:	f000 faaa 	bl	800c008 <lv_mem_alloc>
 800bab4:	60f0      	str	r0, [r6, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 800bab6:	68a3      	ldr	r3, [r4, #8]
 800bab8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800babc:	f1ba 0f00 	cmp.w	sl, #0
 800bac0:	d1d9      	bne.n	800ba76 <lv_fs_read_cached+0xf6>
 800bac2:	e7fe      	b.n	800bac2 <lv_fs_read_cached+0x142>

0800bac4 <_lv_fs_init>:
{
 800bac4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 800bac6:	2104      	movs	r1, #4
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <_lv_fs_init+0xc>)
 800baca:	f000 f917 	bl	800bcfc <_lv_ll_init>
}
 800bace:	bd08      	pop	{r3, pc}
 800bad0:	20000bcc 	.word	0x20000bcc

0800bad4 <lv_fs_close>:
{
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800bad8:	6840      	ldr	r0, [r0, #4]
 800bada:	b1b0      	cbz	r0, 800bb0a <lv_fs_close+0x36>
    if(file_p->drv->close_cb == NULL) {
 800badc:	68c3      	ldr	r3, [r0, #12]
 800bade:	b1b3      	cbz	r3, 800bb0e <lv_fs_close+0x3a>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800bae0:	6821      	ldr	r1, [r4, #0]
 800bae2:	4798      	blx	r3
 800bae4:	4605      	mov	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 800bae6:	6863      	ldr	r3, [r4, #4]
 800bae8:	885b      	ldrh	r3, [r3, #2]
 800baea:	b143      	cbz	r3, 800bafe <lv_fs_close+0x2a>
 800baec:	68a3      	ldr	r3, [r4, #8]
 800baee:	b133      	cbz	r3, 800bafe <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 800baf0:	68d8      	ldr	r0, [r3, #12]
 800baf2:	b108      	cbz	r0, 800baf8 <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 800baf4:	f000 faa6 	bl	800c044 <lv_mem_free>
        lv_mem_free(file_p->cache);
 800baf8:	68a0      	ldr	r0, [r4, #8]
 800bafa:	f000 faa3 	bl	800c044 <lv_mem_free>
    file_p->file_d = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800bb02:	6063      	str	r3, [r4, #4]
    file_p->cache  = NULL;
 800bb04:	60a3      	str	r3, [r4, #8]
}
 800bb06:	4628      	mov	r0, r5
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800bb0a:	250b      	movs	r5, #11
 800bb0c:	e7fb      	b.n	800bb06 <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 800bb0e:	2509      	movs	r5, #9
 800bb10:	e7f9      	b.n	800bb06 <lv_fs_close+0x32>

0800bb12 <lv_fs_read>:
{
 800bb12:	b530      	push	{r4, r5, lr}
 800bb14:	b085      	sub	sp, #20
 800bb16:	4684      	mov	ip, r0
    if(br != NULL) *br = 0;
 800bb18:	461c      	mov	r4, r3
 800bb1a:	b10b      	cbz	r3, 800bb20 <lv_fs_read+0xe>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800bb20:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800bb24:	b1b0      	cbz	r0, 800bb54 <lv_fs_read+0x42>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800bb26:	6905      	ldr	r5, [r0, #16]
 800bb28:	b1b5      	cbz	r5, 800bb58 <lv_fs_read+0x46>
    uint32_t br_tmp = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	9303      	str	r3, [sp, #12]
    if(file_p->drv->cache_size) {
 800bb2e:	8843      	ldrh	r3, [r0, #2]
 800bb30:	b95b      	cbnz	r3, 800bb4a <lv_fs_read+0x38>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800bb32:	ab03      	add	r3, sp, #12
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	4613      	mov	r3, r2
 800bb38:	460a      	mov	r2, r1
 800bb3a:	f8dc 1000 	ldr.w	r1, [ip]
 800bb3e:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800bb40:	b10c      	cbz	r4, 800bb46 <lv_fs_read+0x34>
 800bb42:	9b03      	ldr	r3, [sp, #12]
 800bb44:	6023      	str	r3, [r4, #0]
}
 800bb46:	b005      	add	sp, #20
 800bb48:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 800bb4a:	ab03      	add	r3, sp, #12
 800bb4c:	4660      	mov	r0, ip
 800bb4e:	f7ff ff17 	bl	800b980 <lv_fs_read_cached>
 800bb52:	e7f5      	b.n	800bb40 <lv_fs_read+0x2e>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800bb54:	200b      	movs	r0, #11
 800bb56:	e7f6      	b.n	800bb46 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800bb58:	2009      	movs	r0, #9
 800bb5a:	e7f4      	b.n	800bb46 <lv_fs_read+0x34>

0800bb5c <lv_fs_seek>:
{
 800bb5c:	b530      	push	{r4, r5, lr}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800bb62:	6840      	ldr	r0, [r0, #4]
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d042      	beq.n	800bbee <lv_fs_seek+0x92>
 800bb68:	4613      	mov	r3, r2
    if(file_p->drv->seek_cb == NULL) {
 800bb6a:	6985      	ldr	r5, [r0, #24]
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	d040      	beq.n	800bbf2 <lv_fs_seek+0x96>
    if(file_p->drv->cache_size) {
 800bb70:	8842      	ldrh	r2, [r0, #2]
 800bb72:	2a00      	cmp	r2, #0
 800bb74:	d036      	beq.n	800bbe4 <lv_fs_seek+0x88>
        switch(whence) {
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d014      	beq.n	800bba4 <lv_fs_seek+0x48>
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d024      	beq.n	800bbc8 <lv_fs_seek+0x6c>
 800bb7e:	b10b      	cbz	r3, 800bb84 <lv_fs_seek+0x28>
 800bb80:	2000      	movs	r0, #0
 800bb82:	e032      	b.n	800bbea <lv_fs_seek+0x8e>
                    file_p->cache->file_position = pos;
 800bb84:	68a2      	ldr	r2, [r4, #8]
 800bb86:	6091      	str	r1, [r2, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 800bb88:	68a1      	ldr	r1, [r4, #8]
 800bb8a:	688a      	ldr	r2, [r1, #8]
 800bb8c:	6808      	ldr	r0, [r1, #0]
 800bb8e:	4282      	cmp	r2, r0
 800bb90:	d302      	bcc.n	800bb98 <lv_fs_seek+0x3c>
 800bb92:	6849      	ldr	r1, [r1, #4]
 800bb94:	428a      	cmp	r2, r1
 800bb96:	d92e      	bls.n	800bbf6 <lv_fs_seek+0x9a>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 800bb98:	6860      	ldr	r0, [r4, #4]
 800bb9a:	6985      	ldr	r5, [r0, #24]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	6821      	ldr	r1, [r4, #0]
 800bba0:	47a8      	blx	r5
 800bba2:	e022      	b.n	800bbea <lv_fs_seek+0x8e>
                    file_p->cache->file_position += pos;
 800bba4:	68a2      	ldr	r2, [r4, #8]
 800bba6:	6893      	ldr	r3, [r2, #8]
 800bba8:	4419      	add	r1, r3
 800bbaa:	6091      	str	r1, [r2, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 800bbac:	68a3      	ldr	r3, [r4, #8]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	6819      	ldr	r1, [r3, #0]
 800bbb2:	428a      	cmp	r2, r1
 800bbb4:	d302      	bcc.n	800bbbc <lv_fs_seek+0x60>
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d91e      	bls.n	800bbfa <lv_fs_seek+0x9e>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 800bbbc:	6860      	ldr	r0, [r4, #4]
 800bbbe:	6985      	ldr	r5, [r0, #24]
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	6821      	ldr	r1, [r4, #0]
 800bbc4:	47a8      	blx	r5
 800bbc6:	e010      	b.n	800bbea <lv_fs_seek+0x8e>
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 800bbc8:	460a      	mov	r2, r1
 800bbca:	6821      	ldr	r1, [r4, #0]
 800bbcc:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 800bbce:	b960      	cbnz	r0, 800bbea <lv_fs_seek+0x8e>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 800bbd0:	6860      	ldr	r0, [r4, #4]
 800bbd2:	69c3      	ldr	r3, [r0, #28]
 800bbd4:	aa01      	add	r2, sp, #4
 800bbd6:	6821      	ldr	r1, [r4, #0]
 800bbd8:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 800bbda:	b930      	cbnz	r0, 800bbea <lv_fs_seek+0x8e>
                            file_p->cache->file_position = tmp_position;
 800bbdc:	68a3      	ldr	r3, [r4, #8]
 800bbde:	9a01      	ldr	r2, [sp, #4]
 800bbe0:	609a      	str	r2, [r3, #8]
 800bbe2:	e002      	b.n	800bbea <lv_fs_seek+0x8e>
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 800bbe4:	460a      	mov	r2, r1
 800bbe6:	6821      	ldr	r1, [r4, #0]
 800bbe8:	47a8      	blx	r5
}
 800bbea:	b003      	add	sp, #12
 800bbec:	bd30      	pop	{r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800bbee:	200b      	movs	r0, #11
 800bbf0:	e7fb      	b.n	800bbea <lv_fs_seek+0x8e>
        return LV_FS_RES_NOT_IMP;
 800bbf2:	2009      	movs	r0, #9
 800bbf4:	e7f9      	b.n	800bbea <lv_fs_seek+0x8e>
    lv_fs_res_t res = LV_FS_RES_OK;
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	e7f7      	b.n	800bbea <lv_fs_seek+0x8e>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e7f5      	b.n	800bbea <lv_fs_seek+0x8e>
	...

0800bc00 <lv_fs_get_drv>:
{
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 800bc04:	4808      	ldr	r0, [pc, #32]	; (800bc28 <lv_fs_get_drv+0x28>)
 800bc06:	f000 f8bf 	bl	800bd88 <_lv_ll_get_head>
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	e003      	b.n	800bc16 <lv_fs_get_drv+0x16>
 800bc0e:	4806      	ldr	r0, [pc, #24]	; (800bc28 <lv_fs_get_drv+0x28>)
 800bc10:	f000 f8c2 	bl	800bd98 <_lv_ll_get_next>
 800bc14:	4601      	mov	r1, r0
 800bc16:	b121      	cbz	r1, 800bc22 <lv_fs_get_drv+0x22>
        if((*drv)->letter == letter) {
 800bc18:	680b      	ldr	r3, [r1, #0]
 800bc1a:	781a      	ldrb	r2, [r3, #0]
 800bc1c:	42a2      	cmp	r2, r4
 800bc1e:	d1f6      	bne.n	800bc0e <lv_fs_get_drv+0xe>
            return *drv;
 800bc20:	4619      	mov	r1, r3
}
 800bc22:	4608      	mov	r0, r1
 800bc24:	bd10      	pop	{r4, pc}
 800bc26:	bf00      	nop
 800bc28:	20000bcc 	.word	0x20000bcc

0800bc2c <lv_fs_open>:
    if(path == NULL) {
 800bc2c:	2900      	cmp	r1, #0
 800bc2e:	d037      	beq.n	800bca0 <lv_fs_open+0x74>
{
 800bc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc34:	4604      	mov	r4, r0
 800bc36:	4616      	mov	r6, r2
 800bc38:	460f      	mov	r7, r1
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 800bc3a:	7808      	ldrb	r0, [r1, #0]
 800bc3c:	f7ff ffe0 	bl	800bc00 <lv_fs_get_drv>
    if(drv == NULL) {
 800bc40:	4605      	mov	r5, r0
 800bc42:	b378      	cbz	r0, 800bca4 <lv_fs_open+0x78>
    if(drv->ready_cb) {
 800bc44:	6843      	ldr	r3, [r0, #4]
 800bc46:	b10b      	cbz	r3, 800bc4c <lv_fs_open+0x20>
        if(drv->ready_cb(drv) == false) {
 800bc48:	4798      	blx	r3
 800bc4a:	b368      	cbz	r0, 800bca8 <lv_fs_open+0x7c>
    if(drv->open_cb == NULL) {
 800bc4c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800bc50:	f1b8 0f00 	cmp.w	r8, #0
 800bc54:	d02a      	beq.n	800bcac <lv_fs_open+0x80>
    const char * real_path = lv_fs_get_real_path(path);
 800bc56:	4638      	mov	r0, r7
 800bc58:	f7ff fe8a 	bl	800b970 <lv_fs_get_real_path>
 800bc5c:	4601      	mov	r1, r0
    void * file_d = drv->open_cb(drv, real_path, mode);
 800bc5e:	4632      	mov	r2, r6
 800bc60:	4628      	mov	r0, r5
 800bc62:	47c0      	blx	r8
    if(file_d == NULL || file_d == (void *)(-1)) {
 800bc64:	1e43      	subs	r3, r0, #1
 800bc66:	f113 0f03 	cmn.w	r3, #3
 800bc6a:	d821      	bhi.n	800bcb0 <lv_fs_open+0x84>
    file_p->drv = drv;
 800bc6c:	6065      	str	r5, [r4, #4]
    file_p->file_d = file_d;
 800bc6e:	6020      	str	r0, [r4, #0]
    if(drv->cache_size) {
 800bc70:	886b      	ldrh	r3, [r5, #2]
 800bc72:	b913      	cbnz	r3, 800bc7a <lv_fs_open+0x4e>
    return LV_FS_RES_OK;
 800bc74:	2000      	movs	r0, #0
}
 800bc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 800bc7a:	2010      	movs	r0, #16
 800bc7c:	f000 f9c4 	bl	800c008 <lv_mem_alloc>
 800bc80:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 800bc82:	b160      	cbz	r0, 800bc9e <lv_fs_open+0x72>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 800bc84:	2110      	movs	r1, #16
 800bc86:	f000 fb3c 	bl	800c302 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc90:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 800bc92:	68a3      	ldr	r3, [r4, #8]
 800bc94:	f06f 0201 	mvn.w	r2, #1
 800bc98:	605a      	str	r2, [r3, #4]
    return LV_FS_RES_OK;
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	e7eb      	b.n	800bc76 <lv_fs_open+0x4a>
        LV_ASSERT_MALLOC(file_p->cache);
 800bc9e:	e7fe      	b.n	800bc9e <lv_fs_open+0x72>
        return LV_FS_RES_INV_PARAM;
 800bca0:	200b      	movs	r0, #11
}
 800bca2:	4770      	bx	lr
        return LV_FS_RES_NOT_EX;
 800bca4:	2003      	movs	r0, #3
 800bca6:	e7e6      	b.n	800bc76 <lv_fs_open+0x4a>
            return LV_FS_RES_HW_ERR;
 800bca8:	2001      	movs	r0, #1
 800bcaa:	e7e4      	b.n	800bc76 <lv_fs_open+0x4a>
        return LV_FS_RES_NOT_IMP;
 800bcac:	2009      	movs	r0, #9
 800bcae:	e7e2      	b.n	800bc76 <lv_fs_open+0x4a>
        return LV_FS_RES_UNKNOWN;
 800bcb0:	200c      	movs	r0, #12
 800bcb2:	e7e0      	b.n	800bc76 <lv_fs_open+0x4a>

0800bcb4 <lv_fs_get_ext>:
{
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800bcb8:	f7f4 fab4 	bl	8000224 <strlen>
 800bcbc:	b158      	cbz	r0, 800bcd6 <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
 800bcbe:	5c23      	ldrb	r3, [r4, r0]
 800bcc0:	2b2e      	cmp	r3, #46	; 0x2e
 800bcc2:	d005      	beq.n	800bcd0 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
 800bcc4:	2b2f      	cmp	r3, #47	; 0x2f
 800bcc6:	d008      	beq.n	800bcda <lv_fs_get_ext+0x26>
 800bcc8:	2b5c      	cmp	r3, #92	; 0x5c
 800bcca:	d008      	beq.n	800bcde <lv_fs_get_ext+0x2a>
    for(i = strlen(fn); i > 0; i--) {
 800bccc:	3801      	subs	r0, #1
 800bcce:	e7f5      	b.n	800bcbc <lv_fs_get_ext+0x8>
            return &fn[i + 1];
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	18e0      	adds	r0, r4, r3
 800bcd4:	e000      	b.n	800bcd8 <lv_fs_get_ext+0x24>
    return ""; /*Empty string if no '.' in the file name.*/
 800bcd6:	4803      	ldr	r0, [pc, #12]	; (800bce4 <lv_fs_get_ext+0x30>)
}
 800bcd8:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
 800bcda:	4802      	ldr	r0, [pc, #8]	; (800bce4 <lv_fs_get_ext+0x30>)
 800bcdc:	e7fc      	b.n	800bcd8 <lv_fs_get_ext+0x24>
 800bcde:	4801      	ldr	r0, [pc, #4]	; (800bce4 <lv_fs_get_ext+0x30>)
 800bce0:	e7fa      	b.n	800bcd8 <lv_fs_get_ext+0x24>
 800bce2:	bf00      	nop
 800bce4:	080148a4 	.word	0x080148a4

0800bce8 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800bce8:	460b      	mov	r3, r1
 800bcea:	b109      	cbz	r1, 800bcf0 <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *)act;

    act8 += LL_PREV_P_OFFSET(ll_p);
 800bcec:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 800bcee:	505a      	str	r2, [r3, r1]
}
 800bcf0:	4770      	bx	lr

0800bcf2 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800bcf2:	b111      	cbz	r1, 800bcfa <node_set_next+0x8>
    uint8_t * act8 = (uint8_t *)act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
 800bcf4:	6803      	ldr	r3, [r0, #0]
 800bcf6:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 800bcf8:	50ca      	str	r2, [r1, r3]
}
 800bcfa:	4770      	bx	lr

0800bcfc <_lv_ll_init>:
    ll_p->head = NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800bd00:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
 800bd02:	3103      	adds	r1, #3
 800bd04:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
 800bd08:	6001      	str	r1, [r0, #0]
}
 800bd0a:	4770      	bx	lr

0800bd0c <_lv_ll_ins_head>:
{
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bd10:	6800      	ldr	r0, [r0, #0]
 800bd12:	3008      	adds	r0, #8
 800bd14:	f000 f978 	bl	800c008 <lv_mem_alloc>
    if(n_new != NULL) {
 800bd18:	4605      	mov	r5, r0
 800bd1a:	b190      	cbz	r0, 800bd42 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4601      	mov	r1, r0
 800bd20:	4620      	mov	r0, r4
 800bd22:	f7ff ffe1 	bl	800bce8 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800bd26:	6862      	ldr	r2, [r4, #4]
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f7ff ffe1 	bl	800bcf2 <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800bd30:	6861      	ldr	r1, [r4, #4]
 800bd32:	b119      	cbz	r1, 800bd3c <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 800bd34:	462a      	mov	r2, r5
 800bd36:	4620      	mov	r0, r4
 800bd38:	f7ff ffd6 	bl	800bce8 <node_set_prev>
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800bd3c:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	b10b      	cbz	r3, 800bd46 <_lv_ll_ins_head+0x3a>
}
 800bd42:	4628      	mov	r0, r5
 800bd44:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
 800bd46:	60a5      	str	r5, [r4, #8]
    return n_new;
 800bd48:	e7fb      	b.n	800bd42 <_lv_ll_ins_head+0x36>

0800bd4a <_lv_ll_ins_tail>:
{
 800bd4a:	b538      	push	{r3, r4, r5, lr}
 800bd4c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bd4e:	6800      	ldr	r0, [r0, #0]
 800bd50:	3008      	adds	r0, #8
 800bd52:	f000 f959 	bl	800c008 <lv_mem_alloc>
    if(n_new != NULL) {
 800bd56:	4605      	mov	r5, r0
 800bd58:	b190      	cbz	r0, 800bd80 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4601      	mov	r1, r0
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f7ff ffc7 	bl	800bcf2 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 800bd64:	68a2      	ldr	r2, [r4, #8]
 800bd66:	4629      	mov	r1, r5
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f7ff ffbd 	bl	800bce8 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800bd6e:	68a1      	ldr	r1, [r4, #8]
 800bd70:	b119      	cbz	r1, 800bd7a <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 800bd72:	462a      	mov	r2, r5
 800bd74:	4620      	mov	r0, r4
 800bd76:	f7ff ffbc 	bl	800bcf2 <node_set_next>
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800bd7a:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800bd7c:	6863      	ldr	r3, [r4, #4]
 800bd7e:	b10b      	cbz	r3, 800bd84 <_lv_ll_ins_tail+0x3a>
}
 800bd80:	4628      	mov	r0, r5
 800bd82:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
 800bd84:	6065      	str	r5, [r4, #4]
    return n_new;
 800bd86:	e7fb      	b.n	800bd80 <_lv_ll_ins_tail+0x36>

0800bd88 <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 800bd88:	b108      	cbz	r0, 800bd8e <_lv_ll_get_head+0x6>
    return ll_p->head;
 800bd8a:	6840      	ldr	r0, [r0, #4]
 800bd8c:	4770      	bx	lr
}
 800bd8e:	4770      	bx	lr

0800bd90 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 800bd90:	b108      	cbz	r0, 800bd96 <_lv_ll_get_tail+0x6>
    return ll_p->tail;
 800bd92:	6880      	ldr	r0, [r0, #8]
 800bd94:	4770      	bx	lr
}
 800bd96:	4770      	bx	lr

0800bd98 <_lv_ll_get_next>:
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 800bd98:	6803      	ldr	r3, [r0, #0]
 800bd9a:	3304      	adds	r3, #4
}
 800bd9c:	58c8      	ldr	r0, [r1, r3]
 800bd9e:	4770      	bx	lr

0800bda0 <_lv_ll_get_prev>:
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 800bda0:	6803      	ldr	r3, [r0, #0]
}
 800bda2:	58c8      	ldr	r0, [r1, r3]
 800bda4:	4770      	bx	lr

0800bda6 <_lv_ll_ins_prev>:
{
 800bda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(NULL == ll_p || NULL == n_act) return NULL;
 800bda8:	4607      	mov	r7, r0
 800bdaa:	b358      	cbz	r0, 800be04 <_lv_ll_ins_prev+0x5e>
 800bdac:	460c      	mov	r4, r1
 800bdae:	b359      	cbz	r1, 800be08 <_lv_ll_ins_prev+0x62>
    if(_lv_ll_get_head(ll_p) == n_act) {
 800bdb0:	f7ff ffea 	bl	800bd88 <_lv_ll_get_head>
 800bdb4:	4284      	cmp	r4, r0
 800bdb6:	d020      	beq.n	800bdfa <_lv_ll_ins_prev+0x54>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bdb8:	6838      	ldr	r0, [r7, #0]
 800bdba:	3008      	adds	r0, #8
 800bdbc:	f000 f924 	bl	800c008 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	b1c0      	cbz	r0, 800bdf6 <_lv_ll_ins_prev+0x50>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	f7ff ffea 	bl	800bda0 <_lv_ll_get_prev>
 800bdcc:	4606      	mov	r6, r0
        node_set_next(ll_p, n_prev, n_new);
 800bdce:	462a      	mov	r2, r5
 800bdd0:	4601      	mov	r1, r0
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	f7ff ff8d 	bl	800bcf2 <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 800bdd8:	4632      	mov	r2, r6
 800bdda:	4629      	mov	r1, r5
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7ff ff83 	bl	800bce8 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 800bde2:	462a      	mov	r2, r5
 800bde4:	4621      	mov	r1, r4
 800bde6:	4638      	mov	r0, r7
 800bde8:	f7ff ff7e 	bl	800bce8 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 800bdec:	4622      	mov	r2, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f7ff ff7e 	bl	800bcf2 <node_set_next>
}
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = _lv_ll_ins_head(ll_p);
 800bdfa:	4638      	mov	r0, r7
 800bdfc:	f7ff ff86 	bl	800bd0c <_lv_ll_ins_head>
 800be00:	4605      	mov	r5, r0
        if(n_new == NULL) return NULL;
 800be02:	e7f8      	b.n	800bdf6 <_lv_ll_ins_prev+0x50>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800be04:	4605      	mov	r5, r0
 800be06:	e7f6      	b.n	800bdf6 <_lv_ll_ins_prev+0x50>
 800be08:	460d      	mov	r5, r1
 800be0a:	e7f4      	b.n	800bdf6 <_lv_ll_ins_prev+0x50>

0800be0c <_lv_ll_remove>:
    if(ll_p == NULL) return;
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d03e      	beq.n	800be8e <_lv_ll_remove+0x82>
{
 800be10:	b570      	push	{r4, r5, r6, lr}
 800be12:	460c      	mov	r4, r1
 800be14:	4605      	mov	r5, r0
    if(_lv_ll_get_head(ll_p) == node_p) {
 800be16:	f7ff ffb7 	bl	800bd88 <_lv_ll_get_head>
 800be1a:	4284      	cmp	r4, r0
 800be1c:	d019      	beq.n	800be52 <_lv_ll_remove+0x46>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 800be1e:	4628      	mov	r0, r5
 800be20:	f7ff ffb6 	bl	800bd90 <_lv_ll_get_tail>
 800be24:	4284      	cmp	r4, r0
 800be26:	d023      	beq.n	800be70 <_lv_ll_remove+0x64>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 800be28:	4621      	mov	r1, r4
 800be2a:	4628      	mov	r0, r5
 800be2c:	f7ff ffb8 	bl	800bda0 <_lv_ll_get_prev>
 800be30:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f7ff ffaf 	bl	800bd98 <_lv_ll_get_next>
 800be3a:	4604      	mov	r4, r0
        node_set_next(ll_p, n_prev, n_next);
 800be3c:	4602      	mov	r2, r0
 800be3e:	4631      	mov	r1, r6
 800be40:	4628      	mov	r0, r5
 800be42:	f7ff ff56 	bl	800bcf2 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 800be46:	4632      	mov	r2, r6
 800be48:	4621      	mov	r1, r4
 800be4a:	4628      	mov	r0, r5
 800be4c:	f7ff ff4c 	bl	800bce8 <node_set_prev>
}
 800be50:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 800be52:	4621      	mov	r1, r4
 800be54:	4628      	mov	r0, r5
 800be56:	f7ff ff9f 	bl	800bd98 <_lv_ll_get_next>
 800be5a:	4601      	mov	r1, r0
 800be5c:	6068      	str	r0, [r5, #4]
        if(ll_p->head == NULL) {
 800be5e:	b120      	cbz	r0, 800be6a <_lv_ll_remove+0x5e>
            node_set_prev(ll_p, ll_p->head, NULL);
 800be60:	2200      	movs	r2, #0
 800be62:	4628      	mov	r0, r5
 800be64:	f7ff ff40 	bl	800bce8 <node_set_prev>
 800be68:	e7f2      	b.n	800be50 <_lv_ll_remove+0x44>
            ll_p->tail = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	60ab      	str	r3, [r5, #8]
 800be6e:	e7ef      	b.n	800be50 <_lv_ll_remove+0x44>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 800be70:	4621      	mov	r1, r4
 800be72:	4628      	mov	r0, r5
 800be74:	f7ff ff94 	bl	800bda0 <_lv_ll_get_prev>
 800be78:	4601      	mov	r1, r0
 800be7a:	60a8      	str	r0, [r5, #8]
        if(ll_p->tail == NULL) {
 800be7c:	b120      	cbz	r0, 800be88 <_lv_ll_remove+0x7c>
            node_set_next(ll_p, ll_p->tail, NULL);
 800be7e:	2200      	movs	r2, #0
 800be80:	4628      	mov	r0, r5
 800be82:	f7ff ff36 	bl	800bcf2 <node_set_next>
 800be86:	e7e3      	b.n	800be50 <_lv_ll_remove+0x44>
            ll_p->head = NULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	606b      	str	r3, [r5, #4]
 800be8c:	e7e0      	b.n	800be50 <_lv_ll_remove+0x44>
 800be8e:	4770      	bx	lr

0800be90 <_lv_ll_clear>:
{
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	4606      	mov	r6, r0
    i      = _lv_ll_get_head(ll_p);
 800be94:	f7ff ff78 	bl	800bd88 <_lv_ll_get_head>
 800be98:	4604      	mov	r4, r0
    while(i != NULL) {
 800be9a:	e00c      	b.n	800beb6 <_lv_ll_clear+0x26>
        i_next = _lv_ll_get_next(ll_p, i);
 800be9c:	4621      	mov	r1, r4
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ff7a 	bl	800bd98 <_lv_ll_get_next>
 800bea4:	4605      	mov	r5, r0
        _lv_ll_remove(ll_p, i);
 800bea6:	4621      	mov	r1, r4
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff ffaf 	bl	800be0c <_lv_ll_remove>
        lv_mem_free(i);
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 f8c8 	bl	800c044 <lv_mem_free>
        i = i_next;
 800beb4:	462c      	mov	r4, r5
    while(i != NULL) {
 800beb6:	2c00      	cmp	r4, #0
 800beb8:	d1f0      	bne.n	800be9c <_lv_ll_clear+0xc>
}
 800beba:	bd70      	pop	{r4, r5, r6, pc}

0800bebc <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 800bebc:	b138      	cbz	r0, 800bece <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800bebe:	6842      	ldr	r2, [r0, #4]
 800bec0:	b10a      	cbz	r2, 800bec6 <_lv_ll_is_empty+0xa>
    return false;
 800bec2:	2000      	movs	r0, #0
 800bec4:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800bec6:	6883      	ldr	r3, [r0, #8]
 800bec8:	b11b      	cbz	r3, 800bed2 <_lv_ll_is_empty+0x16>
    return false;
 800beca:	2000      	movs	r0, #0
 800becc:	4770      	bx	lr
    if(ll_p == NULL) return true;
 800bece:	2001      	movs	r0, #1
 800bed0:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800bed2:	2001      	movs	r0, #1
}
 800bed4:	4770      	bx	lr
	...

0800bed8 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
int16_t LV_ATTRIBUTE_FAST_MEM lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 800bed8:	4b1c      	ldr	r3, [pc, #112]	; (800bf4c <lv_trigo_sin+0x74>)
 800beda:	fb83 2300 	smull	r2, r3, r3, r0
 800bede:	4403      	add	r3, r0
 800bee0:	17c2      	asrs	r2, r0, #31
 800bee2:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 800bee6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800beea:	fb02 0013 	mls	r0, r2, r3, r0
 800beee:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 800bef0:	2800      	cmp	r0, #0
 800bef2:	db05      	blt.n	800bf00 <lv_trigo_sin+0x28>

    if(angle < 90) {
 800bef4:	2859      	cmp	r0, #89	; 0x59
 800bef6:	dc06      	bgt.n	800bf06 <lv_trigo_sin+0x2e>
        ret = sin0_90_table[angle];
 800bef8:	4b15      	ldr	r3, [pc, #84]	; (800bf50 <lv_trigo_sin+0x78>)
 800befa:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 800befe:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
 800bf00:	4410      	add	r0, r2
 800bf02:	b200      	sxth	r0, r0
 800bf04:	e7f6      	b.n	800bef4 <lv_trigo_sin+0x1c>
    }
    else if(angle >= 90 && angle < 180) {
 800bf06:	b280      	uxth	r0, r0
 800bf08:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	2b59      	cmp	r3, #89	; 0x59
 800bf10:	d806      	bhi.n	800bf20 <lv_trigo_sin+0x48>
        angle = 180 - angle;
 800bf12:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 800bf16:	b200      	sxth	r0, r0
        ret   = sin0_90_table[angle];
 800bf18:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <lv_trigo_sin+0x78>)
 800bf1a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 800bf1e:	4770      	bx	lr
    }
    else if(angle >= 180 && angle < 270) {
 800bf20:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	2b59      	cmp	r3, #89	; 0x59
 800bf28:	d806      	bhi.n	800bf38 <lv_trigo_sin+0x60>
        angle = angle - 180;
 800bf2a:	b21b      	sxth	r3, r3
        ret   = -sin0_90_table[angle];
 800bf2c:	4a08      	ldr	r2, [pc, #32]	; (800bf50 <lv_trigo_sin+0x78>)
 800bf2e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800bf32:	4240      	negs	r0, r0
 800bf34:	b200      	sxth	r0, r0
 800bf36:	4770      	bx	lr
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 800bf38:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
 800bf3c:	b200      	sxth	r0, r0
        ret   = -sin0_90_table[angle];
 800bf3e:	4b04      	ldr	r3, [pc, #16]	; (800bf50 <lv_trigo_sin+0x78>)
 800bf40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800bf44:	4240      	negs	r0, r0
 800bf46:	b200      	sxth	r0, r0
    }

    return ret;
}
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	b60b60b7 	.word	0xb60b60b7
 800bf50:	08014684 	.word	0x08014684

0800bf54 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 800bf54:	b570      	push	{r4, r5, r6, lr}
    uint32_t t_rem  = 1024 - t;
 800bf56:	f5c0 6c80 	rsb	ip, r0, #1024	; 0x400
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 800bf5a:	fb0c f40c 	mul.w	r4, ip, ip
 800bf5e:	0aa4      	lsrs	r4, r4, #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 800bf60:	fb04 f60c 	mul.w	r6, r4, ip
 800bf64:	0ab6      	lsrs	r6, r6, #10
    uint32_t t2     = (t * t) >> 10;
 800bf66:	fb00 fe00 	mul.w	lr, r0, r0
 800bf6a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
    uint32_t t3     = (t2 * t) >> 10;
 800bf6e:	fb0e f500 	mul.w	r5, lr, r0
 800bf72:	0aad      	lsrs	r5, r5, #10

    uint32_t v1 = (t_rem3 * u0) >> 10;
 800bf74:	fb01 f606 	mul.w	r6, r1, r6
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 800bf78:	fb04 f000 	mul.w	r0, r4, r0
 800bf7c:	fb00 f202 	mul.w	r2, r0, r2
 800bf80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800bf84:	0d12      	lsrs	r2, r2, #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 800bf86:	fb0e fc0c 	mul.w	ip, lr, ip
 800bf8a:	fb03 f30c 	mul.w	r3, r3, ip
 800bf8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    uint32_t v4 = (t3 * u3) >> 10;
 800bf92:	9804      	ldr	r0, [sp, #16]
 800bf94:	fb05 f000 	mul.w	r0, r5, r0

    return v1 + v2 + v3 + v4;
 800bf98:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800bf9c:	eb02 5213 	add.w	r2, r2, r3, lsr #20
}
 800bfa0:	eb02 2090 	add.w	r0, r2, r0, lsr #10
 800bfa4:	bd70      	pop	{r4, r5, r6, pc}

0800bfa6 <lv_map>:
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
    if(max_in >= min_in && x >= max_in) return max_out;
 800bfa6:	428a      	cmp	r2, r1
 800bfa8:	db01      	blt.n	800bfae <lv_map+0x8>
 800bfaa:	4282      	cmp	r2, r0
 800bfac:	dd17      	ble.n	800bfde <lv_map+0x38>
    if(max_in >= min_in && x <= min_in) return min_out;
 800bfae:	428a      	cmp	r2, r1
 800bfb0:	db01      	blt.n	800bfb6 <lv_map+0x10>
 800bfb2:	4281      	cmp	r1, r0
 800bfb4:	da15      	bge.n	800bfe2 <lv_map+0x3c>

    if(max_in <= min_in && x <= max_in) return max_out;
 800bfb6:	428a      	cmp	r2, r1
 800bfb8:	dc01      	bgt.n	800bfbe <lv_map+0x18>
 800bfba:	4282      	cmp	r2, r0
 800bfbc:	da13      	bge.n	800bfe6 <lv_map+0x40>
    if(max_in <= min_in && x >= min_in) return min_out;
 800bfbe:	428a      	cmp	r2, r1
 800bfc0:	dc01      	bgt.n	800bfc6 <lv_map+0x20>
 800bfc2:	4281      	cmp	r1, r0
 800bfc4:	dd11      	ble.n	800bfea <lv_map+0x44>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 800bfc6:	1a52      	subs	r2, r2, r1
    int32_t delta_out = max_out - min_out;
 800bfc8:	f8dd c000 	ldr.w	ip, [sp]
 800bfcc:	ebac 0c03 	sub.w	ip, ip, r3

    return ((x - min_in) * delta_out) / delta_in + min_out;
 800bfd0:	1a41      	subs	r1, r0, r1
 800bfd2:	fb0c f101 	mul.w	r1, ip, r1
 800bfd6:	fb91 f2f2 	sdiv	r2, r1, r2
 800bfda:	18d0      	adds	r0, r2, r3
 800bfdc:	4770      	bx	lr
    if(max_in >= min_in && x >= max_in) return max_out;
 800bfde:	9800      	ldr	r0, [sp, #0]
 800bfe0:	4770      	bx	lr
    if(max_in >= min_in && x <= min_in) return min_out;
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	4770      	bx	lr
    if(max_in <= min_in && x <= max_in) return max_out;
 800bfe6:	9800      	ldr	r0, [sp, #0]
 800bfe8:	4770      	bx	lr
    if(max_in <= min_in && x >= min_in) return min_out;
 800bfea:	4618      	mov	r0, r3
}
 800bfec:	4770      	bx	lr
	...

0800bff0 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 800bff0:	b510      	push	{r4, lr}
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 800bff2:	4c04      	ldr	r4, [pc, #16]	; (800c004 <lv_mem_init+0x14>)
 800bff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 fff7 	bl	800cfec <lv_tlsf_create_with_pool>
 800bffe:	f8c4 0800 	str.w	r0, [r4, #2048]	; 0x800
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 800c002:	bd10      	pop	{r4, pc}
 800c004:	20000dbc 	.word	0x20000dbc

0800c008 <lv_mem_alloc>:
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 800c008:	b908      	cbnz	r0, 800c00e <lv_mem_alloc+0x6>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 800c00a:	480c      	ldr	r0, [pc, #48]	; (800c03c <lv_mem_alloc+0x34>)
        max_used = LV_MAX(cur_used, max_used);
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 800c00c:	4770      	bx	lr
{
 800c00e:	b510      	push	{r4, lr}
 800c010:	4604      	mov	r4, r0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 800c012:	4601      	mov	r1, r0
 800c014:	4b0a      	ldr	r3, [pc, #40]	; (800c040 <lv_mem_alloc+0x38>)
 800c016:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
 800c01a:	f000 fff6 	bl	800d00a <lv_tlsf_malloc>
    if(alloc) {
 800c01e:	b160      	cbz	r0, 800c03a <lv_mem_alloc+0x32>
        cur_used += size;
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <lv_mem_alloc+0x38>)
 800c022:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800c026:	4414      	add	r4, r2
 800c028:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
        max_used = LV_MAX(cur_used, max_used);
 800c02c:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800c030:	4294      	cmp	r4, r2
 800c032:	bf38      	it	cc
 800c034:	4614      	movcc	r4, r2
 800c036:	f8c3 4808 	str.w	r4, [r3, #2056]	; 0x808
}
 800c03a:	bd10      	pop	{r4, pc}
 800c03c:	2000002c 	.word	0x2000002c
 800c040:	20000dbc 	.word	0x20000dbc

0800c044 <lv_mem_free>:
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 800c044:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <lv_mem_free+0x34>)
 800c046:	4298      	cmp	r0, r3
 800c048:	d014      	beq.n	800c074 <lv_mem_free+0x30>
 800c04a:	4601      	mov	r1, r0
    if(data == NULL) return;
 800c04c:	b190      	cbz	r0, 800c074 <lv_mem_free+0x30>
{
 800c04e:	b510      	push	{r4, lr}

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 800c050:	4c0a      	ldr	r4, [pc, #40]	; (800c07c <lv_mem_free+0x38>)
 800c052:	f8d4 0800 	ldr.w	r0, [r4, #2048]	; 0x800
 800c056:	f000 ffe9 	bl	800d02c <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 800c05a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800c05e:	4283      	cmp	r3, r0
 800c060:	d903      	bls.n	800c06a <lv_mem_free+0x26>
 800c062:	1a18      	subs	r0, r3, r0
 800c064:	f8c4 0804 	str.w	r0, [r4, #2052]	; 0x804
    else cur_used = 0;
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 800c068:	bd10      	pop	{r4, pc}
    else cur_used = 0;
 800c06a:	4b04      	ldr	r3, [pc, #16]	; (800c07c <lv_mem_free+0x38>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800c072:	e7f9      	b.n	800c068 <lv_mem_free+0x24>
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	2000002c 	.word	0x2000002c
 800c07c:	20000dbc 	.word	0x20000dbc

0800c080 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 800c080:	b508      	push	{r3, lr}
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 800c082:	b151      	cbz	r1, 800c09a <lv_mem_realloc+0x1a>
 800c084:	460a      	mov	r2, r1
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 800c086:	4b09      	ldr	r3, [pc, #36]	; (800c0ac <lv_mem_realloc+0x2c>)
 800c088:	4298      	cmp	r0, r3
 800c08a:	d00a      	beq.n	800c0a2 <lv_mem_realloc+0x22>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 800c08c:	4601      	mov	r1, r0
 800c08e:	4b08      	ldr	r3, [pc, #32]	; (800c0b0 <lv_mem_realloc+0x30>)
 800c090:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
 800c094:	f000 ffe9 	bl	800d06a <lv_tlsf_realloc>
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 800c098:	bd08      	pop	{r3, pc}
        lv_mem_free(data_p);
 800c09a:	f7ff ffd3 	bl	800c044 <lv_mem_free>
        return &zero_mem;
 800c09e:	4803      	ldr	r0, [pc, #12]	; (800c0ac <lv_mem_realloc+0x2c>)
 800c0a0:	e7fa      	b.n	800c098 <lv_mem_realloc+0x18>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 800c0a2:	4608      	mov	r0, r1
 800c0a4:	f7ff ffb0 	bl	800c008 <lv_mem_alloc>
 800c0a8:	e7f6      	b.n	800c098 <lv_mem_realloc+0x18>
 800c0aa:	bf00      	nop
 800c0ac:	2000002c 	.word	0x2000002c
 800c0b0:	20000dbc 	.word	0x20000dbc

0800c0b4 <lv_mem_buf_get>:
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
    if(size == 0) return NULL;
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d05b      	beq.n	800c170 <lv_mem_buf_get+0xbc>
{
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4604      	mov	r4, r0

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c0bc:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 800c0be:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c2:	e00c      	b.n	800c0de <lv_mem_buf_get+0x2a>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 800c0c4:	4a2b      	ldr	r2, [pc, #172]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c0c6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 800c0ca:	7983      	ldrb	r3, [r0, #6]
 800c0cc:	f043 0301 	orr.w	r3, r3, #1
 800c0d0:	7183      	strb	r3, [r0, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 800c0d2:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 800c0d6:	e036      	b.n	800c146 <lv_mem_buf_get+0x92>
            }
            else if(i_guess < 0) {
                i_guess = i;
 800c0d8:	b258      	sxtb	r0, r3
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c0da:	3301      	adds	r3, #1
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b0f      	cmp	r3, #15
 800c0e0:	d818      	bhi.n	800c114 <lv_mem_buf_get+0x60>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	4a23      	ldr	r2, [pc, #140]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c0e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c0ea:	7992      	ldrb	r2, [r2, #6]
 800c0ec:	f012 0f01 	tst.w	r2, #1
 800c0f0:	d1f3      	bne.n	800c0da <lv_mem_buf_get+0x26>
 800c0f2:	4a20      	ldr	r2, [pc, #128]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c0f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c0f8:	8892      	ldrh	r2, [r2, #4]
 800c0fa:	42a2      	cmp	r2, r4
 800c0fc:	d3ed      	bcc.n	800c0da <lv_mem_buf_get+0x26>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 800c0fe:	d0e1      	beq.n	800c0c4 <lv_mem_buf_get+0x10>
            else if(i_guess < 0) {
 800c100:	2800      	cmp	r0, #0
 800c102:	dbe9      	blt.n	800c0d8 <lv_mem_buf_get+0x24>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 800c104:	491b      	ldr	r1, [pc, #108]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c106:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c10a:	8889      	ldrh	r1, [r1, #4]
 800c10c:	428a      	cmp	r2, r1
 800c10e:	d2e4      	bcs.n	800c0da <lv_mem_buf_get+0x26>
                i_guess = i;
 800c110:	b258      	sxtb	r0, r3
 800c112:	e7e2      	b.n	800c0da <lv_mem_buf_get+0x26>
            }
        }
    }

    if(i_guess >= 0) {
 800c114:	2800      	cmp	r0, #0
 800c116:	da0d      	bge.n	800c134 <lv_mem_buf_get+0x80>
                  LV_GC_ROOT(lv_mem_buf[i_guess]).p);
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c118:	2300      	movs	r3, #0
 800c11a:	2b0f      	cmp	r3, #15
 800c11c:	d827      	bhi.n	800c16e <lv_mem_buf_get+0xba>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 800c11e:	461d      	mov	r5, r3
 800c120:	4a14      	ldr	r2, [pc, #80]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c122:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c126:	7992      	ldrb	r2, [r2, #6]
 800c128:	f012 0f01 	tst.w	r2, #1
 800c12c:	d00c      	beq.n	800c148 <lv_mem_buf_get+0x94>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c12e:	3301      	adds	r3, #1
 800c130:	b2db      	uxtb	r3, r3
 800c132:	e7f2      	b.n	800c11a <lv_mem_buf_get+0x66>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 800c134:	4a0f      	ldr	r2, [pc, #60]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c136:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800c13a:	798b      	ldrb	r3, [r1, #6]
 800c13c:	f043 0301 	orr.w	r3, r3, #1
 800c140:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 800c142:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
    return NULL;
}
 800c146:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 800c148:	4621      	mov	r1, r4
 800c14a:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c14c:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 800c150:	f7ff ff96 	bl	800c080 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 800c154:	b150      	cbz	r0, 800c16c <lv_mem_buf_get+0xb8>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 800c156:	4907      	ldr	r1, [pc, #28]	; (800c174 <lv_mem_buf_get+0xc0>)
 800c158:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 800c15c:	799a      	ldrb	r2, [r3, #6]
 800c15e:	f042 0201 	orr.w	r2, r2, #1
 800c162:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 800c164:	809c      	strh	r4, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 800c166:	f841 0035 	str.w	r0, [r1, r5, lsl #3]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 800c16a:	e7ec      	b.n	800c146 <lv_mem_buf_get+0x92>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 800c16c:	e7fe      	b.n	800c16c <lv_mem_buf_get+0xb8>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 800c16e:	e7fe      	b.n	800c16e <lv_mem_buf_get+0xba>
    if(size == 0) return NULL;
 800c170:	2000      	movs	r0, #0
}
 800c172:	4770      	bx	lr
 800c174:	20000c3c 	.word	0x20000c3c

0800c178 <lv_mem_buf_release>:
 */
void lv_mem_buf_release(void * p)
{
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c178:	2300      	movs	r3, #0
 800c17a:	2b0f      	cmp	r3, #15
 800c17c:	d810      	bhi.n	800c1a0 <lv_mem_buf_release+0x28>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 800c17e:	4619      	mov	r1, r3
 800c180:	4a08      	ldr	r2, [pc, #32]	; (800c1a4 <lv_mem_buf_release+0x2c>)
 800c182:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c186:	4282      	cmp	r2, r0
 800c188:	d002      	beq.n	800c190 <lv_mem_buf_release+0x18>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c18a:	3301      	adds	r3, #1
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	e7f4      	b.n	800c17a <lv_mem_buf_release+0x2>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <lv_mem_buf_release+0x2c>)
 800c192:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c196:	798b      	ldrb	r3, [r1, #6]
 800c198:	f36f 0300 	bfc	r3, #0, #1
 800c19c:	718b      	strb	r3, [r1, #6]
            return;
 800c19e:	4770      	bx	lr
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	20000c3c 	.word	0x20000c3c

0800c1a8 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 800c1a8:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c1aa:	2400      	movs	r4, #0
 800c1ac:	e001      	b.n	800c1b2 <lv_mem_buf_free_all+0xa>
 800c1ae:	3401      	adds	r4, #1
 800c1b0:	b2e4      	uxtb	r4, r4
 800c1b2:	2c0f      	cmp	r4, #15
 800c1b4:	d812      	bhi.n	800c1dc <lv_mem_buf_free_all+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 800c1b6:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <lv_mem_buf_free_all+0x38>)
 800c1b8:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d0f6      	beq.n	800c1ae <lv_mem_buf_free_all+0x6>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 800c1c0:	f7ff ff40 	bl	800c044 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 800c1c4:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <lv_mem_buf_free_all+0x38>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 800c1cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1d0:	7999      	ldrb	r1, [r3, #6]
 800c1d2:	f362 0100 	bfi	r1, r2, #0, #1
 800c1d6:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 800c1d8:	809a      	strh	r2, [r3, #4]
 800c1da:	e7e8      	b.n	800c1ae <lv_mem_buf_free_all+0x6>
        }
    }
}
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000c3c 	.word	0x20000c3c

0800c1e4 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
void * LV_ATTRIBUTE_FAST_MEM lv_memcpy(void * dst, const void * src, size_t len)
{
 800c1e4:	b410      	push	{r4}
    uint8_t * d8 = dst;
    const uint8_t * s8 = src;

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800c1e6:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 800c1ea:	f001 0303 	and.w	r3, r1, #3

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 800c1ee:	429c      	cmp	r4, r3
 800c1f0:	d14b      	bne.n	800c28a <lv_memcpy+0xa6>
        }
        return dst;
    }

    /*Make the memories aligned*/
    if(d_align) {
 800c1f2:	2c00      	cmp	r4, #0
 800c1f4:	d074      	beq.n	800c2e0 <lv_memcpy+0xfc>
        d_align = ALIGN_MASK + 1 - d_align;
 800c1f6:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
 800c1fa:	4603      	mov	r3, r0
        while(d_align && len) {
 800c1fc:	e056      	b.n	800c2ac <lv_memcpy+0xc8>
            REPEAT8(COPY8);
 800c1fe:	780c      	ldrb	r4, [r1, #0]
 800c200:	701c      	strb	r4, [r3, #0]
 800c202:	784c      	ldrb	r4, [r1, #1]
 800c204:	705c      	strb	r4, [r3, #1]
 800c206:	788c      	ldrb	r4, [r1, #2]
 800c208:	709c      	strb	r4, [r3, #2]
 800c20a:	78cc      	ldrb	r4, [r1, #3]
 800c20c:	70dc      	strb	r4, [r3, #3]
 800c20e:	790c      	ldrb	r4, [r1, #4]
 800c210:	711c      	strb	r4, [r3, #4]
 800c212:	794c      	ldrb	r4, [r1, #5]
 800c214:	715c      	strb	r4, [r3, #5]
 800c216:	798c      	ldrb	r4, [r1, #6]
 800c218:	719c      	strb	r4, [r3, #6]
 800c21a:	79cc      	ldrb	r4, [r1, #7]
 800c21c:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
 800c21e:	7a0c      	ldrb	r4, [r1, #8]
 800c220:	721c      	strb	r4, [r3, #8]
 800c222:	7a4c      	ldrb	r4, [r1, #9]
 800c224:	725c      	strb	r4, [r3, #9]
 800c226:	7a8c      	ldrb	r4, [r1, #10]
 800c228:	729c      	strb	r4, [r3, #10]
 800c22a:	7acc      	ldrb	r4, [r1, #11]
 800c22c:	72dc      	strb	r4, [r3, #11]
 800c22e:	7b0c      	ldrb	r4, [r1, #12]
 800c230:	731c      	strb	r4, [r3, #12]
 800c232:	7b4c      	ldrb	r4, [r1, #13]
 800c234:	735c      	strb	r4, [r3, #13]
 800c236:	7b8c      	ldrb	r4, [r1, #14]
 800c238:	739c      	strb	r4, [r3, #14]
 800c23a:	7bcc      	ldrb	r4, [r1, #15]
 800c23c:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
 800c23e:	7c0c      	ldrb	r4, [r1, #16]
 800c240:	741c      	strb	r4, [r3, #16]
 800c242:	7c4c      	ldrb	r4, [r1, #17]
 800c244:	745c      	strb	r4, [r3, #17]
 800c246:	7c8c      	ldrb	r4, [r1, #18]
 800c248:	749c      	strb	r4, [r3, #18]
 800c24a:	7ccc      	ldrb	r4, [r1, #19]
 800c24c:	74dc      	strb	r4, [r3, #19]
 800c24e:	7d0c      	ldrb	r4, [r1, #20]
 800c250:	751c      	strb	r4, [r3, #20]
 800c252:	7d4c      	ldrb	r4, [r1, #21]
 800c254:	755c      	strb	r4, [r3, #21]
 800c256:	7d8c      	ldrb	r4, [r1, #22]
 800c258:	759c      	strb	r4, [r3, #22]
 800c25a:	7dcc      	ldrb	r4, [r1, #23]
 800c25c:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
 800c25e:	7e0c      	ldrb	r4, [r1, #24]
 800c260:	761c      	strb	r4, [r3, #24]
 800c262:	7e4c      	ldrb	r4, [r1, #25]
 800c264:	765c      	strb	r4, [r3, #25]
 800c266:	7e8c      	ldrb	r4, [r1, #26]
 800c268:	769c      	strb	r4, [r3, #26]
 800c26a:	7ecc      	ldrb	r4, [r1, #27]
 800c26c:	76dc      	strb	r4, [r3, #27]
 800c26e:	7f0c      	ldrb	r4, [r1, #28]
 800c270:	771c      	strb	r4, [r3, #28]
 800c272:	7f4c      	ldrb	r4, [r1, #29]
 800c274:	775c      	strb	r4, [r3, #29]
 800c276:	7f8c      	ldrb	r4, [r1, #30]
 800c278:	779c      	strb	r4, [r3, #30]
 800c27a:	7fcc      	ldrb	r4, [r1, #31]
 800c27c:	77dc      	strb	r4, [r3, #31]
 800c27e:	3320      	adds	r3, #32
 800c280:	3120      	adds	r1, #32
            len -= 32;
 800c282:	3a20      	subs	r2, #32
        while(len > 32) {
 800c284:	2a20      	cmp	r2, #32
 800c286:	d8ba      	bhi.n	800c1fe <lv_memcpy+0x1a>
 800c288:	e006      	b.n	800c298 <lv_memcpy+0xb4>
    uint8_t * d8 = dst;
 800c28a:	4603      	mov	r3, r0
 800c28c:	e7fa      	b.n	800c284 <lv_memcpy+0xa0>
            COPY8
 800c28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c292:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
 800c296:	3a01      	subs	r2, #1
        while(len) {
 800c298:	2a00      	cmp	r2, #0
 800c29a:	d1f8      	bne.n	800c28e <lv_memcpy+0xaa>
        COPY8
        len--;
    }

    return dst;
}
 800c29c:	bc10      	pop	{r4}
 800c29e:	4770      	bx	lr
            COPY8;
 800c2a0:	f811 cb01 	ldrb.w	ip, [r1], #1
 800c2a4:	f803 cb01 	strb.w	ip, [r3], #1
            d_align--;
 800c2a8:	3c01      	subs	r4, #1
            len--;
 800c2aa:	3a01      	subs	r2, #1
        while(d_align && len) {
 800c2ac:	b1ac      	cbz	r4, 800c2da <lv_memcpy+0xf6>
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	d1f6      	bne.n	800c2a0 <lv_memcpy+0xbc>
 800c2b2:	e012      	b.n	800c2da <lv_memcpy+0xf6>
        REPEAT8(COPY32)
 800c2b4:	680c      	ldr	r4, [r1, #0]
 800c2b6:	601c      	str	r4, [r3, #0]
 800c2b8:	684c      	ldr	r4, [r1, #4]
 800c2ba:	605c      	str	r4, [r3, #4]
 800c2bc:	688c      	ldr	r4, [r1, #8]
 800c2be:	609c      	str	r4, [r3, #8]
 800c2c0:	68cc      	ldr	r4, [r1, #12]
 800c2c2:	60dc      	str	r4, [r3, #12]
 800c2c4:	690c      	ldr	r4, [r1, #16]
 800c2c6:	611c      	str	r4, [r3, #16]
 800c2c8:	694c      	ldr	r4, [r1, #20]
 800c2ca:	615c      	str	r4, [r3, #20]
 800c2cc:	698c      	ldr	r4, [r1, #24]
 800c2ce:	619c      	str	r4, [r3, #24]
 800c2d0:	69cc      	ldr	r4, [r1, #28]
 800c2d2:	61dc      	str	r4, [r3, #28]
 800c2d4:	3320      	adds	r3, #32
 800c2d6:	3120      	adds	r1, #32
        len -= 32;
 800c2d8:	3a20      	subs	r2, #32
    while(len > 32) {
 800c2da:	2a20      	cmp	r2, #32
 800c2dc:	d8ea      	bhi.n	800c2b4 <lv_memcpy+0xd0>
 800c2de:	e006      	b.n	800c2ee <lv_memcpy+0x10a>
    uint8_t * d8 = dst;
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	e7fa      	b.n	800c2da <lv_memcpy+0xf6>
        COPY32;
 800c2e4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c2e8:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
 800c2ec:	3a04      	subs	r2, #4
    while(len > 4) {
 800c2ee:	2a04      	cmp	r2, #4
 800c2f0:	d8f8      	bhi.n	800c2e4 <lv_memcpy+0x100>
    while(len) {
 800c2f2:	2a00      	cmp	r2, #0
 800c2f4:	d0d2      	beq.n	800c29c <lv_memcpy+0xb8>
        COPY8
 800c2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2fa:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
 800c2fe:	3a01      	subs	r2, #1
 800c300:	e7f7      	b.n	800c2f2 <lv_memcpy+0x10e>

0800c302 <lv_memset_00>:
{
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 800c302:	f010 0303 	ands.w	r3, r0, #3
 800c306:	d016      	beq.n	800c336 <lv_memset_00+0x34>
        d_align = ALIGN_MASK + 1 - d_align;
 800c308:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 800c30c:	e004      	b.n	800c318 <lv_memset_00+0x16>
            SET8(0);
 800c30e:	2200      	movs	r2, #0
 800c310:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 800c314:	3901      	subs	r1, #1
            d_align--;
 800c316:	3b01      	subs	r3, #1
        while(d_align && len) {
 800c318:	b16b      	cbz	r3, 800c336 <lv_memset_00+0x34>
 800c31a:	2900      	cmp	r1, #0
 800c31c:	d1f7      	bne.n	800c30e <lv_memset_00+0xc>
 800c31e:	e00a      	b.n	800c336 <lv_memset_00+0x34>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
        REPEAT8(SET32(0));
 800c320:	2300      	movs	r3, #0
 800c322:	6003      	str	r3, [r0, #0]
 800c324:	6043      	str	r3, [r0, #4]
 800c326:	6083      	str	r3, [r0, #8]
 800c328:	60c3      	str	r3, [r0, #12]
 800c32a:	6103      	str	r3, [r0, #16]
 800c32c:	6143      	str	r3, [r0, #20]
 800c32e:	6183      	str	r3, [r0, #24]
 800c330:	61c3      	str	r3, [r0, #28]
 800c332:	3020      	adds	r0, #32
        len -= 32;
 800c334:	3920      	subs	r1, #32
    while(len > 32) {
 800c336:	2920      	cmp	r1, #32
 800c338:	d8f2      	bhi.n	800c320 <lv_memset_00+0x1e>
 800c33a:	e003      	b.n	800c344 <lv_memset_00+0x42>
    }

    while(len > 4) {
        SET32(0);
 800c33c:	2300      	movs	r3, #0
 800c33e:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 800c342:	3904      	subs	r1, #4
    while(len > 4) {
 800c344:	2904      	cmp	r1, #4
 800c346:	d8f9      	bhi.n	800c33c <lv_memset_00+0x3a>
    }

    d8 = (uint8_t *)d32;
    while(len) {
 800c348:	b121      	cbz	r1, 800c354 <lv_memset_00+0x52>
        SET8(0);
 800c34a:	2300      	movs	r3, #0
 800c34c:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
 800c350:	3901      	subs	r1, #1
 800c352:	e7f9      	b.n	800c348 <lv_memset_00+0x46>
    }
}
 800c354:	4770      	bx	lr

0800c356 <lv_style_set_prop_helper>:
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
    *prop_storage = prop;
 800c356:	8010      	strh	r0, [r2, #0]
    *value_storage = value;
 800c358:	6019      	str	r1, [r3, #0]
}
 800c35a:	4770      	bx	lr

0800c35c <lv_style_init>:
{
 800c35c:	b508      	push	{r3, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 800c35e:	2108      	movs	r1, #8
 800c360:	f7ff ffcf 	bl	800c302 <lv_memset_00>
}
 800c364:	bd08      	pop	{r3, pc}

0800c366 <lv_style_reset>:
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 800c366:	8882      	ldrh	r2, [r0, #4]
 800c368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d00d      	beq.n	800c38c <lv_style_reset+0x26>
{
 800c370:	b510      	push	{r4, lr}
 800c372:	4604      	mov	r4, r0
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 800c374:	79c3      	ldrb	r3, [r0, #7]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d804      	bhi.n	800c384 <lv_style_reset+0x1e>
    lv_memset_00(style, sizeof(lv_style_t));
 800c37a:	2108      	movs	r1, #8
 800c37c:	4620      	mov	r0, r4
 800c37e:	f7ff ffc0 	bl	800c302 <lv_memset_00>
}
 800c382:	bd10      	pop	{r4, pc}
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 800c384:	6800      	ldr	r0, [r0, #0]
 800c386:	f7ff fe5d 	bl	800c044 <lv_mem_free>
 800c38a:	e7f6      	b.n	800c37a <lv_style_reset+0x14>
 800c38c:	4770      	bx	lr
	...

0800c390 <lv_style_register_prop>:
{
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 800c394:	4b19      	ldr	r3, [pc, #100]	; (800c3fc <lv_style_register_prop+0x6c>)
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	b180      	cbz	r0, 800c3bc <lv_style_register_prop+0x2c>
    if(((last_custom_prop_id + 1) & LV_STYLE_PROP_META_MASK) != 0) {
 800c39a:	4b19      	ldr	r3, [pc, #100]	; (800c400 <lv_style_register_prop+0x70>)
 800c39c:	881b      	ldrh	r3, [r3, #0]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800c3a4:	d126      	bne.n	800c3f4 <lv_style_register_prop+0x64>
    size_t required_size = (last_custom_prop_id + 1 - _LV_STYLE_LAST_BUILT_IN_PROP);
 800c3a6:	f1a3 026f 	sub.w	r2, r3, #111	; 0x6f
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 800c3aa:	4916      	ldr	r1, [pc, #88]	; (800c404 <lv_style_register_prop+0x74>)
 800c3ac:	6809      	ldr	r1, [r1, #0]
 800c3ae:	4291      	cmp	r1, r2
 800c3b0:	d213      	bcs.n	800c3da <lv_style_register_prop+0x4a>
        required_size = (required_size + 31) & ~31;
 800c3b2:	3b50      	subs	r3, #80	; 0x50
        LV_ASSERT_MSG(required_size > 0, "required size has become 0?");
 800c3b4:	f033 041f 	bics.w	r4, r3, #31
 800c3b8:	d107      	bne.n	800c3ca <lv_style_register_prop+0x3a>
 800c3ba:	e7fe      	b.n	800c3ba <lv_style_register_prop+0x2a>
        _lv_style_custom_prop_flag_lookup_table_size = 0;
 800c3bc:	4b11      	ldr	r3, [pc, #68]	; (800c404 <lv_style_register_prop+0x74>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
        last_custom_prop_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 800c3c2:	4b0f      	ldr	r3, [pc, #60]	; (800c400 <lv_style_register_prop+0x70>)
 800c3c4:	2270      	movs	r2, #112	; 0x70
 800c3c6:	801a      	strh	r2, [r3, #0]
 800c3c8:	e7e7      	b.n	800c39a <lv_style_register_prop+0xa>
        uint8_t * new_p = lv_mem_realloc(old_p, required_size * sizeof(uint8_t));
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	f7ff fe58 	bl	800c080 <lv_mem_realloc>
        if(new_p == NULL) {
 800c3d0:	b190      	cbz	r0, 800c3f8 <lv_style_register_prop+0x68>
        LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) = new_p;
 800c3d2:	4b0a      	ldr	r3, [pc, #40]	; (800c3fc <lv_style_register_prop+0x6c>)
 800c3d4:	6018      	str	r0, [r3, #0]
        _lv_style_custom_prop_flag_lookup_table_size = required_size;
 800c3d6:	4b0b      	ldr	r3, [pc, #44]	; (800c404 <lv_style_register_prop+0x74>)
 800c3d8:	601c      	str	r4, [r3, #0]
    last_custom_prop_id++;
 800c3da:	4a09      	ldr	r2, [pc, #36]	; (800c400 <lv_style_register_prop+0x70>)
 800c3dc:	8813      	ldrh	r3, [r2, #0]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	b298      	uxth	r0, r3
 800c3e2:	8010      	strh	r0, [r2, #0]
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 800c3e4:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <lv_style_register_prop+0x6c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	b11b      	cbz	r3, 800c3f2 <lv_style_register_prop+0x62>
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
 800c3ea:	f1a0 0271 	sub.w	r2, r0, #113	; 0x71
 800c3ee:	549d      	strb	r5, [r3, r2]
    return last_custom_prop_id;
 800c3f0:	e001      	b.n	800c3f6 <lv_style_register_prop+0x66>
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 800c3f2:	e7fe      	b.n	800c3f2 <lv_style_register_prop+0x62>
        return LV_STYLE_PROP_INV;
 800c3f4:	2000      	movs	r0, #0
}
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
            return LV_STYLE_PROP_INV;
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e7fc      	b.n	800c3f6 <lv_style_register_prop+0x66>
 800c3fc:	20000db8 	.word	0x20000db8
 800c400:	20000030 	.word	0x20000030
 800c404:	200015c8 	.word	0x200015c8

0800c408 <lv_style_remove_prop>:
{
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 800c40a:	8883      	ldrh	r3, [r0, #4]
 800c40c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c410:	4293      	cmp	r3, r2
 800c412:	d05b      	beq.n	800c4cc <lv_style_remove_prop+0xc4>
 800c414:	4605      	mov	r5, r0
 800c416:	460c      	mov	r4, r1
    if(style->prop_cnt == 0)  return false;
 800c418:	79c1      	ldrb	r1, [r0, #7]
 800c41a:	2900      	cmp	r1, #0
 800c41c:	d058      	beq.n	800c4d0 <lv_style_remove_prop+0xc8>
    if(style->prop_cnt == 1) {
 800c41e:	2901      	cmp	r1, #1
 800c420:	d00d      	beq.n	800c43e <lv_style_remove_prop+0x36>
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800c422:	6807      	ldr	r7, [r0, #0]
 800c424:	eb07 0681 	add.w	r6, r7, r1, lsl #2
    for(i = 0; i < style->prop_cnt; i++) {
 800c428:	2300      	movs	r3, #0
 800c42a:	4299      	cmp	r1, r3
 800c42c:	d94c      	bls.n	800c4c8 <lv_style_remove_prop+0xc0>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 800c42e:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 800c432:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800c436:	42a2      	cmp	r2, r4
 800c438:	d00c      	beq.n	800c454 <lv_style_remove_prop+0x4c>
    for(i = 0; i < style->prop_cnt; i++) {
 800c43a:	3301      	adds	r3, #1
 800c43c:	e7f5      	b.n	800c42a <lv_style_remove_prop+0x22>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 800c43e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c442:	42a3      	cmp	r3, r4
 800c444:	d001      	beq.n	800c44a <lv_style_remove_prop+0x42>
        return false;
 800c446:	2000      	movs	r0, #0
 800c448:	e043      	b.n	800c4d2 <lv_style_remove_prop+0xca>
            style->prop1 = LV_STYLE_PROP_INV;
 800c44a:	2300      	movs	r3, #0
 800c44c:	8083      	strh	r3, [r0, #4]
            style->prop_cnt = 0;
 800c44e:	71c3      	strb	r3, [r0, #7]
            return true;
 800c450:	2001      	movs	r0, #1
 800c452:	e03e      	b.n	800c4d2 <lv_style_remove_prop+0xca>
            if(style->prop_cnt == 2) {
 800c454:	2902      	cmp	r1, #2
 800c456:	d010      	beq.n	800c47a <lv_style_remove_prop+0x72>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 800c458:	3901      	subs	r1, #1
 800c45a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 800c45e:	0048      	lsls	r0, r1, #1
 800c460:	f7ff fdd2 	bl	800c008 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 800c464:	4684      	mov	ip, r0
 800c466:	b3a8      	cbz	r0, 800c4d4 <lv_style_remove_prop+0xcc>
                style->v_p.values_and_props = new_values_and_props;
 800c468:	6028      	str	r0, [r5, #0]
                style->prop_cnt--;
 800c46a:	79e8      	ldrb	r0, [r5, #7]
 800c46c:	3801      	subs	r0, #1
 800c46e:	b2c0      	uxtb	r0, r0
 800c470:	71e8      	strb	r0, [r5, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800c472:	0080      	lsls	r0, r0, #2
                for(i = j = 0; j <= style->prop_cnt;
 800c474:	2300      	movs	r3, #0
 800c476:	461a      	mov	r2, r3
 800c478:	e013      	b.n	800c4a2 <lv_style_remove_prop+0x9a>
                style->prop_cnt = 1;
 800c47a:	2201      	movs	r2, #1
 800c47c:	71ea      	strb	r2, [r5, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 800c47e:	b94b      	cbnz	r3, 800c494 <lv_style_remove_prop+0x8c>
 800c480:	8872      	ldrh	r2, [r6, #2]
 800c482:	80aa      	strh	r2, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 800c484:	b94b      	cbnz	r3, 800c49a <lv_style_remove_prop+0x92>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	602b      	str	r3, [r5, #0]
            lv_mem_free(old_values);
 800c48a:	4638      	mov	r0, r7
 800c48c:	f7ff fdda 	bl	800c044 <lv_mem_free>
            return true;
 800c490:	2001      	movs	r0, #1
 800c492:	e01e      	b.n	800c4d2 <lv_style_remove_prop+0xca>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 800c494:	f837 2021 	ldrh.w	r2, [r7, r1, lsl #2]
 800c498:	e7f3      	b.n	800c482 <lv_style_remove_prop+0x7a>
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	602b      	str	r3, [r5, #0]
 800c49e:	e7f4      	b.n	800c48a <lv_style_remove_prop+0x82>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 800c4a0:	3301      	adds	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 800c4a2:	79e9      	ldrb	r1, [r5, #7]
 800c4a4:	4299      	cmp	r1, r3
 800c4a6:	d3f0      	bcc.n	800c48a <lv_style_remove_prop+0x82>
                    if(old_props[j] != prop) {
 800c4a8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800c4ac:	42a1      	cmp	r1, r4
 800c4ae:	d0f7      	beq.n	800c4a0 <lv_style_remove_prop+0x98>
                        new_values[i] = old_values[j];
 800c4b0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800c4b4:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
                        new_props[i++] = old_props[j];
 800c4b8:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 800c4bc:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 800c4c0:	f82c e001 	strh.w	lr, [ip, r1]
 800c4c4:	3201      	adds	r2, #1
 800c4c6:	e7eb      	b.n	800c4a0 <lv_style_remove_prop+0x98>
    return false;
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	e002      	b.n	800c4d2 <lv_style_remove_prop+0xca>
        return false;
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e000      	b.n	800c4d2 <lv_style_remove_prop+0xca>
    if(style->prop_cnt == 0)  return false;
 800c4d0:	2000      	movs	r0, #0
}
 800c4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(new_values_and_props == NULL) return false;
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e7fc      	b.n	800c4d2 <lv_style_remove_prop+0xca>

0800c4d8 <lv_style_prop_get_default>:
    switch(prop) {
 800c4d8:	3803      	subs	r0, #3
 800c4da:	286a      	cmp	r0, #106	; 0x6a
 800c4dc:	d84f      	bhi.n	800c57e <lv_style_prop_get_default+0xa6>
 800c4de:	e8df f000 	tbb	[pc, r0]
 800c4e2:	4e4b      	.short	0x4e4b
 800c4e4:	4e4e4b4e 	.word	0x4e4e4b4e
 800c4e8:	4e4e4e4e 	.word	0x4e4e4e4e
 800c4ec:	4e4e4e4e 	.word	0x4e4e4e4e
 800c4f0:	4e4e4e4e 	.word	0x4e4e4e4e
 800c4f4:	4e4e4e4e 	.word	0x4e4e4e4e
 800c4f8:	4e4e4e4e 	.word	0x4e4e4e4e
 800c4fc:	394e4e4e 	.word	0x394e4e4e
 800c500:	4e4e3f4e 	.word	0x4e4e3f4e
 800c504:	4e4e4e45 	.word	0x4e4e4e45
 800c508:	4e4e4e43 	.word	0x4e4e4e43
 800c50c:	3f4e4e4e 	.word	0x3f4e4e4e
 800c510:	4e474e43 	.word	0x4e474e43
 800c514:	4e433f4e 	.word	0x4e433f4e
 800c518:	4e4e4e4e 	.word	0x4e4e4e4e
 800c51c:	4e4e4e4e 	.word	0x4e4e4e4e
 800c520:	3f4e4e4e 	.word	0x3f4e4e4e
 800c524:	4e3f4343 	.word	0x4e3f4343
 800c528:	4e4e4e4e 	.word	0x4e4e4e4e
 800c52c:	4e4e433f 	.word	0x4e4e433f
 800c530:	4e433f4e 	.word	0x4e433f4e
 800c534:	4e49433f 	.word	0x4e49433f
 800c538:	4e4e4e4e 	.word	0x4e4e4e4e
 800c53c:	434e4e4e 	.word	0x434e4e4e
 800c540:	4e4e4e43 	.word	0x4e4e4e43
 800c544:	4e4e4e4e 	.word	0x4e4e4e4e
 800c548:	4e4e4e4e 	.word	0x4e4e4e4e
 800c54c:	36          	.byte	0x36
 800c54d:	00          	.byte	0x00
            value.num = LV_IMG_ZOOM_NONE;
 800c54e:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 800c552:	4770      	bx	lr
 800c554:	2000      	movs	r0, #0
 800c556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c55a:	f363 000f 	bfi	r0, r3, #0, #16
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 800c55e:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800c560:	2000      	movs	r0, #0
 800c562:	f36f 000f 	bfc	r0, #0, #16
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 800c566:	4770      	bx	lr
            value.num = LV_OPA_COVER;
 800c568:	20ff      	movs	r0, #255	; 0xff
            break;
 800c56a:	4770      	bx	lr
            value.num = 255;
 800c56c:	20ff      	movs	r0, #255	; 0xff
            break;
 800c56e:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 800c570:	200f      	movs	r0, #15
            break;
 800c572:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 800c574:	4803      	ldr	r0, [pc, #12]	; (800c584 <lv_style_prop_get_default+0xac>)
            break;
 800c576:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 800c578:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 800c57c:	4770      	bx	lr
            value.ptr = NULL;
 800c57e:	2000      	movs	r0, #0
}
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	08010fbc 	.word	0x08010fbc

0800c588 <lv_style_get_prop>:
{
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4684      	mov	ip, r0
 800c58c:	4614      	mov	r4, r2
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 800c58e:	8883      	ldrh	r3, [r0, #4]
 800c590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c594:	4293      	cmp	r3, r2
 800c596:	d028      	beq.n	800c5ea <lv_style_get_prop+0x62>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 800c598:	79c0      	ldrb	r0, [r0, #7]
 800c59a:	b348      	cbz	r0, 800c5f0 <lv_style_get_prop+0x68>

    if(style->prop_cnt > 1) {
 800c59c:	2801      	cmp	r0, #1
 800c59e:	d942      	bls.n	800c626 <lv_style_get_prop+0x9e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800c5a0:	f8dc 5000 	ldr.w	r5, [ip]
 800c5a4:	4686      	mov	lr, r0
 800c5a6:	eb05 0c80 	add.w	ip, r5, r0, lsl #2
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e026      	b.n	800c5fc <lv_style_get_prop+0x74>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 800c5ae:	f8de 3004 	ldr.w	r3, [lr, #4]
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	e017      	b.n	800c5e6 <lv_style_get_prop+0x5e>
        for(i = 0; i < style->prop_cnt; i++) {
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	f89c 2007 	ldrb.w	r2, [ip, #7]
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d216      	bcs.n	800c5ee <lv_style_get_prop+0x66>
            const_prop = style->v_p.const_props + i;
 800c5c0:	f8dc 0000 	ldr.w	r0, [ip]
 800c5c4:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 800c5c8:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800c5cc:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 800c5d0:	4281      	cmp	r1, r0
 800c5d2:	d1f0      	bne.n	800c5b6 <lv_style_get_prop+0x2e>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 800c5d4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800c5d8:	d13a      	bne.n	800c650 <lv_style_get_prop+0xc8>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 800c5da:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800c5de:	d0e6      	beq.n	800c5ae <lv_style_get_prop+0x26>
 800c5e0:	f7ff ff7a 	bl	800c4d8 <lv_style_prop_get_default>
 800c5e4:	6020      	str	r0, [r4, #0]
                return LV_STYLE_RES_FOUND;
 800c5e6:	2001      	movs	r0, #1
 800c5e8:	e002      	b.n	800c5f0 <lv_style_get_prop+0x68>
        for(i = 0; i < style->prop_cnt; i++) {
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e7e4      	b.n	800c5b8 <lv_style_get_prop+0x30>
        return LV_STYLE_RES_NOT_FOUND;
 800c5ee:	2000      	movs	r0, #0
}
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
                    return LV_STYLE_RES_INHERIT;
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
                    *value = lv_style_prop_get_default(prop_id);
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                    *value = values[i];
 800c5f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	e011      	b.n	800c61e <lv_style_get_prop+0x96>
        for(i = 0; i < style->prop_cnt; i++) {
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	459e      	cmp	lr, r3
 800c5fe:	d910      	bls.n	800c622 <lv_style_get_prop+0x9a>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 800c600:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
 800c604:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 800c608:	4281      	cmp	r1, r0
 800c60a:	d1f6      	bne.n	800c5fa <lv_style_get_prop+0x72>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 800c60c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800c610:	d120      	bne.n	800c654 <lv_style_get_prop+0xcc>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 800c612:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800c616:	d0ec      	beq.n	800c5f2 <lv_style_get_prop+0x6a>
                    *value = lv_style_prop_get_default(prop_id);
 800c618:	f7ff ff5e 	bl	800c4d8 <lv_style_prop_get_default>
 800c61c:	6020      	str	r0, [r4, #0]
                }
                return LV_STYLE_RES_FOUND;
 800c61e:	2001      	movs	r0, #1
 800c620:	e7e6      	b.n	800c5f0 <lv_style_get_prop+0x68>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
    }
    return LV_STYLE_RES_NOT_FOUND;
 800c622:	2000      	movs	r0, #0
 800c624:	e7e4      	b.n	800c5f0 <lv_style_get_prop+0x68>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 800c626:	f3c3 000d 	ubfx	r0, r3, #0, #14
 800c62a:	4281      	cmp	r1, r0
 800c62c:	d001      	beq.n	800c632 <lv_style_get_prop+0xaa>
    return LV_STYLE_RES_NOT_FOUND;
 800c62e:	2000      	movs	r0, #0
 800c630:	e7de      	b.n	800c5f0 <lv_style_get_prop+0x68>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 800c632:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c636:	d10f      	bne.n	800c658 <lv_style_get_prop+0xd0>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 800c638:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c63c:	d004      	beq.n	800c648 <lv_style_get_prop+0xc0>
 800c63e:	f7ff ff4b 	bl	800c4d8 <lv_style_prop_get_default>
 800c642:	6020      	str	r0, [r4, #0]
        return LV_STYLE_RES_FOUND;
 800c644:	2001      	movs	r0, #1
 800c646:	e7d3      	b.n	800c5f0 <lv_style_get_prop+0x68>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 800c648:	f8dc 3000 	ldr.w	r3, [ip]
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	e7f9      	b.n	800c644 <lv_style_get_prop+0xbc>
                    return LV_STYLE_RES_INHERIT;
 800c650:	2002      	movs	r0, #2
 800c652:	e7cd      	b.n	800c5f0 <lv_style_get_prop+0x68>
                    return LV_STYLE_RES_INHERIT;
 800c654:	2002      	movs	r0, #2
 800c656:	e7cb      	b.n	800c5f0 <lv_style_get_prop+0x68>
            return LV_STYLE_RES_INHERIT;
 800c658:	2002      	movs	r0, #2
 800c65a:	e7c9      	b.n	800c5f0 <lv_style_get_prop+0x68>

0800c65c <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 800c65c:	79c0      	ldrb	r0, [r0, #7]
}
 800c65e:	fab0 f080 	clz	r0, r0
 800c662:	0940      	lsrs	r0, r0, #5
 800c664:	4770      	bx	lr

0800c666 <_lv_style_get_prop_group>:
    uint16_t group = (prop & 0x1FF) >> 4;
 800c666:	0903      	lsrs	r3, r0, #4
 800c668:	f3c0 1004 	ubfx	r0, r0, #4, #5
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 800c66c:	f013 0f18 	tst.w	r3, #24
 800c670:	d000      	beq.n	800c674 <_lv_style_get_prop_group+0xe>
 800c672:	2007      	movs	r0, #7
}
 800c674:	4770      	bx	lr

0800c676 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 800c676:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c67a:	4690      	mov	r8, r2
 800c67c:	461f      	mov	r7, r3
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 800c67e:	8883      	ldrh	r3, [r0, #4]
 800c680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c684:	4293      	cmp	r3, r2
 800c686:	d05f      	beq.n	800c748 <lv_style_set_prop_internal+0xd2>
 800c688:	4604      	mov	r4, r0
 800c68a:	460e      	mov	r6, r1
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 800c68c:	f3c1 050d 	ubfx	r5, r1, #0, #14

    if(style->prop_cnt > 1) {
 800c690:	f890 9007 	ldrb.w	r9, [r0, #7]
 800c694:	f1b9 0f01 	cmp.w	r9, #1
 800c698:	d944      	bls.n	800c724 <lv_style_set_prop_internal+0xae>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	eb00 0189 	add.w	r1, r0, r9, lsl #2
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 800c6a0:	f109 3cff 	add.w	ip, r9, #4294967295
 800c6a4:	f1bc 0f00 	cmp.w	ip, #0
 800c6a8:	db10      	blt.n	800c6cc <lv_style_set_prop_internal+0x56>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 800c6aa:	eb01 024c 	add.w	r2, r1, ip, lsl #1
 800c6ae:	f831 e01c 	ldrh.w	lr, [r1, ip, lsl #1]
 800c6b2:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
 800c6b6:	4575      	cmp	r5, lr
 800c6b8:	d002      	beq.n	800c6c0 <lv_style_set_prop_internal+0x4a>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 800c6ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c6be:	e7f1      	b.n	800c6a4 <lv_style_set_prop_internal+0x2e>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 800c6c0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 800c6c4:	4641      	mov	r1, r8
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	47b8      	blx	r7
                return;
 800c6ca:	e03d      	b.n	800c748 <lv_style_set_prop_internal+0xd2>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 800c6cc:	f109 0901 	add.w	r9, r9, #1
 800c6d0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 800c6d4:	ea4f 0149 	mov.w	r1, r9, lsl #1
 800c6d8:	f7ff fcd2 	bl	800c080 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 800c6dc:	4602      	mov	r2, r0
 800c6de:	b398      	cbz	r0, 800c748 <lv_style_set_prop_internal+0xd2>
        style->v_p.values_and_props = values_and_props;
 800c6e0:	6020      	str	r0, [r4, #0]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800c6e2:	79e3      	ldrb	r3, [r4, #7]
 800c6e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
        props = (uint16_t *)tmp;
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	e005      	b.n	800c6f8 <lv_style_set_prop_internal+0x82>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 800c6ec:	1c98      	adds	r0, r3, #2
 800c6ee:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
 800c6f2:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	daf7      	bge.n	800c6ec <lv_style_set_prop_internal+0x76>
        }
        style->prop_cnt++;
 800c6fc:	79e1      	ldrb	r1, [r4, #7]
 800c6fe:	3101      	adds	r1, #1
 800c700:	b2c9      	uxtb	r1, r1
 800c702:	71e1      	strb	r1, [r4, #7]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        props = (uint16_t *)tmp;
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 800c704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c708:	3b01      	subs	r3, #1
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 800c710:	3801      	subs	r0, #1
 800c712:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c716:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 800c71a:	440a      	add	r2, r1
 800c71c:	4641      	mov	r1, r8
 800c71e:	4630      	mov	r0, r6
 800c720:	47b8      	blx	r7
 800c722:	e009      	b.n	800c738 <lv_style_set_prop_internal+0xc2>
    }
    else if(style->prop_cnt == 1) {
 800c724:	f1b9 0f01 	cmp.w	r9, #1
 800c728:	d010      	beq.n	800c74c <lv_style_set_prop_internal+0xd6>
        props[0] = style->prop1;
        values[0] = value_tmp;
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
    }
    else {
        style->prop_cnt = 1;
 800c72a:	2301      	movs	r3, #1
 800c72c:	71c3      	strb	r3, [r0, #7]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 800c72e:	4603      	mov	r3, r0
 800c730:	1d02      	adds	r2, r0, #4
 800c732:	4641      	mov	r1, r8
 800c734:	4630      	mov	r0, r6
 800c736:	47b8      	blx	r7
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 800c738:	4628      	mov	r0, r5
 800c73a:	f7ff ff94 	bl	800c666 <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 800c73e:	2301      	movs	r3, #1
 800c740:	4083      	lsls	r3, r0
 800c742:	79a0      	ldrb	r0, [r4, #6]
 800c744:	4318      	orrs	r0, r3
 800c746:	71a0      	strb	r0, [r4, #6]
}
 800c748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 800c74c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c750:	42ab      	cmp	r3, r5
 800c752:	d01d      	beq.n	800c790 <lv_style_set_prop_internal+0x11a>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 800c754:	f109 0901 	add.w	r9, r9, #1
 800c758:	eb09 0949 	add.w	r9, r9, r9, lsl #1
        uint8_t * values_and_props = lv_mem_alloc(size);
 800c75c:	ea4f 0049 	mov.w	r0, r9, lsl #1
 800c760:	f7ff fc52 	bl	800c008 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 800c764:	4603      	mov	r3, r0
 800c766:	2800      	cmp	r0, #0
 800c768:	d0ee      	beq.n	800c748 <lv_style_set_prop_internal+0xd2>
        lv_style_value_t value_tmp = style->v_p.value1;
 800c76a:	6820      	ldr	r0, [r4, #0]
        style->v_p.values_and_props = values_and_props;
 800c76c:	6023      	str	r3, [r4, #0]
        style->prop_cnt++;
 800c76e:	79e1      	ldrb	r1, [r4, #7]
 800c770:	3101      	adds	r1, #1
 800c772:	b2c9      	uxtb	r1, r1
 800c774:	71e1      	strb	r1, [r4, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800c776:	eb03 0281 	add.w	r2, r3, r1, lsl #2
        props[0] = style->prop1;
 800c77a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800c77e:	f823 c021 	strh.w	ip, [r3, r1, lsl #2]
        values[0] = value_tmp;
 800c782:	f843 0b04 	str.w	r0, [r3], #4
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 800c786:	3202      	adds	r2, #2
 800c788:	4641      	mov	r1, r8
 800c78a:	4630      	mov	r0, r6
 800c78c:	47b8      	blx	r7
 800c78e:	e7d3      	b.n	800c738 <lv_style_set_prop_internal+0xc2>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 800c790:	4603      	mov	r3, r0
 800c792:	1d02      	adds	r2, r0, #4
 800c794:	4641      	mov	r1, r8
 800c796:	4630      	mov	r0, r6
 800c798:	47b8      	blx	r7
            return;
 800c79a:	e7d5      	b.n	800c748 <lv_style_set_prop_internal+0xd2>

0800c79c <lv_style_set_prop>:
{
 800c79c:	b508      	push	{r3, lr}
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 800c79e:	4b02      	ldr	r3, [pc, #8]	; (800c7a8 <lv_style_set_prop+0xc>)
 800c7a0:	f7ff ff69 	bl	800c676 <lv_style_set_prop_internal>
}
 800c7a4:	bd08      	pop	{r3, pc}
 800c7a6:	bf00      	nop
 800c7a8:	0800c357 	.word	0x0800c357

0800c7ac <_lv_style_prop_lookup_flags>:
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 800c7ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7b0:	4298      	cmp	r0, r3
 800c7b2:	d013      	beq.n	800c7dc <_lv_style_prop_lookup_flags+0x30>
    if(prop == LV_STYLE_PROP_INV) return 0;
 800c7b4:	b1a0      	cbz	r0, 800c7e0 <_lv_style_prop_lookup_flags+0x34>
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 800c7b6:	2870      	cmp	r0, #112	; 0x70
 800c7b8:	d90a      	bls.n	800c7d0 <_lv_style_prop_lookup_flags+0x24>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 800c7ba:	3871      	subs	r0, #113	; 0x71
 800c7bc:	b280      	uxth	r0, r0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 800c7be:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <_lv_style_prop_lookup_flags+0x3c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	b17b      	cbz	r3, 800c7e4 <_lv_style_prop_lookup_flags+0x38>
 800c7c4:	4a09      	ldr	r2, [pc, #36]	; (800c7ec <_lv_style_prop_lookup_flags+0x40>)
 800c7c6:	6812      	ldr	r2, [r2, #0]
 800c7c8:	4290      	cmp	r0, r2
 800c7ca:	d305      	bcc.n	800c7d8 <_lv_style_prop_lookup_flags+0x2c>
    return 0;
 800c7cc:	2000      	movs	r0, #0
}
 800c7ce:	4770      	bx	lr
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 800c7d0:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <_lv_style_prop_lookup_flags+0x44>)
 800c7d2:	4418      	add	r0, r3
 800c7d4:	7900      	ldrb	r0, [r0, #4]
 800c7d6:	4770      	bx	lr
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 800c7d8:	5c18      	ldrb	r0, [r3, r0]
 800c7da:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 800c7dc:	201f      	movs	r0, #31
 800c7de:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	4770      	bx	lr
    return 0;
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	4770      	bx	lr
 800c7e8:	20000db8 	.word	0x20000db8
 800c7ec:	200015c8 	.word	0x200015c8
 800c7f0:	0801473c 	.word	0x0801473c

0800c7f4 <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 800c7f8:	6840      	ldr	r0, [r0, #4]
 800c7fa:	f7fe fb61 	bl	800aec0 <lv_tick_elaps>
    if(elp >= timer->period)
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	4283      	cmp	r3, r0
 800c802:	d901      	bls.n	800c808 <lv_timer_time_remaining+0x14>
        return 0;
    return timer->period - elp;
 800c804:	1a18      	subs	r0, r3, r0
}
 800c806:	bd10      	pop	{r4, pc}
        return 0;
 800c808:	2000      	movs	r0, #0
 800c80a:	e7fc      	b.n	800c806 <lv_timer_time_remaining+0x12>

0800c80c <lv_timer_create>:
{
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	4606      	mov	r6, r0
 800c810:	460f      	mov	r7, r1
 800c812:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 800c814:	480b      	ldr	r0, [pc, #44]	; (800c844 <lv_timer_create+0x38>)
 800c816:	f7ff fa79 	bl	800bd0c <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 800c81a:	b190      	cbz	r0, 800c842 <lv_timer_create+0x36>
 800c81c:	4604      	mov	r4, r0
    new_timer->period = period;
 800c81e:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 800c820:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 800c822:	f04f 33ff 	mov.w	r3, #4294967295
 800c826:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 800c828:	7d03      	ldrb	r3, [r0, #20]
 800c82a:	f36f 0300 	bfc	r3, #0, #1
 800c82e:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 800c830:	f7fe fb3c 	bl	800aeac <lv_tick_get>
 800c834:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 800c836:	60e5      	str	r5, [r4, #12]
    timer_created = true;
 800c838:	4b03      	ldr	r3, [pc, #12]	; (800c848 <lv_timer_create+0x3c>)
 800c83a:	2201      	movs	r2, #1
 800c83c:	701a      	strb	r2, [r3, #0]
}
 800c83e:	4620      	mov	r0, r4
 800c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
 800c842:	e7fe      	b.n	800c842 <lv_timer_create+0x36>
 800c844:	20000ba8 	.word	0x20000ba8
 800c848:	200015cc 	.word	0x200015cc

0800c84c <lv_timer_del>:
{
 800c84c:	b510      	push	{r4, lr}
 800c84e:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 800c850:	4601      	mov	r1, r0
 800c852:	4805      	ldr	r0, [pc, #20]	; (800c868 <lv_timer_del+0x1c>)
 800c854:	f7ff fada 	bl	800be0c <_lv_ll_remove>
    timer_deleted = true;
 800c858:	4b04      	ldr	r3, [pc, #16]	; (800c86c <lv_timer_del+0x20>)
 800c85a:	2201      	movs	r2, #1
 800c85c:	705a      	strb	r2, [r3, #1]
    lv_mem_free(timer);
 800c85e:	4620      	mov	r0, r4
 800c860:	f7ff fbf0 	bl	800c044 <lv_mem_free>
}
 800c864:	bd10      	pop	{r4, pc}
 800c866:	bf00      	nop
 800c868:	20000ba8 	.word	0x20000ba8
 800c86c:	200015cc 	.word	0x200015cc

0800c870 <lv_timer_exec>:
{
 800c870:	b538      	push	{r3, r4, r5, lr}
    if(timer->paused) return false;
 800c872:	7d03      	ldrb	r3, [r0, #20]
 800c874:	f013 0f01 	tst.w	r3, #1
 800c878:	d002      	beq.n	800c880 <lv_timer_exec+0x10>
 800c87a:	2500      	movs	r5, #0
}
 800c87c:	4628      	mov	r0, r5
 800c87e:	bd38      	pop	{r3, r4, r5, pc}
 800c880:	4604      	mov	r4, r0
    if(lv_timer_time_remaining(timer) == 0) {
 800c882:	f7ff ffb7 	bl	800c7f4 <lv_timer_time_remaining>
 800c886:	b970      	cbnz	r0, 800c8a6 <lv_timer_exec+0x36>
        int32_t original_repeat_count = timer->repeat_count;
 800c888:	6925      	ldr	r5, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 800c88a:	2d00      	cmp	r5, #0
 800c88c:	dd01      	ble.n	800c892 <lv_timer_exec+0x22>
 800c88e:	1e6b      	subs	r3, r5, #1
 800c890:	6123      	str	r3, [r4, #16]
        timer->last_run = lv_tick_get();
 800c892:	f7fe fb0b 	bl	800aeac <lv_tick_get>
 800c896:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 800c898:	68a3      	ldr	r3, [r4, #8]
 800c89a:	b183      	cbz	r3, 800c8be <lv_timer_exec+0x4e>
 800c89c:	b18d      	cbz	r5, 800c8c2 <lv_timer_exec+0x52>
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4798      	blx	r3
        exec = true;
 800c8a2:	2501      	movs	r5, #1
 800c8a4:	e000      	b.n	800c8a8 <lv_timer_exec+0x38>
    bool exec = false;
 800c8a6:	2500      	movs	r5, #0
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 800c8a8:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <lv_timer_exec+0x58>)
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1e5      	bne.n	800c87c <lv_timer_exec+0xc>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 800c8b0:	6923      	ldr	r3, [r4, #16]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e2      	bne.n	800c87c <lv_timer_exec+0xc>
            lv_timer_del(timer);
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f7ff ffc8 	bl	800c84c <lv_timer_del>
 800c8bc:	e7de      	b.n	800c87c <lv_timer_exec+0xc>
        exec = true;
 800c8be:	2501      	movs	r5, #1
 800c8c0:	e7f2      	b.n	800c8a8 <lv_timer_exec+0x38>
 800c8c2:	2501      	movs	r5, #1
 800c8c4:	e7f0      	b.n	800c8a8 <lv_timer_exec+0x38>
 800c8c6:	bf00      	nop
 800c8c8:	200015cc 	.word	0x200015cc

0800c8cc <lv_timer_handler>:
{
 800c8cc:	b570      	push	{r4, r5, r6, lr}
    if(already_running) {
 800c8ce:	4b40      	ldr	r3, [pc, #256]	; (800c9d0 <lv_timer_handler+0x104>)
 800c8d0:	789b      	ldrb	r3, [r3, #2]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d179      	bne.n	800c9ca <lv_timer_handler+0xfe>
    already_running = true;
 800c8d6:	4b3e      	ldr	r3, [pc, #248]	; (800c9d0 <lv_timer_handler+0x104>)
 800c8d8:	2201      	movs	r2, #1
 800c8da:	709a      	strb	r2, [r3, #2]
    if(lv_timer_run == false) {
 800c8dc:	78db      	ldrb	r3, [r3, #3]
 800c8de:	b923      	cbnz	r3, 800c8ea <lv_timer_handler+0x1e>
        already_running = false; /*Release mutex*/
 800c8e0:	4b3b      	ldr	r3, [pc, #236]	; (800c9d0 <lv_timer_handler+0x104>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	709a      	strb	r2, [r3, #2]
        return 1;
 800c8e6:	2601      	movs	r6, #1
 800c8e8:	e070      	b.n	800c9cc <lv_timer_handler+0x100>
    uint32_t handler_start = lv_tick_get();
 800c8ea:	f7fe fadf 	bl	800aeac <lv_tick_get>
    if(handler_start == 0) {
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	bb10      	cbnz	r0, 800c938 <lv_timer_handler+0x6c>
        run_cnt++;
 800c8f2:	4a37      	ldr	r2, [pc, #220]	; (800c9d0 <lv_timer_handler+0x104>)
 800c8f4:	6853      	ldr	r3, [r2, #4]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	6053      	str	r3, [r2, #4]
        if(run_cnt > 100) {
 800c8fa:	2b64      	cmp	r3, #100	; 0x64
 800c8fc:	d91c      	bls.n	800c938 <lv_timer_handler+0x6c>
            run_cnt = 0;
 800c8fe:	4613      	mov	r3, r2
 800c900:	2200      	movs	r2, #0
 800c902:	605a      	str	r2, [r3, #4]
 800c904:	e018      	b.n	800c938 <lv_timer_handler+0x6c>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 800c906:	4b33      	ldr	r3, [pc, #204]	; (800c9d4 <lv_timer_handler+0x108>)
 800c908:	601c      	str	r4, [r3, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 800c90a:	4b32      	ldr	r3, [pc, #200]	; (800c9d4 <lv_timer_handler+0x108>)
 800c90c:	6819      	ldr	r1, [r3, #0]
 800c90e:	b181      	cbz	r1, 800c932 <lv_timer_handler+0x66>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 800c910:	4831      	ldr	r0, [pc, #196]	; (800c9d8 <lv_timer_handler+0x10c>)
 800c912:	f7ff fa41 	bl	800bd98 <_lv_ll_get_next>
 800c916:	4604      	mov	r4, r0
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 800c918:	4b2e      	ldr	r3, [pc, #184]	; (800c9d4 <lv_timer_handler+0x108>)
 800c91a:	6818      	ldr	r0, [r3, #0]
 800c91c:	f7ff ffa8 	bl	800c870 <lv_timer_exec>
 800c920:	2800      	cmp	r0, #0
 800c922:	d0f0      	beq.n	800c906 <lv_timer_handler+0x3a>
                if(timer_created || timer_deleted) {
 800c924:	4b2a      	ldr	r3, [pc, #168]	; (800c9d0 <lv_timer_handler+0x104>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	b91b      	cbnz	r3, 800c932 <lv_timer_handler+0x66>
 800c92a:	4b29      	ldr	r3, [pc, #164]	; (800c9d0 <lv_timer_handler+0x104>)
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0e9      	beq.n	800c906 <lv_timer_handler+0x3a>
    } while(LV_GC_ROOT(_lv_timer_act));
 800c932:	4b28      	ldr	r3, [pc, #160]	; (800c9d4 <lv_timer_handler+0x108>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	b14b      	cbz	r3, 800c94c <lv_timer_handler+0x80>
        timer_deleted             = false;
 800c938:	4b25      	ldr	r3, [pc, #148]	; (800c9d0 <lv_timer_handler+0x104>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	705a      	strb	r2, [r3, #1]
        timer_created             = false;
 800c93e:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 800c940:	4825      	ldr	r0, [pc, #148]	; (800c9d8 <lv_timer_handler+0x10c>)
 800c942:	f7ff fa21 	bl	800bd88 <_lv_ll_get_head>
 800c946:	4b23      	ldr	r3, [pc, #140]	; (800c9d4 <lv_timer_handler+0x108>)
 800c948:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 800c94a:	e7de      	b.n	800c90a <lv_timer_handler+0x3e>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 800c94c:	4822      	ldr	r0, [pc, #136]	; (800c9d8 <lv_timer_handler+0x10c>)
 800c94e:	f7ff fa1b 	bl	800bd88 <_lv_ll_get_head>
 800c952:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TIMER_READY;
 800c954:	f04f 36ff 	mov.w	r6, #4294967295
    while(next) {
 800c958:	e004      	b.n	800c964 <lv_timer_handler+0x98>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 800c95a:	4621      	mov	r1, r4
 800c95c:	481e      	ldr	r0, [pc, #120]	; (800c9d8 <lv_timer_handler+0x10c>)
 800c95e:	f7ff fa1b 	bl	800bd98 <_lv_ll_get_next>
 800c962:	4604      	mov	r4, r0
    while(next) {
 800c964:	b154      	cbz	r4, 800c97c <lv_timer_handler+0xb0>
        if(!next->paused) {
 800c966:	7d23      	ldrb	r3, [r4, #20]
 800c968:	f013 0f01 	tst.w	r3, #1
 800c96c:	d1f5      	bne.n	800c95a <lv_timer_handler+0x8e>
            uint32_t delay = lv_timer_time_remaining(next);
 800c96e:	4620      	mov	r0, r4
 800c970:	f7ff ff40 	bl	800c7f4 <lv_timer_time_remaining>
            if(delay < time_till_next)
 800c974:	4286      	cmp	r6, r0
 800c976:	d9f0      	bls.n	800c95a <lv_timer_handler+0x8e>
                time_till_next = delay;
 800c978:	4606      	mov	r6, r0
 800c97a:	e7ee      	b.n	800c95a <lv_timer_handler+0x8e>
    busy_time += lv_tick_elaps(handler_start);
 800c97c:	4628      	mov	r0, r5
 800c97e:	f7fe fa9f 	bl	800aec0 <lv_tick_elaps>
 800c982:	4b13      	ldr	r3, [pc, #76]	; (800c9d0 <lv_timer_handler+0x104>)
 800c984:	689a      	ldr	r2, [r3, #8]
 800c986:	4402      	add	r2, r0
 800c988:	609a      	str	r2, [r3, #8]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c98a:	68d8      	ldr	r0, [r3, #12]
 800c98c:	f7fe fa98 	bl	800aec0 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800c990:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800c994:	d313      	bcc.n	800c9be <lv_timer_handler+0xf2>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 800c996:	4a0e      	ldr	r2, [pc, #56]	; (800c9d0 <lv_timer_handler+0x104>)
 800c998:	6893      	ldr	r3, [r2, #8]
 800c99a:	2164      	movs	r1, #100	; 0x64
 800c99c:	fb01 f303 	mul.w	r3, r1, r3
 800c9a0:	fbb3 f3f0 	udiv	r3, r3, r0
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	7413      	strb	r3, [r2, #16]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 800c9a8:	428b      	cmp	r3, r1
 800c9aa:	d80c      	bhi.n	800c9c6 <lv_timer_handler+0xfa>
 800c9ac:	1acb      	subs	r3, r1, r3
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	4c07      	ldr	r4, [pc, #28]	; (800c9d0 <lv_timer_handler+0x104>)
 800c9b2:	7423      	strb	r3, [r4, #16]
        busy_time         = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60a3      	str	r3, [r4, #8]
        idle_period_start = lv_tick_get();
 800c9b8:	f7fe fa78 	bl	800aeac <lv_tick_get>
 800c9bc:	60e0      	str	r0, [r4, #12]
    already_running = false; /*Release the mutex*/
 800c9be:	4b04      	ldr	r3, [pc, #16]	; (800c9d0 <lv_timer_handler+0x104>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	709a      	strb	r2, [r3, #2]
    return time_till_next;
 800c9c4:	e002      	b.n	800c9cc <lv_timer_handler+0x100>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e7f2      	b.n	800c9b0 <lv_timer_handler+0xe4>
        return 1;
 800c9ca:	2601      	movs	r6, #1
}
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	bd70      	pop	{r4, r5, r6, pc}
 800c9d0:	200015cc 	.word	0x200015cc
 800c9d4:	20000c38 	.word	0x20000c38
 800c9d8:	20000ba8 	.word	0x20000ba8

0800c9dc <lv_timer_pause>:
    timer->paused = true;
 800c9dc:	7d03      	ldrb	r3, [r0, #20]
 800c9de:	f043 0301 	orr.w	r3, r3, #1
 800c9e2:	7503      	strb	r3, [r0, #20]
}
 800c9e4:	4770      	bx	lr

0800c9e6 <lv_timer_resume>:
    timer->paused = false;
 800c9e6:	7d03      	ldrb	r3, [r0, #20]
 800c9e8:	f36f 0300 	bfc	r3, #0, #1
 800c9ec:	7503      	strb	r3, [r0, #20]
}
 800c9ee:	4770      	bx	lr

0800c9f0 <lv_timer_ready>:
{
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 800c9f4:	f7fe fa5a 	bl	800aeac <lv_tick_get>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	1ac3      	subs	r3, r0, r3
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	6063      	str	r3, [r4, #4]
}
 800ca00:	bd10      	pop	{r4, pc}
	...

0800ca04 <lv_timer_enable>:
    lv_timer_run = en;
 800ca04:	4b01      	ldr	r3, [pc, #4]	; (800ca0c <lv_timer_enable+0x8>)
 800ca06:	70d8      	strb	r0, [r3, #3]
}
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	200015cc 	.word	0x200015cc

0800ca10 <_lv_timer_core_init>:
{
 800ca10:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 800ca12:	2118      	movs	r1, #24
 800ca14:	4803      	ldr	r0, [pc, #12]	; (800ca24 <_lv_timer_core_init+0x14>)
 800ca16:	f7ff f971 	bl	800bcfc <_lv_ll_init>
    lv_timer_enable(true);
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	f7ff fff2 	bl	800ca04 <lv_timer_enable>
}
 800ca20:	bd08      	pop	{r3, pc}
 800ca22:	bf00      	nop
 800ca24:	20000ba8 	.word	0x20000ba8

0800ca28 <block_size>:
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 800ca28:	6840      	ldr	r0, [r0, #4]
}
 800ca2a:	f020 0003 	bic.w	r0, r0, #3
 800ca2e:	4770      	bx	lr

0800ca30 <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
    const size_t oldsize = block->size;
 800ca30:	6843      	ldr	r3, [r0, #4]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 800ca32:	f003 0303 	and.w	r3, r3, #3
 800ca36:	430b      	orrs	r3, r1
 800ca38:	6043      	str	r3, [r0, #4]
}
 800ca3a:	4770      	bx	lr

0800ca3c <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 800ca3c:	b508      	push	{r3, lr}
    return block_size(block) == 0;
 800ca3e:	f7ff fff3 	bl	800ca28 <block_size>
}
 800ca42:	fab0 f080 	clz	r0, r0
 800ca46:	0940      	lsrs	r0, r0, #5
 800ca48:	bd08      	pop	{r3, pc}

0800ca4a <block_is_free>:

static int block_is_free(const block_header_t * block)
{
    return tlsf_cast(int, block->size & block_header_free_bit);
 800ca4a:	6840      	ldr	r0, [r0, #4]
}
 800ca4c:	f000 0001 	and.w	r0, r0, #1
 800ca50:	4770      	bx	lr

0800ca52 <block_set_free>:

static void block_set_free(block_header_t * block)
{
    block->size |= block_header_free_bit;
 800ca52:	6843      	ldr	r3, [r0, #4]
 800ca54:	f043 0301 	orr.w	r3, r3, #1
 800ca58:	6043      	str	r3, [r0, #4]
}
 800ca5a:	4770      	bx	lr

0800ca5c <block_set_used>:

static void block_set_used(block_header_t * block)
{
    block->size &= ~block_header_free_bit;
 800ca5c:	6843      	ldr	r3, [r0, #4]
 800ca5e:	f023 0301 	bic.w	r3, r3, #1
 800ca62:	6043      	str	r3, [r0, #4]
}
 800ca64:	4770      	bx	lr

0800ca66 <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 800ca66:	6840      	ldr	r0, [r0, #4]
}
 800ca68:	f000 0002 	and.w	r0, r0, #2
 800ca6c:	4770      	bx	lr

0800ca6e <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
    block->size |= block_header_prev_free_bit;
 800ca6e:	6843      	ldr	r3, [r0, #4]
 800ca70:	f043 0302 	orr.w	r3, r3, #2
 800ca74:	6043      	str	r3, [r0, #4]
}
 800ca76:	4770      	bx	lr

0800ca78 <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
    block->size &= ~block_header_prev_free_bit;
 800ca78:	6843      	ldr	r3, [r0, #4]
 800ca7a:	f023 0302 	bic.w	r3, r3, #2
 800ca7e:	6043      	str	r3, [r0, #4]
}
 800ca80:	4770      	bx	lr

0800ca82 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
    return tlsf_cast(block_header_t *,
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 800ca82:	3808      	subs	r0, #8
 800ca84:	4770      	bx	lr

0800ca86 <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
    return tlsf_cast(void *,
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 800ca86:	3008      	adds	r0, #8
 800ca88:	4770      	bx	lr

0800ca8a <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
}
 800ca8a:	4408      	add	r0, r1
 800ca8c:	4770      	bx	lr

0800ca8e <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 800ca8e:	b510      	push	{r4, lr}
 800ca90:	4604      	mov	r4, r0
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 800ca92:	f7ff ffe8 	bl	800ca66 <block_is_prev_free>
 800ca96:	b900      	cbnz	r0, 800ca9a <block_prev+0xc>
 800ca98:	e7fe      	b.n	800ca98 <block_prev+0xa>
    return block->prev_phys_block;
}
 800ca9a:	6820      	ldr	r0, [r4, #0]
 800ca9c:	bd10      	pop	{r4, pc}

0800ca9e <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 800ca9e:	b538      	push	{r3, r4, r5, lr}
 800caa0:	4604      	mov	r4, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 800caa2:	f7ff fff0 	bl	800ca86 <block_to_ptr>
 800caa6:	4605      	mov	r5, r0
                                            block_size(block) - block_header_overhead);
 800caa8:	4620      	mov	r0, r4
 800caaa:	f7ff ffbd 	bl	800ca28 <block_size>
    block_header_t * next = offset_to_block(block_to_ptr(block),
 800caae:	1f01      	subs	r1, r0, #4
 800cab0:	4628      	mov	r0, r5
 800cab2:	f7ff ffea 	bl	800ca8a <offset_to_block>
 800cab6:	4605      	mov	r5, r0
    tlsf_assert(!block_is_last(block));
 800cab8:	4620      	mov	r0, r4
 800caba:	f7ff ffbf 	bl	800ca3c <block_is_last>
 800cabe:	b100      	cbz	r0, 800cac2 <block_next+0x24>
 800cac0:	e7fe      	b.n	800cac0 <block_next+0x22>
    return next;
}
 800cac2:	4628      	mov	r0, r5
 800cac4:	bd38      	pop	{r3, r4, r5, pc}

0800cac6 <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 800cac6:	b510      	push	{r4, lr}
 800cac8:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 800caca:	f7ff ffe8 	bl	800ca9e <block_next>
    next->prev_phys_block = block;
 800cace:	6004      	str	r4, [r0, #0]
    return next;
}
 800cad0:	bd10      	pop	{r4, pc}

0800cad2 <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 800cad2:	b510      	push	{r4, lr}
 800cad4:	4604      	mov	r4, r0
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 800cad6:	f7ff fff6 	bl	800cac6 <block_link_next>
    block_set_prev_free(next);
 800cada:	f7ff ffc8 	bl	800ca6e <block_set_prev_free>
    block_set_free(block);
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff ffb7 	bl	800ca52 <block_set_free>
}
 800cae4:	bd10      	pop	{r4, pc}

0800cae6 <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 800cae6:	b510      	push	{r4, lr}
 800cae8:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 800caea:	f7ff ffd8 	bl	800ca9e <block_next>
    block_set_prev_used(next);
 800caee:	f7ff ffc3 	bl	800ca78 <block_set_prev_used>
    block_set_used(block);
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff ffb2 	bl	800ca5c <block_set_used>
}
 800caf8:	bd10      	pop	{r4, pc}

0800cafa <align_up>:

static size_t align_up(size_t x, size_t align)
{
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 800cafa:	1e4b      	subs	r3, r1, #1
 800cafc:	420b      	tst	r3, r1
 800cafe:	d000      	beq.n	800cb02 <align_up+0x8>
 800cb00:	e7fe      	b.n	800cb00 <align_up+0x6>
    return (x + (align - 1)) & ~(align - 1);
 800cb02:	4408      	add	r0, r1
 800cb04:	3801      	subs	r0, #1
 800cb06:	4249      	negs	r1, r1
}
 800cb08:	4008      	ands	r0, r1
 800cb0a:	4770      	bx	lr

0800cb0c <align_down>:

static size_t align_down(size_t x, size_t align)
{
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 800cb0c:	1e4b      	subs	r3, r1, #1
 800cb0e:	420b      	tst	r3, r1
 800cb10:	d000      	beq.n	800cb14 <align_down+0x8>
 800cb12:	e7fe      	b.n	800cb12 <align_down+0x6>
    return x - (x & (align - 1));
 800cb14:	4249      	negs	r1, r1
}
 800cb16:	4008      	ands	r0, r1
 800cb18:	4770      	bx	lr

0800cb1a <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 800cb1a:	4408      	add	r0, r1
 800cb1c:	3801      	subs	r0, #1
 800cb1e:	424b      	negs	r3, r1
 800cb20:	4018      	ands	r0, r3
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 800cb22:	1e4b      	subs	r3, r1, #1
 800cb24:	420b      	tst	r3, r1
 800cb26:	d000      	beq.n	800cb2a <align_ptr+0x10>
 800cb28:	e7fe      	b.n	800cb28 <align_ptr+0xe>
    return tlsf_cast(void *, aligned);
}
 800cb2a:	4770      	bx	lr

0800cb2c <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 800cb2c:	b508      	push	{r3, lr}
    size_t adjust = 0;
    if(size) {
 800cb2e:	b900      	cbnz	r0, 800cb32 <adjust_request_size+0x6>
        if(aligned < block_size_max) {
            adjust = tlsf_max(aligned, block_size_min);
        }
    }
    return adjust;
}
 800cb30:	bd08      	pop	{r3, pc}
        const size_t aligned = align_up(size, align);
 800cb32:	f7ff ffe2 	bl	800cafa <align_up>
        if(aligned < block_size_max) {
 800cb36:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800cb3a:	d203      	bcs.n	800cb44 <adjust_request_size+0x18>
            adjust = tlsf_max(aligned, block_size_min);
 800cb3c:	280c      	cmp	r0, #12
 800cb3e:	bf38      	it	cc
 800cb40:	200c      	movcc	r0, #12
 800cb42:	e7f5      	b.n	800cb30 <adjust_request_size+0x4>
    size_t adjust = 0;
 800cb44:	2000      	movs	r0, #0
 800cb46:	e7f3      	b.n	800cb30 <adjust_request_size+0x4>

0800cb48 <remove_free_block>:
    return control->blocks[fl][sl];
}

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 800cb48:	b500      	push	{lr}
 800cb4a:	4686      	mov	lr, r0
 800cb4c:	4694      	mov	ip, r2
    block_header_t * prev = block->prev_free;
 800cb4e:	68ca      	ldr	r2, [r1, #12]
    block_header_t * next = block->next_free;
 800cb50:	6888      	ldr	r0, [r1, #8]
    tlsf_assert(prev && "prev_free field can not be null");
 800cb52:	b15a      	cbz	r2, 800cb6c <remove_free_block+0x24>
    tlsf_assert(next && "next_free field can not be null");
 800cb54:	b158      	cbz	r0, 800cb6e <remove_free_block+0x26>
    next->prev_free = prev;
 800cb56:	60c2      	str	r2, [r0, #12]
    prev->next_free = next;
 800cb58:	6090      	str	r0, [r2, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 800cb5a:	eb03 124c 	add.w	r2, r3, ip, lsl #5
 800cb5e:	320a      	adds	r2, #10
 800cb60:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800cb64:	428a      	cmp	r2, r1
 800cb66:	d003      	beq.n	800cb70 <remove_free_block+0x28>
            if(!control->sl_bitmap[fl]) {
                control->fl_bitmap &= ~(1U << fl);
            }
        }
    }
}
 800cb68:	f85d fb04 	ldr.w	pc, [sp], #4
    tlsf_assert(prev && "prev_free field can not be null");
 800cb6c:	e7fe      	b.n	800cb6c <remove_free_block+0x24>
    tlsf_assert(next && "next_free field can not be null");
 800cb6e:	e7fe      	b.n	800cb6e <remove_free_block+0x26>
        control->blocks[fl][sl] = next;
 800cb70:	eb03 124c 	add.w	r2, r3, ip, lsl #5
 800cb74:	320a      	adds	r2, #10
 800cb76:	f84e 0022 	str.w	r0, [lr, r2, lsl #2]
        if(next == &control->block_null) {
 800cb7a:	4586      	cmp	lr, r0
 800cb7c:	d1f4      	bne.n	800cb68 <remove_free_block+0x20>
            control->sl_bitmap[fl] &= ~(1U << sl);
 800cb7e:	2101      	movs	r1, #1
 800cb80:	4099      	lsls	r1, r3
 800cb82:	f10c 0204 	add.w	r2, ip, #4
 800cb86:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 800cb8a:	6853      	ldr	r3, [r2, #4]
 800cb8c:	ea23 0301 	bic.w	r3, r3, r1
 800cb90:	6053      	str	r3, [r2, #4]
            if(!control->sl_bitmap[fl]) {
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1e8      	bne.n	800cb68 <remove_free_block+0x20>
                control->fl_bitmap &= ~(1U << fl);
 800cb96:	2301      	movs	r3, #1
 800cb98:	fa03 f20c 	lsl.w	r2, r3, ip
 800cb9c:	f8de 3010 	ldr.w	r3, [lr, #16]
 800cba0:	ea23 0302 	bic.w	r3, r3, r2
 800cba4:	f8ce 3010 	str.w	r3, [lr, #16]
}
 800cba8:	e7de      	b.n	800cb68 <remove_free_block+0x20>

0800cbaa <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 800cbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbae:	461f      	mov	r7, r3
    block_header_t * current = control->blocks[fl][sl];
 800cbb0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800cbb4:	330a      	adds	r3, #10
 800cbb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    tlsf_assert(current && "free list cannot have a null entry");
 800cbba:	b183      	cbz	r3, 800cbde <insert_free_block+0x34>
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	4616      	mov	r6, r2
    tlsf_assert(block && "cannot insert a null entry into the free list");
 800cbc2:	b169      	cbz	r1, 800cbe0 <insert_free_block+0x36>
    block->next_free = current;
 800cbc4:	608b      	str	r3, [r1, #8]
    block->prev_free = &control->block_null;
 800cbc6:	60c8      	str	r0, [r1, #12]
    current->prev_free = block;
 800cbc8:	60d9      	str	r1, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 800cbca:	4608      	mov	r0, r1
 800cbcc:	f7ff ff5b 	bl	800ca86 <block_to_ptr>
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	2104      	movs	r1, #4
 800cbd4:	f7ff ffa1 	bl	800cb1a <align_ptr>
 800cbd8:	4580      	cmp	r8, r0
 800cbda:	d002      	beq.n	800cbe2 <insert_free_block+0x38>
 800cbdc:	e7fe      	b.n	800cbdc <insert_free_block+0x32>
    tlsf_assert(current && "free list cannot have a null entry");
 800cbde:	e7fe      	b.n	800cbde <insert_free_block+0x34>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 800cbe0:	e7fe      	b.n	800cbe0 <insert_free_block+0x36>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 800cbe2:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800cbe6:	330a      	adds	r3, #10
 800cbe8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
    control->fl_bitmap |= (1U << fl);
 800cbec:	2301      	movs	r3, #1
 800cbee:	fa03 f106 	lsl.w	r1, r3, r6
 800cbf2:	692a      	ldr	r2, [r5, #16]
 800cbf4:	430a      	orrs	r2, r1
 800cbf6:	612a      	str	r2, [r5, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 800cbf8:	40bb      	lsls	r3, r7
 800cbfa:	3604      	adds	r6, #4
 800cbfc:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800cc00:	686a      	ldr	r2, [r5, #4]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	606b      	str	r3, [r5, #4]
}
 800cc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cc0a <block_can_split>:
    mapping_insert(block_size(block), &fl, &sl);
    insert_free_block(control, block, fl, sl);
}

static int block_can_split(block_header_t * block, size_t size)
{
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	460c      	mov	r4, r1
    return block_size(block) >= sizeof(block_header_t) + size;
 800cc0e:	f7ff ff0b 	bl	800ca28 <block_size>
 800cc12:	3410      	adds	r4, #16
}
 800cc14:	42a0      	cmp	r0, r4
 800cc16:	bf34      	ite	cc
 800cc18:	2000      	movcc	r0, #0
 800cc1a:	2001      	movcs	r0, #1
 800cc1c:	bd10      	pop	{r4, pc}

0800cc1e <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 800cc1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc22:	4607      	mov	r7, r0
 800cc24:	460c      	mov	r4, r1
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 800cc26:	f7ff ff2e 	bl	800ca86 <block_to_ptr>
 800cc2a:	1f21      	subs	r1, r4, #4
 800cc2c:	f7ff ff2d 	bl	800ca8a <offset_to_block>
 800cc30:	4605      	mov	r5, r0

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 800cc32:	4638      	mov	r0, r7
 800cc34:	f7ff fef8 	bl	800ca28 <block_size>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	1b03      	subs	r3, r0, r4
 800cc3c:	f1a3 0904 	sub.w	r9, r3, #4

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 800cc40:	4628      	mov	r0, r5
 800cc42:	f7ff ff20 	bl	800ca86 <block_to_ptr>
 800cc46:	4680      	mov	r8, r0
 800cc48:	2104      	movs	r1, #4
 800cc4a:	f7ff ff66 	bl	800cb1a <align_ptr>
 800cc4e:	4580      	cmp	r8, r0
 800cc50:	d000      	beq.n	800cc54 <block_split+0x36>
 800cc52:	e7fe      	b.n	800cc52 <block_split+0x34>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 800cc54:	eb04 0309 	add.w	r3, r4, r9
 800cc58:	3304      	adds	r3, #4
 800cc5a:	429e      	cmp	r6, r3
 800cc5c:	d000      	beq.n	800cc60 <block_split+0x42>
 800cc5e:	e7fe      	b.n	800cc5e <block_split+0x40>
    block_set_size(remaining, remain_size);
 800cc60:	4649      	mov	r1, r9
 800cc62:	4628      	mov	r0, r5
 800cc64:	f7ff fee4 	bl	800ca30 <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f7ff fedd 	bl	800ca28 <block_size>
 800cc6e:	280b      	cmp	r0, #11
 800cc70:	d800      	bhi.n	800cc74 <block_split+0x56>
 800cc72:	e7fe      	b.n	800cc72 <block_split+0x54>

    block_set_size(block, size);
 800cc74:	4621      	mov	r1, r4
 800cc76:	4638      	mov	r0, r7
 800cc78:	f7ff feda 	bl	800ca30 <block_set_size>
    block_mark_as_free(remaining);
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f7ff ff28 	bl	800cad2 <block_mark_as_free>

    return remaining;
}
 800cc82:	4628      	mov	r0, r5
 800cc84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cc88 <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	460d      	mov	r5, r1
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 800cc8e:	f7ff fed5 	bl	800ca3c <block_is_last>
 800cc92:	b100      	cbz	r0, 800cc96 <block_absorb+0xe>
 800cc94:	e7fe      	b.n	800cc94 <block_absorb+0xc>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 800cc96:	4628      	mov	r0, r5
 800cc98:	f7ff fec6 	bl	800ca28 <block_size>
 800cc9c:	1d02      	adds	r2, r0, #4
 800cc9e:	6863      	ldr	r3, [r4, #4]
 800cca0:	4413      	add	r3, r2
 800cca2:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 800cca4:	4620      	mov	r0, r4
 800cca6:	f7ff ff0e 	bl	800cac6 <block_link_next>
    return prev;
}
 800ccaa:	4620      	mov	r0, r4
 800ccac:	bd38      	pop	{r3, r4, r5, pc}

0800ccae <control_constructor>:
/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
    int i, j;

    control->block_null.next_free = &control->block_null;
 800ccae:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
 800ccb0:	60c0      	str	r0, [r0, #12]

    control->fl_bitmap = 0;
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	6101      	str	r1, [r0, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 800ccb6:	e008      	b.n	800ccca <control_constructor+0x1c>
        control->sl_bitmap[i] = 0;
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
            control->blocks[i][j] = &control->block_null;
 800ccb8:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800ccbc:	320a      	adds	r2, #10
 800ccbe:	f840 0022 	str.w	r0, [r0, r2, lsl #2]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	2b1f      	cmp	r3, #31
 800ccc6:	ddf7      	ble.n	800ccb8 <control_constructor+0xa>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 800ccc8:	3101      	adds	r1, #1
 800ccca:	2904      	cmp	r1, #4
 800cccc:	dc05      	bgt.n	800ccda <control_constructor+0x2c>
        control->sl_bitmap[i] = 0;
 800ccce:	1d0a      	adds	r2, r1, #4
 800ccd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	6053      	str	r3, [r2, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 800ccd8:	e7f4      	b.n	800ccc4 <control_constructor+0x16>
        }
    }
}
 800ccda:	4770      	bx	lr

0800ccdc <tlsf_fls>:
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 800ccdc:	b128      	cbz	r0, 800ccea <tlsf_fls+0xe>
 800ccde:	fab0 f080 	clz	r0, r0
 800cce2:	f1c0 0020 	rsb	r0, r0, #32
}
 800cce6:	3801      	subs	r0, #1
 800cce8:	4770      	bx	lr
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 800ccea:	2000      	movs	r0, #0
 800ccec:	e7fb      	b.n	800cce6 <tlsf_fls+0xa>

0800ccee <mapping_insert>:
{
 800ccee:	b570      	push	{r4, r5, r6, lr}
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	4616      	mov	r6, r2
    if(size < SMALL_BLOCK_SIZE) {
 800ccf6:	287f      	cmp	r0, #127	; 0x7f
 800ccf8:	d808      	bhi.n	800cd0c <mapping_insert+0x1e>
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	db04      	blt.n	800cd08 <mapping_insert+0x1a>
 800ccfe:	1084      	asrs	r4, r0, #2
        fl = 0;
 800cd00:	2000      	movs	r0, #0
    *fli = fl;
 800cd02:	6028      	str	r0, [r5, #0]
    *sli = sl;
 800cd04:	6034      	str	r4, [r6, #0]
}
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 800cd08:	3003      	adds	r0, #3
 800cd0a:	e7f8      	b.n	800ccfe <mapping_insert+0x10>
        fl = tlsf_fls_sizet(size);
 800cd0c:	f7ff ffe6 	bl	800ccdc <tlsf_fls>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 800cd10:	1f43      	subs	r3, r0, #5
 800cd12:	40dc      	lsrs	r4, r3
 800cd14:	f084 0420 	eor.w	r4, r4, #32
        fl -= (FL_INDEX_SHIFT - 1);
 800cd18:	3806      	subs	r0, #6
 800cd1a:	e7f2      	b.n	800cd02 <mapping_insert+0x14>

0800cd1c <block_insert>:
{
 800cd1c:	b530      	push	{r4, r5, lr}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	4605      	mov	r5, r0
 800cd22:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 800cd24:	4608      	mov	r0, r1
 800cd26:	f7ff fe7f 	bl	800ca28 <block_size>
 800cd2a:	466a      	mov	r2, sp
 800cd2c:	a901      	add	r1, sp, #4
 800cd2e:	f7ff ffde 	bl	800ccee <mapping_insert>
    insert_free_block(control, block, fl, sl);
 800cd32:	9b00      	ldr	r3, [sp, #0]
 800cd34:	9a01      	ldr	r2, [sp, #4]
 800cd36:	4621      	mov	r1, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f7ff ff36 	bl	800cbaa <insert_free_block>
}
 800cd3e:	b003      	add	sp, #12
 800cd40:	bd30      	pop	{r4, r5, pc}

0800cd42 <block_trim_free>:
{
 800cd42:	b570      	push	{r4, r5, r6, lr}
 800cd44:	4606      	mov	r6, r0
 800cd46:	460c      	mov	r4, r1
 800cd48:	4615      	mov	r5, r2
    tlsf_assert(block_is_free(block) && "block must be free");
 800cd4a:	4608      	mov	r0, r1
 800cd4c:	f7ff fe7d 	bl	800ca4a <block_is_free>
 800cd50:	b900      	cbnz	r0, 800cd54 <block_trim_free+0x12>
 800cd52:	e7fe      	b.n	800cd52 <block_trim_free+0x10>
    if(block_can_split(block, size)) {
 800cd54:	4629      	mov	r1, r5
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7ff ff57 	bl	800cc0a <block_can_split>
 800cd5c:	b900      	cbnz	r0, 800cd60 <block_trim_free+0x1e>
}
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 800cd60:	4629      	mov	r1, r5
 800cd62:	4620      	mov	r0, r4
 800cd64:	f7ff ff5b 	bl	800cc1e <block_split>
 800cd68:	4605      	mov	r5, r0
        block_link_next(block);
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f7ff feab 	bl	800cac6 <block_link_next>
        block_set_prev_free(remaining_block);
 800cd70:	4628      	mov	r0, r5
 800cd72:	f7ff fe7c 	bl	800ca6e <block_set_prev_free>
        block_insert(control, remaining_block);
 800cd76:	4629      	mov	r1, r5
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7ff ffcf 	bl	800cd1c <block_insert>
}
 800cd7e:	e7ee      	b.n	800cd5e <block_trim_free+0x1c>

0800cd80 <block_prepare_used>:
{
 800cd80:	b510      	push	{r4, lr}
    if(block) {
 800cd82:	460c      	mov	r4, r1
 800cd84:	b151      	cbz	r1, 800cd9c <block_prepare_used+0x1c>
        tlsf_assert(size && "size must be non-zero");
 800cd86:	b902      	cbnz	r2, 800cd8a <block_prepare_used+0xa>
 800cd88:	e7fe      	b.n	800cd88 <block_prepare_used+0x8>
        block_trim_free(control, block, size);
 800cd8a:	f7ff ffda 	bl	800cd42 <block_trim_free>
        block_mark_as_used(block);
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f7ff fea9 	bl	800cae6 <block_mark_as_used>
        p = block_to_ptr(block);
 800cd94:	4620      	mov	r0, r4
 800cd96:	f7ff fe76 	bl	800ca86 <block_to_ptr>
}
 800cd9a:	bd10      	pop	{r4, pc}
    void * p = 0;
 800cd9c:	4608      	mov	r0, r1
    return p;
 800cd9e:	e7fc      	b.n	800cd9a <block_prepare_used+0x1a>

0800cda0 <block_remove>:
{
 800cda0:	b530      	push	{r4, r5, lr}
 800cda2:	b083      	sub	sp, #12
 800cda4:	4605      	mov	r5, r0
 800cda6:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 800cda8:	4608      	mov	r0, r1
 800cdaa:	f7ff fe3d 	bl	800ca28 <block_size>
 800cdae:	466a      	mov	r2, sp
 800cdb0:	a901      	add	r1, sp, #4
 800cdb2:	f7ff ff9c 	bl	800ccee <mapping_insert>
    remove_free_block(control, block, fl, sl);
 800cdb6:	9b00      	ldr	r3, [sp, #0]
 800cdb8:	9a01      	ldr	r2, [sp, #4]
 800cdba:	4621      	mov	r1, r4
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f7ff fec3 	bl	800cb48 <remove_free_block>
}
 800cdc2:	b003      	add	sp, #12
 800cdc4:	bd30      	pop	{r4, r5, pc}

0800cdc6 <block_merge_prev>:
{
 800cdc6:	b570      	push	{r4, r5, r6, lr}
 800cdc8:	4605      	mov	r5, r0
 800cdca:	460c      	mov	r4, r1
    if(block_is_prev_free(block)) {
 800cdcc:	4608      	mov	r0, r1
 800cdce:	f7ff fe4a 	bl	800ca66 <block_is_prev_free>
 800cdd2:	b908      	cbnz	r0, 800cdd8 <block_merge_prev+0x12>
}
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * prev = block_prev(block);
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f7ff fe58 	bl	800ca8e <block_prev>
        tlsf_assert(prev && "prev physical block can't be null");
 800cdde:	4606      	mov	r6, r0
 800cde0:	b118      	cbz	r0, 800cdea <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 800cde2:	f7ff fe32 	bl	800ca4a <block_is_free>
 800cde6:	b908      	cbnz	r0, 800cdec <block_merge_prev+0x26>
 800cde8:	e7fe      	b.n	800cde8 <block_merge_prev+0x22>
        tlsf_assert(prev && "prev physical block can't be null");
 800cdea:	e7fe      	b.n	800cdea <block_merge_prev+0x24>
        block_remove(control, prev);
 800cdec:	4631      	mov	r1, r6
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7ff ffd6 	bl	800cda0 <block_remove>
        block = block_absorb(prev, block);
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7ff ff46 	bl	800cc88 <block_absorb>
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	e7e9      	b.n	800cdd4 <block_merge_prev+0xe>

0800ce00 <block_merge_next>:
{
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	4605      	mov	r5, r0
 800ce04:	460c      	mov	r4, r1
    block_header_t * next = block_next(block);
 800ce06:	4608      	mov	r0, r1
 800ce08:	f7ff fe49 	bl	800ca9e <block_next>
    tlsf_assert(next && "next physical block can't be null");
 800ce0c:	b140      	cbz	r0, 800ce20 <block_merge_next+0x20>
 800ce0e:	4606      	mov	r6, r0
    if(block_is_free(next)) {
 800ce10:	f7ff fe1b 	bl	800ca4a <block_is_free>
 800ce14:	b170      	cbz	r0, 800ce34 <block_merge_next+0x34>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7ff fe10 	bl	800ca3c <block_is_last>
 800ce1c:	b108      	cbz	r0, 800ce22 <block_merge_next+0x22>
 800ce1e:	e7fe      	b.n	800ce1e <block_merge_next+0x1e>
    tlsf_assert(next && "next physical block can't be null");
 800ce20:	e7fe      	b.n	800ce20 <block_merge_next+0x20>
        block_remove(control, next);
 800ce22:	4631      	mov	r1, r6
 800ce24:	4628      	mov	r0, r5
 800ce26:	f7ff ffbb 	bl	800cda0 <block_remove>
        block = block_absorb(block, next);
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7ff ff2b 	bl	800cc88 <block_absorb>
 800ce32:	4604      	mov	r4, r0
}
 800ce34:	4620      	mov	r0, r4
 800ce36:	bd70      	pop	{r4, r5, r6, pc}

0800ce38 <block_trim_used>:
{
 800ce38:	b570      	push	{r4, r5, r6, lr}
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	4615      	mov	r5, r2
    tlsf_assert(!block_is_free(block) && "block must be used");
 800ce40:	4608      	mov	r0, r1
 800ce42:	f7ff fe02 	bl	800ca4a <block_is_free>
 800ce46:	b100      	cbz	r0, 800ce4a <block_trim_used+0x12>
 800ce48:	e7fe      	b.n	800ce48 <block_trim_used+0x10>
    if(block_can_split(block, size)) {
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f7ff fedc 	bl	800cc0a <block_can_split>
 800ce52:	b900      	cbnz	r0, 800ce56 <block_trim_used+0x1e>
}
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 800ce56:	4629      	mov	r1, r5
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f7ff fee0 	bl	800cc1e <block_split>
 800ce5e:	4604      	mov	r4, r0
        block_set_prev_used(remaining_block);
 800ce60:	f7ff fe0a 	bl	800ca78 <block_set_prev_used>
        remaining_block = block_merge_next(control, remaining_block);
 800ce64:	4621      	mov	r1, r4
 800ce66:	4630      	mov	r0, r6
 800ce68:	f7ff ffca 	bl	800ce00 <block_merge_next>
 800ce6c:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ff54 	bl	800cd1c <block_insert>
}
 800ce74:	e7ee      	b.n	800ce54 <block_trim_used+0x1c>

0800ce76 <mapping_search>:
{
 800ce76:	b570      	push	{r4, r5, r6, lr}
 800ce78:	4604      	mov	r4, r0
 800ce7a:	460d      	mov	r5, r1
 800ce7c:	4616      	mov	r6, r2
    if(size >= SMALL_BLOCK_SIZE) {
 800ce7e:	287f      	cmp	r0, #127	; 0x7f
 800ce80:	d906      	bls.n	800ce90 <mapping_search+0x1a>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 800ce82:	f7ff ff2b 	bl	800ccdc <tlsf_fls>
 800ce86:	1f43      	subs	r3, r0, #5
 800ce88:	2001      	movs	r0, #1
 800ce8a:	4098      	lsls	r0, r3
 800ce8c:	3801      	subs	r0, #1
        size += round;
 800ce8e:	4404      	add	r4, r0
    mapping_insert(size, fli, sli);
 800ce90:	4632      	mov	r2, r6
 800ce92:	4629      	mov	r1, r5
 800ce94:	4620      	mov	r0, r4
 800ce96:	f7ff ff2a 	bl	800ccee <mapping_insert>
}
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}

0800ce9c <tlsf_ffs>:
{
 800ce9c:	4603      	mov	r3, r0
    return __builtin_ffs(word) - 1;
 800ce9e:	fa90 f0a0 	rbit	r0, r0
 800cea2:	fab0 f080 	clz	r0, r0
 800cea6:	b90b      	cbnz	r3, 800ceac <tlsf_ffs+0x10>
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ceac:	4770      	bx	lr

0800ceae <search_suitable_block>:
{
 800ceae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	4616      	mov	r6, r2
    int fl = *fli;
 800ceb4:	680c      	ldr	r4, [r1, #0]
    int sl = *sli;
 800ceb6:	6812      	ldr	r2, [r2, #0]
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 800ceb8:	1d23      	adds	r3, r4, #4
 800ceba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	f04f 30ff 	mov.w	r0, #4294967295
 800cec4:	4090      	lsls	r0, r2
    if(!sl_map) {
 800cec6:	4018      	ands	r0, r3
 800cec8:	d110      	bne.n	800ceec <search_suitable_block+0x3e>
 800ceca:	460f      	mov	r7, r1
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 800cecc:	692a      	ldr	r2, [r5, #16]
 800cece:	3401      	adds	r4, #1
 800ced0:	f04f 33ff 	mov.w	r3, #4294967295
 800ced4:	40a3      	lsls	r3, r4
        if(!fl_map) {
 800ced6:	ea12 0003 	ands.w	r0, r2, r3
 800ceda:	d012      	beq.n	800cf02 <search_suitable_block+0x54>
        fl = tlsf_ffs(fl_map);
 800cedc:	f7ff ffde 	bl	800ce9c <tlsf_ffs>
 800cee0:	4604      	mov	r4, r0
        *fli = fl;
 800cee2:	6038      	str	r0, [r7, #0]
        sl_map = control->sl_bitmap[fl];
 800cee4:	1d03      	adds	r3, r0, #4
 800cee6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ceea:	6858      	ldr	r0, [r3, #4]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 800ceec:	b900      	cbnz	r0, 800cef0 <search_suitable_block+0x42>
 800ceee:	e7fe      	b.n	800ceee <search_suitable_block+0x40>
    sl = tlsf_ffs(sl_map);
 800cef0:	f7ff ffd4 	bl	800ce9c <tlsf_ffs>
    *sli = sl;
 800cef4:	6030      	str	r0, [r6, #0]
    return control->blocks[fl][sl];
 800cef6:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800cefa:	330a      	adds	r3, #10
 800cefc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
}
 800cf00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
 800cf02:	2000      	movs	r0, #0
 800cf04:	e7fc      	b.n	800cf00 <search_suitable_block+0x52>

0800cf06 <block_locate_free>:
{
 800cf06:	b570      	push	{r4, r5, r6, lr}
 800cf08:	b082      	sub	sp, #8
    int fl = 0, sl = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	9301      	str	r3, [sp, #4]
 800cf0e:	9300      	str	r3, [sp, #0]
    if(size) {
 800cf10:	b1e1      	cbz	r1, 800cf4c <block_locate_free+0x46>
 800cf12:	4604      	mov	r4, r0
 800cf14:	460e      	mov	r6, r1
        mapping_search(size, &fl, &sl);
 800cf16:	466a      	mov	r2, sp
 800cf18:	a901      	add	r1, sp, #4
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7ff ffab 	bl	800ce76 <mapping_search>
        if(fl < FL_INDEX_COUNT) {
 800cf20:	9b01      	ldr	r3, [sp, #4]
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	dc16      	bgt.n	800cf54 <block_locate_free+0x4e>
            block = search_suitable_block(control, &fl, &sl);
 800cf26:	466a      	mov	r2, sp
 800cf28:	a901      	add	r1, sp, #4
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f7ff ffbf 	bl	800ceae <search_suitable_block>
    if(block) {
 800cf30:	4605      	mov	r5, r0
 800cf32:	b160      	cbz	r0, 800cf4e <block_locate_free+0x48>
        tlsf_assert(block_size(block) >= size);
 800cf34:	f7ff fd78 	bl	800ca28 <block_size>
 800cf38:	42b0      	cmp	r0, r6
 800cf3a:	d200      	bcs.n	800cf3e <block_locate_free+0x38>
 800cf3c:	e7fe      	b.n	800cf3c <block_locate_free+0x36>
        remove_free_block(control, block, fl, sl);
 800cf3e:	9b00      	ldr	r3, [sp, #0]
 800cf40:	9a01      	ldr	r2, [sp, #4]
 800cf42:	4629      	mov	r1, r5
 800cf44:	4620      	mov	r0, r4
 800cf46:	f7ff fdff 	bl	800cb48 <remove_free_block>
 800cf4a:	e000      	b.n	800cf4e <block_locate_free+0x48>
    block_header_t * block = 0;
 800cf4c:	2500      	movs	r5, #0
}
 800cf4e:	4628      	mov	r0, r5
 800cf50:	b002      	add	sp, #8
 800cf52:	bd70      	pop	{r4, r5, r6, pc}
    block_header_t * block = 0;
 800cf54:	2500      	movs	r5, #0
    return block;
 800cf56:	e7fa      	b.n	800cf4e <block_locate_free+0x48>

0800cf58 <lv_tlsf_size>:
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
    return sizeof(control_t);
}
 800cf58:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 800cf5c:	4770      	bx	lr

0800cf5e <lv_tlsf_pool_overhead>:
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
    return 2 * block_header_overhead;
}
 800cf5e:	2008      	movs	r0, #8
 800cf60:	4770      	bx	lr

0800cf62 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 800cf62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf64:	4607      	mov	r7, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	4615      	mov	r5, r2
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 800cf6a:	f7ff fff8 	bl	800cf5e <lv_tlsf_pool_overhead>
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 800cf6e:	2104      	movs	r1, #4
 800cf70:	1a28      	subs	r0, r5, r0
 800cf72:	f7ff fdcb 	bl	800cb0c <align_down>

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 800cf76:	f014 0f03 	tst.w	r4, #3
 800cf7a:	d128      	bne.n	800cfce <lv_tlsf_add_pool+0x6c>
 800cf7c:	4605      	mov	r5, r0
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 800cf7e:	f1a0 020c 	sub.w	r2, r0, #12
 800cf82:	f240 73f4 	movw	r3, #2036	; 0x7f4
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d823      	bhi.n	800cfd2 <lv_tlsf_add_pool+0x70>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 800cf8a:	f06f 0103 	mvn.w	r1, #3
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7ff fd7b 	bl	800ca8a <offset_to_block>
 800cf94:	4606      	mov	r6, r0
    block_set_size(block, pool_bytes);
 800cf96:	4629      	mov	r1, r5
 800cf98:	f7ff fd4a 	bl	800ca30 <block_set_size>
    block_set_free(block);
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f7ff fd58 	bl	800ca52 <block_set_free>
    block_set_prev_used(block);
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff fd68 	bl	800ca78 <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 800cfa8:	4631      	mov	r1, r6
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f7ff feb6 	bl	800cd1c <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f7ff fd88 	bl	800cac6 <block_link_next>
 800cfb6:	4605      	mov	r5, r0
    block_set_size(next, 0);
 800cfb8:	2100      	movs	r1, #0
 800cfba:	f7ff fd39 	bl	800ca30 <block_set_size>
    block_set_used(next);
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7ff fd4c 	bl	800ca5c <block_set_used>
    block_set_prev_free(next);
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	f7ff fd52 	bl	800ca6e <block_set_prev_free>

    return mem;
 800cfca:	4620      	mov	r0, r4
}
 800cfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800cfce:	2000      	movs	r0, #0
 800cfd0:	e7fc      	b.n	800cfcc <lv_tlsf_add_pool+0x6a>
        return 0;
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	e7fa      	b.n	800cfcc <lv_tlsf_add_pool+0x6a>

0800cfd6 <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 800cfd6:	f010 0f03 	tst.w	r0, #3
 800cfda:	d105      	bne.n	800cfe8 <lv_tlsf_create+0x12>
{
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	4604      	mov	r4, r0
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    control_constructor(tlsf_cast(control_t *, mem));
 800cfe0:	f7ff fe65 	bl	800ccae <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 800cfe4:	4620      	mov	r0, r4
}
 800cfe6:	bd10      	pop	{r4, pc}
        return 0;
 800cfe8:	2000      	movs	r0, #0
}
 800cfea:	4770      	bx	lr

0800cfec <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 800cfec:	b570      	push	{r4, r5, r6, lr}
 800cfee:	4605      	mov	r5, r0
 800cff0:	460e      	mov	r6, r1
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 800cff2:	f7ff fff0 	bl	800cfd6 <lv_tlsf_create>
 800cff6:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 800cff8:	f7ff ffae 	bl	800cf58 <lv_tlsf_size>
 800cffc:	1a32      	subs	r2, r6, r0
 800cffe:	1829      	adds	r1, r5, r0
 800d000:	4620      	mov	r0, r4
 800d002:	f7ff ffae 	bl	800cf62 <lv_tlsf_add_pool>
    return tlsf;
}
 800d006:	4620      	mov	r0, r4
 800d008:	bd70      	pop	{r4, r5, r6, pc}

0800d00a <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 800d00a:	b538      	push	{r3, r4, r5, lr}
 800d00c:	4604      	mov	r4, r0
 800d00e:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 800d010:	2104      	movs	r1, #4
 800d012:	f7ff fd8b 	bl	800cb2c <adjust_request_size>
 800d016:	4605      	mov	r5, r0
    block_header_t * block = block_locate_free(control, adjust);
 800d018:	4601      	mov	r1, r0
 800d01a:	4620      	mov	r0, r4
 800d01c:	f7ff ff73 	bl	800cf06 <block_locate_free>
 800d020:	4601      	mov	r1, r0
    return block_prepare_used(control, block, adjust);
 800d022:	462a      	mov	r2, r5
 800d024:	4620      	mov	r0, r4
 800d026:	f7ff feab 	bl	800cd80 <block_prepare_used>
}
 800d02a:	bd38      	pop	{r3, r4, r5, pc}

0800d02c <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 800d02c:	b570      	push	{r4, r5, r6, lr}
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 800d02e:	b1c9      	cbz	r1, 800d064 <lv_tlsf_free+0x38>
 800d030:	4605      	mov	r5, r0
 800d032:	4608      	mov	r0, r1
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
 800d034:	f7ff fd25 	bl	800ca82 <block_from_ptr>
 800d038:	4604      	mov	r4, r0
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 800d03a:	f7ff fd06 	bl	800ca4a <block_is_free>
 800d03e:	b100      	cbz	r0, 800d042 <lv_tlsf_free+0x16>
 800d040:	e7fe      	b.n	800d040 <lv_tlsf_free+0x14>
        size = block->size;
 800d042:	6866      	ldr	r6, [r4, #4]
        block_mark_as_free(block);
 800d044:	4620      	mov	r0, r4
 800d046:	f7ff fd44 	bl	800cad2 <block_mark_as_free>
        block = block_merge_prev(control, block);
 800d04a:	4621      	mov	r1, r4
 800d04c:	4628      	mov	r0, r5
 800d04e:	f7ff feba 	bl	800cdc6 <block_merge_prev>
 800d052:	4601      	mov	r1, r0
        block = block_merge_next(control, block);
 800d054:	4628      	mov	r0, r5
 800d056:	f7ff fed3 	bl	800ce00 <block_merge_next>
 800d05a:	4601      	mov	r1, r0
        block_insert(control, block);
 800d05c:	4628      	mov	r0, r5
 800d05e:	f7ff fe5d 	bl	800cd1c <block_insert>
 800d062:	e000      	b.n	800d066 <lv_tlsf_free+0x3a>
    size_t size = 0;
 800d064:	2600      	movs	r6, #0
    }

    return size;
}
 800d066:	4630      	mov	r0, r6
 800d068:	bd70      	pop	{r4, r5, r6, pc}

0800d06a <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 800d06a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06e:	4605      	mov	r5, r0
 800d070:	4614      	mov	r4, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 800d072:	4689      	mov	r9, r1
 800d074:	b101      	cbz	r1, 800d078 <lv_tlsf_realloc+0xe>
 800d076:	b302      	cbz	r2, 800d0ba <lv_tlsf_realloc+0x50>
        lv_tlsf_free(tlsf, ptr);
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 800d078:	f1b9 0f00 	cmp.w	r9, #0
 800d07c:	d021      	beq.n	800d0c2 <lv_tlsf_realloc+0x58>
        p = lv_tlsf_malloc(tlsf, size);
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 800d07e:	4648      	mov	r0, r9
 800d080:	f7ff fcff 	bl	800ca82 <block_from_ptr>
 800d084:	4607      	mov	r7, r0
        block_header_t * next = block_next(block);
 800d086:	f7ff fd0a 	bl	800ca9e <block_next>
 800d08a:	4682      	mov	sl, r0

        const size_t cursize = block_size(block);
 800d08c:	4638      	mov	r0, r7
 800d08e:	f7ff fccb 	bl	800ca28 <block_size>
 800d092:	4606      	mov	r6, r0
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 800d094:	4650      	mov	r0, sl
 800d096:	f7ff fcc7 	bl	800ca28 <block_size>
 800d09a:	1983      	adds	r3, r0, r6
 800d09c:	f103 0b04 	add.w	fp, r3, #4
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 800d0a0:	2104      	movs	r1, #4
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7ff fd42 	bl	800cb2c <adjust_request_size>
 800d0a8:	4680      	mov	r8, r0
        if(size > cursize && adjust == 0) {
 800d0aa:	42b4      	cmp	r4, r6
 800d0ac:	d900      	bls.n	800d0b0 <lv_tlsf_realloc+0x46>
 800d0ae:	b3e0      	cbz	r0, 800d12a <lv_tlsf_realloc+0xc0>
            /* The request is probably too large, fail */
            return NULL;
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	f7ff fcca 	bl	800ca4a <block_is_free>
 800d0b6:	b160      	cbz	r0, 800d0d2 <lv_tlsf_realloc+0x68>
 800d0b8:	e7fe      	b.n	800d0b8 <lv_tlsf_realloc+0x4e>
        lv_tlsf_free(tlsf, ptr);
 800d0ba:	f7ff ffb7 	bl	800d02c <lv_tlsf_free>
    void * p = 0;
 800d0be:	2700      	movs	r7, #0
        lv_tlsf_free(tlsf, ptr);
 800d0c0:	e004      	b.n	800d0cc <lv_tlsf_realloc+0x62>
        p = lv_tlsf_malloc(tlsf, size);
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	f7ff ffa0 	bl	800d00a <lv_tlsf_malloc>
 800d0ca:	4607      	mov	r7, r0
            p = ptr;
        }
    }

    return p;
}
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 800d0d2:	4546      	cmp	r6, r8
 800d0d4:	d218      	bcs.n	800d108 <lv_tlsf_realloc+0x9e>
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	f7ff fcb7 	bl	800ca4a <block_is_free>
 800d0dc:	b108      	cbz	r0, 800d0e2 <lv_tlsf_realloc+0x78>
 800d0de:	45c3      	cmp	fp, r8
 800d0e0:	d212      	bcs.n	800d108 <lv_tlsf_realloc+0x9e>
            p = lv_tlsf_malloc(tlsf, size);
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f7ff ff90 	bl	800d00a <lv_tlsf_malloc>
            if(p) {
 800d0ea:	4607      	mov	r7, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d0ed      	beq.n	800d0cc <lv_tlsf_realloc+0x62>
                lv_memcpy(p, ptr, minsize);
 800d0f0:	4622      	mov	r2, r4
 800d0f2:	42b4      	cmp	r4, r6
 800d0f4:	bf28      	it	cs
 800d0f6:	4632      	movcs	r2, r6
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	f7ff f873 	bl	800c1e4 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 800d0fe:	4649      	mov	r1, r9
 800d100:	4628      	mov	r0, r5
 800d102:	f7ff ff93 	bl	800d02c <lv_tlsf_free>
 800d106:	e7e1      	b.n	800d0cc <lv_tlsf_realloc+0x62>
            if(adjust > cursize) {
 800d108:	4546      	cmp	r6, r8
 800d10a:	d306      	bcc.n	800d11a <lv_tlsf_realloc+0xb0>
            block_trim_used(control, block, adjust);
 800d10c:	4642      	mov	r2, r8
 800d10e:	4639      	mov	r1, r7
 800d110:	4628      	mov	r0, r5
 800d112:	f7ff fe91 	bl	800ce38 <block_trim_used>
            p = ptr;
 800d116:	464f      	mov	r7, r9
 800d118:	e7d8      	b.n	800d0cc <lv_tlsf_realloc+0x62>
                block_merge_next(control, block);
 800d11a:	4639      	mov	r1, r7
 800d11c:	4628      	mov	r0, r5
 800d11e:	f7ff fe6f 	bl	800ce00 <block_merge_next>
                block_mark_as_used(block);
 800d122:	4638      	mov	r0, r7
 800d124:	f7ff fcdf 	bl	800cae6 <block_mark_as_used>
 800d128:	e7f0      	b.n	800d10c <lv_tlsf_realloc+0xa2>
            return NULL;
 800d12a:	2700      	movs	r7, #0
 800d12c:	e7ce      	b.n	800d0cc <lv_tlsf_realloc+0x62>

0800d12e <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 800d12e:	7803      	ldrb	r3, [r0, #0]
 800d130:	f990 2000 	ldrsb.w	r2, [r0]
 800d134:	2a00      	cmp	r2, #0
 800d136:	da0d      	bge.n	800d154 <lv_txt_utf8_size+0x26>
        return 1;
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 800d138:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800d13c:	2ac0      	cmp	r2, #192	; 0xc0
 800d13e:	d00b      	beq.n	800d158 <lv_txt_utf8_size+0x2a>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 800d140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d144:	2ae0      	cmp	r2, #224	; 0xe0
 800d146:	d009      	beq.n	800d15c <lv_txt_utf8_size+0x2e>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 800d148:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800d14c:	2bf0      	cmp	r3, #240	; 0xf0
 800d14e:	d007      	beq.n	800d160 <lv_txt_utf8_size+0x32>
        return 4;
    return 0;
 800d150:	2000      	movs	r0, #0
 800d152:	4770      	bx	lr
        return 1;
 800d154:	2001      	movs	r0, #1
 800d156:	4770      	bx	lr
        return 2;
 800d158:	2002      	movs	r0, #2
 800d15a:	4770      	bx	lr
        return 3;
 800d15c:	2003      	movs	r0, #3
 800d15e:	4770      	bx	lr
        return 4;
 800d160:	2004      	movs	r0, #4
}
 800d162:	4770      	bx	lr

0800d164 <lv_txt_unicode_to_utf8>:
 * @param letter_uni a Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
 800d164:	287f      	cmp	r0, #127	; 0x7f
 800d166:	d94e      	bls.n	800d206 <lv_txt_unicode_to_utf8+0xa2>
{
 800d168:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
 800d16a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800d16e:	d213      	bcs.n	800d198 <lv_txt_unicode_to_utf8+0x34>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 800d170:	f3c0 1384 	ubfx	r3, r0, #6, #5
 800d174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d178:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 800d17c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d180:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800d184:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
 800d18e:	f88d 3007 	strb.w	r3, [sp, #7]
    else {
        return 0;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
 800d192:	9801      	ldr	r0, [sp, #4]
}
 800d194:	b002      	add	sp, #8
 800d196:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 800d198:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800d19c:	d215      	bcs.n	800d1ca <lv_txt_unicode_to_utf8+0x66>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 800d19e:	f3c0 3303 	ubfx	r3, r0, #12, #4
 800d1a2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800d1a6:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 800d1aa:	f3c0 1385 	ubfx	r3, r0, #6, #6
 800d1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b2:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 800d1b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d1ba:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800d1be:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	f88d 3007 	strb.w	r3, [sp, #7]
 800d1c8:	e7e3      	b.n	800d192 <lv_txt_unicode_to_utf8+0x2e>
    else if(letter_uni < 0x110000) {
 800d1ca:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 800d1ce:	d218      	bcs.n	800d202 <lv_txt_unicode_to_utf8+0x9e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 800d1d0:	f3c0 4382 	ubfx	r3, r0, #18, #3
 800d1d4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800d1d8:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 800d1dc:	f3c0 3305 	ubfx	r3, r0, #12, #6
 800d1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1e4:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 800d1e8:	f3c0 1385 	ubfx	r3, r0, #6, #6
 800d1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f0:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 800d1f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d1f8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800d1fc:	f88d 0007 	strb.w	r0, [sp, #7]
 800d200:	e7c7      	b.n	800d192 <lv_txt_unicode_to_utf8+0x2e>
        return 0;
 800d202:	2000      	movs	r0, #0
 800d204:	e7c6      	b.n	800d194 <lv_txt_unicode_to_utf8+0x30>
}
 800d206:	4770      	bx	lr

0800d208 <lv_txt_utf8_conv_wc>:
 * Convert a wide character, e.g. 'Á' little endian to be UTF-8 compatible
 * @param c a wide character or a  Little endian number
 * @return `c` in big endian
 */
static uint32_t lv_txt_utf8_conv_wc(uint32_t c)
{
 800d208:	b084      	sub	sp, #16
 800d20a:	9001      	str	r0, [sp, #4]
#if LV_BIG_ENDIAN_SYSTEM == 0
    /*Swap the bytes (UTF-8 is big endian, but the MCUs are little endian)*/
    if((c & 0x80) != 0) {
 800d20c:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d210:	d119      	bne.n	800d246 <lv_txt_utf8_conv_wc+0x3e>
        }
        c = swapped;
    }
#endif
    return c;
}
 800d212:	9801      	ldr	r0, [sp, #4]
 800d214:	b004      	add	sp, #16
 800d216:	4770      	bx	lr
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800d218:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d21c:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
 800d220:	3b01      	subs	r3, #1
    while(len) {
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1f8      	bne.n	800d218 <lv_txt_utf8_conv_wc+0x10>
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
 800d226:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d22a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d22e:	0412      	lsls	r2, r2, #16
 800d230:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800d234:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d238:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800d23c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d240:	441a      	add	r2, r3
        for(i = 0; i < 4; i++) {
 800d242:	2300      	movs	r3, #0
 800d244:	e005      	b.n	800d252 <lv_txt_utf8_conv_wc+0x4a>
    const uint8_t * s8 = (const uint8_t *)src;
 800d246:	a901      	add	r1, sp, #4
    uint8_t * d8 = (uint8_t *)dst;
 800d248:	aa03      	add	r2, sp, #12
 800d24a:	2304      	movs	r3, #4
 800d24c:	e7e9      	b.n	800d222 <lv_txt_utf8_conv_wc+0x1a>
 800d24e:	3301      	adds	r3, #1
 800d250:	b2db      	uxtb	r3, r3
 800d252:	2b03      	cmp	r3, #3
 800d254:	d804      	bhi.n	800d260 <lv_txt_utf8_conv_wc+0x58>
            if((swapped & 0xFF) == 0)
 800d256:	f012 0fff 	tst.w	r2, #255	; 0xff
 800d25a:	d1f8      	bne.n	800d24e <lv_txt_utf8_conv_wc+0x46>
                swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
 800d25c:	0a12      	lsrs	r2, r2, #8
 800d25e:	e7f6      	b.n	800d24e <lv_txt_utf8_conv_wc+0x46>
        c = swapped;
 800d260:	9201      	str	r2, [sp, #4]
 800d262:	e7d6      	b.n	800d212 <lv_txt_utf8_conv_wc+0xa>

0800d264 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 800d264:	b500      	push	{lr}
 800d266:	b083      	sub	sp, #12
 800d268:	4686      	mov	lr, r0
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800d26e:	468c      	mov	ip, r1
 800d270:	b169      	cbz	r1, 800d28e <lv_txt_utf8_next+0x2a>

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 800d272:	f8dc 3000 	ldr.w	r3, [ip]
 800d276:	f81e 0003 	ldrb.w	r0, [lr, r3]
 800d27a:	f91e 2003 	ldrsb.w	r2, [lr, r3]
 800d27e:	2a00      	cmp	r2, #0
 800d280:	db08      	blt.n	800d294 <lv_txt_utf8_next+0x30>
        result = txt[*i];
        (*i)++;
 800d282:	3301      	adds	r3, #1
 800d284:	f8cc 3000 	str.w	r3, [ip]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800d288:	b003      	add	sp, #12
 800d28a:	f85d fb04 	ldr.w	pc, [sp], #4
    if(i == NULL) i = &i_tmp;
 800d28e:	f10d 0c04 	add.w	ip, sp, #4
 800d292:	e7ee      	b.n	800d272 <lv_txt_utf8_next+0xe>
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 800d294:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 800d298:	2ac0      	cmp	r2, #192	; 0xc0
 800d29a:	d00c      	beq.n	800d2b6 <lv_txt_utf8_next+0x52>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 800d29c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800d2a0:	2ae0      	cmp	r2, #224	; 0xe0
 800d2a2:	d01b      	beq.n	800d2dc <lv_txt_utf8_next+0x78>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 800d2a4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
 800d2a8:	2af0      	cmp	r2, #240	; 0xf0
 800d2aa:	d036      	beq.n	800d31a <lv_txt_utf8_next+0xb6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	f8cc 3000 	str.w	r3, [ip]
    uint32_t result = 0;
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	e7e8      	b.n	800d288 <lv_txt_utf8_next+0x24>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800d2b6:	0182      	lsls	r2, r0, #6
 800d2b8:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
            (*i)++;
 800d2bc:	3301      	adds	r3, #1
 800d2be:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d2c2:	f81e 0003 	ldrb.w	r0, [lr, r3]
 800d2c6:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
 800d2ca:	2980      	cmp	r1, #128	; 0x80
 800d2cc:	d152      	bne.n	800d374 <lv_txt_utf8_next+0x110>
            result += (txt[*i] & 0x3F);
 800d2ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d2d2:	4410      	add	r0, r2
            (*i)++;
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	f8cc 3000 	str.w	r3, [ip]
 800d2da:	e7d5      	b.n	800d288 <lv_txt_utf8_next+0x24>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800d2dc:	0302      	lsls	r2, r0, #12
 800d2de:	b292      	uxth	r2, r2
            (*i)++;
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d2e6:	f81e 1003 	ldrb.w	r1, [lr, r3]
 800d2ea:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
 800d2ee:	2880      	cmp	r0, #128	; 0x80
 800d2f0:	d142      	bne.n	800d378 <lv_txt_utf8_next+0x114>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800d2f2:	0189      	lsls	r1, r1, #6
 800d2f4:	f401 607c 	and.w	r0, r1, #4032	; 0xfc0
 800d2f8:	4402      	add	r2, r0
            (*i)++;
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d300:	f81e 1003 	ldrb.w	r1, [lr, r3]
 800d304:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
 800d308:	2880      	cmp	r0, #128	; 0x80
 800d30a:	d137      	bne.n	800d37c <lv_txt_utf8_next+0x118>
            result += (txt[*i] & 0x3F);
 800d30c:	f001 003f 	and.w	r0, r1, #63	; 0x3f
 800d310:	4410      	add	r0, r2
            (*i)++;
 800d312:	3301      	adds	r3, #1
 800d314:	f8cc 3000 	str.w	r3, [ip]
 800d318:	e7b6      	b.n	800d288 <lv_txt_utf8_next+0x24>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800d31a:	0482      	lsls	r2, r0, #18
 800d31c:	f402 12e0 	and.w	r2, r2, #1835008	; 0x1c0000
            (*i)++;
 800d320:	3301      	adds	r3, #1
 800d322:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d326:	f81e 1003 	ldrb.w	r1, [lr, r3]
 800d32a:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
 800d32e:	2880      	cmp	r0, #128	; 0x80
 800d330:	d126      	bne.n	800d380 <lv_txt_utf8_next+0x11c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800d332:	0309      	lsls	r1, r1, #12
 800d334:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
 800d338:	430a      	orrs	r2, r1
            (*i)++;
 800d33a:	3301      	adds	r3, #1
 800d33c:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d340:	f81e 1003 	ldrb.w	r1, [lr, r3]
 800d344:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
 800d348:	2880      	cmp	r0, #128	; 0x80
 800d34a:	d11b      	bne.n	800d384 <lv_txt_utf8_next+0x120>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800d34c:	0189      	lsls	r1, r1, #6
 800d34e:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
 800d352:	4411      	add	r1, r2
            (*i)++;
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	f8cc 2000 	str.w	r2, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d35a:	f81e 3002 	ldrb.w	r3, [lr, r2]
 800d35e:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 800d362:	2880      	cmp	r0, #128	; 0x80
 800d364:	d110      	bne.n	800d388 <lv_txt_utf8_next+0x124>
            result += txt[*i] & 0x3F;
 800d366:	f003 003f 	and.w	r0, r3, #63	; 0x3f
 800d36a:	4408      	add	r0, r1
            (*i)++;
 800d36c:	3201      	adds	r2, #1
 800d36e:	f8cc 2000 	str.w	r2, [ip]
 800d372:	e789      	b.n	800d288 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d374:	2000      	movs	r0, #0
 800d376:	e787      	b.n	800d288 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d378:	2000      	movs	r0, #0
 800d37a:	e785      	b.n	800d288 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d37c:	2000      	movs	r0, #0
 800d37e:	e783      	b.n	800d288 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d380:	2000      	movs	r0, #0
 800d382:	e781      	b.n	800d288 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d384:	2000      	movs	r0, #0
 800d386:	e77f      	b.n	800d288 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 800d388:	2000      	movs	r0, #0
 800d38a:	e77d      	b.n	800d288 <lv_txt_utf8_next+0x24>

0800d38c <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	4606      	mov	r6, r0
 800d392:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 800d394:	680b      	ldr	r3, [r1, #0]
 800d396:	3b01      	subs	r3, #1
 800d398:	600b      	str	r3, [r1, #0]
    uint8_t cnt = 0;
 800d39a:	2400      	movs	r4, #0
 800d39c:	e004      	b.n	800d3a8 <lv_txt_utf8_prev+0x1c>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
 800d39e:	3801      	subs	r0, #1
 800d3a0:	6028      	str	r0, [r5, #0]
            else
                return 0;
        }
        cnt++;
 800d3a2:	3401      	adds	r4, #1
 800d3a4:	b2e4      	uxtb	r4, r4
    } while(c_size == 0);
 800d3a6:	b96b      	cbnz	r3, 800d3c4 <lv_txt_utf8_prev+0x38>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800d3a8:	2c03      	cmp	r4, #3
 800d3aa:	d813      	bhi.n	800d3d4 <lv_txt_utf8_prev+0x48>
        c_size = _lv_txt_encoded_size(&txt[*i]);
 800d3ac:	6828      	ldr	r0, [r5, #0]
 800d3ae:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <lv_txt_utf8_prev+0x50>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4430      	add	r0, r6
 800d3b4:	4798      	blx	r3
        if(c_size == 0) {
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d1f2      	bne.n	800d3a2 <lv_txt_utf8_prev+0x16>
            if(*i != 0)
 800d3bc:	6828      	ldr	r0, [r5, #0]
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d1ed      	bne.n	800d39e <lv_txt_utf8_prev+0x12>
 800d3c2:	e008      	b.n	800d3d6 <lv_txt_utf8_prev+0x4a>

    uint32_t i_tmp  = *i;
 800d3c4:	682b      	ldr	r3, [r5, #0]
 800d3c6:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800d3c8:	4b04      	ldr	r3, [pc, #16]	; (800d3dc <lv_txt_utf8_prev+0x50>)
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	a901      	add	r1, sp, #4
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	4798      	blx	r3

    return letter;
 800d3d2:	e000      	b.n	800d3d6 <lv_txt_utf8_prev+0x4a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800d3d4:	2000      	movs	r0, #0
}
 800d3d6:	b002      	add	sp, #8
 800d3d8:	bd70      	pop	{r4, r5, r6, pc}
 800d3da:	bf00      	nop
 800d3dc:	20000034 	.word	0x20000034

0800d3e0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 800d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	460f      	mov	r7, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
 800d3e6:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 800d3e8:	4625      	mov	r5, r4
 800d3ea:	e001      	b.n	800d3f0 <lv_txt_utf8_get_byte_id+0x10>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 800d3ec:	441c      	add	r4, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 800d3ee:	3501      	adds	r5, #1
 800d3f0:	42bd      	cmp	r5, r7
 800d3f2:	d20a      	bcs.n	800d40a <lv_txt_utf8_get_byte_id+0x2a>
 800d3f4:	1930      	adds	r0, r6, r4
 800d3f6:	5d33      	ldrb	r3, [r6, r4]
 800d3f8:	b13b      	cbz	r3, 800d40a <lv_txt_utf8_get_byte_id+0x2a>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 800d3fa:	4b05      	ldr	r3, [pc, #20]	; (800d410 <lv_txt_utf8_get_byte_id+0x30>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4798      	blx	r3
        byte_cnt += c_size ? c_size : 1;
 800d400:	4603      	mov	r3, r0
 800d402:	2800      	cmp	r0, #0
 800d404:	d1f2      	bne.n	800d3ec <lv_txt_utf8_get_byte_id+0xc>
 800d406:	2301      	movs	r3, #1
 800d408:	e7f0      	b.n	800d3ec <lv_txt_utf8_get_byte_id+0xc>
    }

    return byte_cnt;
}
 800d40a:	4620      	mov	r0, r4
 800d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d40e:	bf00      	nop
 800d410:	20000034 	.word	0x20000034

0800d414 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	4606      	mov	r6, r0
 800d41a:	460d      	mov	r5, r1
    uint32_t i        = 0;
 800d41c:	2400      	movs	r4, #0
 800d41e:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 800d420:	e005      	b.n	800d42e <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800d422:	4b06      	ldr	r3, [pc, #24]	; (800d43c <lv_txt_utf8_get_char_id+0x28>)
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	a901      	add	r1, sp, #4
 800d428:	4630      	mov	r0, r6
 800d42a:	4798      	blx	r3
        char_cnt++;
 800d42c:	3401      	adds	r4, #1
    while(i < byte_id) {
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	42ab      	cmp	r3, r5
 800d432:	d3f6      	bcc.n	800d422 <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
 800d434:	4620      	mov	r0, r4
 800d436:	b002      	add	sp, #8
 800d438:	bd70      	pop	{r4, r5, r6, pc}
 800d43a:	bf00      	nop
 800d43c:	20000034 	.word	0x20000034

0800d440 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 800d440:	b530      	push	{r4, r5, lr}
 800d442:	b083      	sub	sp, #12
 800d444:	4605      	mov	r5, r0
    uint32_t len = 0;
    uint32_t i   = 0;
 800d446:	2400      	movs	r4, #0
 800d448:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
 800d44a:	e005      	b.n	800d458 <lv_txt_utf8_get_length+0x18>
        _lv_txt_encoded_next(txt, &i);
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <lv_txt_utf8_get_length+0x28>)
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	a901      	add	r1, sp, #4
 800d452:	4628      	mov	r0, r5
 800d454:	4798      	blx	r3
        len++;
 800d456:	3401      	adds	r4, #1
    while(txt[i] != '\0') {
 800d458:	9b01      	ldr	r3, [sp, #4]
 800d45a:	5ceb      	ldrb	r3, [r5, r3]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1f5      	bne.n	800d44c <lv_txt_utf8_get_length+0xc>
    }

    return len;
}
 800d460:	4620      	mov	r0, r4
 800d462:	b003      	add	sp, #12
 800d464:	bd30      	pop	{r4, r5, pc}
 800d466:	bf00      	nop
 800d468:	20000034 	.word	0x20000034

0800d46c <_lv_txt_is_cmd>:
{
 800d46c:	4603      	mov	r3, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800d46e:	2923      	cmp	r1, #35	; 0x23
 800d470:	d004      	beq.n	800d47c <_lv_txt_is_cmd+0x10>
    bool ret = false;
 800d472:	2000      	movs	r0, #0
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 800d474:	781a      	ldrb	r2, [r3, #0]
 800d476:	2a01      	cmp	r2, #1
 800d478:	d012      	beq.n	800d4a0 <_lv_txt_is_cmd+0x34>
}
 800d47a:	4770      	bx	lr
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 800d47c:	7802      	ldrb	r2, [r0, #0]
 800d47e:	b912      	cbnz	r2, 800d486 <_lv_txt_is_cmd+0x1a>
            *state = LV_TEXT_CMD_STATE_PAR;
 800d480:	2001      	movs	r0, #1
 800d482:	7018      	strb	r0, [r3, #0]
            ret    = true;
 800d484:	e7f6      	b.n	800d474 <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 800d486:	2a01      	cmp	r2, #1
 800d488:	d003      	beq.n	800d492 <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 800d48a:	2a02      	cmp	r2, #2
 800d48c:	d004      	beq.n	800d498 <_lv_txt_is_cmd+0x2c>
    bool ret = false;
 800d48e:	2000      	movs	r0, #0
 800d490:	e7f0      	b.n	800d474 <_lv_txt_is_cmd+0x8>
            *state = LV_TEXT_CMD_STATE_WAIT;
 800d492:	2000      	movs	r0, #0
 800d494:	7018      	strb	r0, [r3, #0]
 800d496:	e7ed      	b.n	800d474 <_lv_txt_is_cmd+0x8>
            *state = LV_TEXT_CMD_STATE_WAIT;
 800d498:	2200      	movs	r2, #0
 800d49a:	7002      	strb	r2, [r0, #0]
            ret    = true;
 800d49c:	2001      	movs	r0, #1
 800d49e:	e7e9      	b.n	800d474 <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
 800d4a0:	2920      	cmp	r1, #32
 800d4a2:	d001      	beq.n	800d4a8 <_lv_txt_is_cmd+0x3c>
        ret = true;
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	e7e8      	b.n	800d47a <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	701a      	strb	r2, [r3, #0]
        ret = true;
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	4770      	bx	lr

0800d4b0 <lv_txt_get_next_word>:
{
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	b089      	sub	sp, #36	; 0x24
 800d4b6:	9102      	str	r1, [sp, #8]
 800d4b8:	9203      	str	r2, [sp, #12]
 800d4ba:	9304      	str	r3, [sp, #16]
 800d4bc:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
 800d4c0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d4c4:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f000 8095 	beq.w	800d5f6 <lv_txt_get_next_word+0x146>
 800d4cc:	4607      	mov	r7, r0
 800d4ce:	7803      	ldrb	r3, [r0, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 8093 	beq.w	800d5fc <lv_txt_get_next_word+0x14c>
    if(font == NULL) return 0;
 800d4d6:	2900      	cmp	r1, #0
 800d4d8:	f000 8096 	beq.w	800d608 <lv_txt_get_next_word+0x158>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800d4dc:	f01a 0f02 	tst.w	sl, #2
 800d4e0:	d002      	beq.n	800d4e8 <lv_txt_get_next_word+0x38>
 800d4e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800d4e6:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 800d4e8:	2600      	movs	r6, #0
 800d4ea:	9607      	str	r6, [sp, #28]
 800d4ec:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
 800d4ee:	4b49      	ldr	r3, [pc, #292]	; (800d614 <lv_txt_get_next_word+0x164>)
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	a907      	add	r1, sp, #28
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	4798      	blx	r3
 800d4f8:	4604      	mov	r4, r0
    i_next_next = i_next;
 800d4fa:	9b07      	ldr	r3, [sp, #28]
 800d4fc:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 800d4fe:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 800d502:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 800d504:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /*Letter at i_next*/
 800d506:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
 800d508:	e036      	b.n	800d578 <lv_txt_get_next_word+0xc8>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800d50a:	9a01      	ldr	r2, [sp, #4]
 800d50c:	4621      	mov	r1, r4
 800d50e:	9802      	ldr	r0, [sp, #8]
 800d510:	f7fd fa70 	bl	800a9f4 <lv_font_get_glyph_width>
 800d514:	b202      	sxth	r2, r0
        cur_w += letter_w;
 800d516:	4405      	add	r5, r0
 800d518:	b2ab      	uxth	r3, r5
 800d51a:	b22d      	sxth	r5, r5
        if(letter_w > 0) {
 800d51c:	2a00      	cmp	r2, #0
 800d51e:	dd02      	ble.n	800d526 <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
 800d520:	9a03      	ldr	r2, [sp, #12]
 800d522:	4413      	add	r3, r2
 800d524:	b21d      	sxth	r5, r3
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 800d526:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d52a:	d012      	beq.n	800d552 <lv_txt_get_next_word+0xa2>
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 800d52c:	2c0a      	cmp	r4, #10
 800d52e:	d03c      	beq.n	800d5aa <lv_txt_get_next_word+0xfa>
 800d530:	2c0d      	cmp	r4, #13
 800d532:	d03a      	beq.n	800d5aa <lv_txt_get_next_word+0xfa>
{
    uint8_t i;
    bool ret = false;

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 800d534:	f5a4 429c 	sub.w	r2, r4, #19968	; 0x4e00
 800d538:	f245 13a5 	movw	r3, #20901	; 0x51a5
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d934      	bls.n	800d5aa <lv_txt_get_next_word+0xfa>
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800d540:	2300      	movs	r3, #0
 800d542:	4a35      	ldr	r2, [pc, #212]	; (800d618 <lv_txt_get_next_word+0x168>)
 800d544:	5cd2      	ldrb	r2, [r2, r3]
 800d546:	b15a      	cbz	r2, 800d560 <lv_txt_get_next_word+0xb0>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800d548:	4294      	cmp	r4, r2
 800d54a:	d02c      	beq.n	800d5a6 <lv_txt_get_next_word+0xf6>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800d54c:	3301      	adds	r3, #1
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	e7f7      	b.n	800d542 <lv_txt_get_next_word+0x92>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 800d552:	9b03      	ldr	r3, [sp, #12]
 800d554:	1aeb      	subs	r3, r5, r3
 800d556:	9a04      	ldr	r2, [sp, #16]
 800d558:	4293      	cmp	r3, r2
 800d55a:	dde7      	ble.n	800d52c <lv_txt_get_next_word+0x7c>
            break_index = i;
 800d55c:	46b0      	mov	r8, r6
 800d55e:	e7e5      	b.n	800d52c <lv_txt_get_next_word+0x7c>
    bool ret = false;
 800d560:	2300      	movs	r3, #0
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 800d562:	bb13      	cbnz	r3, 800d5aa <lv_txt_get_next_word+0xfa>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 800d564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d566:	b113      	cbz	r3, 800d56e <lv_txt_get_next_word+0xbe>
 800d568:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d56c:	d032      	beq.n	800d5d4 <lv_txt_get_next_word+0x124>
        i = i_next;
 800d56e:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
 800d570:	9b06      	ldr	r3, [sp, #24]
 800d572:	9307      	str	r3, [sp, #28]
 800d574:	46d9      	mov	r9, fp
 800d576:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
 800d578:	5dbb      	ldrb	r3, [r7, r6]
 800d57a:	b1d3      	cbz	r3, 800d5b2 <lv_txt_get_next_word+0x102>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 800d57c:	4b25      	ldr	r3, [pc, #148]	; (800d614 <lv_txt_get_next_word+0x164>)
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	a906      	add	r1, sp, #24
 800d582:	4638      	mov	r0, r7
 800d584:	4798      	blx	r3
 800d586:	9001      	str	r0, [sp, #4]
        word_len++;
 800d588:	f109 0b01 	add.w	fp, r9, #1
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800d58c:	f01a 0f01 	tst.w	sl, #1
 800d590:	d0bb      	beq.n	800d50a <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 800d592:	4621      	mov	r1, r4
 800d594:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d596:	f7ff ff69 	bl	800d46c <_lv_txt_is_cmd>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d0b5      	beq.n	800d50a <lv_txt_get_next_word+0x5a>
                i = i_next;
 800d59e:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
 800d5a0:	9b06      	ldr	r3, [sp, #24]
 800d5a2:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter if it is part of a command*/
 800d5a4:	e7e6      	b.n	800d574 <lv_txt_get_next_word+0xc4>
            ret = true; /*If match then it is break char*/
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e7db      	b.n	800d562 <lv_txt_get_next_word+0xb2>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 800d5aa:	b916      	cbnz	r6, 800d5b2 <lv_txt_get_next_word+0x102>
 800d5ac:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d5b0:	d00b      	beq.n	800d5ca <lv_txt_get_next_word+0x11a>
    if(break_index == NO_BREAK_FOUND) {
 800d5b2:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d5b6:	d00f      	beq.n	800d5d8 <lv_txt_get_next_word+0x128>
    if(force) return break_index;
 800d5b8:	9b05      	ldr	r3, [sp, #20]
 800d5ba:	bb0b      	cbnz	r3, 800d600 <lv_txt_get_next_word+0x150>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 800d5bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d5be:	b333      	cbz	r3, 800d60e <lv_txt_get_next_word+0x15e>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d5c4:	6013      	str	r3, [r2, #0]
    return 0;
 800d5c6:	4698      	mov	r8, r3
 800d5c8:	e01a      	b.n	800d600 <lv_txt_get_next_word+0x150>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 800d5ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d0f0      	beq.n	800d5b2 <lv_txt_get_next_word+0x102>
 800d5d0:	601d      	str	r5, [r3, #0]
 800d5d2:	e7ee      	b.n	800d5b2 <lv_txt_get_next_word+0x102>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 800d5d4:	601d      	str	r5, [r3, #0]
 800d5d6:	e7ca      	b.n	800d56e <lv_txt_get_next_word+0xbe>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 800d5d8:	f1b9 0f00 	cmp.w	r9, #0
 800d5dc:	d008      	beq.n	800d5f0 <lv_txt_get_next_word+0x140>
 800d5de:	2c0d      	cmp	r4, #13
 800d5e0:	d001      	beq.n	800d5e6 <lv_txt_get_next_word+0x136>
 800d5e2:	46b0      	mov	r8, r6
 800d5e4:	e00c      	b.n	800d600 <lv_txt_get_next_word+0x150>
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	2b0a      	cmp	r3, #10
 800d5ea:	d001      	beq.n	800d5f0 <lv_txt_get_next_word+0x140>
 800d5ec:	46b0      	mov	r8, r6
        return i;
 800d5ee:	e007      	b.n	800d600 <lv_txt_get_next_word+0x150>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 800d5f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800d5f4:	e004      	b.n	800d600 <lv_txt_get_next_word+0x150>
    if(txt == NULL || txt[0] == '\0') return 0;
 800d5f6:	f04f 0800 	mov.w	r8, #0
 800d5fa:	e001      	b.n	800d600 <lv_txt_get_next_word+0x150>
 800d5fc:	f04f 0800 	mov.w	r8, #0
}
 800d600:	4640      	mov	r0, r8
 800d602:	b009      	add	sp, #36	; 0x24
 800d604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 800d608:	f04f 0800 	mov.w	r8, #0
 800d60c:	e7f8      	b.n	800d600 <lv_txt_get_next_word+0x150>
    return 0;
 800d60e:	f04f 0800 	mov.w	r8, #0
 800d612:	e7f5      	b.n	800d600 <lv_txt_get_next_word+0x150>
 800d614:	20000034 	.word	0x20000034
 800d618:	080148b4 	.word	0x080148b4

0800d61c <_lv_txt_get_next_line>:
{
 800d61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d620:	b089      	sub	sp, #36	; 0x24
 800d622:	4606      	mov	r6, r0
 800d624:	4688      	mov	r8, r1
 800d626:	4691      	mov	r9, r2
 800d628:	461d      	mov	r5, r3
 800d62a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800d62e:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    if(used_width) *used_width = 0;
 800d632:	f1bb 0f00 	cmp.w	fp, #0
 800d636:	d002      	beq.n	800d63e <_lv_txt_get_next_line+0x22>
 800d638:	2300      	movs	r3, #0
 800d63a:	f8ab 3000 	strh.w	r3, [fp]
    if(txt == NULL) return 0;
 800d63e:	2e00      	cmp	r6, #0
 800d640:	d06d      	beq.n	800d71e <_lv_txt_get_next_line+0x102>
    if(txt[0] == '\0') return 0;
 800d642:	7833      	ldrb	r3, [r6, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d06c      	beq.n	800d722 <_lv_txt_get_next_line+0x106>
    if(font == NULL) return 0;
 800d648:	f1b8 0f00 	cmp.w	r8, #0
 800d64c:	d06b      	beq.n	800d726 <_lv_txt_get_next_line+0x10a>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 800d64e:	f01a 0f06 	tst.w	sl, #6
 800d652:	d162      	bne.n	800d71a <_lv_txt_get_next_line+0xfe>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800d654:	f01a 0f02 	tst.w	sl, #2
 800d658:	d001      	beq.n	800d65e <_lv_txt_get_next_line+0x42>
 800d65a:	f641 75ff 	movw	r5, #8191	; 0x1fff
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 800d65e:	2700      	movs	r7, #0
 800d660:	f88d 701f 	strb.w	r7, [sp, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 800d664:	9706      	str	r7, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
 800d666:	9c06      	ldr	r4, [sp, #24]
 800d668:	1930      	adds	r0, r6, r4
 800d66a:	5d33      	ldrb	r3, [r6, r4]
 800d66c:	b353      	cbz	r3, 800d6c4 <_lv_txt_get_next_line+0xa8>
 800d66e:	2d00      	cmp	r5, #0
 800d670:	dd28      	ble.n	800d6c4 <_lv_txt_get_next_line+0xa8>
        uint32_t word_w = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	9305      	str	r3, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 800d676:	fab4 f484 	clz	r4, r4
 800d67a:	0964      	lsrs	r4, r4, #5
 800d67c:	9403      	str	r4, [sp, #12]
 800d67e:	f10d 031f 	add.w	r3, sp, #31
 800d682:	9302      	str	r3, [sp, #8]
 800d684:	ab05      	add	r3, sp, #20
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	f8cd a000 	str.w	sl, [sp]
 800d68c:	462b      	mov	r3, r5
 800d68e:	464a      	mov	r2, r9
 800d690:	4641      	mov	r1, r8
 800d692:	f7ff ff0d 	bl	800d4b0 <lv_txt_get_next_word>
        max_width -= word_w;
 800d696:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d69a:	1aad      	subs	r5, r5, r2
 800d69c:	b22d      	sxth	r5, r5
        line_w += word_w;
 800d69e:	4417      	add	r7, r2
 800d6a0:	b23f      	sxth	r7, r7
        if(advance == 0) {
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	b170      	cbz	r0, 800d6c4 <_lv_txt_get_next_line+0xa8>
        i += advance;
 800d6a6:	9a06      	ldr	r2, [sp, #24]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	9306      	str	r3, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
 800d6ac:	7832      	ldrb	r2, [r6, #0]
 800d6ae:	2a0a      	cmp	r2, #10
 800d6b0:	d008      	beq.n	800d6c4 <_lv_txt_get_next_line+0xa8>
 800d6b2:	2a0d      	cmp	r2, #13
 800d6b4:	d006      	beq.n	800d6c4 <_lv_txt_get_next_line+0xa8>
        if(txt[i] == '\n' || txt[i] == '\r') {
 800d6b6:	5cf2      	ldrb	r2, [r6, r3]
 800d6b8:	2a0a      	cmp	r2, #10
 800d6ba:	d001      	beq.n	800d6c0 <_lv_txt_get_next_line+0xa4>
 800d6bc:	2a0d      	cmp	r2, #13
 800d6be:	d1d2      	bne.n	800d666 <_lv_txt_get_next_line+0x4a>
            i++;  /*Include the following newline in the current line*/
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	9306      	str	r3, [sp, #24]
    if(i == 0) {
 800d6c4:	9b06      	ldr	r3, [sp, #24]
 800d6c6:	b96b      	cbnz	r3, 800d6e4 <_lv_txt_get_next_line+0xc8>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 800d6c8:	4b18      	ldr	r3, [pc, #96]	; (800d72c <_lv_txt_get_next_line+0x110>)
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	a906      	add	r1, sp, #24
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	4798      	blx	r3
 800d6d2:	4601      	mov	r1, r0
        if(used_width != NULL) {
 800d6d4:	f1bb 0f00 	cmp.w	fp, #0
 800d6d8:	d004      	beq.n	800d6e4 <_lv_txt_get_next_line+0xc8>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4640      	mov	r0, r8
 800d6de:	f7fd f989 	bl	800a9f4 <lv_font_get_glyph_width>
 800d6e2:	b207      	sxth	r7, r0
    if(used_width != NULL) {
 800d6e4:	f1bb 0f00 	cmp.w	fp, #0
 800d6e8:	d001      	beq.n	800d6ee <_lv_txt_get_next_line+0xd2>
        *used_width = line_w;
 800d6ea:	f8ab 7000 	strh.w	r7, [fp]
    return i;
 800d6ee:	9806      	ldr	r0, [sp, #24]
}
 800d6f0:	b009      	add	sp, #36	; 0x24
 800d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	5c33      	ldrb	r3, [r6, r0]
 800d6fa:	2b0a      	cmp	r3, #10
 800d6fc:	d003      	beq.n	800d706 <_lv_txt_get_next_line+0xea>
 800d6fe:	2b0d      	cmp	r3, #13
 800d700:	d001      	beq.n	800d706 <_lv_txt_get_next_line+0xea>
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f7      	bne.n	800d6f6 <_lv_txt_get_next_line+0xda>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 800d706:	b103      	cbz	r3, 800d70a <_lv_txt_get_next_line+0xee>
 800d708:	3001      	adds	r0, #1
        if(used_width) *used_width = -1;
 800d70a:	f1bb 0f00 	cmp.w	fp, #0
 800d70e:	d0ef      	beq.n	800d6f0 <_lv_txt_get_next_line+0xd4>
 800d710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d714:	f8ab 3000 	strh.w	r3, [fp]
        return i;
 800d718:	e7ea      	b.n	800d6f0 <_lv_txt_get_next_line+0xd4>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 800d71a:	2000      	movs	r0, #0
 800d71c:	e7ec      	b.n	800d6f8 <_lv_txt_get_next_line+0xdc>
    if(txt == NULL) return 0;
 800d71e:	2000      	movs	r0, #0
 800d720:	e7e6      	b.n	800d6f0 <_lv_txt_get_next_line+0xd4>
    if(txt[0] == '\0') return 0;
 800d722:	2000      	movs	r0, #0
 800d724:	e7e4      	b.n	800d6f0 <_lv_txt_get_next_line+0xd4>
    if(font == NULL) return 0;
 800d726:	2000      	movs	r0, #0
 800d728:	e7e2      	b.n	800d6f0 <_lv_txt_get_next_line+0xd4>
 800d72a:	bf00      	nop
 800d72c:	20000034 	.word	0x20000034

0800d730 <_lv_txt_encoded_letter_next_2>:
{
 800d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d732:	4607      	mov	r7, r0
 800d734:	460e      	mov	r6, r1
 800d736:	4615      	mov	r5, r2
 800d738:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 800d73a:	4b07      	ldr	r3, [pc, #28]	; (800d758 <_lv_txt_encoded_letter_next_2+0x28>)
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	4621      	mov	r1, r4
 800d740:	4798      	blx	r3
 800d742:	6030      	str	r0, [r6, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 800d744:	b128      	cbz	r0, 800d752 <_lv_txt_encoded_letter_next_2+0x22>
 800d746:	6820      	ldr	r0, [r4, #0]
 800d748:	4b03      	ldr	r3, [pc, #12]	; (800d758 <_lv_txt_encoded_letter_next_2+0x28>)
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	2100      	movs	r1, #0
 800d74e:	4438      	add	r0, r7
 800d750:	4798      	blx	r3
 800d752:	6028      	str	r0, [r5, #0]
}
 800d754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d756:	bf00      	nop
 800d758:	20000034 	.word	0x20000034

0800d75c <lv_txt_get_width>:
{
 800d75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d760:	b085      	sub	sp, #20
 800d762:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if(txt == NULL) return 0;
 800d766:	2800      	cmp	r0, #0
 800d768:	d03d      	beq.n	800d7e6 <lv_txt_get_width+0x8a>
 800d76a:	460c      	mov	r4, r1
 800d76c:	4615      	mov	r5, r2
 800d76e:	461e      	mov	r6, r3
 800d770:	4607      	mov	r7, r0
    if(font == NULL) return 0;
 800d772:	2a00      	cmp	r2, #0
 800d774:	d03a      	beq.n	800d7ec <lv_txt_get_width+0x90>
    if(txt[0] == '\0') return 0;
 800d776:	7803      	ldrb	r3, [r0, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d03a      	beq.n	800d7f2 <lv_txt_get_width+0x96>
    uint32_t i                   = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	9303      	str	r3, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 800d780:	f88d 300b 	strb.w	r3, [sp, #11]
    if(length != 0) {
 800d784:	bb21      	cbnz	r1, 800d7d0 <lv_txt_get_width+0x74>
    lv_coord_t width             = 0;
 800d786:	4699      	mov	r9, r3
 800d788:	e035      	b.n	800d7f6 <lv_txt_get_width+0x9a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800d78a:	9a01      	ldr	r2, [sp, #4]
 800d78c:	9900      	ldr	r1, [sp, #0]
 800d78e:	4628      	mov	r0, r5
 800d790:	f7fd f930 	bl	800a9f4 <lv_font_get_glyph_width>
 800d794:	b203      	sxth	r3, r0
            if(char_width > 0) {
 800d796:	2b00      	cmp	r3, #0
 800d798:	dd06      	ble.n	800d7a8 <lv_txt_get_width+0x4c>
                width += char_width;
 800d79a:	eb00 0c09 	add.w	ip, r0, r9
 800d79e:	fa1f fc8c 	uxth.w	ip, ip
                width += letter_space;
 800d7a2:	44b4      	add	ip, r6
 800d7a4:	fa0f f98c 	sxth.w	r9, ip
        while(i < length) {
 800d7a8:	9b03      	ldr	r3, [sp, #12]
 800d7aa:	42a3      	cmp	r3, r4
 800d7ac:	d213      	bcs.n	800d7d6 <lv_txt_get_width+0x7a>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 800d7ae:	ab03      	add	r3, sp, #12
 800d7b0:	aa01      	add	r2, sp, #4
 800d7b2:	4669      	mov	r1, sp
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	f7ff ffbb 	bl	800d730 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800d7ba:	f018 0f01 	tst.w	r8, #1
 800d7be:	d0e4      	beq.n	800d78a <lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 800d7c0:	9900      	ldr	r1, [sp, #0]
 800d7c2:	f10d 000b 	add.w	r0, sp, #11
 800d7c6:	f7ff fe51 	bl	800d46c <_lv_txt_is_cmd>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d0dd      	beq.n	800d78a <lv_txt_get_width+0x2e>
 800d7ce:	e7eb      	b.n	800d7a8 <lv_txt_get_width+0x4c>
    lv_coord_t width             = 0;
 800d7d0:	f04f 0900 	mov.w	r9, #0
 800d7d4:	e7e8      	b.n	800d7a8 <lv_txt_get_width+0x4c>
        if(width > 0) {
 800d7d6:	f1b9 0f00 	cmp.w	r9, #0
 800d7da:	dd0c      	ble.n	800d7f6 <lv_txt_get_width+0x9a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800d7dc:	eba9 0c06 	sub.w	ip, r9, r6
 800d7e0:	fa0f f98c 	sxth.w	r9, ip
 800d7e4:	e007      	b.n	800d7f6 <lv_txt_get_width+0x9a>
    if(txt == NULL) return 0;
 800d7e6:	f04f 0900 	mov.w	r9, #0
 800d7ea:	e004      	b.n	800d7f6 <lv_txt_get_width+0x9a>
    if(font == NULL) return 0;
 800d7ec:	f04f 0900 	mov.w	r9, #0
 800d7f0:	e001      	b.n	800d7f6 <lv_txt_get_width+0x9a>
    if(txt[0] == '\0') return 0;
 800d7f2:	f04f 0900 	mov.w	r9, #0
}
 800d7f6:	4648      	mov	r0, r9
 800d7f8:	b005      	add	sp, #20
 800d7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d7fe <lv_txt_get_size>:
{
 800d7fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d802:	b087      	sub	sp, #28
 800d804:	9303      	str	r3, [sp, #12]
 800d806:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800d80a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    size_res->x = 0;
 800d814:	2300      	movs	r3, #0
 800d816:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 800d818:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 800d81a:	2900      	cmp	r1, #0
 800d81c:	d04e      	beq.n	800d8bc <lv_txt_get_size+0xbe>
 800d81e:	4604      	mov	r4, r0
 800d820:	4617      	mov	r7, r2
 800d822:	4688      	mov	r8, r1
    if(font == NULL) return;
 800d824:	2a00      	cmp	r2, #0
 800d826:	d049      	beq.n	800d8bc <lv_txt_get_size+0xbe>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800d828:	f019 0f02 	tst.w	r9, #2
 800d82c:	d002      	beq.n	800d834 <lv_txt_get_size+0x36>
 800d82e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800d832:	9304      	str	r3, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 800d834:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800d838:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
 800d83a:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
 800d83e:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
 800d840:	eb08 0605 	add.w	r6, r8, r5
 800d844:	f818 3005 	ldrb.w	r3, [r8, r5]
 800d848:	b333      	cbz	r3, 800d898 <lv_txt_get_size+0x9a>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 800d84a:	f8cd 9004 	str.w	r9, [sp, #4]
 800d84e:	2300      	movs	r3, #0
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	9b04      	ldr	r3, [sp, #16]
 800d854:	9a03      	ldr	r2, [sp, #12]
 800d856:	4639      	mov	r1, r7
 800d858:	4630      	mov	r0, r6
 800d85a:	f7ff fedf 	bl	800d61c <_lv_txt_get_next_line>
 800d85e:	4601      	mov	r1, r0
 800d860:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 800d862:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d866:	eb03 020a 	add.w	r2, r3, sl
 800d86a:	445a      	add	r2, fp
 800d86c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d870:	d224      	bcs.n	800d8bc <lv_txt_get_size+0xbe>
            size_res->y += letter_height;
 800d872:	4453      	add	r3, sl
 800d874:	b29b      	uxth	r3, r3
 800d876:	8063      	strh	r3, [r4, #2]
            size_res->y += line_space;
 800d878:	445b      	add	r3, fp
 800d87a:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 800d87c:	f8cd 9000 	str.w	r9, [sp]
 800d880:	9b03      	ldr	r3, [sp, #12]
 800d882:	463a      	mov	r2, r7
 800d884:	4630      	mov	r0, r6
 800d886:	f7ff ff69 	bl	800d75c <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 800d88a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800d88e:	4283      	cmp	r3, r0
 800d890:	bfb8      	it	lt
 800d892:	4603      	movlt	r3, r0
 800d894:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
 800d896:	e7d3      	b.n	800d840 <lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800d898:	b15d      	cbz	r5, 800d8b2 <lv_txt_get_size+0xb4>
 800d89a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d89e:	2b0a      	cmp	r3, #10
 800d8a0:	d001      	beq.n	800d8a6 <lv_txt_get_size+0xa8>
 800d8a2:	2b0d      	cmp	r3, #13
 800d8a4:	d105      	bne.n	800d8b2 <lv_txt_get_size+0xb4>
        size_res->y += letter_height + line_space;
 800d8a6:	eb0a 030b 	add.w	r3, sl, fp
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	8862      	ldrh	r2, [r4, #2]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800d8b2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d8b6:	b923      	cbnz	r3, 800d8c2 <lv_txt_get_size+0xc4>
        size_res->y = letter_height;
 800d8b8:	9b05      	ldr	r3, [sp, #20]
 800d8ba:	8063      	strh	r3, [r4, #2]
}
 800d8bc:	b007      	add	sp, #28
 800d8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y -= line_space;
 800d8c2:	eba3 030b 	sub.w	r3, r3, fp
 800d8c6:	8063      	strh	r3, [r4, #2]
 800d8c8:	e7f8      	b.n	800d8bc <lv_txt_get_size+0xbe>

0800d8ca <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800d8ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ce:	4681      	mov	r9, r0
 800d8d0:	4688      	mov	r8, r1
 800d8d2:	4614      	mov	r4, r2
 800d8d4:	461f      	mov	r7, r3
 800d8d6:	f8dd a020 	ldr.w	sl, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800d8da:	e007      	b.n	800d8ec <_lv_utils_bsearch+0x22>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
 800d8dc:	f014 0f01 	tst.w	r4, #1
 800d8e0:	bf0c      	ite	eq
 800d8e2:	2401      	moveq	r4, #1
 800d8e4:	2400      	movne	r4, #0
 800d8e6:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
 800d8e8:	eb06 0807 	add.w	r8, r6, r7
    for(middle = base; n != 0;) {
 800d8ec:	b15c      	cbz	r4, 800d906 <_lv_utils_bsearch+0x3c>
        middle += (n / 2) * size;
 800d8ee:	0865      	lsrs	r5, r4, #1
 800d8f0:	fb07 8605 	mla	r6, r7, r5, r8
        if((c = (*cmp)(key, middle)) > 0) {
 800d8f4:	4631      	mov	r1, r6
 800d8f6:	4648      	mov	r0, r9
 800d8f8:	47d0      	blx	sl
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	dcee      	bgt.n	800d8dc <_lv_utils_bsearch+0x12>
        }
        else if(c < 0) {
 800d8fe:	2800      	cmp	r0, #0
 800d900:	da02      	bge.n	800d908 <_lv_utils_bsearch+0x3e>
            n /= 2;
 800d902:	462c      	mov	r4, r5
 800d904:	e7f2      	b.n	800d8ec <_lv_utils_bsearch+0x22>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 800d906:	2600      	movs	r6, #0
}
 800d908:	4630      	mov	r0, r6
 800d90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d90e <lv_label_get_dot_tmp>:
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc) {
 800d90e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d912:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d916:	d001      	beq.n	800d91c <lv_label_get_dot_tmp+0xe>
        return label->dot.tmp_ptr;
 800d918:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d91a:	4770      	bx	lr
    }
    else {
        return label->dot.tmp;
 800d91c:	3028      	adds	r0, #40	; 0x28
    }
}
 800d91e:	4770      	bx	lr

0800d920 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 800d920:	b510      	push	{r4, lr}
 800d922:	4604      	mov	r4, r0
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 800d924:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d928:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d92c:	d003      	beq.n	800d936 <lv_label_dot_tmp_free+0x16>
 800d92e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d930:	b108      	cbz	r0, 800d936 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(label->dot.tmp_ptr);
 800d932:	f7fe fb87 	bl	800c044 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 800d936:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d93a:	f36f 1386 	bfc	r3, #6, #1
 800d93e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 800d942:	2300      	movs	r3, #0
 800d944:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800d946:	bd10      	pop	{r4, pc}

0800d948 <lv_label_revert_dots>:
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 800d948:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d94c:	f003 0307 	and.w	r3, r3, #7
 800d950:	2b01      	cmp	r3, #1
 800d952:	d125      	bne.n	800d9a0 <lv_label_revert_dots+0x58>
{
 800d954:	b570      	push	{r4, r5, r6, lr}
 800d956:	4604      	mov	r4, r0
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 800d958:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d95a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d95e:	d01e      	beq.n	800d99e <lv_label_revert_dots+0x56>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 800d960:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <lv_label_revert_dots+0x5c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3903      	subs	r1, #3
 800d966:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d968:	4798      	blx	r3
 800d96a:	4606      	mov	r6, r0
    char * dot_tmp = lv_label_get_dot_tmp(obj);
 800d96c:	4620      	mov	r0, r4
 800d96e:	f7ff ffce 	bl	800d90e <lv_label_get_dot_tmp>
    uint8_t i      = 0;
 800d972:	2300      	movs	r3, #0
    while(label->text[byte_i + i] != '\0') {
 800d974:	e003      	b.n	800d97e <lv_label_revert_dots+0x36>
        label->text[byte_i + i] = dot_tmp[i];
 800d976:	5cc5      	ldrb	r5, [r0, r3]
 800d978:	548d      	strb	r5, [r1, r2]
        i++;
 800d97a:	3301      	adds	r3, #1
 800d97c:	b2db      	uxtb	r3, r3
    while(label->text[byte_i + i] != '\0') {
 800d97e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d980:	199a      	adds	r2, r3, r6
 800d982:	eb01 0c02 	add.w	ip, r1, r2
 800d986:	5c8d      	ldrb	r5, [r1, r2]
 800d988:	2d00      	cmp	r5, #0
 800d98a:	d1f4      	bne.n	800d976 <lv_label_revert_dots+0x2e>
    label->text[byte_i + i] = dot_tmp[i];
 800d98c:	5cc3      	ldrb	r3, [r0, r3]
 800d98e:	f88c 3000 	strb.w	r3, [ip]
    lv_label_dot_tmp_free(obj);
 800d992:	4620      	mov	r0, r4
 800d994:	f7ff ffc4 	bl	800d920 <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 800d998:	f04f 33ff 	mov.w	r3, #4294967295
 800d99c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	2000003c 	.word	0x2000003c

0800d9a8 <lv_label_destructor>:
{
 800d9a8:	b510      	push	{r4, lr}
 800d9aa:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	f7ff ffb7 	bl	800d920 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 800d9b2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d9b6:	f013 0f08 	tst.w	r3, #8
 800d9ba:	d002      	beq.n	800d9c2 <lv_label_destructor+0x1a>
    label->text = NULL;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	6263      	str	r3, [r4, #36]	; 0x24
}
 800d9c0:	bd10      	pop	{r4, pc}
    if(!label->static_txt) lv_mem_free(label->text);
 800d9c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d9c4:	f7fe fb3e 	bl	800c044 <lv_mem_free>
 800d9c8:	e7f8      	b.n	800d9bc <lv_label_destructor+0x14>

0800d9ca <set_ofs_y_anim>:
    label->offset.x    = v;
    lv_obj_invalidate(obj);
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
 800d9ca:	b508      	push	{r3, lr}
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 800d9cc:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 800d9d0:	f7f6 fb4d 	bl	800406e <lv_obj_invalidate>
}
 800d9d4:	bd08      	pop	{r3, pc}

0800d9d6 <set_ofs_x_anim>:
{
 800d9d6:	b508      	push	{r3, lr}
    label->offset.x    = v;
 800d9d8:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 800d9dc:	f7f6 fb47 	bl	800406e <lv_obj_invalidate>
}
 800d9e0:	bd08      	pop	{r3, pc}

0800d9e2 <lv_label_set_dot_tmp>:
{
 800d9e2:	b570      	push	{r4, r5, r6, lr}
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	460e      	mov	r6, r1
 800d9e8:	4615      	mov	r5, r2
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 800d9ea:	f7ff ff99 	bl	800d920 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 800d9ee:	2d04      	cmp	r5, #4
 800d9f0:	d913      	bls.n	800da1a <lv_label_set_dot_tmp+0x38>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800d9f2:	1c68      	adds	r0, r5, #1
 800d9f4:	f7fe fb08 	bl	800c008 <lv_mem_alloc>
 800d9f8:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 800d9fa:	b1e0      	cbz	r0, 800da36 <lv_label_set_dot_tmp+0x54>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 800d9fc:	462a      	mov	r2, r5
 800d9fe:	4631      	mov	r1, r6
 800da00:	f7fe fbf0 	bl	800c1e4 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 800da04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800da06:	2200      	movs	r2, #0
 800da08:	555a      	strb	r2, [r3, r5]
        label->dot_tmp_alloc    = true;
 800da0a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800da0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da12:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    return true;
 800da16:	2001      	movs	r0, #1
 800da18:	e00c      	b.n	800da34 <lv_label_set_dot_tmp+0x52>
        label->dot_tmp_alloc = false;
 800da1a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800da1e:	f36f 1386 	bfc	r3, #6, #1
 800da22:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 800da26:	462a      	mov	r2, r5
 800da28:	4631      	mov	r1, r6
 800da2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800da2e:	f7fe fbd9 	bl	800c1e4 <lv_memcpy>
    return true;
 800da32:	2001      	movs	r0, #1
}
 800da34:	bd70      	pop	{r4, r5, r6, pc}
            return false;
 800da36:	2000      	movs	r0, #0
 800da38:	e7fc      	b.n	800da34 <lv_label_set_dot_tmp+0x52>
	...

0800da3c <lv_label_create>:
{
 800da3c:	b510      	push	{r4, lr}
 800da3e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 800da40:	4803      	ldr	r0, [pc, #12]	; (800da50 <lv_label_create+0x14>)
 800da42:	f7f5 fa91 	bl	8002f68 <lv_obj_class_create_obj>
 800da46:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 800da48:	f7f5 fb1e 	bl	8003088 <lv_obj_class_init_obj>
}
 800da4c:	4620      	mov	r0, r4
 800da4e:	bd10      	pop	{r4, pc}
 800da50:	080147b4 	.word	0x080147b4

0800da54 <lv_label_get_text>:
}
 800da54:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800da56:	4770      	bx	lr

0800da58 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 800da58:	2900      	cmp	r1, #0
 800da5a:	d07a      	beq.n	800db52 <lv_label_get_letter_on+0xfa>
{
 800da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da60:	b091      	sub	sp, #68	; 0x44
 800da62:	4604      	mov	r4, r0
 800da64:	460e      	mov	r6, r1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800da66:	880d      	ldrh	r5, [r1, #0]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800da68:	2212      	movs	r2, #18
 800da6a:	2100      	movs	r1, #0
 800da6c:	f7f8 fc3c 	bl	80062e8 <lv_obj_get_style_prop>
 800da70:	b283      	uxth	r3, r0
 800da72:	1aed      	subs	r5, r5, r3
 800da74:	b22b      	sxth	r3, r5
 800da76:	9305      	str	r3, [sp, #20]
 800da78:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800da7c:	8875      	ldrh	r5, [r6, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800da7e:	2210      	movs	r2, #16
 800da80:	2100      	movs	r1, #0
 800da82:	4620      	mov	r0, r4
 800da84:	f7f8 fc30 	bl	80062e8 <lv_obj_get_style_prop>
 800da88:	b283      	uxth	r3, r0
 800da8a:	1aed      	subs	r5, r5, r3
 800da8c:	b22b      	sxth	r3, r5
 800da8e:	461e      	mov	r6, r3
 800da90:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_obj_get_content_coords(obj, &txt_coords);
 800da94:	a90d      	add	r1, sp, #52	; 0x34
 800da96:	4620      	mov	r0, r4
 800da98:	f7f5 ff58 	bl	800394c <lv_obj_get_content_coords>
    const char * txt         = lv_label_get_text(obj);
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7ff ffd9 	bl	800da54 <lv_label_get_text>
 800daa2:	4607      	mov	r7, r0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800daa4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800daa8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	b29b      	uxth	r3, r3
 800dab0:	3301      	adds	r3, #1
 800dab2:	b21b      	sxth	r3, r3
 800dab4:	9303      	str	r3, [sp, #12]
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800dab6:	2257      	movs	r2, #87	; 0x57
 800dab8:	2100      	movs	r1, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	f7f8 fc14 	bl	80062e8 <lv_obj_get_style_prop>
 800dac0:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800dac2:	2259      	movs	r2, #89	; 0x59
 800dac4:	2100      	movs	r1, #0
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7f8 fc0e 	bl	80062e8 <lv_obj_get_style_prop>
 800dacc:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800dace:	2258      	movs	r2, #88	; 0x58
 800dad0:	2100      	movs	r1, #0
 800dad2:	4620      	mov	r0, r4
 800dad4:	f7f8 fc08 	bl	80062e8 <lv_obj_get_style_prop>
 800dad8:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)v.num;
 800dada:	b203      	sxth	r3, r0
 800dadc:	9302      	str	r3, [sp, #8]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 800dade:	f9ba 9008 	ldrsh.w	r9, [sl, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 800dae2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dae6:	f013 0b10 	ands.w	fp, r3, #16
 800daea:	d001      	beq.n	800daf0 <lv_label_get_letter_on+0x98>
 800daec:	f04f 0b01 	mov.w	fp, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 800daf0:	f013 0f20 	tst.w	r3, #32
 800daf4:	d001      	beq.n	800dafa <lv_label_get_letter_on+0xa2>
 800daf6:	f04b 0b02 	orr.w	fp, fp, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800dafa:	2201      	movs	r2, #1
 800dafc:	2100      	movs	r1, #0
 800dafe:	4620      	mov	r0, r4
 800db00:	f7f8 fbf2 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800db04:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 800db06:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d022      	beq.n	800db54 <lv_label_get_letter_on+0xfc>
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 800db0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db10:	2100      	movs	r1, #0
 800db12:	4620      	mov	r0, r4
 800db14:	f7f8 ff9a 	bl	8006a4c <lv_obj_calculate_style_text_align>
 800db18:	9007      	str	r0, [sp, #28]
    lv_coord_t y             = 0;
 800db1a:	2400      	movs	r4, #0
    uint32_t line_start      = 0;
 800db1c:	4625      	mov	r5, r4
    while(txt[line_start] != '\0') {
 800db1e:	eb07 0805 	add.w	r8, r7, r5
 800db22:	5d7b      	ldrb	r3, [r7, r5]
 800db24:	b35b      	cbz	r3, 800db7e <lv_label_get_letter_on+0x126>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 800db26:	f8cd b004 	str.w	fp, [sp, #4]
 800db2a:	2300      	movs	r3, #0
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	9a02      	ldr	r2, [sp, #8]
 800db32:	4651      	mov	r1, sl
 800db34:	4640      	mov	r0, r8
 800db36:	f7ff fd71 	bl	800d61c <_lv_txt_get_next_line>
 800db3a:	4428      	add	r0, r5
        if(pos.y <= y + letter_height) {
 800db3c:	eb04 0309 	add.w	r3, r4, r9
 800db40:	429e      	cmp	r6, r3
 800db42:	dd0f      	ble.n	800db64 <lv_label_get_letter_on+0x10c>
        y += letter_height + line_space;
 800db44:	9b04      	ldr	r3, [sp, #16]
 800db46:	444b      	add	r3, r9
 800db48:	b29b      	uxth	r3, r3
 800db4a:	441c      	add	r4, r3
 800db4c:	b224      	sxth	r4, r4
        line_start = new_line_start;
 800db4e:	4605      	mov	r5, r0
 800db50:	e7e5      	b.n	800db1e <lv_label_get_letter_on+0xc6>
    LV_ASSERT_NULL(pos_in);
 800db52:	e7fe      	b.n	800db52 <lv_label_get_letter_on+0xfa>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 800db54:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800db58:	f013 0f08 	tst.w	r3, #8
 800db5c:	d1d7      	bne.n	800db0e <lv_label_get_letter_on+0xb6>
 800db5e:	f04b 0b04 	orr.w	fp, fp, #4
 800db62:	e7d4      	b.n	800db0e <lv_label_get_letter_on+0xb6>
            uint32_t tmp = new_line_start;
 800db64:	4606      	mov	r6, r0
 800db66:	900a      	str	r0, [sp, #40]	; 0x28
            letter = _lv_txt_encoded_prev(txt, &tmp);
 800db68:	4b44      	ldr	r3, [pc, #272]	; (800dc7c <lv_label_get_letter_on+0x224>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	a90a      	add	r1, sp, #40	; 0x28
 800db6e:	4638      	mov	r0, r7
 800db70:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 800db72:	280a      	cmp	r0, #10
 800db74:	d004      	beq.n	800db80 <lv_label_get_letter_on+0x128>
 800db76:	5dbb      	ldrb	r3, [r7, r6]
 800db78:	b913      	cbnz	r3, 800db80 <lv_label_get_letter_on+0x128>
 800db7a:	3601      	adds	r6, #1
            break;
 800db7c:	e000      	b.n	800db80 <lv_label_get_letter_on+0x128>
 800db7e:	462e      	mov	r6, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 800db80:	9b07      	ldr	r3, [sp, #28]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d017      	beq.n	800dbb6 <lv_label_get_letter_on+0x15e>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800db86:	9b07      	ldr	r3, [sp, #28]
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d02f      	beq.n	800dbec <lv_label_get_letter_on+0x194>
    lv_coord_t x = 0;
 800db8c:	2400      	movs	r4, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 800db8e:	2300      	movs	r3, #0
 800db90:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint32_t i = 0;
 800db94:	930b      	str	r3, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
 800db96:	2e00      	cmp	r6, #0
 800db98:	d16d      	bne.n	800dc76 <lv_label_get_letter_on+0x21e>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 800db9a:	4e39      	ldr	r6, [pc, #228]	; (800dc80 <lv_label_get_letter_on+0x228>)
 800db9c:	6833      	ldr	r3, [r6, #0]
 800db9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dba0:	4640      	mov	r0, r8
 800dba2:	4798      	blx	r3
 800dba4:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 800dba6:	6833      	ldr	r3, [r6, #0]
 800dba8:	4629      	mov	r1, r5
 800dbaa:	4638      	mov	r0, r7
 800dbac:	4798      	blx	r3
}
 800dbae:	4420      	add	r0, r4
 800dbb0:	b011      	add	sp, #68	; 0x44
 800dbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 800dbb6:	f8cd b000 	str.w	fp, [sp]
 800dbba:	9b02      	ldr	r3, [sp, #8]
 800dbbc:	4652      	mov	r2, sl
 800dbbe:	1b71      	subs	r1, r6, r5
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	f7ff fdcb 	bl	800d75c <lv_txt_get_width>
 800dbc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800dbca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800dbce:	1a9b      	subs	r3, r3, r2
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	b21a      	sxth	r2, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 800dbd6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800dbda:	4413      	add	r3, r2
 800dbdc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800dbe0:	f340 044f 	sbfx	r4, r0, #1, #16
 800dbe4:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800dbe8:	b21c      	sxth	r4, r3
 800dbea:	e7d0      	b.n	800db8e <lv_label_get_letter_on+0x136>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 800dbec:	f8cd b000 	str.w	fp, [sp]
 800dbf0:	9b02      	ldr	r3, [sp, #8]
 800dbf2:	4652      	mov	r2, sl
 800dbf4:	1b71      	subs	r1, r6, r5
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	f7ff fdb0 	bl	800d75c <lv_txt_get_width>
 800dbfc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800dc00:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800dc04:	1a9b      	subs	r3, r3, r2
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	3301      	adds	r3, #1
 800dc0a:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 800dc0c:	1a1b      	subs	r3, r3, r0
 800dc0e:	b21c      	sxth	r4, r3
 800dc10:	e7bd      	b.n	800db8e <lv_label_get_letter_on+0x136>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 800dc12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc16:	4650      	mov	r0, sl
 800dc18:	f7fc feec 	bl	800a9f4 <lv_font_get_glyph_width>
 800dc1c:	b203      	sxth	r3, r0
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 800dc1e:	4423      	add	r3, r4
 800dc20:	9a05      	ldr	r2, [sp, #20]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	db24      	blt.n	800dc70 <lv_label_get_letter_on+0x218>
 800dc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc28:	195a      	adds	r2, r3, r5
 800dc2a:	42b2      	cmp	r2, r6
 800dc2c:	d020      	beq.n	800dc70 <lv_label_get_letter_on+0x218>
 800dc2e:	eb05 0209 	add.w	r2, r5, r9
 800dc32:	5cba      	ldrb	r2, [r7, r2]
 800dc34:	b1e2      	cbz	r2, 800dc70 <lv_label_get_letter_on+0x218>
            x += gw;
 800dc36:	4404      	add	r4, r0
 800dc38:	b2a4      	uxth	r4, r4
            x += letter_space;
 800dc3a:	9a06      	ldr	r2, [sp, #24]
 800dc3c:	4414      	add	r4, r2
 800dc3e:	b224      	sxth	r4, r4
            i_act = i;
 800dc40:	4699      	mov	r9, r3
        while(i + line_start < new_line_start) {
 800dc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc44:	442b      	add	r3, r5
 800dc46:	42b3      	cmp	r3, r6
 800dc48:	d2a7      	bcs.n	800db9a <lv_label_get_letter_on+0x142>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800dc4a:	ab0b      	add	r3, sp, #44	; 0x2c
 800dc4c:	aa0a      	add	r2, sp, #40	; 0x28
 800dc4e:	a909      	add	r1, sp, #36	; 0x24
 800dc50:	4640      	mov	r0, r8
 800dc52:	f7ff fd6d 	bl	800d730 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800dc56:	f01b 0f01 	tst.w	fp, #1
 800dc5a:	d0da      	beq.n	800dc12 <lv_label_get_letter_on+0x1ba>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 800dc5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc5e:	f818 1003 	ldrb.w	r1, [r8, r3]
 800dc62:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800dc66:	f7ff fc01 	bl	800d46c <_lv_txt_is_cmd>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d0d1      	beq.n	800dc12 <lv_label_get_letter_on+0x1ba>
 800dc6e:	e7e8      	b.n	800dc42 <lv_label_get_letter_on+0x1ea>
                i = i_act;
 800dc70:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
                break;
 800dc74:	e791      	b.n	800db9a <lv_label_get_letter_on+0x142>
    uint32_t i_act = i;
 800dc76:	f04f 0900 	mov.w	r9, #0
 800dc7a:	e7e2      	b.n	800dc42 <lv_label_get_letter_on+0x1ea>
 800dc7c:	20000048 	.word	0x20000048
 800dc80:	20000044 	.word	0x20000044

0800dc84 <lv_label_refr_text>:
    if(label->text == NULL) return;
 800dc84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f000 8270 	beq.w	800e16c <lv_label_refr_text+0x4e8>
{
 800dc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc90:	b09a      	sub	sp, #104	; 0x68
 800dc92:	4604      	mov	r4, r0
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 800dc94:	f04f 33ff 	mov.w	r3, #4294967295
 800dc98:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 800dc9a:	a918      	add	r1, sp, #96	; 0x60
 800dc9c:	f7f5 fe56 	bl	800394c <lv_obj_get_content_coords>
 800dca0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800dca4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800dca8:	1aed      	subs	r5, r5, r3
 800dcaa:	b2ad      	uxth	r5, r5
 800dcac:	3501      	adds	r5, #1
 800dcae:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800dcb0:	2257      	movs	r2, #87	; 0x57
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7f8 fb17 	bl	80062e8 <lv_obj_get_style_prop>
 800dcba:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800dcbc:	2259      	movs	r2, #89	; 0x59
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f7f8 fb11 	bl	80062e8 <lv_obj_get_style_prop>
 800dcc6:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 800dcc8:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800dccc:	2258      	movs	r2, #88	; 0x58
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f7f8 fb09 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800dcd6:	b207      	sxth	r7, r0
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 800dcd8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dcdc:	f013 0a10 	ands.w	sl, r3, #16
 800dce0:	d001      	beq.n	800dce6 <lv_label_refr_text+0x62>
 800dce2:	f04f 0a01 	mov.w	sl, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 800dce6:	f013 0f20 	tst.w	r3, #32
 800dcea:	d001      	beq.n	800dcf0 <lv_label_refr_text+0x6c>
 800dcec:	f04a 0a02 	orr.w	sl, sl, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f7f8 faf7 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800dcfa:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 800dcfc:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800dd00:	4298      	cmp	r0, r3
 800dd02:	d01f      	beq.n	800dd44 <lv_label_refr_text+0xc0>
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 800dd04:	f8cd a008 	str.w	sl, [sp, #8]
 800dd08:	9501      	str	r5, [sp, #4]
 800dd0a:	f8cd 9000 	str.w	r9, [sp]
 800dd0e:	463b      	mov	r3, r7
 800dd10:	4632      	mov	r2, r6
 800dd12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dd14:	a817      	add	r0, sp, #92	; 0x5c
 800dd16:	f7ff fd72 	bl	800d7fe <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f7f5 fffa 	bl	8003d14 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 800dd20:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800dd24:	f001 0107 	and.w	r1, r1, #7
 800dd28:	2902      	cmp	r1, #2
 800dd2a:	d013      	beq.n	800dd54 <lv_label_refr_text+0xd0>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 800dd2c:	2903      	cmp	r1, #3
 800dd2e:	f000 80c2 	beq.w	800deb6 <lv_label_refr_text+0x232>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 800dd32:	2901      	cmp	r1, #1
 800dd34:	f000 8166 	beq.w	800e004 <lv_label_refr_text+0x380>
    lv_obj_invalidate(obj);
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f7f6 f998 	bl	800406e <lv_obj_invalidate>
}
 800dd3e:	b01a      	add	sp, #104	; 0x68
 800dd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 800dd44:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800dd48:	f013 0f08 	tst.w	r3, #8
 800dd4c:	d1da      	bne.n	800dd04 <lv_label_refr_text+0x80>
 800dd4e:	f04a 0a04 	orr.w	sl, sl, #4
 800dd52:	e7d7      	b.n	800dd04 <lv_label_refr_text+0x80>
    return (uint32_t)v.num;
}

static inline uint32_t lv_obj_get_style_anim_speed(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 800dd54:	2266      	movs	r2, #102	; 0x66
 800dd56:	2100      	movs	r1, #0
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7f8 fac5 	bl	80062e8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 800dd5e:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	d05c      	beq.n	800de1e <lv_label_refr_text+0x19a>
        lv_anim_init(&a);
 800dd64:	a806      	add	r0, sp, #24
 800dd66:	f7fd f9b9 	bl	800b0dc <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 800dd6a:	9406      	str	r4, [sp, #24]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 800dd6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd70:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a->playback_delay = delay;
 800dd74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800dd78:	9313      	str	r3, [sp, #76]	; 0x4c
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 800dd7a:	9315      	str	r3, [sp, #84]	; 0x54
        if(size.x > lv_area_get_width(&txt_coords)) {
 800dd7c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 800dd80:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800dd84:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 800dd88:	1a5b      	subs	r3, r3, r1
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	b21b      	sxth	r3, r3
 800dd90:	429a      	cmp	r2, r3
 800dd92:	dd54      	ble.n	800de3e <lv_label_refr_text+0x1ba>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 800dd94:	1a9b      	subs	r3, r3, r2
    a->start_value = start;
 800dd96:	2200      	movs	r2, #0
 800dd98:	920e      	str	r2, [sp, #56]	; 0x38
    a->current_value = start;
 800dd9a:	920f      	str	r2, [sp, #60]	; 0x3c
    a->end_value = end;
 800dd9c:	9310      	str	r3, [sp, #64]	; 0x40
    a->exec_cb = exec_cb;
 800dd9e:	49aa      	ldr	r1, [pc, #680]	; (800e048 <lv_label_refr_text+0x3c4>)
 800dda0:	9107      	str	r1, [sp, #28]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 800dda2:	4620      	mov	r0, r4
 800dda4:	f7fd fa2a 	bl	800b1fc <lv_anim_get>
            if(anim_cur) {
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d045      	beq.n	800de38 <lv_label_refr_text+0x1b4>
                act_time = anim_cur->act_time;
 800ddac:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 800ddae:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800ddb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
 800ddb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ddb8:	4291      	cmp	r1, r2
 800ddba:	dd10      	ble.n	800ddde <lv_label_refr_text+0x15a>
                a.act_time = act_time;      /*To keep the old position*/
 800ddbc:	9212      	str	r2, [sp, #72]	; 0x48
                a.early_apply = 0;
 800ddbe:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 800ddc2:	f36f 0200 	bfc	r2, #0, #1
 800ddc6:	f88d 205a 	strb.w	r2, [sp, #90]	; 0x5a
                if(playback_now) {
 800ddca:	b143      	cbz	r3, 800ddde <lv_label_refr_text+0x15a>
                    a.playback_now = 1;
 800ddcc:	b2d3      	uxtb	r3, r2
 800ddce:	f043 0302 	orr.w	r3, r3, #2
 800ddd2:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
                    tmp      = a.start_value;
 800ddd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    a.start_value = a.end_value;
 800ddd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ddda:	920e      	str	r2, [sp, #56]	; 0x38
                    a.end_value   = tmp;
 800dddc:	9310      	str	r3, [sp, #64]	; 0x40
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 800ddde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dde0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dde2:	4628      	mov	r0, r5
 800dde4:	f7fd fa24 	bl	800b230 <lv_anim_speed_to_time>
    a->time = duration;
 800dde8:	9011      	str	r0, [sp, #68]	; 0x44
    a->playback_time = time;
 800ddea:	9014      	str	r0, [sp, #80]	; 0x50
            lv_anim_start(&a);
 800ddec:	a806      	add	r0, sp, #24
 800ddee:	f7fd f9c1 	bl	800b174 <lv_anim_start>
            hor_anim = true;
 800ddf2:	2701      	movs	r7, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 800ddf4:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ddf8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 800ddfc:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 800de00:	1a5b      	subs	r3, r3, r1
 800de02:	b29b      	uxth	r3, r3
 800de04:	3301      	adds	r3, #1
 800de06:	b21b      	sxth	r3, r3
 800de08:	429a      	cmp	r2, r3
 800de0a:	dd00      	ble.n	800de0e <lv_label_refr_text+0x18a>
 800de0c:	b1ff      	cbz	r7, 800de4e <lv_label_refr_text+0x1ca>
            lv_anim_del(obj, set_ofs_y_anim);
 800de0e:	498f      	ldr	r1, [pc, #572]	; (800e04c <lv_label_refr_text+0x3c8>)
 800de10:	4620      	mov	r0, r4
 800de12:	f7fd f97d 	bl	800b110 <lv_anim_del>
            label->offset.y = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800de1c:	e78c      	b.n	800dd38 <lv_label_refr_text+0xb4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800de1e:	4620      	mov	r0, r4
 800de20:	f7f8 fe96 	bl	8006b50 <lv_obj_get_disp>
 800de24:	f7fd f812 	bl	800ae4c <lv_disp_get_dpi>
 800de28:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
 800de2c:	fb85 3500 	smull	r3, r5, r5, r0
 800de30:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 800de34:	b2ad      	uxth	r5, r5
 800de36:	e795      	b.n	800dd64 <lv_label_refr_text+0xe0>
            bool playback_now = false;
 800de38:	2300      	movs	r3, #0
            int32_t act_time = 0;
 800de3a:	461a      	mov	r2, r3
 800de3c:	e7bb      	b.n	800ddb6 <lv_label_refr_text+0x132>
            lv_anim_del(obj, set_ofs_x_anim);
 800de3e:	4982      	ldr	r1, [pc, #520]	; (800e048 <lv_label_refr_text+0x3c4>)
 800de40:	4620      	mov	r0, r4
 800de42:	f7fd f965 	bl	800b110 <lv_anim_del>
            label->offset.x = 0;
 800de46:	2700      	movs	r7, #0
 800de48:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
 800de4c:	e7d2      	b.n	800ddf4 <lv_label_refr_text+0x170>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 800de4e:	1a9b      	subs	r3, r3, r2
 800de50:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
 800de54:	1a9b      	subs	r3, r3, r2
    a->start_value = start;
 800de56:	2200      	movs	r2, #0
 800de58:	920e      	str	r2, [sp, #56]	; 0x38
    a->current_value = start;
 800de5a:	920f      	str	r2, [sp, #60]	; 0x3c
    a->end_value = end;
 800de5c:	9310      	str	r3, [sp, #64]	; 0x40
    a->exec_cb = exec_cb;
 800de5e:	497b      	ldr	r1, [pc, #492]	; (800e04c <lv_label_refr_text+0x3c8>)
 800de60:	9107      	str	r1, [sp, #28]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 800de62:	4620      	mov	r0, r4
 800de64:	f7fd f9ca 	bl	800b1fc <lv_anim_get>
            if(anim_cur) {
 800de68:	b318      	cbz	r0, 800deb2 <lv_label_refr_text+0x22e>
                act_time = anim_cur->act_time;
 800de6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 800de6c:	f890 7042 	ldrb.w	r7, [r0, #66]	; 0x42
 800de70:	f3c7 0740 	ubfx	r7, r7, #1, #1
            if(act_time < a.time) {
 800de74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de76:	429a      	cmp	r2, r3
 800de78:	dd10      	ble.n	800de9c <lv_label_refr_text+0x218>
                a.act_time = act_time;      /*To keep the old position*/
 800de7a:	9312      	str	r3, [sp, #72]	; 0x48
                a.early_apply = 0;
 800de7c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800de80:	f36f 0300 	bfc	r3, #0, #1
 800de84:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
                if(playback_now) {
 800de88:	b147      	cbz	r7, 800de9c <lv_label_refr_text+0x218>
                    a.playback_now = 1;
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	f043 0302 	orr.w	r3, r3, #2
 800de90:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
                    tmp      = a.start_value;
 800de94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    a.start_value = a.end_value;
 800de96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de98:	920e      	str	r2, [sp, #56]	; 0x38
                    a.end_value   = tmp;
 800de9a:	9310      	str	r3, [sp, #64]	; 0x40
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 800de9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dea0:	4628      	mov	r0, r5
 800dea2:	f7fd f9c5 	bl	800b230 <lv_anim_speed_to_time>
    a->time = duration;
 800dea6:	9011      	str	r0, [sp, #68]	; 0x44
    a->playback_time = time;
 800dea8:	9014      	str	r0, [sp, #80]	; 0x50
            lv_anim_start(&a);
 800deaa:	a806      	add	r0, sp, #24
 800deac:	f7fd f962 	bl	800b174 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 800deb0:	e742      	b.n	800dd38 <lv_label_refr_text+0xb4>
            int32_t act_time = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	e7de      	b.n	800de74 <lv_label_refr_text+0x1f0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 800deb6:	2264      	movs	r2, #100	; 0x64
 800deb8:	2100      	movs	r1, #0
 800deba:	4620      	mov	r0, r4
 800debc:	f7f8 fa14 	bl	80062e8 <lv_obj_get_style_prop>
 800dec0:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 800dec2:	2266      	movs	r2, #102	; 0x66
 800dec4:	2100      	movs	r1, #0
 800dec6:	4620      	mov	r0, r4
 800dec8:	f7f8 fa0e 	bl	80062e8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 800decc:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800dece:	2d00      	cmp	r5, #0
 800ded0:	d04d      	beq.n	800df6e <lv_label_refr_text+0x2ea>
        lv_anim_init(&a);
 800ded2:	a806      	add	r0, sp, #24
 800ded4:	f7fd f902 	bl	800b0dc <lv_anim_init>
    a->var = var;
 800ded8:	9406      	str	r4, [sp, #24]
    a->repeat_cnt = cnt;
 800deda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dede:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        if(size.x > lv_area_get_width(&txt_coords)) {
 800dee2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dee6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800deea:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 800deee:	1a5b      	subs	r3, r3, r1
 800def0:	b29b      	uxth	r3, r3
 800def2:	3301      	adds	r3, #1
 800def4:	b21b      	sxth	r3, r3
 800def6:	429a      	cmp	r2, r3
 800def8:	dd53      	ble.n	800dfa2 <lv_label_refr_text+0x31e>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 800defa:	2220      	movs	r2, #32
 800defc:	4611      	mov	r1, r2
 800defe:	4630      	mov	r0, r6
 800df00:	f7fc fd78 	bl	800a9f4 <lv_font_get_glyph_width>
 800df04:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 800df08:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 800df0c:	1a82      	subs	r2, r0, r2
    a->start_value = start;
 800df0e:	2100      	movs	r1, #0
 800df10:	910e      	str	r1, [sp, #56]	; 0x38
    a->current_value = start;
 800df12:	910f      	str	r1, [sp, #60]	; 0x3c
    a->end_value = end;
 800df14:	9210      	str	r2, [sp, #64]	; 0x40
    a->exec_cb = exec_cb;
 800df16:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800e048 <lv_label_refr_text+0x3c4>
 800df1a:	f8cd 801c 	str.w	r8, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 800df1e:	4628      	mov	r0, r5
 800df20:	f7fd f986 	bl	800b230 <lv_anim_speed_to_time>
    a->time = duration;
 800df24:	9011      	str	r0, [sp, #68]	; 0x44
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 800df26:	4641      	mov	r1, r8
 800df28:	4620      	mov	r0, r4
 800df2a:	f7fd f967 	bl	800b1fc <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 800df2e:	b358      	cbz	r0, 800df88 <lv_label_refr_text+0x304>
 800df30:	6b03      	ldr	r3, [r0, #48]	; 0x30
            if(anim_template) {
 800df32:	b35f      	cbz	r7, 800df8c <lv_label_refr_text+0x308>
                a.act_time = anim_template->act_time;
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	9312      	str	r3, [sp, #72]	; 0x48
                a.repeat_delay = anim_template->repeat_delay;
 800df38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3a:	9315      	str	r3, [sp, #84]	; 0x54
            lv_anim_start(&a);
 800df3c:	a806      	add	r0, sp, #24
 800df3e:	f7fd f919 	bl	800b174 <lv_anim_start>
            hor_anim = true;
 800df42:	2101      	movs	r1, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 800df44:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800df48:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 800df4c:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
 800df50:	1a1b      	subs	r3, r3, r0
 800df52:	b29b      	uxth	r3, r3
 800df54:	3301      	adds	r3, #1
 800df56:	b21b      	sxth	r3, r3
 800df58:	429a      	cmp	r2, r3
 800df5a:	dd00      	ble.n	800df5e <lv_label_refr_text+0x2da>
 800df5c:	b349      	cbz	r1, 800dfb2 <lv_label_refr_text+0x32e>
            lv_anim_del(obj, set_ofs_y_anim);
 800df5e:	493b      	ldr	r1, [pc, #236]	; (800e04c <lv_label_refr_text+0x3c8>)
 800df60:	4620      	mov	r0, r4
 800df62:	f7fd f8d5 	bl	800b110 <lv_anim_del>
            label->offset.y = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800df6c:	e6e4      	b.n	800dd38 <lv_label_refr_text+0xb4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800df6e:	4620      	mov	r0, r4
 800df70:	f7f8 fdee 	bl	8006b50 <lv_obj_get_disp>
 800df74:	f7fc ff6a 	bl	800ae4c <lv_disp_get_dpi>
 800df78:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
 800df7c:	fb85 3500 	smull	r3, r5, r5, r0
 800df80:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 800df84:	b2ad      	uxth	r5, r5
 800df86:	e7a4      	b.n	800ded2 <lv_label_refr_text+0x24e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	e7d2      	b.n	800df32 <lv_label_refr_text+0x2ae>
            else if(act_time < a.time) {
 800df8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df8e:	429a      	cmp	r2, r3
 800df90:	ddd4      	ble.n	800df3c <lv_label_refr_text+0x2b8>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 800df92:	9312      	str	r3, [sp, #72]	; 0x48
                a.early_apply = 0;
 800df94:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800df98:	f36f 0300 	bfc	r3, #0, #1
 800df9c:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 800dfa0:	e7cc      	b.n	800df3c <lv_label_refr_text+0x2b8>
            lv_anim_del(obj, set_ofs_x_anim);
 800dfa2:	4929      	ldr	r1, [pc, #164]	; (800e048 <lv_label_refr_text+0x3c4>)
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7fd f8b3 	bl	800b110 <lv_anim_del>
            label->offset.x = 0;
 800dfaa:	2100      	movs	r1, #0
 800dfac:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
 800dfb0:	e7c8      	b.n	800df44 <lv_label_refr_text+0x2c0>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 800dfb2:	4252      	negs	r2, r2
 800dfb4:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 800dfb8:	1ad2      	subs	r2, r2, r3
    a->start_value = start;
 800dfba:	910e      	str	r1, [sp, #56]	; 0x38
    a->current_value = start;
 800dfbc:	910f      	str	r1, [sp, #60]	; 0x3c
    a->end_value = end;
 800dfbe:	9210      	str	r2, [sp, #64]	; 0x40
    a->exec_cb = exec_cb;
 800dfc0:	4e22      	ldr	r6, [pc, #136]	; (800e04c <lv_label_refr_text+0x3c8>)
 800dfc2:	9607      	str	r6, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	f7fd f933 	bl	800b230 <lv_anim_speed_to_time>
    a->time = duration;
 800dfca:	9011      	str	r0, [sp, #68]	; 0x44
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 800dfcc:	4631      	mov	r1, r6
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f7fd f914 	bl	800b1fc <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 800dfd4:	b148      	cbz	r0, 800dfea <lv_label_refr_text+0x366>
 800dfd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
            if(anim_template) {
 800dfd8:	b14f      	cbz	r7, 800dfee <lv_label_refr_text+0x36a>
                a.act_time = anim_template->act_time;
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	9312      	str	r3, [sp, #72]	; 0x48
                a.repeat_delay = anim_template->repeat_delay;
 800dfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe0:	9315      	str	r3, [sp, #84]	; 0x54
            lv_anim_start(&a);
 800dfe2:	a806      	add	r0, sp, #24
 800dfe4:	f7fd f8c6 	bl	800b174 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 800dfe8:	e6a6      	b.n	800dd38 <lv_label_refr_text+0xb4>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	e7f4      	b.n	800dfd8 <lv_label_refr_text+0x354>
            else if(act_time < a.time) {
 800dfee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dff0:	429a      	cmp	r2, r3
 800dff2:	ddf6      	ble.n	800dfe2 <lv_label_refr_text+0x35e>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 800dff4:	9312      	str	r3, [sp, #72]	; 0x48
                a.early_apply = 0;
 800dff6:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800dffa:	f36f 0300 	bfc	r3, #0, #1
 800dffe:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 800e002:	e7ee      	b.n	800dfe2 <lv_label_refr_text+0x35e>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 800e004:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 800e008:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 800e00c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 800e010:	1a5b      	subs	r3, r3, r1
 800e012:	b29b      	uxth	r3, r3
 800e014:	3301      	adds	r3, #1
 800e016:	b21b      	sxth	r3, r3
 800e018:	429a      	cmp	r2, r3
 800e01a:	dc03      	bgt.n	800e024 <lv_label_refr_text+0x3a0>
            label->dot_end = LV_LABEL_DOT_END_INV;
 800e01c:	f04f 33ff 	mov.w	r3, #4294967295
 800e020:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e022:	e689      	b.n	800dd38 <lv_label_refr_text+0xb4>
 800e024:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 800e028:	429a      	cmp	r2, r3
 800e02a:	dc03      	bgt.n	800e034 <lv_label_refr_text+0x3b0>
            label->dot_end = LV_LABEL_DOT_END_INV;
 800e02c:	f04f 33ff 	mov.w	r3, #4294967295
 800e030:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e032:	e681      	b.n	800dd38 <lv_label_refr_text+0xb4>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 800e034:	4b06      	ldr	r3, [pc, #24]	; (800e050 <lv_label_refr_text+0x3cc>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e03a:	4798      	blx	r3
 800e03c:	2803      	cmp	r0, #3
 800e03e:	d809      	bhi.n	800e054 <lv_label_refr_text+0x3d0>
            label->dot_end = LV_LABEL_DOT_END_INV;
 800e040:	f04f 33ff 	mov.w	r3, #4294967295
 800e044:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e046:	e677      	b.n	800dd38 <lv_label_refr_text+0xb4>
 800e048:	0800d9d7 	.word	0x0800d9d7
 800e04c:	0800d9cb 	.word	0x0800d9cb
 800e050:	20000040 	.word	0x20000040
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e054:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800e058:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800e05c:	1aed      	subs	r5, r5, r3
 800e05e:	b2ad      	uxth	r5, r5
 800e060:	3501      	adds	r5, #1
 800e062:	b2ad      	uxth	r5, r5
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 800e064:	222e      	movs	r2, #46	; 0x2e
 800e066:	4611      	mov	r1, r2
 800e068:	4630      	mov	r0, r6
 800e06a:	f7fc fcc3 	bl	800a9f4 <lv_font_get_glyph_width>
 800e06e:	4407      	add	r7, r0
            p.x = lv_area_get_width(&txt_coords) -
 800e070:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
 800e074:	442f      	add	r7, r5
 800e076:	f8ad 7014 	strh.w	r7, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e07a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 800e07e:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 800e082:	1a9b      	subs	r3, r3, r2
 800e084:	b29b      	uxth	r3, r3
 800e086:	3301      	adds	r3, #1
 800e088:	b29a      	uxth	r2, r3
 800e08a:	b21b      	sxth	r3, r3
            p.y = lv_area_get_height(&txt_coords);
 800e08c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e090:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 800e094:	4489      	add	r9, r1
            y_overed = p.y %
 800e096:	fb93 f0f9 	sdiv	r0, r3, r9
 800e09a:	fb09 3910 	mls	r9, r9, r0, r3
 800e09e:	fa0f f389 	sxth.w	r3, r9
            if(y_overed >= lv_font_get_line_height(font)) {
 800e0a2:	428b      	cmp	r3, r1
 800e0a4:	db23      	blt.n	800e0ee <lv_label_refr_text+0x46a>
                p.y -= y_overed;
 800e0a6:	eba2 0309 	sub.w	r3, r2, r9
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	f8ad 3016 	strh.w	r3, [sp, #22]
                p.y += lv_font_get_line_height(font);
 800e0b0:	b289      	uxth	r1, r1
 800e0b2:	440b      	add	r3, r1
 800e0b4:	f8ad 3016 	strh.w	r3, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 800e0b8:	a905      	add	r1, sp, #20
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f7ff fccc 	bl	800da58 <lv_label_get_letter_on>
 800e0c0:	4605      	mov	r5, r0
            size_t txt_len = strlen(label->text);
 800e0c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f7f2 f8ad 	bl	8000224 <strlen>
 800e0ca:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 800e0cc:	4b28      	ldr	r3, [pc, #160]	; (800e170 <lv_label_refr_text+0x4ec>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	4798      	blx	r3
 800e0d6:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 800e0d8:	9e06      	ldr	r6, [sp, #24]
 800e0da:	1cf7      	adds	r7, r6, #3
 800e0dc:	4547      	cmp	r7, r8
 800e0de:	d910      	bls.n	800e102 <lv_label_refr_text+0x47e>
                _lv_txt_encoded_prev(label->text, &byte_id);
 800e0e0:	4b24      	ldr	r3, [pc, #144]	; (800e174 <lv_label_refr_text+0x4f0>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	a906      	add	r1, sp, #24
 800e0e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e0e8:	4798      	blx	r3
                letter_id--;
 800e0ea:	3d01      	subs	r5, #1
 800e0ec:	e7f4      	b.n	800e0d8 <lv_label_refr_text+0x454>
                p.y -= y_overed;
 800e0ee:	eba2 0309 	sub.w	r3, r2, r9
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	f8ad 3016 	strh.w	r3, [sp, #22]
                p.y -= line_space;
 800e0f8:	eba3 0308 	sub.w	r3, r3, r8
 800e0fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e100:	e7da      	b.n	800e0b8 <lv_label_refr_text+0x434>
            uint8_t len = 0;
 800e102:	f04f 0a00 	mov.w	sl, #0
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800e106:	46d1      	mov	r9, sl
 800e108:	f1b9 0f03 	cmp.w	r9, #3
 800e10c:	d816      	bhi.n	800e13c <lv_label_refr_text+0x4b8>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 800e10e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e110:	4b19      	ldr	r3, [pc, #100]	; (800e178 <lv_label_refr_text+0x4f4>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	9a06      	ldr	r2, [sp, #24]
 800e116:	4410      	add	r0, r2
 800e118:	4798      	blx	r3
 800e11a:	4450      	add	r0, sl
 800e11c:	fa5f fa80 	uxtb.w	sl, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 800e120:	4b16      	ldr	r3, [pc, #88]	; (800e17c <lv_label_refr_text+0x4f8>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	a906      	add	r1, sp, #24
 800e126:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e128:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 800e12a:	f1ba 0f03 	cmp.w	sl, #3
 800e12e:	d805      	bhi.n	800e13c <lv_label_refr_text+0x4b8>
 800e130:	9b06      	ldr	r3, [sp, #24]
 800e132:	4543      	cmp	r3, r8
 800e134:	d802      	bhi.n	800e13c <lv_label_refr_text+0x4b8>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800e136:	f109 0901 	add.w	r9, r9, #1
 800e13a:	e7e5      	b.n	800e108 <lv_label_refr_text+0x484>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 800e13c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e13e:	4652      	mov	r2, sl
 800e140:	4431      	add	r1, r6
 800e142:	4620      	mov	r0, r4
 800e144:	f7ff fc4d 	bl	800d9e2 <lv_label_set_dot_tmp>
 800e148:	2800      	cmp	r0, #0
 800e14a:	f43f adf5 	beq.w	800dd38 <lv_label_refr_text+0xb4>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 800e14e:	2300      	movs	r3, #0
 800e150:	e004      	b.n	800e15c <lv_label_refr_text+0x4d8>
                    label->text[byte_id_ori + i] = '.';
 800e152:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e154:	18f2      	adds	r2, r6, r3
 800e156:	202e      	movs	r0, #46	; 0x2e
 800e158:	5488      	strb	r0, [r1, r2]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 800e15a:	3301      	adds	r3, #1
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d9f8      	bls.n	800e152 <lv_label_refr_text+0x4ce>
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800e160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e162:	2200      	movs	r2, #0
 800e164:	55da      	strb	r2, [r3, r7]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800e166:	3503      	adds	r5, #3
 800e168:	62e5      	str	r5, [r4, #44]	; 0x2c
 800e16a:	e5e5      	b.n	800dd38 <lv_label_refr_text+0xb4>
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	2000003c 	.word	0x2000003c
 800e174:	20000048 	.word	0x20000048
 800e178:	20000034 	.word	0x20000034
 800e17c:	20000038 	.word	0x20000038

0800e180 <lv_label_set_text>:
{
 800e180:	b570      	push	{r4, r5, r6, lr}
 800e182:	4604      	mov	r4, r0
 800e184:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 800e186:	f7f5 ff72 	bl	800406e <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 800e18a:	b1ed      	cbz	r5, 800e1c8 <lv_label_set_text+0x48>
    if(label->text == text && label->static_txt == 0) {
 800e18c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e18e:	42ae      	cmp	r6, r5
 800e190:	d01c      	beq.n	800e1cc <lv_label_set_text+0x4c>
        if(label->text != NULL && label->static_txt == 0) {
 800e192:	b126      	cbz	r6, 800e19e <lv_label_set_text+0x1e>
 800e194:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e198:	f013 0f08 	tst.w	r3, #8
 800e19c:	d026      	beq.n	800e1ec <lv_label_set_text+0x6c>
        size_t len = strlen(text) + 1;
 800e19e:	4628      	mov	r0, r5
 800e1a0:	f7f2 f840 	bl	8000224 <strlen>
        label->text = lv_mem_alloc(len);
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	f7fd ff2f 	bl	800c008 <lv_mem_alloc>
 800e1aa:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 800e1ac:	b320      	cbz	r0, 800e1f8 <lv_label_set_text+0x78>
        strcpy(label->text, text);
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	f000 fab4 	bl	800e71c <strcpy>
        label->static_txt = 0;
 800e1b4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e1b8:	f36f 03c3 	bfc	r3, #3, #1
 800e1bc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f7ff fd5f 	bl	800dc84 <lv_label_refr_text>
}
 800e1c6:	bd70      	pop	{r4, r5, r6, pc}
    if(text == NULL) text = label->text;
 800e1c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e1ca:	e7df      	b.n	800e18c <lv_label_set_text+0xc>
    if(label->text == text && label->static_txt == 0) {
 800e1cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e1d0:	f013 0f08 	tst.w	r3, #8
 800e1d4:	d1dd      	bne.n	800e192 <lv_label_set_text+0x12>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f7f2 f824 	bl	8000224 <strlen>
 800e1dc:	1c41      	adds	r1, r0, #1
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f7fd ff4e 	bl	800c080 <lv_mem_realloc>
 800e1e4:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d1ea      	bne.n	800e1c0 <lv_label_set_text+0x40>
 800e1ea:	e7fe      	b.n	800e1ea <lv_label_set_text+0x6a>
            lv_mem_free(label->text);
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	f7fd ff29 	bl	800c044 <lv_mem_free>
            label->text = NULL;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	6263      	str	r3, [r4, #36]	; 0x24
 800e1f6:	e7d2      	b.n	800e19e <lv_label_set_text+0x1e>
        LV_ASSERT_MALLOC(label->text);
 800e1f8:	e7fe      	b.n	800e1f8 <lv_label_set_text+0x78>
	...

0800e1fc <lv_label_set_long_mode>:
{
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4604      	mov	r4, r0
 800e200:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 800e202:	491a      	ldr	r1, [pc, #104]	; (800e26c <lv_label_set_long_mode+0x70>)
 800e204:	f7fc ff84 	bl	800b110 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 800e208:	4919      	ldr	r1, [pc, #100]	; (800e270 <lv_label_set_long_mode+0x74>)
 800e20a:	4620      	mov	r0, r4
 800e20c:	f7fc ff80 	bl	800b110 <lv_anim_del>
    label->offset.x = 0;
 800e210:	2300      	movs	r3, #0
 800e212:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    label->offset.y = 0;
 800e216:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 800e21a:	1eab      	subs	r3, r5, #2
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d815      	bhi.n	800e24e <lv_label_set_long_mode+0x52>
        label->expand = 1;
 800e222:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e226:	f043 0320 	orr.w	r3, r3, #32
 800e22a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 800e22e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e232:	f003 0307 	and.w	r3, r3, #7
 800e236:	2b01      	cmp	r3, #1
 800e238:	d010      	beq.n	800e25c <lv_label_set_long_mode+0x60>
    label->long_mode = long_mode;
 800e23a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e23e:	f365 0302 	bfi	r3, r5, #0, #3
 800e242:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 800e246:	4620      	mov	r0, r4
 800e248:	f7ff fd1c 	bl	800dc84 <lv_label_refr_text>
}
 800e24c:	bd38      	pop	{r3, r4, r5, pc}
        label->expand = 0;
 800e24e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e252:	f36f 1345 	bfc	r3, #5, #1
 800e256:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 800e25a:	e7e8      	b.n	800e22e <lv_label_set_long_mode+0x32>
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 800e25c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e262:	d0ea      	beq.n	800e23a <lv_label_set_long_mode+0x3e>
        lv_label_revert_dots(obj);
 800e264:	4620      	mov	r0, r4
 800e266:	f7ff fb6f 	bl	800d948 <lv_label_revert_dots>
 800e26a:	e7e6      	b.n	800e23a <lv_label_set_long_mode+0x3e>
 800e26c:	0800d9d7 	.word	0x0800d9d7
 800e270:	0800d9cb 	.word	0x0800d9cb

0800e274 <lv_label_constructor>:
{
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	460c      	mov	r4, r1
    label->text       = NULL;
 800e278:	2500      	movs	r5, #0
 800e27a:	624d      	str	r5, [r1, #36]	; 0x24
    label->static_txt = 0;
 800e27c:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800e280:	f365 03c3 	bfi	r3, r5, #3, #1
 800e284:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->recolor    = 0;
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	f365 1304 	bfi	r3, r5, #4, #1
 800e28e:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 800e292:	f04f 33ff 	mov.w	r3, #4294967295
 800e296:	62cb      	str	r3, [r1, #44]	; 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 800e298:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
 800e29c:	f365 0202 	bfi	r2, r5, #0, #3
 800e2a0:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
    label->offset.x = 0;
 800e2a4:	f8a1 5044 	strh.w	r5, [r1, #68]	; 0x44
    label->offset.y = 0;
 800e2a8:	f8a1 5046 	strh.w	r5, [r1, #70]	; 0x46
    label->hint.line_start = -1;
 800e2ac:	630b      	str	r3, [r1, #48]	; 0x30
    label->hint.coord_y    = 0;
 800e2ae:	638d      	str	r5, [r1, #56]	; 0x38
    label->hint.y          = 0;
 800e2b0:	634d      	str	r5, [r1, #52]	; 0x34
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800e2b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 800e2b8:	640b      	str	r3, [r1, #64]	; 0x40
    label->dot.tmp_ptr   = NULL;
 800e2ba:	628d      	str	r5, [r1, #40]	; 0x28
    label->dot_tmp_alloc = 0;
 800e2bc:	b2d3      	uxtb	r3, r2
 800e2be:	f365 1386 	bfi	r3, r5, #6, #1
 800e2c2:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 800e2c6:	2102      	movs	r1, #2
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f7f4 fb81 	bl	80029d0 <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f7ff ff93 	bl	800e1fc <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 800e2d6:	4902      	ldr	r1, [pc, #8]	; (800e2e0 <lv_label_constructor+0x6c>)
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f7ff ff51 	bl	800e180 <lv_label_set_text>
}
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	080148bc 	.word	0x080148bc

0800e2e4 <lv_label_set_recolor>:
{
 800e2e4:	b508      	push	{r3, lr}
    if(label->recolor == en) return;
 800e2e6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e2ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e2ee:	428b      	cmp	r3, r1
 800e2f0:	d007      	beq.n	800e302 <lv_label_set_recolor+0x1e>
    label->recolor = en == false ? 0 : 1;
 800e2f2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e2f6:	f361 1304 	bfi	r3, r1, #4, #1
 800e2fa:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    lv_label_refr_text(obj);
 800e2fe:	f7ff fcc1 	bl	800dc84 <lv_label_refr_text>
}
 800e302:	bd08      	pop	{r3, pc}

0800e304 <lv_label_get_text_selection_start>:
}
 800e304:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800e306:	4770      	bx	lr

0800e308 <lv_label_get_text_selection_end>:
}
 800e308:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800e30a:	4770      	bx	lr

0800e30c <draw_main>:
{
 800e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e310:	b092      	sub	sp, #72	; 0x48
 800e312:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 800e314:	f7f3 fd24 	bl	8001d60 <lv_event_get_target>
 800e318:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800e31a:	4628      	mov	r0, r5
 800e31c:	f7f3 fd49 	bl	8001db2 <lv_event_get_draw_ctx>
 800e320:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 800e322:	a910      	add	r1, sp, #64	; 0x40
 800e324:	4620      	mov	r0, r4
 800e326:	f7f5 fb11 	bl	800394c <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 800e32a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e32e:	f013 0610 	ands.w	r6, r3, #16
 800e332:	d000      	beq.n	800e336 <draw_main+0x2a>
 800e334:	2601      	movs	r6, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 800e336:	f013 0f20 	tst.w	r3, #32
 800e33a:	d001      	beq.n	800e340 <draw_main+0x34>
 800e33c:	f046 0602 	orr.w	r6, r6, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800e340:	2201      	movs	r2, #1
 800e342:	2100      	movs	r1, #0
 800e344:	4620      	mov	r0, r4
 800e346:	f7f7 ffcf 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800e34a:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 800e34c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800e350:	4298      	cmp	r0, r3
 800e352:	d041      	beq.n	800e3d8 <draw_main+0xcc>
    lv_draw_label_dsc_init(&label_draw_dsc);
 800e354:	a808      	add	r0, sp, #32
 800e356:	f7f9 ffe5 	bl	8008324 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 800e35a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800e35e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    label_draw_dsc.ofs_y = label->offset.y;
 800e362:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 800e366:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    label_draw_dsc.flag = flag;
 800e36a:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 800e36e:	aa08      	add	r2, sp, #32
 800e370:	2100      	movs	r1, #0
 800e372:	4620      	mov	r0, r4
 800e374:	f7f5 f846 	bl	8003404 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 800e378:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e37c:	b913      	cbnz	r3, 800e384 <draw_main+0x78>
 800e37e:	2301      	movs	r3, #1
 800e380:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 800e384:	4620      	mov	r0, r4
 800e386:	f7ff ffbd 	bl	800e304 <lv_label_get_text_selection_start>
 800e38a:	4607      	mov	r7, r0
 800e38c:	9009      	str	r0, [sp, #36]	; 0x24
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 800e38e:	4620      	mov	r0, r4
 800e390:	f7ff ffba 	bl	800e308 <lv_label_get_text_selection_end>
 800e394:	900a      	str	r0, [sp, #40]	; 0x28
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 800e396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e39a:	429f      	cmp	r7, r3
 800e39c:	d001      	beq.n	800e3a2 <draw_main+0x96>
 800e39e:	4298      	cmp	r0, r3
 800e3a0:	d122      	bne.n	800e3e8 <draw_main+0xdc>
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 800e3a2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e3a6:	f003 0306 	and.w	r3, r3, #6
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d033      	beq.n	800e416 <draw_main+0x10a>
    lv_draw_label_hint_t * hint = &label->hint;
 800e3ae:	f104 0730 	add.w	r7, r4, #48	; 0x30
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 800e3b2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e3b6:	f003 0307 	and.w	r3, r3, #7
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	d04f      	beq.n	800e45e <draw_main+0x152>
 800e3be:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800e3c2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800e3c6:	1a9b      	subs	r3, r3, r2
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	b21b      	sxth	r3, r3
 800e3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3d2:	da45      	bge.n	800e460 <draw_main+0x154>
        hint = NULL;
 800e3d4:	2700      	movs	r7, #0
 800e3d6:	e043      	b.n	800e460 <draw_main+0x154>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 800e3d8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800e3dc:	f013 0f08 	tst.w	r3, #8
 800e3e0:	d1b8      	bne.n	800e354 <draw_main+0x48>
 800e3e2:	f046 0604 	orr.w	r6, r6, #4
 800e3e6:	e7b5      	b.n	800e354 <draw_main+0x48>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 800e3e8:	2255      	movs	r2, #85	; 0x55
 800e3ea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f7f7 ff7a 	bl	80062e8 <lv_obj_get_style_prop>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7f8 f88e 	bl	800651c <_lv_obj_style_apply_color_filter>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 800e400:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 800e404:	2220      	movs	r2, #32
 800e406:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800e40a:	4620      	mov	r0, r4
 800e40c:	f7f7 ff6c 	bl	80062e8 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 800e410:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800e414:	e7c5      	b.n	800e3a2 <draw_main+0x96>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 800e416:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e41a:	3b02      	subs	r3, #2
 800e41c:	b2db      	uxtb	r3, r3
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d8c5      	bhi.n	800e3ae <draw_main+0xa2>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 800e422:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e424:	9602      	str	r6, [sp, #8]
 800e426:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800e436:	9a08      	ldr	r2, [sp, #32]
 800e438:	a805      	add	r0, sp, #20
 800e43a:	f7ff f9e0 	bl	800d7fe <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 800e43e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e442:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e446:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800e44a:	1a5b      	subs	r3, r3, r1
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	3301      	adds	r3, #1
 800e450:	b21b      	sxth	r3, r3
 800e452:	429a      	cmp	r2, r3
 800e454:	ddab      	ble.n	800e3ae <draw_main+0xa2>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 800e456:	2301      	movs	r3, #1
 800e458:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800e45c:	e7a7      	b.n	800e3ae <draw_main+0xa2>
        hint = NULL;
 800e45e:	2700      	movs	r7, #0
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 800e460:	68aa      	ldr	r2, [r5, #8]
 800e462:	a910      	add	r1, sp, #64	; 0x40
 800e464:	a806      	add	r0, sp, #24
 800e466:	f7fc ff75 	bl	800b354 <_lv_area_intersect>
    if(!is_common) return;
 800e46a:	b1e8      	cbz	r0, 800e4a8 <draw_main+0x19c>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 800e46c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e470:	f013 0f07 	tst.w	r3, #7
 800e474:	d01b      	beq.n	800e4ae <draw_main+0x1a2>
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 800e476:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e47a:	f003 0306 	and.w	r3, r3, #6
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d023      	beq.n	800e4ca <draw_main+0x1be>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 800e482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e484:	9700      	str	r7, [sp, #0]
 800e486:	aa10      	add	r2, sp, #64	; 0x40
 800e488:	a908      	add	r1, sp, #32
 800e48a:	4628      	mov	r0, r5
 800e48c:	f7f9 ff6a 	bl	8008364 <lv_draw_label>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e490:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 800e494:	ab06      	add	r3, sp, #24
 800e496:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 800e498:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e49c:	f003 0307 	and.w	r3, r3, #7
 800e4a0:	2b03      	cmp	r3, #3
 800e4a2:	d020      	beq.n	800e4e6 <draw_main+0x1da>
    draw_ctx->clip_area = clip_area_ori;
 800e4a4:	f8c5 8008 	str.w	r8, [r5, #8]
}
 800e4a8:	b012      	add	sp, #72	; 0x48
 800e4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f7f6 fae2 	bl	8004a78 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 800e4b4:	4242      	negs	r2, r0
 800e4b6:	b212      	sxth	r2, r2
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	a810      	add	r0, sp, #64	; 0x40
 800e4bc:	f7fc ff3b 	bl	800b336 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 800e4c0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800e4c4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800e4c8:	e7d5      	b.n	800e476 <draw_main+0x16a>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e4ca:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &txt_clip;
 800e4ce:	ab06      	add	r3, sp, #24
 800e4d0:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 800e4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4d4:	9700      	str	r7, [sp, #0]
 800e4d6:	aa10      	add	r2, sp, #64	; 0x40
 800e4d8:	a908      	add	r1, sp, #32
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f7f9 ff42 	bl	8008364 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 800e4e0:	f8c5 8008 	str.w	r8, [r5, #8]
 800e4e4:	e7d4      	b.n	800e490 <draw_main+0x184>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 800e4e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e4e8:	9602      	str	r6, [sp, #8]
 800e4ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800e4fa:	9a08      	ldr	r2, [sp, #32]
 800e4fc:	a805      	add	r0, sp, #20
 800e4fe:	f7ff f97e 	bl	800d7fe <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 800e502:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800e506:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e50a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800e50e:	1a5b      	subs	r3, r3, r1
 800e510:	b29b      	uxth	r3, r3
 800e512:	3301      	adds	r3, #1
 800e514:	b21b      	sxth	r3, r3
 800e516:	429a      	cmp	r2, r3
 800e518:	dc23      	bgt.n	800e562 <draw_main+0x256>
        if(size.y > lv_area_get_height(&txt_coords)) {
 800e51a:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e51e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800e522:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 800e526:	1a5b      	subs	r3, r3, r1
 800e528:	b29b      	uxth	r3, r3
 800e52a:	3301      	adds	r3, #1
 800e52c:	b21b      	sxth	r3, r3
 800e52e:	429a      	cmp	r2, r3
 800e530:	ddb8      	ble.n	800e4a4 <draw_main+0x198>
            label_draw_dsc.ofs_x = label->offset.x;
 800e532:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800e536:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 800e53a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800e53e:	b292      	uxth	r2, r2
 800e540:	441a      	add	r2, r3
 800e542:	b293      	uxth	r3, r2
 800e544:	9a08      	ldr	r2, [sp, #32]
 800e546:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800e54a:	b292      	uxth	r2, r2
 800e54c:	4413      	add	r3, r2
 800e54e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 800e552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e554:	9700      	str	r7, [sp, #0]
 800e556:	aa10      	add	r2, sp, #64	; 0x40
 800e558:	a908      	add	r1, sp, #32
 800e55a:	4628      	mov	r0, r5
 800e55c:	f7f9 ff02 	bl	8008364 <lv_draw_label>
 800e560:	e7a0      	b.n	800e4a4 <draw_main+0x198>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 800e562:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
 800e566:	b292      	uxth	r2, r2
 800e568:	4432      	add	r2, r6
 800e56a:	b296      	uxth	r6, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e56c:	2220      	movs	r2, #32
 800e56e:	4611      	mov	r1, r2
 800e570:	9808      	ldr	r0, [sp, #32]
 800e572:	f7fc fa3f 	bl	800a9f4 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 800e576:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e57a:	4406      	add	r6, r0
 800e57c:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
            label_draw_dsc.ofs_y = label->offset.y;
 800e580:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 800e584:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 800e588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e58a:	9700      	str	r7, [sp, #0]
 800e58c:	aa10      	add	r2, sp, #64	; 0x40
 800e58e:	a908      	add	r1, sp, #32
 800e590:	4628      	mov	r0, r5
 800e592:	f7f9 fee7 	bl	8008364 <lv_draw_label>
 800e596:	e7c0      	b.n	800e51a <draw_main+0x20e>

0800e598 <lv_label_event>:
{
 800e598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e59c:	b087      	sub	sp, #28
 800e59e:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 800e5a0:	4847      	ldr	r0, [pc, #284]	; (800e6c0 <lv_label_event+0x128>)
 800e5a2:	f7f3 fb09 	bl	8001bb8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 800e5a6:	2801      	cmp	r0, #1
 800e5a8:	d002      	beq.n	800e5b0 <lv_label_event+0x18>
}
 800e5aa:	b007      	add	sp, #28
 800e5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5b0:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7f3 fbd8 	bl	8001d68 <lv_event_get_code>
 800e5b8:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f7f3 fbd0 	bl	8001d60 <lv_event_get_target>
 800e5c0:	4607      	mov	r7, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 800e5c2:	2d2a      	cmp	r5, #42	; 0x2a
 800e5c4:	d00b      	beq.n	800e5de <lv_label_event+0x46>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 800e5c6:	2d13      	cmp	r5, #19
 800e5c8:	d00f      	beq.n	800e5ea <lv_label_event+0x52>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 800e5ca:	2d29      	cmp	r5, #41	; 0x29
 800e5cc:	d01c      	beq.n	800e608 <lv_label_event+0x70>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 800e5ce:	2d2c      	cmp	r5, #44	; 0x2c
 800e5d0:	d020      	beq.n	800e614 <lv_label_event+0x7c>
    else if(code == LV_EVENT_DRAW_MAIN) {
 800e5d2:	2d15      	cmp	r5, #21
 800e5d4:	d1e9      	bne.n	800e5aa <lv_label_event+0x12>
        draw_main(e);
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f7ff fe98 	bl	800e30c <draw_main>
 800e5dc:	e7e5      	b.n	800e5aa <lv_label_event+0x12>
        lv_label_revert_dots(obj);
 800e5de:	f7ff f9b3 	bl	800d948 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 800e5e2:	4638      	mov	r0, r7
 800e5e4:	f7ff fb4e 	bl	800dc84 <lv_label_refr_text>
 800e5e8:	e7df      	b.n	800e5aa <lv_label_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800e5ea:	2257      	movs	r2, #87	; 0x57
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	f7f7 fe7b 	bl	80062e8 <lv_obj_get_style_prop>
 800e5f2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
        lv_event_set_ext_draw_size(e, font_h / 4);
 800e5f6:	2900      	cmp	r1, #0
 800e5f8:	db04      	blt.n	800e604 <lv_label_event+0x6c>
 800e5fa:	1089      	asrs	r1, r1, #2
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f7f3 fbea 	bl	8001dd6 <lv_event_set_ext_draw_size>
 800e602:	e7d2      	b.n	800e5aa <lv_label_event+0x12>
 800e604:	3103      	adds	r1, #3
 800e606:	e7f8      	b.n	800e5fa <lv_label_event+0x62>
        lv_label_revert_dots(obj);
 800e608:	f7ff f99e 	bl	800d948 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 800e60c:	4638      	mov	r0, r7
 800e60e:	f7ff fb39 	bl	800dc84 <lv_label_refr_text>
 800e612:	e7ca      	b.n	800e5aa <lv_label_event+0x12>
 800e614:	2257      	movs	r2, #87	; 0x57
 800e616:	2100      	movs	r1, #0
 800e618:	f7f7 fe66 	bl	80062e8 <lv_obj_get_style_prop>
 800e61c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800e61e:	2258      	movs	r2, #88	; 0x58
 800e620:	2100      	movs	r1, #0
 800e622:	4638      	mov	r0, r7
 800e624:	f7f7 fe60 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800e628:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800e62c:	2259      	movs	r2, #89	; 0x59
 800e62e:	2100      	movs	r1, #0
 800e630:	4638      	mov	r0, r7
 800e632:	f7f7 fe59 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800e636:	fa0f f980 	sxth.w	r9, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 800e63a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e63e:	f013 0210 	ands.w	r2, r3, #16
 800e642:	d100      	bne.n	800e646 <lv_label_event+0xae>
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 800e644:	4614      	mov	r4, r2
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 800e646:	f013 0f20 	tst.w	r3, #32
 800e64a:	d002      	beq.n	800e652 <lv_label_event+0xba>
 800e64c:	f044 0402 	orr.w	r4, r4, #2
 800e650:	b2e4      	uxtb	r4, r4
        lv_coord_t w = lv_obj_get_content_width(obj);
 800e652:	4638      	mov	r0, r7
 800e654:	f7f5 f93a 	bl	80038cc <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800e658:	2201      	movs	r2, #1
 800e65a:	2100      	movs	r1, #0
 800e65c:	4638      	mov	r0, r7
 800e65e:	f7f7 fe43 	bl	80062e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800e662:	b200      	sxth	r0, r0
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 800e664:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800e668:	4298      	cmp	r0, r3
 800e66a:	d104      	bne.n	800e676 <lv_label_event+0xde>
 800e66c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e670:	f013 0f08 	tst.w	r3, #8
 800e674:	d020      	beq.n	800e6b8 <lv_label_event+0x120>
        else w = lv_obj_get_content_width(obj);
 800e676:	4638      	mov	r0, r7
 800e678:	f7f5 f928 	bl	80038cc <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 800e67c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e67e:	9402      	str	r4, [sp, #8]
 800e680:	9001      	str	r0, [sp, #4]
 800e682:	f8cd 9000 	str.w	r9, [sp]
 800e686:	4643      	mov	r3, r8
 800e688:	462a      	mov	r2, r5
 800e68a:	a805      	add	r0, sp, #20
 800e68c:	f7ff f8b7 	bl	800d7fe <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 800e690:	4630      	mov	r0, r6
 800e692:	f7f3 fb6d 	bl	8001d70 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 800e696:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e69a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	bfb8      	it	lt
 800e6a2:	4613      	movlt	r3, r2
 800e6a4:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 800e6a6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e6aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	bfb8      	it	lt
 800e6b2:	4613      	movlt	r3, r2
 800e6b4:	8043      	strh	r3, [r0, #2]
 800e6b6:	e778      	b.n	800e5aa <lv_label_event+0x12>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 800e6b8:	f641 70ff 	movw	r0, #8191	; 0x1fff
 800e6bc:	e7de      	b.n	800e67c <lv_label_event+0xe4>
 800e6be:	bf00      	nop
 800e6c0:	080147b4 	.word	0x080147b4

0800e6c4 <__libc_init_array>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	2600      	movs	r6, #0
 800e6c8:	4d0c      	ldr	r5, [pc, #48]	; (800e6fc <__libc_init_array+0x38>)
 800e6ca:	4c0d      	ldr	r4, [pc, #52]	; (800e700 <__libc_init_array+0x3c>)
 800e6cc:	1b64      	subs	r4, r4, r5
 800e6ce:	10a4      	asrs	r4, r4, #2
 800e6d0:	42a6      	cmp	r6, r4
 800e6d2:	d109      	bne.n	800e6e8 <__libc_init_array+0x24>
 800e6d4:	f000 f82a 	bl	800e72c <_init>
 800e6d8:	2600      	movs	r6, #0
 800e6da:	4d0a      	ldr	r5, [pc, #40]	; (800e704 <__libc_init_array+0x40>)
 800e6dc:	4c0a      	ldr	r4, [pc, #40]	; (800e708 <__libc_init_array+0x44>)
 800e6de:	1b64      	subs	r4, r4, r5
 800e6e0:	10a4      	asrs	r4, r4, #2
 800e6e2:	42a6      	cmp	r6, r4
 800e6e4:	d105      	bne.n	800e6f2 <__libc_init_array+0x2e>
 800e6e6:	bd70      	pop	{r4, r5, r6, pc}
 800e6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6ec:	4798      	blx	r3
 800e6ee:	3601      	adds	r6, #1
 800e6f0:	e7ee      	b.n	800e6d0 <__libc_init_array+0xc>
 800e6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6f6:	4798      	blx	r3
 800e6f8:	3601      	adds	r6, #1
 800e6fa:	e7f2      	b.n	800e6e2 <__libc_init_array+0x1e>
 800e6fc:	080148c4 	.word	0x080148c4
 800e700:	080148c4 	.word	0x080148c4
 800e704:	080148c4 	.word	0x080148c4
 800e708:	080148c8 	.word	0x080148c8

0800e70c <memset>:
 800e70c:	4603      	mov	r3, r0
 800e70e:	4402      	add	r2, r0
 800e710:	4293      	cmp	r3, r2
 800e712:	d100      	bne.n	800e716 <memset+0xa>
 800e714:	4770      	bx	lr
 800e716:	f803 1b01 	strb.w	r1, [r3], #1
 800e71a:	e7f9      	b.n	800e710 <memset+0x4>

0800e71c <strcpy>:
 800e71c:	4603      	mov	r3, r0
 800e71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e722:	f803 2b01 	strb.w	r2, [r3], #1
 800e726:	2a00      	cmp	r2, #0
 800e728:	d1f9      	bne.n	800e71e <strcpy+0x2>
 800e72a:	4770      	bx	lr

0800e72c <_init>:
 800e72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72e:	bf00      	nop
 800e730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e732:	bc08      	pop	{r3}
 800e734:	469e      	mov	lr, r3
 800e736:	4770      	bx	lr

0800e738 <_fini>:
 800e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73a:	bf00      	nop
 800e73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e73e:	bc08      	pop	{r3}
 800e740:	469e      	mov	lr, r3
 800e742:	4770      	bx	lr
